{"embedding_dim": 1536, "data": [{"__id__": "chunk-a9b9f74a239f46cb684aadb28a77cb76", "__created_at__": 1744231651.420514, "content": "Introduction\n============\n\n![PydanticAI](./img/pydantic-ai-dark.svg#only-dark)\n\n![PydanticAI](./img/pydantic-ai-light.svg#only-light)\n\n*Agent Framework / shim to use Pydantic with LLMs*\n\n[![CI](https://github.com/pydantic/pydantic-ai/actions/workflows/ci.yml/badge.svg?event=push)](https://github.com/pydantic/pydantic-ai/actions/workflows/ci.yml?query=branch%3Amain)\n[![Coverage](https://coverage-badge.samuelcolvin.workers.dev/pydantic/pydantic-ai.svg)](https://coverage-badge.samuelcolvin.workers.dev/redirect/pydantic/pydantic-ai)\n[![PyPI](https://img.shields.io/pypi/v/pydantic-ai.svg)](https://pypi.python.org/pypi/pydantic-ai)\n[![versions](https://img.shields.io/pypi/pyversions/pydantic-ai.svg)](https://github.com/pydantic/pydantic-ai)\n[![license](https://img.shields.io/github/license/pydantic/pydantic-ai.svg)](https://github.com/pydantic/pydantic-ai/blob/main/LICENSE)\n\nPydanticAI is a Python agent framework designed to make it less painful to\nbuild production grade applications with Generative AI.\n\nFastAPI revolutionized web development by offering an innovative and ergonomic design, built on the foundation of [Pydantic](https://docs.pydantic.dev).\n\nSimilarly, virtually every agent framework and LLM library in Python uses Pydantic, yet when we began to use LLMs in [Pydantic Logfire](https://pydantic.dev/logfire), we couldn't find anything that gave us the same feeling.\n\nWe built PydanticAI with one simple aim: to bring that FastAPI feeling to GenAI app development.\n\nWhy use PydanticAI\n------------------\n\n* **Built by the Pydantic Team**:\n  Built by the team behind [Pydantic](https://docs.pydantic.dev/latest/) (the validation layer of the OpenAI SDK, the Anthropic SDK, LangChain, LlamaIndex, AutoGPT, Transformers, CrewAI, Instructor and many more).\n* **Model-agnostic**:\n  Supports OpenAI, Anthropic, Gemini, Deepseek, Ollama, Groq, Cohere, and Mistral, and there is a simple interface to implement support for [other models](models/).\n* **Pydantic Logfire Integration**:\n  Seamlessly [integrates](logfire/) with [Pydantic Logfire](https://pydantic.dev/logfire) for real-time debugging, performance monitoring, and behavior tracking of your LLM-powered applications.\n* **Type-safe**:\n  Designed to make [type checking](agents/#static-type-checking) as powerful and informative as possible for you.\n* **Python-centric Design**:\n  Leverages Python's familiar control flow and agent composition to build your AI-driven projects, making it easy to apply standard Python best practices you'd use in any other (non-AI) project.\n* **Structured Responses**:\n  Harnesses the power of [Pydantic](https://docs.pydantic.dev/latest/) to [validate and structure](results/#structured-result-validation) model outputs, ensuring responses are consistent across runs.\n* **Dependency Injection System**:\n  Offers an optional [dependency injection](dependencies/) system to provide data and services to your agent's [system prompts](agents/#system-prompts), [tools](tools/) and [result validators](results/#result-validators-functions).\n  This is useful for testing and eval-driven iterative development.\n* **Streamed Responses**:\n  Provides the ability to [stream](results/#streamed-results) LLM outputs continuously, with immediate validation, ensuring rapid and accurate results.\n* **Graph Support**:\n  [Pydantic Graph](graph/) provides a powerful way to define graphs using typing hints, this is useful in complex applications where standard control flow can degrade to spaghetti code.\n\nHello World Example\n-------------------\n\nHere's a minimal example of PydanticAI:\n\nhello\\_world.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent(  # (1)!\n    'google-gla:gemini-1.5-flash',\n    system_prompt='Be concise, reply with one sentence.',  # (2)!\n)\n\nresult = agent.run_sync('Where does \"hello world\" come from?')  # (3)!\nprint(result.data)\n\"\"\"\nThe first known use of \"hello, world\" was in a 1974 textbook about the C programming language.\n\"\"\"\n\n```\n\n1. We configure the agent to use [Gemini 1.5's Flash](api/models/gemini/) model, but you can also set the model when running the agent.\n2. Register a static [system prompt](agents/#system-prompts) using a keyword argument to the agent.\n3. [Run the agent](agents/#running-agents) synchronously, conducting a conversation with the LLM.\n\n*(This example is complete, it can be run \"as is\")*\n\nThe exchange should be very short: PydanticAI will send the system prompt and the user query to the LLM, the model will return a text response.\n\nNot very interesting yet, but we can easily add \"tools\", dynamic system prompts, and structured responses to build more powerful agents.\n\nTools & Dependency Injection Example\n------------------------------------\n\nHere is a concise example using PydanticAI to build a support agent for a bank:\n\nbank\\_support.py\n```\nfrom dataclasses import dataclass\n\nfrom pydantic import BaseModel, Field\nfrom pydantic_ai import Agent, RunContext", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-974886a9bf77b52661ddb26c6b6703df", "__created_at__": 1744231651.420514, "content": "the LLM, the model will return a text response.\n\nNot very interesting yet, but we can easily add \"tools\", dynamic system prompts, and structured responses to build more powerful agents.\n\nTools & Dependency Injection Example\n------------------------------------\n\nHere is a concise example using PydanticAI to build a support agent for a bank:\n\nbank\\_support.py\n```\nfrom dataclasses import dataclass\n\nfrom pydantic import BaseModel, Field\nfrom pydantic_ai import Agent, RunContext\n\nfrom bank_database import DatabaseConn\n\n\n@dataclass\nclass SupportDependencies:  # (3)!\n    customer_id: int\n    db: DatabaseConn  # (12)!\n\n\nclass SupportResult(BaseModel):  # (13)!\n    support_advice: str = Field(description='Advice returned to the customer')\n    block_card: bool = Field(description=\"Whether to block the customer's card\")\n    risk: int = Field(description='Risk level of query', ge=0, le=10)\n\n\nsupport_agent = Agent(  # (1)!\n    'openai:gpt-4o',  # (2)!\n    deps_type=SupportDependencies,\n    result_type=SupportResult,  # (9)!\n    system_prompt=(  # (4)!\n        'You are a support agent in our bank, give the '\n        'customer support and judge the risk level of their query.'\n    ),\n)\n\n\n@support_agent.system_prompt  # (5)!\nasync def add_customer_name(ctx: RunContext[SupportDependencies]) -> str:\n    customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)\n    return f\"The customer's name is {customer_name!r}\"\n\n\n@support_agent.tool  # (6)!\nasync def customer_balance(\n    ctx: RunContext[SupportDependencies], include_pending: bool\n) -> float:\n    \"\"\"Returns the customer's current account balance.\"\"\"  # (7)!\n    return await ctx.deps.db.customer_balance(\n        id=ctx.deps.customer_id,\n        include_pending=include_pending,\n    )\n\n\n...  # (11)!\n\n\nasync def main():\n    deps = SupportDependencies(customer_id=123, db=DatabaseConn())\n    result = await support_agent.run('What is my balance?', deps=deps)  # (8)!\n    print(result.data)  # (10)!\n    \"\"\"\n    support_advice='Hello John, your current account balance, including pending transactions, is $123.45.' block_card=False risk=1\n    \"\"\"\n\n    result = await support_agent.run('I just lost my card!', deps=deps)\n    print(result.data)\n    \"\"\"\n    support_advice=\"I'm sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions.\" block_card=True risk=8\n    \"\"\"\n\n```\n\n1. This [agent](agents/) will act as first-tier support in a bank. Agents are generic in the type of dependencies they accept and the type of result they return. In this case, the support agent has type `Agent[SupportDependencies, SupportResult]`.\n2. Here we configure the agent to use [OpenAI's GPT-4o model](api/models/openai/), you can also set the model when running the agent.\n3. The `SupportDependencies` dataclass is used to pass data, connections, and logic into the model that will be needed when running [system prompt](agents/#system-prompts) and [tool](tools/) functions. PydanticAI's system of dependency injection provides a [type-safe](agents/#static-type-checking) way to customise the behavior of your agents, and can be especially useful when running [unit tests](testing/) and evals.\n4. Static [system prompts](agents/#system-prompts) can be registered with the `system_prompt` keyword argument to the agent.\n5. Dynamic [system prompts](agents/#system-prompts) can be registered with the `@agent.system_prompt` decorator, and can make use of dependency injection. Dependencies are carried via the `RunContext` argument, which is parameterized with the `deps_type` from above. If the type annotation here is wrong, static type checkers will catch it.\n6. [`tool`](tools/) let you register functions which the LLM may call while responding to a user. Again, dependencies are carried via `RunContext`, any other arguments become the tool schema passed to the LLM. Pydantic is used to validate these arguments, and errors are passed back to the LLM so it can retry.\n7. The docstring of a tool is also passed to the LLM as the description of the tool. Parameter descriptions are [extracted](tools/#function-tools-and-schema) from the docstring and added to the parameter schema sent to the LLM.\n8. [Run the agent](agents/#running-agents) asynchronously, conducting a conversation with the LLM until a final response is reached. Even in this fairly simple case, the agent will exchange multiple messages with the LLM as tools are called to retrieve a result.\n9. The response from the agent will, be guaranteed to be a `SupportResult`, if validation fails [reflection](agents/#reflection-and-self-correction) will mean the agent is prompted to try again.\n10. The result will be validated with Pydantic to guarantee it is a `SupportResult`, since the agent is generic, it'll also be typed as a `SupportResult` to aid with static type checking.\n11. In a real use case, you'd add more tools and a longer system prompt to the agent to extend the context it's equipped with and support it can provide.\n12. This is a simple sketch of a database connection, used to keep the example short and readable. In reality, you'd be connecting to an external database (e.g. PostgreSQL) to get information about customers.\n13. This [P", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-16ca6f7569783f5691e1fd7ca9daf7c0", "__created_at__": 1744231651.420514, "content": ", it'll also be typed as a `SupportResult` to aid with static type checking.\n11. In a real use case, you'd add more tools and a longer system prompt to the agent to extend the context it's equipped with and support it can provide.\n12. This is a simple sketch of a database connection, used to keep the example short and readable. In reality, you'd be connecting to an external database (e.g. PostgreSQL) to get information about customers.\n13. This [Pydantic](https://docs.pydantic.dev) model is used to constrain the structured data returned by the agent. From this simple definition, Pydantic builds the JSON Schema that tells the LLM how to return the data, and performs validation to guarantee the data is correct at the end of the run.\n\nComplete `bank_support.py` example\n\nThe code included here is incomplete for the sake of brevity (the definition of `DatabaseConn` is missing); you can find the complete `bank_support.py` example [here](examples/bank-support/).\n\nInstrumentation with Pydantic Logfire\n-------------------------------------\n\nTo understand the flow of the above runs, we can watch the agent in action using Pydantic Logfire.\n\nTo do this, we need to set up logfire, and add the following to our code:\n\nbank\\_support\\_with\\_logfire.py\n```\n...\nfrom pydantic_ai import Agent, RunContext\n\nfrom bank_database import DatabaseConn\n\nimport logfire\nlogfire.configure()  # (1)!\nlogfire.instrument_asyncpg()  # (2)!\n\n...\n\nsupport_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=SupportDependencies,\n    result_type=SupportResult,\n    system_prompt=(\n        'You are a support agent in our bank, give the '\n        'customer support and judge the risk level of their query.'\n    ),\n    instrument=True,\n)\n\n```\n\n1. Configure logfire, this will fail if project is not set up.\n2. In our demo, `DatabaseConn` uses `asyncpg` to connect to a PostgreSQL database, so [`logfire.instrument_asyncpg()`](https://magicstack.github.io/asyncpg/current/) is used to log the database queries.\n\nThat's enough to get the following view of your agent in action:\n\nSee [Monitoring and Performance](logfire/) to learn more.\n\nNext Steps\n----------\n\nTo try PydanticAI yourself, follow the instructions [in the examples](examples/).\n\nRead the [docs](agents/) to learn more about building applications with PydanticAI.\n\nRead the [API Reference](api/agent/) to understand PydanticAI's interface.\n\n\n\nIntroduction\n------------\n\nAgents are PydanticAI's primary interface for interacting with LLMs.\n\nIn some use cases a single Agent will control an entire application or component,\nbut multiple agents can also interact to embody more complex workflows.\n\nThe `Agent` class has full API documentation, but conceptually you can think of an agent as a container for:\n\n| **Component** | **Description** |\n| --- | --- |\n| [System prompt(s)](#system-prompts) | A set of instructions for the LLM written by the developer. |\n| [Function tool(s)](../tools/) | Functions that the LLM may call to get information while generating a response. |\n| [Structured result type](../results/) | The structured datatype the LLM must return at the end of a run, if specified. |\n| [Dependency type constraint](../dependencies/) | System prompt functions, tools, and result validators may all use dependencies when they're run. |\n| [LLM model](../api/models/base/) | Optional default LLM model associated with the agent. Can also be specified when running the agent. |\n| [Model Settings](#additional-configuration) | Optional default model settings to help fine tune requests. Can also be specified when running the agent. |\n\nIn typing terms, agents are generic in their dependency and result types, e.g., an agent which required dependencies of type `Foobar` and returned results of type `list[str]` would have type `Agent[Foobar, list[str]]`. In practice, you shouldn't need to care about this, it should just mean your IDE can tell you when you have the right type, and if you choose to use [static type checking](#static-type-checking) it should work well with PydanticAI.\n\nHere's a toy example of an agent that simulates a roulette wheel:\n\nroulette\\_wheel.py\n```\nfrom pydantic_ai import Agent, RunContext\n\nroulette_agent = Agent(  # (1)!\n    'openai:gpt-4o',\n    deps_type=int,\n    result_type=bool,\n    system_prompt=(\n        'Use the `roulette_wheel` function to see if the '\n        'customer has won based on the number they provide.'\n    ),\n)\n\n\n@roulette_agent.tool\nasync def roulette_wheel(ctx: RunContext[int], square: int) -> str:  # (2)!\n    \"\"\"check if the square is a winner\"\"\"\n    return 'winner' if square == ctx.deps else 'loser'\n\n\n# Run the agent\nsuccess_number = 18  # (3)!\nresult = roulette_agent.run_sync('Put my money on square eighteen', deps=success_number)\nprint(result.data)  # (4)!\n#> True\n\nresult = roulette_agent.run_sync('I bet five is the winner', deps=success_number)\nprint(result.data)\n#> False\n\n```\n\n1. Create an agent, which expects an integer dependency and returns a boolean result. This agent will have type `Agent[int, bool]`.\n2. Define a tool that checks if the square is a winner. Here `RunContext` is parameterized with the dependency type `int`;", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a6135304e85ce8757eac7aa9a7eea737", "__created_at__": 1744231651.420514, "content": "print(result.data)  # (4)!\n#> True\n\nresult = roulette_agent.run_sync('I bet five is the winner', deps=success_number)\nprint(result.data)\n#> False\n\n```\n\n1. Create an agent, which expects an integer dependency and returns a boolean result. This agent will have type `Agent[int, bool]`.\n2. Define a tool that checks if the square is a winner. Here `RunContext` is parameterized with the dependency type `int`; if you got the dependency type wrong you'd get a typing error.\n3. In reality, you might want to use a random number here e.g. `random.randint(0, 36)`.\n4. `result.data` will be a boolean indicating if the square is a winner. Pydantic performs the result validation, it'll be typed as a `bool` since its type is derived from the `result_type` generic parameter of the agent.\n\nAgents are designed for reuse, like FastAPI Apps\n\nAgents are intended to be instantiated once (frequently as module globals) and reused throughout your application, similar to a small FastAPI app or an APIRouter.\n\nRunning Agents\n--------------\n\nThere are four ways to run an agent:\n\n1. `agent.run()` — a coroutine which returns a `RunResult` containing a completed response.\n2. `agent.run_sync()` — a plain, synchronous function which returns a `RunResult` containing a completed response (internally, this just calls `loop.run_until_complete(self.run())`).\n3. `agent.run_stream()` — a coroutine which returns a `StreamedRunResult`, which contains methods to stream a response as an async iterable.\n4. `agent.iter()` — a context manager which returns an `AgentRun`, an async-iterable over the nodes of the agent's underlying `Graph`.\n\nHere's a simple example demonstrating the first three:\n\nrun\\_agent.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nresult_sync = agent.run_sync('What is the capital of Italy?')\nprint(result_sync.data)\n#> Rome\n\n\nasync def main():\n    result = await agent.run('What is the capital of France?')\n    print(result.data)\n    #> Paris\n\n    async with agent.run_stream('What is the capital of the UK?') as response:\n        print(await response.get_data())\n        #> London\n\n```\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nYou can also pass messages from previous runs to continue a conversation or provide context, as described in [Messages and Chat History](../message-history/).\n\n### Iterating Over an Agent's Graph\n\nUnder the hood, each `Agent` in PydanticAI uses **pydantic-graph** to manage its execution flow. **pydantic-graph** is a generic, type-centric library for building and running finite state machines in Python. It doesn't actually depend on PydanticAI — you can use it standalone for workflows that have nothing to do with GenAI — but PydanticAI makes use of it to orchestrate the handling of model requests and model responses in an agent's run.\n\nIn many scenarios, you don't need to worry about pydantic-graph at all; calling `agent.run(...)` simply traverses the underlying graph from start to finish. However, if you need deeper insight or control — for example to capture each tool invocation, or to inject your own logic at specific stages — PydanticAI exposes the lower-level iteration process via `Agent.iter`. This method returns an `AgentRun`, which you can async-iterate over, or manually drive node-by-node via the `next` method. Once the agent's graph returns an `End`, you have the final result along with a detailed history of all steps.\n\n#### `async for` iteration\n\nHere's an example of using `async for` with `iter` to record each node the agent executes:\n\nagent\\_iter\\_async\\_for.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\n\nasync def main():\n    nodes = []\n    # Begin an AgentRun, which is an async-iterable over the nodes of the agent's graph\n    async with agent.iter('What is the capital of France?') as agent_run:\n        async for node in agent_run:\n            # Each node represents a step in the agent's execution\n            nodes.append(node)\n    print(nodes)\n    \"\"\"\n    [\n        UserPromptNode(\n            user_prompt='What is the capital of France?',\n            system_prompts=(),\n            system_prompt_functions=[],\n            system_prompt_dynamic_functions={},\n        ),\n        ModelRequestNode(\n            request=ModelRequest(\n                parts=[\n                    UserPromptPart(\n                        content='What is the capital of France?',\n                        timestamp=datetime.datetime(...),\n                        part_kind='user-prompt',\n                    )\n                ],\n                kind='request',\n            )\n        ),\n        CallToolsNode(\n            model_response=ModelResponse(\n                parts=[TextPart(content='Paris', part_kind='text')],\n                model_name='gpt-4o',\n                timestamp=datetime.datetime(...),\n                kind='response',\n            )\n        ),\n        End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n    ]\n    \"\"\"\n    print(agent_run.result.data)\n    #> Paris\n\n```\n\n* The `AgentRun` is an async iterator that yields each node (`BaseNode` or `End`) in the flow.\n* The run ends when an `End` node is returned.\n\n#### Using `.next(...)` manually\n\nYou can also drive the iteration manually by passing the node you want to run next to the `AgentRun.next(...)`", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-37ea23b80d0ce2eead046bee6649f339", "__created_at__": 1744231651.420514, "content": "Paris', tool_name=None, tool_call_id=None)),\n    ]\n    \"\"\"\n    print(agent_run.result.data)\n    #> Paris\n\n```\n\n* The `AgentRun` is an async iterator that yields each node (`BaseNode` or `End`) in the flow.\n* The run ends when an `End` node is returned.\n\n#### Using `.next(...)` manually\n\nYou can also drive the iteration manually by passing the node you want to run next to the `AgentRun.next(...)` method. This allows you to inspect or modify the node before it executes or skip nodes based on your own logic, and to catch errors in `next()` more easily:\n\nagent\\_iter\\_next.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_graph import End\n\nagent = Agent('openai:gpt-4o')\n\n\nasync def main():\n    async with agent.iter('What is the capital of France?') as agent_run:\n        node = agent_run.next_node  # (1)!\n\n        all_nodes = [node]\n\n        # Drive the iteration manually:\n        while not isinstance(node, End):  # (2)!\n            node = await agent_run.next(node)  # (3)!\n            all_nodes.append(node)  # (4)!\n\n        print(all_nodes)\n        \"\"\"\n        [\n            UserPromptNode(\n                user_prompt='What is the capital of France?',\n                system_prompts=(),\n                system_prompt_functions=[],\n                system_prompt_dynamic_functions={},\n            ),\n            ModelRequestNode(\n                request=ModelRequest(\n                    parts=[\n                        UserPromptPart(\n                            content='What is the capital of France?',\n                            timestamp=datetime.datetime(...),\n                            part_kind='user-prompt',\n                        )\n                    ],\n                    kind='request',\n                )\n            ),\n            CallToolsNode(\n                model_response=ModelResponse(\n                    parts=[TextPart(content='Paris', part_kind='text')],\n                    model_name='gpt-4o',\n                    timestamp=datetime.datetime(...),\n                    kind='response',\n                )\n            ),\n            End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n        ]\n        \"\"\"\n\n```\n\n1. We start by grabbing the first node that will be run in the agent's graph.\n2. The agent run is finished once an `End` node has been produced; instances of `End` cannot be passed to `next`.\n3. When you call `await agent_run.next(node)`, it executes that node in the agent's graph, updates the run's history, and returns the *next* node to run.\n4. You could also inspect or mutate the new `node` here as needed.\n\n#### Accessing usage and the final result\n\nYou can retrieve usage statistics (tokens, requests, etc.) at any time from the `AgentRun` object via `agent_run.usage()`. This method returns a `Usage` object containing the usage data.\n\nOnce the run finishes, `agent_run.final_result` becomes a `AgentRunResult` object containing the final output (and related metadata).\n\n---\n\n### Streaming\n\nHere is an example of streaming an agent run in combination with `async for` iteration:\n\nstreaming.py\n```\nimport asyncio\nfrom dataclasses import dataclass\nfrom datetime import date\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.messages import (\n    FinalResultEvent,\n    FunctionToolCallEvent,\n    FunctionToolResultEvent,\n    PartDeltaEvent,\n    PartStartEvent,\n    TextPartDelta,\n    ToolCallPartDelta,\n)\nfrom pydantic_ai.tools import RunContext\n\n\n@dataclass\nclass WeatherService:\n    async def get_forecast(self, location: str, forecast_date: date) -> str:\n        # In real code: call weather API, DB queries, etc.\n        return f'The forecast in {location} on {forecast_date} is 24°C and sunny.'\n\n    async def get_historic_weather(self, location: str, forecast_date: date) -> str:\n        # In real code: call a historical weather API or DB\n        return (\n            f'The weather in {location} on {forecast_date} was 18°C and partly cloudy.'\n        )\n\n\nweather_agent = Agent[WeatherService, str](\n    'openai:gpt-4o',\n    deps_type=WeatherService,\n    result_type=str,  # We'll produce a final answer as plain text\n    system_prompt='Providing a weather forecast at the locations the user provides.',\n)\n\n\n@weather_agent.tool\nasync def weather_forecast(\n    ctx: RunContext[WeatherService],\n    location: str,\n    forecast_date: date,\n) -> str:\n    if forecast_date >= date.today():\n        return await ctx.deps.get_forecast(location, forecast_date)\n    else:\n        return await ctx.deps.get_historic_weather(location, forecast_date)\n\n\noutput_messages: list[str] = []\n\n\nasync def main():\n    user_prompt = 'What will the weather be like in Paris on Tuesday?'\n\n    # Begin a node-by-node, streaming iteration\n    async with weather_agent.iter(user_prompt, deps=WeatherService()) as run:\n        async for node in run:\n            if Agent.is_user_prompt_node(node):\n                # A user prompt node => The user has provided input\n                output_messages.append(f'=== UserPromptNode: {node.user_prompt} ===')\n            elif Agent.is_model_request_node(node):\n                # A model request node => We can stream tokens from the model's request\n                output_messages.append(\n                    '=== ModelRequestNode: streaming partial request tokens ==='\n                )\n                async with node.stream(run.ctx) as request_stream:\n                    async for event in request_stream:\n                        if isinstance(event, PartStartEvent):\n                            output_messages.append(\n                                f'[Request] Starting part {event.index}: {event.part!r}'\n                            )\n                        elif isinstance(event", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-825d3e324dae2955fa006ed4f70fe55a", "__created_at__": 1744231651.420514, "content": ".is_model_request_node(node):\n                # A model request node => We can stream tokens from the model's request\n                output_messages.append(\n                    '=== ModelRequestNode: streaming partial request tokens ==='\n                )\n                async with node.stream(run.ctx) as request_stream:\n                    async for event in request_stream:\n                        if isinstance(event, PartStartEvent):\n                            output_messages.append(\n                                f'[Request] Starting part {event.index}: {event.part!r}'\n                            )\n                        elif isinstance(event, PartDeltaEvent):\n                            if isinstance(event.delta, TextPartDelta):\n                                output_messages.append(\n                                    f'[Request] Part {event.index} text delta: {event.delta.content_delta!r}'\n                                )\n                            elif isinstance(event.delta, ToolCallPartDelta):\n                                output_messages.append(\n                                    f'[Request] Part {event.index} args_delta={event.delta.args_delta}'\n                                )\n                        elif isinstance(event, FinalResultEvent):\n                            output_messages.append(\n                                f'[Result] The model produced a final result (tool_name={event.tool_name})'\n                            )\n            elif Agent.is_call_tools_node(node):\n                # A handle-response node => The model returned some data, potentially calls a tool\n                output_messages.append(\n                    '=== CallToolsNode: streaming partial response & tool usage ==='\n                )\n                async with node.stream(run.ctx) as handle_stream:\n                    async for event in handle_stream:\n                        if isinstance(event, FunctionToolCallEvent):\n                            output_messages.append(\n                                f'[Tools] The LLM calls tool={event.part.tool_name!r} with args={event.part.args} (tool_call_id={event.part.tool_call_id!r})'\n                            )\n                        elif isinstance(event, FunctionToolResultEvent):\n                            output_messages.append(\n                                f'[Tools] Tool call {event.tool_call_id!r} returned => {event.result.content}'\n                            )\n            elif Agent.is_end_node(node):\n                assert run.result.data == node.data.data\n                # Once an End node is reached, the agent run is complete\n                output_messages.append(f'=== Final Agent Output: {run.result.data} ===')\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n    print(output_messages)\n    \"\"\"\n    [\n        '=== UserPromptNode: What will the weather be like in Paris on Tuesday? ===',\n        '=== ModelRequestNode: streaming partial request tokens ===',\n        '[Request] Starting part 0: ToolCallPart(tool_name=\\'weather_forecast\\', args=\\'{\"location\":\"Pa\\', tool_call_id=\\'0001\\', part_kind=\\'tool-call\\')',\n        '[Request] Part 0 args_delta=ris\",\"forecast_',\n        '[Request] Part 0 args_delta=date\":\"2030-01-',\n        '[Request] Part 0 args_delta=01\"}',\n        '=== CallToolsNode: streaming partial response & tool usage ===',\n        '[Tools] The LLM calls tool=\\'weather_forecast\\' with args={\"location\":\"Paris\",\"forecast_date\":\"2030-01-01\"} (tool_call_id=\\'0001\\')',\n        \"[Tools] Tool call '0001' returned => The forecast in Paris on 2030-01-01 is 24°C and sunny.\",\n        '=== ModelRequestNode: streaming partial request tokens ===',\n        \"[Request] Starting part 0: TextPart(content='It will be ', part_kind='text')\",\n        '[Result] The model produced a final result (tool_name=None)',\n        \"[Request] Part 0 text delta: 'warm and sunny '\",\n        \"[Request] Part 0 text delta: 'in Paris on '\",\n        \"[Request] Part 0 text delta: 'Tuesday.'\",\n        '=== CallToolsNode: streaming partial response & tool usage ===',\n        '=== Final Agent Output: It will be warm and sunny in Paris on Tuesday. ===',\n    ]\n    \"\"\"\n\n```\n\n---\n\n### Additional Configuration\n\n#### Usage Limits\n\nPydanticAI offers a `UsageLimits` structure to help you limit your\nusage (tokens and/or requests) on model runs.\n\nYou can apply these settings by passing the `usage_limits` argument to the `run{_sync,_stream}` functions.\n\nConsider the following example, where we limit the number of response tokens:\n\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.exceptions import UsageLimitExceeded\nfrom pydantic_ai.usage import UsageLimits\n\nagent = Agent('anthropic:claude-3-5-sonnet-latest')\n\nresult_sync = agent.run_sync(\n    'What is the capital of Italy? Answer with just the city.',\n    usage_limits=UsageLimits(response_tokens_limit=10),\n)\nprint(result_sync.data)\n#> Rome\nprint(result_sync.usage())\n\"\"\"\nUsage(requests=1, request_tokens=62, response_tokens=1, total_tokens=63, details=None)\n\"\"\"\n\ntry:\n    result_sync = agent.run_sync(\n        'What is the capital of Italy? Answer with a paragraph.',\n        usage_limits=UsageLimits(response_tokens_limit=10),\n    )\nexcept UsageLimitExceeded as e:\n    print(e)\n    #> Exceeded the response_tokens_limit of 10 (response_tokens=32)\n\n```\n\nRestricting the number of requests can be useful in preventing infinite loops or excessive tool calling:\n\n```\nfrom typing_extensions import TypedDict\n\nfrom pydantic_ai import Agent, ModelRetry\nfrom pydantic_ai.exceptions import UsageLimitExceeded\nfrom pydantic_ai.usage import UsageLimits\n\n\nclass NeverResultType(TypedDict):\n    \"\"\"\n    Never ever coerce data to this type.\n    \"\"\"\n\n    never_use_this: str\n\n\nagent = Agent(\n    'anthropic:claude-3-5-sonnet-latest',\n    retries=3,\n    result_type=NeverResultType,\n    system_prompt='Any time you get a response", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-911d0904eb0a1b2ad618711cef674a60", "__created_at__": 1744231651.420514, "content": "import Agent, ModelRetry\nfrom pydantic_ai.exceptions import UsageLimitExceeded\nfrom pydantic_ai.usage import UsageLimits\n\n\nclass NeverResultType(TypedDict):\n    \"\"\"\n    Never ever coerce data to this type.\n    \"\"\"\n\n    never_use_this: str\n\n\nagent = Agent(\n    'anthropic:claude-3-5-sonnet-latest',\n    retries=3,\n    result_type=NeverResultType,\n    system_prompt='Any time you get a response, call the `infinite_retry_tool` to produce another response.',\n)\n\n\n@agent.tool_plain(retries=5)  # (1)!\ndef infinite_retry_tool() -> int:\n    raise ModelRetry('Please try again.')\n\n\ntry:\n    result_sync = agent.run_sync(\n        'Begin infinite retry loop!', usage_limits=UsageLimits(request_limit=3)  # (2)!\n    )\nexcept UsageLimitExceeded as e:\n    print(e)\n    #> The next request would exceed the request_limit of 3\n\n```\n\n1. This tool has the ability to retry 5 times before erroring, simulating a tool that might get stuck in a loop.\n2. This run will error after 3 requests, preventing the infinite tool calling.\n\nNote\n\nThis is especially relevant if you've registered many tools. The `request_limit` can be used to prevent the model from calling them in a loop too many times.\n\n#### Model (Run) Settings\n\nPydanticAI offers a `settings.ModelSettings` structure to help you fine tune your requests.\nThis structure allows you to configure common parameters that influence the model's behavior, such as `temperature`, `max_tokens`,\n`timeout`, and more.\n\nThere are two ways to apply these settings:\n1. Passing to `run{_sync,_stream}` functions via the `model_settings` argument. This allows for fine-tuning on a per-request basis.\n2. Setting during `Agent` initialization via the `model_settings` argument. These settings will be applied by default to all subsequent run calls using said agent. However, `model_settings` provided during a specific run call will override the agent's default settings.\n\nFor example, if you'd like to set the `temperature` setting to `0.0` to ensure less random behavior,\nyou can do the following:\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nresult_sync = agent.run_sync(\n    'What is the capital of Italy?', model_settings={'temperature': 0.0}\n)\nprint(result_sync.data)\n#> Rome\n\n```\n### Model specific settings\n\nIf you wish to further customize model behavior, you can use a subclass of `ModelSettings`, like `GeminiModelSettings`, associated with your model of choice.\n\nFor example:\n\n```\nfrom pydantic_ai import Agent, UnexpectedModelBehavior\nfrom pydantic_ai.models.gemini import GeminiModelSettings\n\nagent = Agent('google-gla:gemini-1.5-flash')\n\ntry:\n    result = agent.run_sync(\n        'Write a list of 5 very rude things that I might say to the universe after stubbing my toe in the dark:',\n        model_settings=GeminiModelSettings(\n            temperature=0.0,  # general model settings can also be specified\n            gemini_safety_settings=[\n                {\n                    'category': 'HARM_CATEGORY_HARASSMENT',\n                    'threshold': 'BLOCK_LOW_AND_ABOVE',\n                },\n                {\n                    'category': 'HARM_CATEGORY_HATE_SPEECH',\n                    'threshold': 'BLOCK_LOW_AND_ABOVE',\n                },\n            ],\n        ),\n    )\nexcept UnexpectedModelBehavior as e:\n    print(e)  # (1)!\n    \"\"\"\n    Safety settings triggered, body:\n    <safety settings details>\n    \"\"\"\n\n```\n\n1. This error is raised because the safety thresholds were exceeded.\n   Generally, `result` would contain a normal `ModelResponse`.\n\nRuns vs. Conversations\n----------------------\n\nAn agent **run** might represent an entire conversation — there's no limit to how many messages can be exchanged in a single run. However, a **conversation** might also be composed of multiple runs, especially if you need to maintain state between separate interactions or API calls.\n\nHere's an example of a conversation comprised of multiple runs:\n\nconversation\\_example.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\n# First run\nresult1 = agent.run_sync('Who was Albert Einstein?')\nprint(result1.data)\n#> Albert Einstein was a German-born theoretical physicist.\n\n# Second run, passing previous messages\nresult2 = agent.run_sync(\n    'What was his most famous equation?',\n    message_history=result1.new_messages(),  # (1)!\n)\nprint(result2.data)\n#> Albert Einstein's most famous equation is (E = mc^2).\n\n```\n\n1. Continue the conversation; without `message_history` the model would not know who \"his\" was referring to.\n\n*(This example is complete, it can be run \"as is\")*\n\nType safe by design\n-------------------\n\nPydanticAI is designed to work well with static type checkers, like mypy and pyright.\n\nTyping is (somewhat) optional\n\nPydanticAI is designed to make type checking as useful as possible for you if you choose to use it, but you don't have to use types everywhere all the time.\n\nThat said, because PydanticAI uses Pydantic, and Pydantic uses type hints as the definition for schema and validation, some types (specifically type hints on parameters to tools, and the `result_type` arguments to `Agent`) are used at runtime.\n\nWe (the library developers) have messed up if type hints are confusing you more than helping you, if you find this, please create", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f375a3596539c3931dca74338cc79546", "__created_at__": 1744231651.420514, "content": "choose to use it, but you don't have to use types everywhere all the time.\n\nThat said, because PydanticAI uses Pydantic, and Pydantic uses type hints as the definition for schema and validation, some types (specifically type hints on parameters to tools, and the `result_type` arguments to `Agent`) are used at runtime.\n\nWe (the library developers) have messed up if type hints are confusing you more than helping you, if you find this, please create an [issue](https://github.com/pydantic/pydantic-ai/issues) explaining what's annoying you!\n\nIn particular, agents are generic in both the type of their dependencies and the type of results they return, so you can use the type hints to ensure you're using the right types.\n\nConsider the following script with type mistakes:\n\ntype\\_mistakes.py\n```\nfrom dataclasses import dataclass\n\nfrom pydantic_ai import Agent, RunContext\n\n\n@dataclass\nclass User:\n    name: str\n\n\nagent = Agent(\n    'test',\n    deps_type=User,  # (1)!\n    result_type=bool,\n)\n\n\n@agent.system_prompt\ndef add_user_name(ctx: RunContext[str]) -> str:  # (2)!\n    return f\"The user's name is {ctx.deps}.\"\n\n\ndef foobar(x: bytes) -> None:\n    pass\n\n\nresult = agent.run_sync('Does their name start with \"A\"?', deps=User('Anne'))\nfoobar(result.data)  # (3)!\n\n```\n\n1. The agent is defined as expecting an instance of `User` as `deps`.\n2. But here `add_user_name` is defined as taking a `str` as the dependency, not a `User`.\n3. Since the agent is defined as returning a `bool`, this will raise a type error since `foobar` expects `bytes`.\n\nRunning `mypy` on this will give the following output:\n\n```\n➤ uv run mypy type_mistakes.py\ntype_mistakes.py:18: error: Argument 1 to \"system_prompt\" of \"Agent\" has incompatible type \"Callable[[RunContext[str]], str]\"; expected \"Callable[[RunContext[User]], str]\"  [arg-type]\ntype_mistakes.py:28: error: Argument 1 to \"foobar\" has incompatible type \"bool\"; expected \"bytes\"  [arg-type]\nFound 2 errors in 1 file (checked 1 source file)\n\n```\n\nRunning `pyright` would identify the same issues.\n\nSystem Prompts\n--------------\n\nSystem prompts might seem simple at first glance since they're just strings (or sequences of strings that are concatenated), but crafting the right system prompt is key to getting the model to behave as you want.\n\nGenerally, system prompts fall into two categories:\n\n1. **Static system prompts**: These are known when writing the code and can be defined via the `system_prompt` parameter of the `Agent` constructor.\n2. **Dynamic system prompts**: These depend in some way on context that isn't known until runtime, and should be defined via functions decorated with `@agent.system_prompt`.\n\nYou can add both to a single agent; they're appended in the order they're defined at runtime.\n\nHere's an example using both types of system prompts:\n\nsystem\\_prompts.py\n```\nfrom datetime import date\n\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=str,  # (1)!\n    system_prompt=\"Use the customer's name while replying to them.\",  # (2)!\n)\n\n\n@agent.system_prompt  # (3)!\ndef add_the_users_name(ctx: RunContext[str]) -> str:\n    return f\"The user's name is {ctx.deps}.\"\n\n\n@agent.system_prompt\ndef add_the_date() -> str:  # (4)!\n    return f'The date is {date.today()}.'\n\n\nresult = agent.run_sync('What is the date?', deps='Frank')\nprint(result.data)\n#> Hello Frank, the date today is 2032-01-02.\n\n```\n\n1. The agent expects a string dependency.\n2. Static system prompt defined at agent creation time.\n3. Dynamic system prompt defined via a decorator with `RunContext`, this is called just after `run_sync`, not when the agent is created, so can benefit from runtime information like the dependencies used on that run.\n4. Another dynamic system prompt, system prompts don't have to have the `RunContext` parameter.\n\n*(This example is complete, it can be run \"as is\")*\n\nReflection and self-correction\n------------------------------\n\nValidation errors from both function tool parameter validation and [structured result validation](../results/#structured-result-validation) can be passed back to the model with a request to retry.\n\nYou can also raise `ModelRetry` from within a [tool](../tools/) or [result validator function](../results/#result-validators-functions) to tell the model it should retry generating a response.\n\n* The default retry count is **1** but can be altered for the entire agent, a specific tool, or a result validator.\n* You can access the current retry count from within a tool or result validator via `ctx.retry`.\n\nHere's an example:\n\ntool\\_retry.py\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent, RunContext, ModelRetry\n\nfrom fake_database import DatabaseConn\n\n\nclass ChatResult(BaseModel):\n    user_id: int\n    message: str\n\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=DatabaseConn,\n    result_type=ChatResult,\n)\n\n\n@agent.tool(retries=2)\ndef get_user_by_name(ctx: RunContext[DatabaseConn], name: str) -> int:\n    \"\"\"Get a user's ID from their full name.\"\"\"", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-729cd2b3c578d9a846adee8336cc05fd", "__created_at__": 1744231651.420514, "content": "Agent, RunContext, ModelRetry\n\nfrom fake_database import DatabaseConn\n\n\nclass ChatResult(BaseModel):\n    user_id: int\n    message: str\n\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=DatabaseConn,\n    result_type=ChatResult,\n)\n\n\n@agent.tool(retries=2)\ndef get_user_by_name(ctx: RunContext[DatabaseConn], name: str) -> int:\n    \"\"\"Get a user's ID from their full name.\"\"\"\n    print(name)\n    #> John\n    #> John Doe\n    user_id = ctx.deps.users.get(name=name)\n    if user_id is None:\n        raise ModelRetry(\n            f'No user found with name {name!r}, remember to provide their full name'\n        )\n    return user_id\n\n\nresult = agent.run_sync(\n    'Send a message to John Doe asking for coffee next week', deps=DatabaseConn()\n)\nprint(result.data)\n\"\"\"\nuser_id=123 message='Hello John, would you be free for coffee sometime next week? Let me know what works for you!'\n\"\"\"\n\n```\n\nModel errors\n------------\n\nIf models behave unexpectedly (e.g., the retry limit is exceeded, or their API returns `503`), agent runs will raise `UnexpectedModelBehavior`.\n\nIn these cases, `capture_run_messages` can be used to access the messages exchanged during the run to help diagnose the issue.\n\nagent\\_model\\_errors.py\n```\nfrom pydantic_ai import Agent, ModelRetry, UnexpectedModelBehavior, capture_run_messages\n\nagent = Agent('openai:gpt-4o')\n\n\n@agent.tool_plain\ndef calc_volume(size: int) -> int:  # (1)!\n    if size == 42:\n        return size**3\n    else:\n        raise ModelRetry('Please try again.')\n\n\nwith capture_run_messages() as messages:  # (2)!\n    try:\n        result = agent.run_sync('Please get me the volume of a box with size 6.')\n    except UnexpectedModelBehavior as e:\n        print('An error occurred:', e)\n        #> An error occurred: Tool exceeded max retries count of 1\n        print('cause:', repr(e.__cause__))\n        #> cause: ModelRetry('Please try again.')\n        print('messages:', messages)\n        \"\"\"\n        messages:\n        [\n            ModelRequest(\n                parts=[\n                    UserPromptPart(\n                        content='Please get me the volume of a box with size 6.',\n                        timestamp=datetime.datetime(...),\n                        part_kind='user-prompt',\n                    )\n                ],\n                kind='request',\n            ),\n            ModelResponse(\n                parts=[\n                    ToolCallPart(\n                        tool_name='calc_volume',\n                        args={'size': 6},\n                        tool_call_id='pyd_ai_tool_call_id',\n                        part_kind='tool-call',\n                    )\n                ],\n                model_name='gpt-4o',\n                timestamp=datetime.datetime(...),\n                kind='response',\n            ),\n            ModelRequest(\n                parts=[\n                    RetryPromptPart(\n                        content='Please try again.',\n                        tool_name='calc_volume',\n                        tool_call_id='pyd_ai_tool_call_id',\n                        timestamp=datetime.datetime(...),\n                        part_kind='retry-prompt',\n                    )\n                ],\n                kind='request',\n            ),\n            ModelResponse(\n                parts=[\n                    ToolCallPart(\n                        tool_name='calc_volume',\n                        args={'size': 6},\n                        tool_call_id='pyd_ai_tool_call_id',\n                        part_kind='tool-call',\n                    )\n                ],\n                model_name='gpt-4o',\n                timestamp=datetime.datetime(...),\n                kind='response',\n            ),\n        ]\n        \"\"\"\n    else:\n        print(result.data)\n\n```\n\n1. Define a tool that will raise `ModelRetry` repeatedly in this case.\n2. `capture_run_messages` is used to capture the messages exchanged during the run.\n\n*(This example is complete, it can be run \"as is\")*\n\nNote\n\nIf you call `run`, `run_sync`, or `run_stream` more than once within a single `capture_run_messages` context, `messages` will represent the messages exchanged during the first call only.\n\n\n\nCommand Line Interface (CLI)\n============================\n\n**PydanticAI** comes with a simple reference CLI application which you can use to interact with various LLMs directly from the command line.\nIt provides a convenient way to chat with language models and quickly get answers right in the terminal.\n\nWe originally developed this CLI for our own use, but found ourselves using it so frequently that we decided to share it as part of the PydanticAI package.\n\nWe plan to continue adding new features, such as interaction with MCP servers, access to tools, and more.\n\nInstallation\n------------\n\nTo use the CLI, you need to either install [`pydantic-ai`](../install/), or install\n[`pydantic-ai-slim`](../install/#slim-install) with the `cli` optional group:\n\n```\npip install \"pydantic-ai[cli]\"\n\n```\n\n\n```\nuv add \"pydantic-ai[cli]\"\n\n```\n\n\n\nTo enable command-line argument autocompletion, run:\n\n```\nregister-python-argcomplete pai >> ~/.bashrc  # for bash\nregister-python-argcomplete pai >> ~/.zshrc   # for zsh\n\n```\n\nUsage\n-----\n\nYou'll need to set an environment variable depending on the provider you intend to use.\n\nIf using OpenAI, set the `OPENAI_API_KEY` environment variable:\n\n```\nexport OPENAI_API_KEY='your-api-key-here'\n\n```\n\nThen simply run:\n\n```\npai\n\n```\n\nThis will start an interactive session where you can chat with the AI model. Special commands available in interactive mode:\n\n* `/exit`: Exit the session\n* `/markdown`: Show the last response in markdown format\n* `/multiline`:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-75b2d3dceba3b2912e53dc8b82dbacd8", "__created_at__": 1744231651.420514, "content": "environment variable depending on the provider you intend to use.\n\nIf using OpenAI, set the `OPENAI_API_KEY` environment variable:\n\n```\nexport OPENAI_API_KEY='your-api-key-here'\n\n```\n\nThen simply run:\n\n```\npai\n\n```\n\nThis will start an interactive session where you can chat with the AI model. Special commands available in interactive mode:\n\n* `/exit`: Exit the session\n* `/markdown`: Show the last response in markdown format\n* `/multiline`: Toggle multiline input mode (use Ctrl+D to submit)\n\n### Choose a model\n\nYou can specify which model to use with the `--model` flag:\n\n```\n$ pai --model=openai:gpt-4 \"What's the capital of France?\"\n\n```\n### Usage with `uvx`\n\nIf you have [uv](https://docs.astral.sh/uv/) installed, the quickest way to run the CLI is with `uvx`:\n\n```\nuvx --from pydantic-ai pai\n\n```\n\n\nCommon Tools\n============\n\nPydanticAI ships with native tools that can be used to enhance your agent's capabilities.\n\nDuckDuckGo Search Tool\n----------------------\n\nThe DuckDuckGo search tool allows you to search the web for information. It is built on top of the\n[DuckDuckGo API](https://github.com/deedy5/duckduckgo_search).\n\n### Installation\n\nTo use `duckduckgo_search_tool`, you need to install\n[`pydantic-ai-slim`](../install/#slim-install) with the `duckduckgo` optional group:\n\n```\npip install \"pydantic-ai-slim[duckduckgo]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[duckduckgo]\"\n\n```\n\n\n\n### Usage\n\nHere's an example of how you can use the DuckDuckGo search tool with an agent:\n\nmain.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.common_tools.duckduckgo import duckduckgo_search_tool\n\nagent = Agent(\n    'openai:o3-mini',\n    tools=[duckduckgo_search_tool()],\n    system_prompt='Search DuckDuckGo for the given query and return the results.',\n)\n\nresult = agent.run_sync(\n    'Can you list the top five highest-grossing animated films of 2025?'\n)\nprint(result.data)\n\"\"\"\nI looked into several sources on animated box‐office performance in 2025, and while detailed\nrankings can shift as more money is tallied, multiple independent reports have already\nhighlighted a couple of record‐breaking shows. For example:\n\n• Ne Zha 2 – News outlets (Variety, Wikipedia's \"List of animated feature films of 2025\", and others)\n    have reported that this Chinese title not only became the highest‑grossing animated film of 2025\n    but also broke records as the highest‑grossing non‑English animated film ever. One article noted\n    its run exceeded US$1.7 billion.\n• Inside Out 2 – According to data shared on Statista and in industry news, this Pixar sequel has been\n    on pace to set new records (with some sources even noting it as the highest‑grossing animated film\n    ever, as of January 2025).\n\nBeyond those two, some entertainment trade sites (for example, a Just Jared article titled\n\"Top 10 Highest-Earning Animated Films at the Box Office Revealed\") have begun listing a broader\ntop‑10. Although full consolidated figures can sometimes differ by source and are updated daily during\na box‑office run, many of the industry trackers have begun to single out five films as the biggest\nearners so far in 2025.\n\nUnfortunately, although multiple articles discuss the \"top animated films\" of 2025, there isn't yet a\nsingle, universally accepted list with final numbers that names the complete top five. (Box‑office\nrankings, especially mid‑year, can be fluid as films continue to add to their totals.)\n\nBased on what several sources note so far, the two undisputed leaders are:\n1. Ne Zha 2\n2. Inside Out 2\n\nThe remaining top spots (3–5) are reported by some outlets in their \"Top‑10 Animated Films\"\nlists for 2025 but the titles and order can vary depending on the source and the exact cut‑off\ndate of the data. For the most up‑to‑date and detailed ranking (including the 3rd, 4th, and 5th\nhighest‑grossing films), I recommend checking resources like:\n• Wikipedia's \"List of animated feature films of 2025\" page\n• Box‑office tracking sites (such as Box Office Mojo or The Numbers)\n• Trade articles like the one on Just Jared\n\nTo summarize with what is clear from the current reporting:\n1. Ne Zha 2\n2. Inside Out 2\n3–5. Other animated films (yet to be definitively finalized across all reporting outlets)\n\nIf you're looking for a final, consensus list of the top five, it may be best to wait until\nthe 2025 year‑end box‑office tallies are in or to consult a regularly updated entertainment industry source.\n\nWould you like help finding a current source or additional details on where to look for the complete updated list?\n\"\"\"\n\n```\n\nTavily Search Tool\n------------------\n\nInfo\n\nTavily is a paid service, but they have free credits to explore their product.\n\nYou need to [sign up for an account](https://app.tavily.com/home) and get an API key to use the Tavily search tool.\n\nThe Tavily search tool allows you to search the web for information. It is built on top of the [Tavily API](https://tavily.com/).\n\n### Installation", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c48c3a158b02117d706e48f9993aaa8c", "__created_at__": 1744231651.420514, "content": "```\n\nTavily Search Tool\n------------------\n\nInfo\n\nTavily is a paid service, but they have free credits to explore their product.\n\nYou need to [sign up for an account](https://app.tavily.com/home) and get an API key to use the Tavily search tool.\n\nThe Tavily search tool allows you to search the web for information. It is built on top of the [Tavily API](https://tavily.com/).\n\n### Installation\n\nTo use `tavily_search_tool`, you need to install\n[`pydantic-ai-slim`](../install/#slim-install) with the `tavily` optional group:\n\n```\npip install \"pydantic-ai-slim[tavily]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[tavily]\"\n\n```\n\n\n\n### Usage\n\nHere's an example of how you can use the Tavily search tool with an agent:\n\nmain.py\n```\nimport os\n\nfrom pydantic_ai.agent import Agent\nfrom pydantic_ai.common_tools.tavily import tavily_search_tool\n\napi_key = os.getenv('TAVILY_API_KEY')\nassert api_key is not None\n\n\nagent = Agent(\n    'openai:o3-mini',\n    tools=[tavily_search_tool(api_key)],\n    system_prompt='Search Tavily for the given query and return the results.',\n)\n\nresult = agent.run_sync('Tell me the top news in the GenAI world, give me links.')\nprint(result.data)\n\"\"\"\nHere are some of the top recent news articles related to GenAI:\n\n1. How CLEAR users can improve risk analysis with GenAI – Thomson Reuters\n   Read more: https://legal.thomsonreuters.com/blog/how-clear-users-can-improve-risk-analysis-with-genai/\n   (This article discusses how CLEAR's new GenAI-powered tool streamlines risk analysis by quickly summarizing key information from various public data sources.)\n\n2. TELUS Digital Survey Reveals Enterprise Employees Are Entering Sensitive Data Into AI Assistants More Than You Think – FT.com\n   Read more: https://markets.ft.com/data/announce/detail?dockey=600-202502260645BIZWIRE_USPRX____20250226_BW490609-1\n   (This news piece highlights findings from a TELUS Digital survey showing that many enterprise employees use public GenAI tools and sometimes even enter sensitive data.)\n\n3. The Essential Guide to Generative AI – Virtualization Review\n   Read more: https://virtualizationreview.com/Whitepapers/2025/02/SNOWFLAKE-The-Essential-Guide-to-Generative-AI.aspx\n   (This guide provides insights into how GenAI is revolutionizing enterprise strategies and productivity, with input from industry leaders.)\n\nFeel free to click on the links to dive deeper into each story!\n\"\"\"\n\n```\n\n\nWe'd love you to contribute to PydanticAI!\n\nInstallation and Setup\n----------------------\n\nClone your fork and cd into the repo directory\n\n```\ngit clone git@github.com:<your username>/pydantic-ai.git\ncd pydantic-ai\n\n```\n\nInstall `uv` (version 0.4.30 or later) and `pre-commit`\n\nWe use pipx here, for other options see:\n\n* [`uv` install docs](https://docs.astral.sh/uv/getting-started/installation/)\n* [`pre-commit` install docs](https://pre-commit.com/#install)\n\nTo get `pipx` itself, see [these docs](https://pypa.github.io/pipx/)\n\n```\npipx install uv pre-commit\n\n```\n\nInstall `pydantic-ai`, all dependencies and pre-commit hooks\n\n```\nmake install\n\n```\n\nRunning Tests etc.\n------------------\n\nWe use `make` to manage most commands you'll need to run.\n\nFor details on available commands, run:\n\n```\nmake help\n\n```\n\nTo run code formatting, linting, static type checks, and tests with coverage report generation, run:\n\n```\nmake\n\n```\n\nDocumentation Changes\n---------------------\n\nTo run the documentation page locally, run:\n\n```\nuv run mkdocs serve\n\n```\n\nRules for adding new models to PydanticAI\n-----------------------------------------\n\nTo avoid an excessive workload for the maintainers of PydanticAI, we can't accept all model contributions, so we're setting the following rules for when we'll accept new models and when we won't. This should hopefully reduce the chances of disappointment and wasted work.\n\n* To add a new model with an extra dependency, that dependency needs > 500k monthly downloads from PyPI consistently over 3 months or more\n* To add a new model which uses another models logic internally and has no extra dependencies, that model's GitHub org needs > 20k stars in total\n* For any other model that's just a custom URL and API key, we're happy to add a one-paragraph description with a link and instructions on the URL to use\n* For any other model that requires more logic, we recommend you release your own Python package `pydantic-ai-xxx`, which depends on [`pydantic-ai-slim`](../install/#slim-install) and implements a model that inherits from our `Model` ABC\n\nIf you're unsure about adding a model, please [create an issue](https://github.com/pydantic/pydantic-ai/issues).\n\n\n\nDependencies\n============\n\nPydanticAI uses a dependency injection system to provide data and services to your agent's [system prompts](../agents/#system-prompts), [tools](../tools/) and [result validators](../results/#result-validators-functions).\n\nMatching PydanticAI's design philosophy, our dependency system tries to use existing best practice in Python development rather than inventing esoteric \"magic\", this should make dependencies type-safe, understandable easier to test and ultimately easier", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-09e12018443ae8bc554ab8d9d7202409", "__created_at__": 1744231651.420514, "content": "-ai/issues).\n\n\n\nDependencies\n============\n\nPydanticAI uses a dependency injection system to provide data and services to your agent's [system prompts](../agents/#system-prompts), [tools](../tools/) and [result validators](../results/#result-validators-functions).\n\nMatching PydanticAI's design philosophy, our dependency system tries to use existing best practice in Python development rather than inventing esoteric \"magic\", this should make dependencies type-safe, understandable easier to test and ultimately easier to deploy in production.\n\nDefining Dependencies\n---------------------\n\nDependencies can be any python type. While in simple cases you might be able to pass a single object as a dependency (e.g. an HTTP connection), dataclasses are generally a convenient container when your dependencies included multiple objects.\n\nHere's an example of defining an agent that requires dependencies.\n\n(**Note:** dependencies aren't actually used in this example, see [Accessing Dependencies](#accessing-dependencies) below)\n\nunused\\_dependencies.py\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent\n\n\n@dataclass\nclass MyDeps:  # (1)!\n    api_key: str\n    http_client: httpx.AsyncClient\n\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=MyDeps,  # (2)!\n)\n\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        deps = MyDeps('foobar', client)\n        result = await agent.run(\n            'Tell me a joke.',\n            deps=deps,  # (3)!\n        )\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n1. Define a dataclass to hold dependencies.\n2. Pass the dataclass type to the `deps_type` argument of the `Agent` constructor. **Note**: we're passing the type here, NOT an instance, this parameter is not actually used at runtime, it's here so we can get full type checking of the agent.\n3. When running the agent, pass an instance of the dataclass to the `deps` parameter.\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nAccessing Dependencies\n----------------------\n\nDependencies are accessed through the `RunContext` type, this should be the first parameter of system prompt functions etc.\n\nsystem\\_prompt\\_dependencies.py\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, RunContext\n\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.AsyncClient\n\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=MyDeps,\n)\n\n\n@agent.system_prompt  # (1)!\nasync def get_system_prompt(ctx: RunContext[MyDeps]) -> str:  # (2)!\n    response = await ctx.deps.http_client.get(  # (3)!\n        'https://example.com',\n        headers={'Authorization': f'Bearer {ctx.deps.api_key}'},  # (4)!\n    )\n    response.raise_for_status()\n    return f'Prompt: {response.text}'\n\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        deps = MyDeps('foobar', client)\n        result = await agent.run('Tell me a joke.', deps=deps)\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n1. `RunContext` may optionally be passed to a `system_prompt` function as the only argument.\n2. `RunContext` is parameterized with the type of the dependencies, if this type is incorrect, static type checkers will raise an error.\n3. Access dependencies through the `.deps` attribute.\n4. Access dependencies through the `.deps` attribute.\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\n### Asynchronous vs. Synchronous dependencies\n\n[System prompt functions](../agents/#system-prompts), [function tools](../tools/) and [result validators](../results/#result-validators-functions) are all run in the async context of an agent run.\n\nIf these functions are not coroutines (e.g. `async def`) they are called with\n`run_in_executor` in a thread pool, it's therefore marginally preferable\nto use `async` methods where dependencies perform IO, although synchronous dependencies should work fine too.\n\n`run` vs. `run_sync` and Asynchronous vs. Synchronous dependencies\n\nWhether you use synchronous or asynchronous dependencies, is completely independent of whether you use `run` or `run_sync` — `run_sync` is just a wrapper around `run` and agents are always run in an async context.\n\nHere's the same example as above, but with a synchronous dependency:\n\nsync\\_dependencies.py\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, RunContext\n\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.Client  # (1)!\n\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=MyDeps,\n)\n\n\n@agent.system_prompt\ndef get_system_prompt(ctx: RunContext[MyDeps]) -> str:  # (2)!\n    response = ctx.deps.http_client.get(\n        'https://example.com', headers={'Authorization': f'Bearer {ctx.deps.api_key}'}\n    )\n    response.raise_for_status()\n    return f'Prompt: {response.text}'\n\n\nasync def main():\n    deps = MyDeps('foobar', httpx.Client())\n    result = await", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-caeb7b31135f4e36ba22304bc0e7ff49", "__created_at__": 1744231651.420514, "content": "MyDeps,\n)\n\n\n@agent.system_prompt\ndef get_system_prompt(ctx: RunContext[MyDeps]) -> str:  # (2)!\n    response = ctx.deps.http_client.get(\n        'https://example.com', headers={'Authorization': f'Bearer {ctx.deps.api_key}'}\n    )\n    response.raise_for_status()\n    return f'Prompt: {response.text}'\n\n\nasync def main():\n    deps = MyDeps('foobar', httpx.Client())\n    result = await agent.run(\n        'Tell me a joke.',\n        deps=deps,\n    )\n    print(result.data)\n    #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n1. Here we use a synchronous `httpx.Client` instead of an asynchronous `httpx.AsyncClient`.\n2. To match the synchronous dependency, the system prompt function is now a plain function, not a coroutine.\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nFull Example\n------------\n\nAs well as system prompts, dependencies can be used in [tools](../tools/) and [result validators](../results/#result-validators-functions).\n\nfull\\_example.py\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, ModelRetry, RunContext\n\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.AsyncClient\n\n\nagent = Agent(\n    'openai:gpt-4o',\n    deps_type=MyDeps,\n)\n\n\n@agent.system_prompt\nasync def get_system_prompt(ctx: RunContext[MyDeps]) -> str:\n    response = await ctx.deps.http_client.get('https://example.com')\n    response.raise_for_status()\n    return f'Prompt: {response.text}'\n\n\n@agent.tool  # (1)!\nasync def get_joke_material(ctx: RunContext[MyDeps], subject: str) -> str:\n    response = await ctx.deps.http_client.get(\n        'https://example.com#jokes',\n        params={'subject': subject},\n        headers={'Authorization': f'Bearer {ctx.deps.api_key}'},\n    )\n    response.raise_for_status()\n    return response.text\n\n\n@agent.result_validator  # (2)!\nasync def validate_result(ctx: RunContext[MyDeps], final_response: str) -> str:\n    response = await ctx.deps.http_client.post(\n        'https://example.com#validate',\n        headers={'Authorization': f'Bearer {ctx.deps.api_key}'},\n        params={'query': final_response},\n    )\n    if response.status_code == 400:\n        raise ModelRetry(f'invalid response: {response.text}')\n    response.raise_for_status()\n    return final_response\n\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        deps = MyDeps('foobar', client)\n        result = await agent.run('Tell me a joke.', deps=deps)\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n```\n\n1. To pass `RunContext` to a tool, use the `tool` decorator.\n2. `RunContext` may optionally be passed to a `result_validator` function as the first argument.\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nOverriding Dependencies\n-----------------------\n\nWhen testing agents, it's useful to be able to customise dependencies.\n\nWhile this can sometimes be done by calling the agent directly within unit tests, we can also override dependencies\nwhile calling application code which in turn calls the agent.\n\nThis is done via the `override` method on the agent.\n\njoke\\_app.py\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, RunContext\n\n\n@dataclass\nclass MyDeps:\n    api_key: str\n    http_client: httpx.AsyncClient\n\n    async def system_prompt_factory(self) -> str:  # (1)!\n        response = await self.http_client.get('https://example.com')\n        response.raise_for_status()\n        return f'Prompt: {response.text}'\n\n\njoke_agent = Agent('openai:gpt-4o', deps_type=MyDeps)\n\n\n@joke_agent.system_prompt\nasync def get_system_prompt(ctx: RunContext[MyDeps]) -> str:\n    return await ctx.deps.system_prompt_factory()  # (2)!\n\n\nasync def application_code(prompt: str) -> str:  # (3)!\n    ...\n    ...\n    # now deep within application code we call our agent\n    async with httpx.AsyncClient() as client:\n        app_deps = MyDeps('foobar', client)\n        result = await joke_agent.run(prompt, deps=app_deps)  # (4)!\n    return result.data\n\n```\n\n1. Define a method on the dependency to make the system prompt easier to customise.\n2. Call the system prompt factory from within the system prompt function.\n3. Application code that calls the agent, in a real application this might be an API endpoint.\n4. Call the agent from within the application code, in a real application this call might be deep within a call stack. Note `app_deps` here will NOT be used when deps are overridden.\n\n*(This example is complete, it can be run \"as is\")*\n\ntest\\_joke\\_app.py\n```\nfrom joke_app import MyDeps, application_code, joke_agent\n\n\nclass TestMyDeps(MyDeps):  # (1)!\n    async def system_prompt_factory(self) -> str:\n        return 'test prompt'\n\n\nasync def test_application_code():\n    test_deps = TestMyDeps('test", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-931e9fa216c79b214c228f17140b2fb4", "__created_at__": 1744231651.420514, "content": "`app_deps` here will NOT be used when deps are overridden.\n\n*(This example is complete, it can be run \"as is\")*\n\ntest\\_joke\\_app.py\n```\nfrom joke_app import MyDeps, application_code, joke_agent\n\n\nclass TestMyDeps(MyDeps):  # (1)!\n    async def system_prompt_factory(self) -> str:\n        return 'test prompt'\n\n\nasync def test_application_code():\n    test_deps = TestMyDeps('test_key', None)  # (2)!\n    with joke_agent.override(deps=test_deps):  # (3)!\n        joke = await application_code('Tell me a joke.')  # (4)!\n    assert joke.startswith('Did you hear about the toothpaste scandal?')\n\n```\n\n1. Define a subclass of `MyDeps` in tests to customise the system prompt factory.\n2. Create an instance of the test dependency, we don't need to pass an `http_client` here as it's not used.\n3. Override the dependencies of the agent for the duration of the `with` block, `test_deps` will be used when the agent is run.\n4. Now we can safely call our application code, the agent will use the overridden dependencies.\n\nExamples\n--------\n\nThe following examples demonstrate how to use dependencies in PydanticAI:\n\n* [Weather Agent](../examples/weather-agent/)\n* [SQL Generation](../examples/sql-gen/)\n* [RAG](../examples/rag/)\n\n\nEvals\n=====\n\n\"Evals\" refers to evaluating a model's performance for a specific application.\n\nWarning\n\nUnlike unit tests, evals are an emerging art/science; anyone who claims to know for sure exactly how your evals should be defined can safely be ignored.\n\nPydantic Evals is a powerful evaluation framework designed to help you systematically test and evaluate the performance and accuracy of the systems you build, especially when working with LLMs.\n\nWe've designed Pydantic Evals to be useful while not being too opinionated since we (along with everyone else) are still figuring out best practices. We'd love your [feedback](../help/) on the package and how we can improve it.\n\nIn Beta\n\nPydantic Evals support was [introduced](https://github.com/pydantic/pydantic-ai/pull/935) in v0.0.47 and is currently in beta. The API is subject to change and the documentation is incomplete.\n\nInstallation\n------------\n\nTo install the Pydantic Evals package, run:\n\n```\npip install pydantic-evals\n\n```\n\n\n```\nuv add pydantic-evals\n\n```\n\n\n\n`pydantic-evals` does not depend on `pydantic-ai`, but has an optional dependency on `logfire` if you'd like to\nuse OpenTelemetry traces in your evals, or send evaluation results to [logfire](https://pydantic.dev/logfire).\n\n```\npip install 'pydantic-evals[logfire]'\n\n```\n\n\n```\nuv add 'pydantic-evals[logfire]'\n\n```\n\n\n\nDatasets and Cases\n------------------\n\nIn Pydantic Evals, everything begins with `Dataset`s and `Case`s:\n\n* `Case`: A single test scenario corresponding to \"task\" inputs. Can also optionally have a name, expected outputs, metadata, and evaluators.\n* `Dataset`: A collection of test cases designed for the evaluation of a specific task or function.\n\nsimple\\_eval\\_dataset.py\n```\nfrom pydantic_evals import Case, Dataset\n\ncase1 = Case(\n    name='simple_case',\n    inputs='What is the capital of France?',\n    expected_output='Paris',\n    metadata={'difficulty': 'easy'},\n)\n\ndataset = Dataset(cases=[case1])\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nEvaluators\n----------\n\nEvaluators are the components that analyze and score the results of your task when tested against a case.\n\nPydantic Evals includes several built-in evaluators and allows you to create custom evaluators:\n\nsimple\\_eval\\_evaluator.py\n```\nfrom dataclasses import dataclass\n\nfrom simple_eval_dataset import dataset\n\nfrom pydantic_evals.evaluators import Evaluator, EvaluatorContext\nfrom pydantic_evals.evaluators.common import IsInstance\n\ndataset.add_evaluator(IsInstance(type_name='str'))  # (1)!\n\n\n@dataclass\nclass MyEvaluator(Evaluator):\n    async def evaluate(self, ctx: EvaluatorContext[str, str]) -> float:  # (2)!\n        if ctx.output == ctx.expected_output:\n            return 1.0\n        elif (\n            isinstance(ctx.output, str)\n            and ctx.expected_output.lower() in ctx.output.lower()\n        ):\n            return 0.8\n        else:\n            return 0.0\n\n\ndataset.add_evaluator(MyEvaluator())\n\n```\n\n1. You can add built-in evaluators to a dataset using the `add_evaluator` method.\n2. This custom evaluator returns a simple score based on whether the output matches the expected output.\n\n*(This example is complete, it can be run \"as is\")*\n\nEvaluation Process\n------------------\n\nThe evaluation process involves running a task against all cases in a dataset:\n\nPutting the above two examples together and using the more declarative `evaluators` kwarg to `Dataset`:\n\nsimple\\_eval\\_complete.py\n```\nfrom pydantic_evals import Case, Dataset\nfrom pydantic_evals.evaluators import Evaluator, EvaluatorContext, IsInstance\n\ncase1 = Case(  # (1)!\n    name='simple_case',\n    inputs='What is the capital of France?',\n    expected_output='Paris',\n    metadata={'difficulty': 'easy'},\n)\n\n\nclass MyEvaluator(Evaluator[str, str]):\n    def evaluate(self,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-fbd48d906573dc919932c60117d15be5", "__created_at__": 1744231651.420514, "content": "Dataset`:\n\nsimple\\_eval\\_complete.py\n```\nfrom pydantic_evals import Case, Dataset\nfrom pydantic_evals.evaluators import Evaluator, EvaluatorContext, IsInstance\n\ncase1 = Case(  # (1)!\n    name='simple_case',\n    inputs='What is the capital of France?',\n    expected_output='Paris',\n    metadata={'difficulty': 'easy'},\n)\n\n\nclass MyEvaluator(Evaluator[str, str]):\n    def evaluate(self, ctx: EvaluatorContext[str, str]) -> float:\n        if ctx.output == ctx.expected_output:\n            return 1.0\n        elif (\n            isinstance(ctx.output, str)\n            and ctx.expected_output.lower() in ctx.output.lower()\n        ):\n            return 0.8\n        else:\n            return 0.0\n\n\ndataset = Dataset(\n    cases=[case1],\n    evaluators=[IsInstance(type_name='str'), MyEvaluator()],  # (3)!\n)\n\n\nasync def guess_city(question: str) -> str:  # (4)!\n    return 'Paris'\n\n\nreport = dataset.evaluate_sync(guess_city)  # (5)!\nreport.print(include_input=True, include_output=True, include_durations=False)  # (6)!\n\"\"\"\n                              Evaluation Summary: guess_city\n┏━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┓\n┃ Case ID     ┃ Inputs                         ┃ Outputs ┃ Scores            ┃ Assertions ┃\n┡━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━┩\n│ simple_case │ What is the capital of France? │ Paris   │ MyEvaluator: 1.00 │ ✔          │\n├─────────────┼────────────────────────────────┼─────────┼───────────────────┼────────────┤\n│ Averages    │                                │         │ MyEvaluator: 1.00 │ 100.0% ✔   │\n└─────────────┴────────────────────────────────┴─────────┴───────────────────┴────────────┘\n\"\"\"\n\n```\n\n1. Create a test case as above\n2. Also create a custom evaluator function as above\n3. Create a `Dataset` with test cases, also set the `evaluators` when creating the dataset\n4. Our function to evaluate.\n5. Run the evaluation with `evaluate_sync`, which runs the function against all test cases in the dataset, and returns an `EvaluationReport` object.\n6. Print the report with `print`, which shows the results of the evaluation, including input and output. We have omitted duration here just to keep the printed output from changing from run to run.\n\n*(This example is complete, it can be run \"as is\")*\n\nEvaluation with `LLMJudge`\n--------------------------\n\nIn this example we evaluate a method for generating recipes based on customer orders.\n\njudge\\_recipes.py\n```\nfrom __future__ import annotations\n\nfrom typing import Any\n\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_evals import Case, Dataset\nfrom pydantic_evals.evaluators import IsInstance, LLMJudge\n\n\nclass CustomerOrder(BaseModel):  # (1)!\n    dish_name: str\n    dietary_restriction: str | None = None\n\n\nclass Recipe(BaseModel):\n    ingredients: list[str]\n    steps: list[str]\n\n\nrecipe_agent = Agent(\n    'groq:llama-3.3-70b-versatile',\n    result_type=Recipe,\n    system_prompt=(\n        'Generate a recipe to cook the dish that meets the dietary restrictions.'\n    ),\n)\n\n\nasync def transform_recipe(customer_order: CustomerOrder) -> Recipe:  # (2)!\n    r = await recipe_agent.run(format_as_xml(customer_order))\n    return r.data\n\n\nrecipe_dataset = Dataset[CustomerOrder, Recipe, Any](  # (3)!\n    cases=[\n        Case(\n            name='vegetarian_recipe',\n            inputs=CustomerOrder(\n                dish_name='Spaghetti Bolognese', dietary_restriction='vegetarian'\n            ),\n            expected_output=None,  # (4)\n            metadata={'focus': 'vegetarian'},\n            evaluators=(\n                LLMJudge(  # (5)!\n                    rubric='Recipe should not contain meat or animal products',\n                ),\n            ),\n        ),\n        Case(\n            name='gluten_free_recipe',\n            inputs=CustomerOrder(\n                dish_name='Chocolate Cake', dietary_restriction='gluten-free'\n            ),\n            expected_output=None,\n            metadata={'focus': 'gluten-free'},\n            # Case-specific evaluator with a focused rubric\n            evaluators=(\n                LLMJudge(\n                    rubric='Recipe should not contain gluten or wheat products',\n                ),\n            ),\n        ),\n    ],\n    evaluators=[  # (6)!\n        IsInstance(type_name='Recipe'),\n        LLMJudge(\n            rubric='Recipe should have clear steps and relevant ingredients',\n            include_input=True,\n            model='anthropic:claude-3-7-sonnet-latest',  # (7)!\n        ),\n    ],\n)\n\n\nreport = recipe_dataset.evaluate_sync(transform_recipe)\nprint(report)\n\"\"\"\n     Evaluation Summary: transform_recipe\n┏━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━┓\n┃ Case ID            ┃ Assertions ┃ Duration ┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━┩\n│ vegetarian_recipe  │ ✔✔✔        │     10ms │\n├────────────────────┼────────────┼──────────┤\n│ gluten_free_recipe │ ✔✔✔        │     10ms │\n├────────────────────┼────────────┼────────", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-96401031d88e7ec557013dad6c33f986", "__created_at__": 1744231651.420514, "content": "�━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━┓\n┃ Case ID            ┃ Assertions ┃ Duration ┃\n┡━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━┩\n│ vegetarian_recipe  │ ✔✔✔        │     10ms │\n├────────────────────┼────────────┼──────────┤\n│ gluten_free_recipe │ ✔✔✔        │     10ms │\n├────────────────────┼────────────┼──────────┤\n│ Averages           │ 100.0% ✔   │     10ms │\n└────────────────────┴────────────┴──────────┘\n\"\"\"\n\n```\n\n1. Define models for our task — Input for recipe generation task and output of the task.\n2. Define our recipe generation function - this is the task we want to evaluate.\n3. Create a dataset with different test cases and different rubrics.\n4. No expected output, we'll let the LLM judge the quality.\n5. Case-specific evaluator with a focused rubric using `LLMJudge`.\n6. Dataset-level evaluators that apply to all cases, including a general quality rubric for all recipes\n7. By default `LLMJudge` uses `openai:gpt-4o`, here we use a specific Anthropic model.\n\n*(This example is complete, it can be run \"as is\")*\n\nSaving and Loading Datasets\n---------------------------\n\nDatasets can be saved to and loaded from YAML or JSON files.\n\nsave\\_load\\_dataset\\_example.py\n```\nfrom pathlib import Path\n\nfrom judge_recipes import CustomerOrder, Recipe, recipe_dataset\n\nfrom pydantic_evals import Dataset\n\nrecipe_transforms_file = Path('recipe_transform_tests.yaml')\nrecipe_dataset.to_file(recipe_transforms_file)  # (1)!\nprint(recipe_transforms_file.read_text())\n\"\"\"\n# yaml-language-server: $schema=recipe_transform_tests_schema.json\ncases:\n- name: vegetarian_recipe\n  inputs:\n    dish_name: Spaghetti Bolognese\n    dietary_restriction: vegetarian\n  metadata:\n    focus: vegetarian\n  evaluators:\n  - LLMJudge: Recipe should not contain meat or animal products\n- name: gluten_free_recipe\n  inputs:\n    dish_name: Chocolate Cake\n    dietary_restriction: gluten-free\n  metadata:\n    focus: gluten-free\n  evaluators:\n  - LLMJudge: Recipe should not contain gluten or wheat products\nevaluators:\n- IsInstance: Recipe\n- LLMJudge:\n    rubric: Recipe should have clear steps and relevant ingredients\n    model: anthropic:claude-3-7-sonnet-latest\n    include_input: true\n\"\"\"\n\n# Load dataset from file\nloaded_dataset = Dataset[CustomerOrder, Recipe, dict].from_file(recipe_transforms_file)\n\nprint(f'Loaded dataset with {len(loaded_dataset.cases)} cases')\n#> Loaded dataset with 2 cases\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nParallel Evaluation\n-------------------\n\nYou can control concurrency during evaluation (this might be useful to prevent exceeding a rate limit):\n\nparallel\\_evaluation\\_example.py\n```\nimport asyncio\nimport time\n\nfrom pydantic_evals import Case, Dataset\n\n# Create a dataset with multiple test cases\ndataset = Dataset(\n    cases=[\n        Case(\n            name=f'case_{i}',\n            inputs=i,\n            expected_output=i * 2,\n        )\n        for i in range(5)\n    ]\n)\n\n\nasync def double_number(input_value: int) -> int:\n    \"\"\"Function that simulates work by sleeping for a second before returning double the input.\"\"\"\n    await asyncio.sleep(0.1)  # Simulate work\n    return input_value * 2\n\n\n# Run evaluation with unlimited concurrency\nt0 = time.time()\nreport_default = dataset.evaluate_sync(double_number)\nprint(f'Evaluation took less than 0.3s: {time.time() - t0 < 0.3}')\n#> Evaluation took less than 0.3s: True\n\nreport_default.print(include_input=True, include_output=True, include_durations=False)  # (1)!\n\"\"\"\n      Evaluation Summary:\n         double_number\n┏━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┓\n┃ Case ID  ┃ Inputs ┃ Outputs ┃\n┡━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━┩\n│ case_0   │ 0      │ 0       │\n├──────────┼────────┼─────────┤\n│ case_1   │ 1      │ 2       │\n├──────────┼────────┼─────────┤\n│ case_2   │ 2      │ 4       │\n├──────────┼────────┼─────────┤\n│ case_3   │ 3      │ 6       │\n├──────────┼────────┼─────────┤\n│ case_4   │ 4      │ 8       │\n├──────────┼────────┼─────────┤\n│ Averages │        │         │\n└──────────┴────────┴─────────┘\n\"\"\"\n\n# Run evaluation with limited concurrency\nt0 = time.time()\nreport_limited = dataset.evaluate_sync(double_number, max_concurrency=1)\nprint(f'Evaluation took more than 0.5s: {time.time() - t0 > 0.5}')\n#> Evaluation took more than 0.5s: True\n\nreport_limited.print(include_input=True, include_output=True, include_durations=False)  # (2)!\n\"\"\"\n      Evaluation Summary:\n         double_number\n┏━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┓\n┃ Case ID  ┃ Inputs", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ce17e90ff0740177482bed707ce81ba5", "__created_at__": 1744231651.420514, "content": "_number, max_concurrency=1)\nprint(f'Evaluation took more than 0.5s: {time.time() - t0 > 0.5}')\n#> Evaluation took more than 0.5s: True\n\nreport_limited.print(include_input=True, include_output=True, include_durations=False)  # (2)!\n\"\"\"\n      Evaluation Summary:\n         double_number\n┏━━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━┓\n┃ Case ID  ┃ Inputs ┃ Outputs ┃\n┡━━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━┩\n│ case_0   │ 0      │ 0       │\n├──────────┼────────┼─────────┤\n│ case_1   │ 1      │ 2       │\n├──────────┼────────┼─────────┤\n│ case_2   │ 2      │ 4       │\n├──────────┼────────┼─────────┤\n│ case_3   │ 3      │ 6       │\n├──────────┼────────┼─────────┤\n│ case_4   │ 4      │ 8       │\n├──────────┼────────┼─────────┤\n│ Averages │        │         │\n└──────────┴────────┴─────────┘\n\"\"\"\n\n```\n\n1. We have omitted duration here just to keep the printed output from changing from run to run.\n2. We have omitted duration here just to keep the printed output from changing from run to run.\n\n*(This example is complete, it can be run \"as is\")*\n\nOpenTelemetry Integration\n-------------------------\n\nPydantic Evals integrates with OpenTelemetry for tracing.\n\nThe `EvaluatorContext` includes a property called `span_tree`\nwhich returns a `SpanTree`. The `SpanTree` provides a way to query and analyze\nthe spans generated during function execution. This provides a way to access the results of instrumentation during\nevaluation.\n\nNote\n\nIf you just want to write unit tests that ensure that specific spans are produced during calls to your evaluation\ntask, it's usually better to just use the `logfire.testing.capfire` fixture directly.\n\nThere are two main ways this is useful.\n\n\nopentelemetry\\_example.py\n```\nimport asyncio\nfrom typing import Any\n\nimport logfire\n\nfrom pydantic_evals import Case, Dataset\nfrom pydantic_evals.evaluators import Evaluator\nfrom pydantic_evals.evaluators.context import EvaluatorContext\nfrom pydantic_evals.otel.span_tree import SpanQuery\n\nlogfire.configure(  # ensure that an OpenTelemetry tracer is configured\n    send_to_logfire='if-token-present'\n)\n\n\nclass SpanTracingEvaluator(Evaluator[str, str]):\n    \"\"\"Evaluator that analyzes the span tree generated during function execution.\"\"\"\n\n    def evaluate(self, ctx: EvaluatorContext[str, str]) -> dict[str, Any]:\n        # Get the span tree from the context\n        span_tree = ctx.span_tree\n        if span_tree is None:\n            return {'has_spans': False, 'performance_score': 0.0}\n\n        # Find all spans with \"processing\" in the name\n        processing_spans = span_tree.find(lambda node: 'processing' in node.name)\n\n        # Calculate total processing time\n        total_processing_time = sum(\n            (span.duration.total_seconds() for span in processing_spans), 0.0\n        )\n\n        # Check for error spans\n        error_query: SpanQuery = {'name_contains': 'error'}\n        has_errors = span_tree.any(error_query)\n\n        # Calculate a performance score (lower is better)\n        performance_score = 1.0 if total_processing_time < 0.5 else 0.5\n\n        return {\n            'has_spans': True,\n            'has_errors': has_errors,\n            'performance_score': 0 if has_errors else performance_score,\n        }\n\n\nasync def process_text(text: str) -> str:\n    \"\"\"Function that processes text with OpenTelemetry instrumentation.\"\"\"\n    with logfire.span('process_text'):\n        # Simulate initial processing\n        with logfire.span('text_processing'):\n            await asyncio.sleep(0.1)\n            processed = text.strip().lower()\n\n        # Simulate additional processing\n        with logfire.span('additional_processing'):\n            if 'error' in processed:\n                with logfire.span('error_handling'):\n                    logfire.error(f'Error detected in text: {text}')\n                    return f'Error processing: {text}'\n            await asyncio.sleep(0.2)\n            processed = processed.replace(' ', '_')\n\n        return f'Processed: {processed}'\n\n\n# Create test cases\ndataset = Dataset(\n    cases=[\n        Case(\n            name='normal_text',\n            inputs='Hello World',\n            expected_output='Processed: hello_world',\n        ),\n        Case(\n            name='text_with_error',\n            inputs='Contains error marker',\n            expected_output='Error processing: Contains error marker',\n        ),\n    ],\n    evaluators=[SpanTracingEvaluator()],\n)\n\n# Run evaluation - spans are automatically captured since logfire is configured\nreport = dataset.evaluate_sync(process_text)\n\n# Print the report\nreport.print(include_input=True, include_output=True, include_durations=False)  # (1)!\n\"\"\"\n                                              Evaluation Summary: process_text\n┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┓\n┃ Case ID         ┃ Inputs                ┃ Outputs                                 ┃ Scores                   ┃ Assertions ┃\n┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━┩\n│ normal_text     │ Hello World           │ Process", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-d5dc19bc0d47e207160ce81e71cc4814", "__created_at__": 1744231651.420514, "content": "_text\n┏━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━┓\n┃ Case ID         ┃ Inputs                ┃ Outputs                                 ┃ Scores                   ┃ Assertions ┃\n┡━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━┩\n│ normal_text     │ Hello World           │ Processed: hello_world                  │ performance_score: 1.00  │ ✔✗         │\n├─────────────────┼───────────────────────┼─────────────────────────────────────────┼──────────────────────────┼────────────┤\n│ text_with_error │ Contains error marker │ Error processing: Contains error marker │ performance_score: 0     │ ✔✔         │\n├─────────────────┼───────────────────────┼─────────────────────────────────────────┼──────────────────────────┼────────────┤\n│ Averages        │                       │                                         │ performance_score: 0.500 │ 75.0% ✔    │\n└─────────────────┴───────────────────────┴─────────────────────────────────────────┴──────────────────────────┴────────────┘\n\"\"\"\n\n```\n\n1. We have omitted duration here just to keep the printed output from changing from run to run.\n\n*(This example is complete, it can be run \"as is\")*\n\nGenerating Test Datasets\n------------------------\n\nPydantic Evals allows you to generate test datasets using LLMs with `generate_dataset`.\n\nDatasets can be generated in either JSON or YAML format, in both cases a JSON schema file is generated alongside the dataset and referenced in the dataset, so you should get type checking and auto-completion in your editor.\n\ngenerate\\_dataset\\_example.py\n```\nfrom __future__ import annotations\n\nfrom pathlib import Path\n\nfrom pydantic import BaseModel, Field\n\nfrom pydantic_evals import Dataset\nfrom pydantic_evals.generation import generate_dataset\n\n\nclass QuestionInputs(BaseModel, use_attribute_docstrings=True):  # (1)!\n    \"\"\"Model for question inputs.\"\"\"\n\n    question: str\n    \"\"\"A question to answer\"\"\"\n    context: str | None = None\n    \"\"\"Optional context for the question\"\"\"\n\n\nclass AnswerOutput(BaseModel, use_attribute_docstrings=True):  # (2)!\n    \"\"\"Model for expected answer outputs.\"\"\"\n\n    answer: str\n    \"\"\"The answer to the question\"\"\"\n    confidence: float = Field(ge=0, le=1)\n    \"\"\"Confidence level (0-1)\"\"\"\n\n\nclass MetadataType(BaseModel, use_attribute_docstrings=True):  # (3)!\n    \"\"\"Metadata model for test cases.\"\"\"\n\n    difficulty: str\n    \"\"\"Difficulty level (easy, medium, hard)\"\"\"\n    category: str\n    \"\"\"Question category\"\"\"\n\n\nasync def main():\n    dataset = await generate_dataset(  # (4)!\n        dataset_type=Dataset[QuestionInputs, AnswerOutput, MetadataType],\n        n_examples=2,\n        extra_instructions=\"\"\"\n        Generate question-answer pairs about world capitals and landmarks.\n        Make sure to include both easy and challenging questions.\n        \"\"\",\n    )\n    output_file = Path('questions_cases.yaml')\n    dataset.to_file(output_file)  # (5)!\n    print(output_file.read_text())\n    \"\"\"\n    # yaml-language-server: $schema=questions_cases_schema.json\n    cases:\n    - name: Easy Capital Question\n      inputs:\n        question: What is the capital of France?\n      metadata:\n        difficulty: easy\n        category: Geography\n      expected_output:\n        answer: Paris\n        confidence: 0.95\n      evaluators:\n      - EqualsExpected\n    - name: Challenging Landmark Question\n      inputs:\n        question: Which world-famous landmark is located on the banks of the Seine River?\n      metadata:\n        difficulty: hard\n        category: Landmarks\n      expected_output:\n        answer: Eiffel Tower\n        confidence: 0.9\n      evaluators:\n      - EqualsExpected\n    \"\"\"\n\n```\n\n1. Define the schema for the inputs to the task.\n2. Define the schema for the expected outputs of the task.\n3. Define the schema for the metadata of the test cases.\n4. Call `generate_dataset` to create a `Dataset` with 2 cases confirming to the schema.\n5. Save the dataset to a YAML file, this will also write `questions_cases_schema.json` with the schema JSON schema for `questions_cases.yaml` to make editing easier. The magic `yaml-language-server` comment is supported by at least vscode, jetbrains/pycharm (more details [here](https://github.com/redhat-developer/yaml-language-server#using-inlined-schema)).\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main(answer))` to run `main`)*\n\nYou can also write datasets as JSON files:\n\ngenerate\\_dataset\\_example\\_json.py\n```\nfrom pathlib import Path\n\nfrom generate_dataset_example import AnswerOutput, MetadataType, QuestionInputs\n\nfrom pydantic_evals import Dataset\nfrom pydantic_evals.generation import generate_dataset\n\n\nasync def main():\n    dataset = await generate_dataset(  # (1)!\n        dataset_type=Dataset[QuestionInputs, AnswerOutput, MetadataType],\n        n_examples=2,\n        extra_instructions=\"\"\"\n        Generate question-answer pairs about world capitals and landmarks.\n        Make sure to include both easy and challenging questions.\n        \"\"\",\n    )\n    output_file = Path('questions_cases.json')\n    dataset.to_file(output_file)  # (2)!\n    print(output_file.read_text())\n    \"\"\"\n    {\n      \"$schema\": \"questions_cases_schema.json\",\n      \"cases\": [\n        {", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-1c41f161d83220b7f7f671322fe4ee7a", "__created_at__": 1744231651.420514, "content": "[QuestionInputs, AnswerOutput, MetadataType],\n        n_examples=2,\n        extra_instructions=\"\"\"\n        Generate question-answer pairs about world capitals and landmarks.\n        Make sure to include both easy and challenging questions.\n        \"\"\",\n    )\n    output_file = Path('questions_cases.json')\n    dataset.to_file(output_file)  # (2)!\n    print(output_file.read_text())\n    \"\"\"\n    {\n      \"$schema\": \"questions_cases_schema.json\",\n      \"cases\": [\n        {\n          \"name\": \"Easy Capital Question\",\n          \"inputs\": {\n            \"question\": \"What is the capital of France?\"\n          },\n          \"metadata\": {\n            \"difficulty\": \"easy\",\n            \"category\": \"Geography\"\n          },\n          \"expected_output\": {\n            \"answer\": \"Paris\",\n            \"confidence\": 0.95\n          },\n          \"evaluators\": [\n            \"EqualsExpected\"\n          ]\n        },\n        {\n          \"name\": \"Challenging Landmark Question\",\n          \"inputs\": {\n            \"question\": \"Which world-famous landmark is located on the banks of the Seine River?\"\n          },\n          \"metadata\": {\n            \"difficulty\": \"hard\",\n            \"category\": \"Landmarks\"\n          },\n          \"expected_output\": {\n            \"answer\": \"Eiffel Tower\",\n            \"confidence\": 0.9\n          },\n          \"evaluators\": [\n            \"EqualsExpected\"\n          ]\n        }\n      ]\n    }\n    \"\"\"\n\n```\n\n1. Generate the `Dataset` exactly as above.\n2. Save the dataset to a JSON file, this will also write `questions_cases_schema.json` with th JSON schema for `questions_cases.json`. This time the `$schema` key is included in the JSON file to define the schema for IDEs to use while you edit the file, there's no formal spec for this, but it works in vscode and pycharm and is discussed at length in [json-schema-org/json-schema-spec#828](https://github.com/json-schema-org/json-schema-spec/issues/828).\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main(answer))` to run `main`)*\n\nIntegration with Logfire\n------------------------\n\nPydantic Evals is implemented using OpenTelemetry to record traces of the evaluation process. These traces contain all\nthe information included in the terminal output as attributes, but also include full tracing from the executions of the\nevaluation task function.\n\nYou can send these traces to any OpenTelemetry-compatible backend, including [Pydantic Logfire](https://logfire.pydantic.dev/docs).\n\nAll you need to do is configure Logfire via `logfire.configure`:\n\nlogfire\\_integration.py\n```\nimport logfire\nfrom judge_recipes import recipe_dataset, transform_recipe\n\nlogfire.configure(\n    send_to_logfire='if-token-present',  # (1)!\n    environment='development',  # (2)!\n    service_name='evals',  # (3)!\n)\n\nrecipe_dataset.evaluate_sync(transform_recipe)\n\n```\n\n1. The `send_to_logfire` argument controls when traces are sent to Logfire. You can set it to `'if-token-present'` to send data to Logfire only if the `LOGFIRE_TOKEN` environment variable is set. See the [Logfire configuration docs](https://logfire.pydantic.dev/docs/reference/configuration/) for more details.\n2. The `environment` argument sets the environment for the traces. It's a good idea to set this to `'development'` when running tests or evaluations and sending data to a project with production data, to make it easier to filter these traces out while reviewing data from your production environment(s).\n3. The `service_name` argument sets the service name for the traces. This is displayed in the Logfire UI to help you identify the source of the associated spans.\n\nLogfire has some special integration with Pydantic Evals traces, including a table view of the evaluation results\non the evaluation root span (which is generated in each call to `Dataset.evaluate`):\n\n[![Logfire Evals Overview](../img/logfire-evals-overview.png)](../img/logfire-evals-overview.png)\n\nand a detailed view of the inputs and outputs for the execution of each case:\n\n[![Logfire Evals Case](../img/logfire-evals-case.png)](../img/logfire-evals-case.png)\n\nIn addition, any OpenTelemetry spans generated during the evaluation process will be sent to Logfire, allowing you to\nvisualize the full execution of the code called during the evaluation process:\n\n[![Logfire Evals Case Trace](../img/logfire-evals-case-trace.png)](../img/logfire-evals-case-trace.png)\n\nThis can be especially helpful when attempting to write evaluators that make use of the `span_tree` property of the\n`EvaluatorContext`, as described in the\n[OpenTelemetry Integration](#opentelemetry-integration) section above.\n\nThis allows you to write evaluations that depend on information about which code paths were executed during the call to\nthe task function without needing to manually instrument the code being evaluated, as long as the code being evaluated\nis already adequately instrumented with OpenTelemetry. In the case of PydanticAI agents, for example, this can be used\nto ensure specific tools are (or are not) called during the execution of specific cases.\n\nUsing OpenTelemetry in this way also means that all data used to evaluate the task executions will be accessible in\nthe traces produced by production runs of the code, making it straightforward to perform the same evaluations on\nproduction data.\n\n\n\nGraphs\n======\n\nDon't use a nail gun unless you need a nail gun\n\nIf PydanticAI [agents](../agents/) are a hammer, and [multi-agent workflows](../multi-agent-applications/) are a", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-871f0637563e9955b756f367ef81e17e", "__created_at__": 1744231651.420514, "content": "not) called during the execution of specific cases.\n\nUsing OpenTelemetry in this way also means that all data used to evaluate the task executions will be accessible in\nthe traces produced by production runs of the code, making it straightforward to perform the same evaluations on\nproduction data.\n\n\n\nGraphs\n======\n\nDon't use a nail gun unless you need a nail gun\n\nIf PydanticAI [agents](../agents/) are a hammer, and [multi-agent workflows](../multi-agent-applications/) are a sledgehammer, then graphs are a nail gun:\n\n* sure, nail guns look cooler than hammers\n* but nail guns take a lot more setup than hammers\n* and nail guns don't make you a better builder, they make you a builder with a nail gun\n* Lastly, (and at the risk of torturing this metaphor), if you're a fan of medieval tools like mallets and untyped Python, you probably won't like nail guns or our approach to graphs. (But then again, if you're not a fan of type hints in Python, you've probably already bounced off PydanticAI to use one of the toy agent frameworks — good luck, and feel free to borrow my sledgehammer when you realize you need it)\n\nIn short, graphs are a powerful tool, but they're not the right tool for every job. Please consider other [multi-agent approaches](../multi-agent-applications/) before proceeding.\n\nIf you're not confident a graph-based approach is a good idea, it might be unnecessary.\n\nGraphs and finite state machines (FSMs) are a powerful abstraction to model, execute, control and visualize complex workflows.\n\nAlongside PydanticAI, we've developed `pydantic-graph` — an async graph and state machine library for Python where nodes and edges are defined using type hints.\n\nWhile this library is developed as part of PydanticAI; it has no dependency on `pydantic-ai` and can be considered as a pure graph-based state machine library. You may find it useful whether or not you're using PydanticAI or even building with GenAI.\n\n`pydantic-graph` is designed for advanced users and makes heavy use of Python generics and type hints. It is not designed to be as beginner-friendly as PydanticAI.\n\nInstallation\n------------\n\n`pydantic-graph` is a required dependency of `pydantic-ai`, and an optional dependency of `pydantic-ai-slim`, see [installation instructions](../install/#slim-install) for more information. You can also install it directly:\n\n```\npip install pydantic-graph\n\n```\n\n\n```\nuv add pydantic-graph\n\n```\n\n\n\nGraph Types\n-----------\n\n`pydantic-graph` is made up of a few key components:\n\n### GraphRunContext\n\n`GraphRunContext` — The context for the graph run, similar to PydanticAI's `RunContext`. This holds the state of the graph and dependencies and is passed to nodes when they're run.\n\n`GraphRunContext` is generic in the state type of the graph it's used in, `StateT`.\n\n### End\n\n`End` — return value to indicate the graph run should end.\n\n`End` is generic in the graph return type of the graph it's used in, `RunEndT`.\n\n### Nodes\n\nSubclasses of `BaseNode` define nodes for execution in the graph.\n\nNodes, which are generally `dataclass`es, generally consist of:\n\n* fields containing any parameters required/optional when calling the node\n* the business logic to execute the node, in the `run` method\n* return annotations of the `run` method, which are read by `pydantic-graph` to determine the outgoing edges of the node\n\nNodes are generic in:\n\n* **state**, which must have the same type as the state of graphs they're included in, `StateT` has a default of `None`, so if you're not using state you can omit this generic parameter, see [stateful graphs](#stateful-graphs) for more information\n* **deps**, which must have the same type as the deps of the graph they're included in, `DepsT` has a default of `None`, so if you're not using deps you can omit this generic parameter, see [dependency injection](#dependency-injection) for more information\n* **graph return type** — this only applies if the node returns `End`. `RunEndT` has a default of Never so this generic parameter can be omitted if the node doesn't return `End`, but must be included if it does.\n\nHere's an example of a start or intermediate node in a graph — it can't end the run as it doesn't return `End`:\n\nintermediate\\_node.py\n```\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, GraphRunContext\n\n\n@dataclass\nclass MyNode(BaseNode[MyState]):  # (1)!\n    foo: int  # (2)!\n\n    async def run(\n        self,\n        ctx: GraphRunContext[MyState],  # (3)!\n    ) -> AnotherNode:  # (4)!\n        ...\n        return AnotherNode()\n\n```\n\n1. State in this example is `MyState` (not shown), hence `BaseNode` is parameterized with `MyState`. This node can't end the run, so the `RunEndT` generic parameter is omitted and defaults to `Never`.\n2. `MyNode` is a dataclass and has a single field `foo`, an `int`.\n3. The `run` method takes a `GraphRunContext` parameter, again parameterized with state `MyState`.\n4. The return type of the `run` method is `AnotherNode` (not shown), this is used to determine the outgoing edges of the node.\n\nWe could extend `MyNode` to optionally", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-405009d6dd27fdd5eafe4b829ad75a96", "__created_at__": 1744231651.420514, "content": "T` generic parameter is omitted and defaults to `Never`.\n2. `MyNode` is a dataclass and has a single field `foo`, an `int`.\n3. The `run` method takes a `GraphRunContext` parameter, again parameterized with state `MyState`.\n4. The return type of the `run` method is `AnotherNode` (not shown), this is used to determine the outgoing edges of the node.\n\nWe could extend `MyNode` to optionally end the run if `foo` is divisible by 5:\n\nintermediate\\_or\\_end\\_node.py\n```\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, End, GraphRunContext\n\n\n@dataclass\nclass MyNode(BaseNode[MyState, None, int]):  # (1)!\n    foo: int\n\n    async def run(\n        self,\n        ctx: GraphRunContext[MyState],\n    ) -> AnotherNode | End[int]:  # (2)!\n        if self.foo % 5 == 0:\n            return End(self.foo)\n        else:\n            return AnotherNode()\n\n```\n\n1. We parameterize the node with the return type (`int` in this case) as well as state. Because generic parameters are positional-only, we have to include `None` as the second parameter representing deps.\n2. The return type of the `run` method is now a union of `AnotherNode` and `End[int]`, this allows the node to end the run if `foo` is divisible by 5.\n\n### Graph\n\n`Graph` — this is the execution graph itself, made up of a set of [node classes](#nodes) (i.e., `BaseNode` subclasses).\n\n`Graph` is generic in:\n\n* **state** the state type of the graph, `StateT`\n* **deps** the deps type of the graph, `DepsT`\n* **graph return type** the return type of the graph run, `RunEndT`\n\nHere's an example of a simple graph:\n\ngraph\\_example.py\n```\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n\n@dataclass\nclass DivisibleBy5(BaseNode[None, None, int]):  # (1)!\n    foo: int\n\n    async def run(\n        self,\n        ctx: GraphRunContext,\n    ) -> Increment | End[int]:\n        if self.foo % 5 == 0:\n            return End(self.foo)\n        else:\n            return Increment(self.foo)\n\n\n@dataclass\nclass Increment(BaseNode):  # (2)!\n    foo: int\n\n    async def run(self, ctx: GraphRunContext) -> DivisibleBy5:\n        return DivisibleBy5(self.foo + 1)\n\n\nfives_graph = Graph(nodes=[DivisibleBy5, Increment])  # (3)!\nresult = fives_graph.run_sync(DivisibleBy5(4))  # (4)!\nprint(result.output)\n#> 5\n\n```\n\n1. The `DivisibleBy5` node is parameterized with `None` for the state param and `None` for the deps param as this graph doesn't use state or deps, and `int` as it can end the run.\n2. The `Increment` node doesn't return `End`, so the `RunEndT` generic parameter is omitted, state can also be omitted as the graph doesn't use state.\n3. The graph is created with a sequence of nodes.\n4. The graph is run synchronously with `run_sync`. The initial node is `DivisibleBy5(4)`. Because the graph doesn't use external state or deps, we don't pass `state` or `deps`.\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+)*\n\nA [mermaid diagram](#mermaid-diagrams) for this graph can be generated with the following code:\n\ngraph\\_example\\_diagram.py\n```\nfrom graph_example import DivisibleBy5, fives_graph\n\nfives_graph.mermaid_code(start_node=DivisibleBy5)\n\n```\n```\n---\ntitle: fives_graph\n---\nstateDiagram-v2\n  [*] --> DivisibleBy5\n  DivisibleBy5 --> Increment\n  DivisibleBy5 --> [*]\n  Increment --> DivisibleBy5\n```\n\nIn order to visualize a graph within a `jupyter-notebook`, `IPython.display` needs to be used:\n\njupyter\\_display\\_mermaid.py\n```\nfrom graph_example import DivisibleBy5, fives_graph\nfrom IPython.display import Image, display\n\ndisplay(Image(fives_graph.mermaid_image(start_node=DivisibleBy5)))\n\n```\n\nStateful Graphs\n---------------\n\nThe \"state\" concept in `pydantic-graph` provides an optional way to access and mutate an object (often a `dataclass` or Pydantic model) as nodes run in a graph. If you think of Graphs as a production line, then your state is the engine being passed along the line and built up by each node as the graph is run.\n\nIn the future, we intend to extend `pydantic-graph` to provide state persistence with the state recorded after each node is run, see [#695](https://github.com/pydantic/pydantic-ai/issues/695).\n\nHere's an example of a graph which represents a vending machine where the user may insert coins and select a product to purchase.\n\nvending\\_machine.py\n```\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom rich.prompt import Prompt\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9a99cfa8ff8a41ea240361d13d4e41ec", "__created_at__": 1744231651.420514, "content": "with the state recorded after each node is run, see [#695](https://github.com/pydantic/pydantic-ai/issues/695).\n\nHere's an example of a graph which represents a vending machine where the user may insert coins and select a product to purchase.\n\nvending\\_machine.py\n```\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom rich.prompt import Prompt\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n\n@dataclass\nclass MachineState:  # (1)!\n    user_balance: float = 0.0\n    product: str | None = None\n\n\n@dataclass\nclass InsertCoin(BaseNode[MachineState]):  # (3)!\n    async def run(self, ctx: GraphRunContext[MachineState]) -> CoinsInserted:  # (16)!\n        return CoinsInserted(float(Prompt.ask('Insert coins')))  # (4)!\n\n\n@dataclass\nclass CoinsInserted(BaseNode[MachineState]):\n    amount: float  # (5)!\n\n    async def run(\n        self, ctx: GraphRunContext[MachineState]\n    ) -> SelectProduct | Purchase:  # (17)!\n        ctx.state.user_balance += self.amount  # (6)!\n        if ctx.state.product is not None:  # (7)!\n            return Purchase(ctx.state.product)\n        else:\n            return SelectProduct()\n\n\n@dataclass\nclass SelectProduct(BaseNode[MachineState]):\n    async def run(self, ctx: GraphRunContext[MachineState]) -> Purchase:\n        return Purchase(Prompt.ask('Select product'))\n\n\nPRODUCT_PRICES = {  # (2)!\n    'water': 1.25,\n    'soda': 1.50,\n    'crisps': 1.75,\n    'chocolate': 2.00,\n}\n\n\n@dataclass\nclass Purchase(BaseNode[MachineState, None, None]):  # (18)!\n    product: str\n\n    async def run(\n        self, ctx: GraphRunContext[MachineState]\n    ) -> End | InsertCoin | SelectProduct:\n        if price := PRODUCT_PRICES.get(self.product):  # (8)!\n            ctx.state.product = self.product  # (9)!\n            if ctx.state.user_balance >= price:  # (10)!\n                ctx.state.user_balance -= price\n                return End(None)\n            else:\n                diff = price - ctx.state.user_balance\n                print(f'Not enough money for {self.product}, need {diff:0.2f} more')\n                #> Not enough money for crisps, need 0.75 more\n                return InsertCoin()  # (11)!\n        else:\n            print(f'No such product: {self.product}, try again')\n            return SelectProduct()  # (12)!\n\n\nvending_machine_graph = Graph(  # (13)!\n    nodes=[InsertCoin, CoinsInserted, SelectProduct, Purchase]\n)\n\n\nasync def main():\n    state = MachineState()  # (14)!\n    await vending_machine_graph.run(InsertCoin(), state=state)  # (15)!\n    print(f'purchase successful item={state.product} change={state.user_balance:0.2f}')\n    #> purchase successful item=crisps change=0.25\n\n```\n\n1. The state of the vending machine is defined as a dataclass with the user's balance and the product they've selected, if any.\n2. A dictionary of products mapped to prices.\n3. The `InsertCoin` node, `BaseNode` is parameterized with `MachineState` as that's the state used in this graph.\n4. The `InsertCoin` node prompts the user to insert coins. We keep things simple by just entering a monetary amount as a float. Before you start thinking this is a toy too since it's using rich's `Prompt.ask` within nodes, see [below](#example-human-in-the-loop) for how control flow can be managed when nodes require external input.\n5. The `CoinsInserted` node; again this is a `dataclass` with one field `amount`.\n6. Update the user's balance with the amount inserted.\n7. If the user has already selected a product, go to `Purchase`, otherwise go to `SelectProduct`.\n8. In the `Purchase` node, look up the price of the product if the user entered a valid product.\n9. If the user did enter a valid product, set the product in the state so we don't revisit `SelectProduct`.\n10. If the balance is enough to purchase the product, adjust the balance to reflect the purchase and return `End` to end the graph. We're not using the run return type, so we call `End` with `None`.\n11. If the balance is insufficient, go to `InsertCoin` to prompt the user to insert more coins.\n12. If the product is invalid, go to `SelectProduct` to prompt the user to select a product again.\n13. The graph is created by passing a list of nodes to `Graph`. Order of nodes is not important, but it can affect how [diagrams](#mermaid-diagrams) are displayed.\n14. Initialize the state. This will be passed to the graph run and mutated as the graph runs.\n15. Run the graph with the initial state. Since the graph can be run from any node, we must pass the start node — in this case, `InsertCoin`. `Graph.run` returns a `GraphRunResult` that provides the final data and a history of the run.\n16. The return type of the node's `run` method is important as it is used to determine the outgoing edges of the node. This information in turn is used to render [mermaid diagrams](#mermaid-diagrams) and is enforced at runtime to detect misbehavior as soon as possible.\n17. The", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9f106548aed70137ff14bc29aa95f4ba", "__created_at__": 1744231651.420514, "content": "pass the start node — in this case, `InsertCoin`. `Graph.run` returns a `GraphRunResult` that provides the final data and a history of the run.\n16. The return type of the node's `run` method is important as it is used to determine the outgoing edges of the node. This information in turn is used to render [mermaid diagrams](#mermaid-diagrams) and is enforced at runtime to detect misbehavior as soon as possible.\n17. The return type of `CoinsInserted`'s `run` method is a union, meaning multiple outgoing edges are possible.\n18. Unlike other nodes, `Purchase` can end the run, so the `RunEndT` generic parameter must be set. In this case it's `None` since the graph run return type is `None`.\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)*\n\nA [mermaid diagram](#mermaid-diagrams) for this graph can be generated with the following code:\n\nvending\\_machine\\_diagram.py\n```\nfrom vending_machine import InsertCoin, vending_machine_graph\n\nvending_machine_graph.mermaid_code(start_node=InsertCoin)\n\n```\n\nThe diagram generated by the above code is:\n\n```\n---\ntitle: vending_machine_graph\n---\nstateDiagram-v2\n  [*] --> InsertCoin\n  InsertCoin --> CoinsInserted\n  CoinsInserted --> SelectProduct\n  CoinsInserted --> Purchase\n  SelectProduct --> Purchase\n  Purchase --> InsertCoin\n  Purchase --> SelectProduct\n  Purchase --> [*]\n```\n\nSee [below](#mermaid-diagrams) for more information on generating diagrams.\n\nGenAI Example\n-------------\n\nSo far we haven't shown an example of a Graph that actually uses PydanticAI or GenAI at all.\n\nIn this example, one agent generates a welcome email to a user and the other agent provides feedback on the email.\n\nThis graph has a very simple structure:\n\n```\n---\ntitle: feedback_graph\n---\nstateDiagram-v2\n  [*] --> WriteEmail\n  WriteEmail --> Feedback\n  Feedback --> WriteEmail\n  Feedback --> [*]\n```\ngenai\\_email\\_feedback.py\n```\nfrom __future__ import annotations as _annotations\n\nfrom dataclasses import dataclass, field\n\nfrom pydantic import BaseModel, EmailStr\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_ai.messages import ModelMessage\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n\n@dataclass\nclass User:\n    name: str\n    email: EmailStr\n    interests: list[str]\n\n\n@dataclass\nclass Email:\n    subject: str\n    body: str\n\n\n@dataclass\nclass State:\n    user: User\n    write_agent_messages: list[ModelMessage] = field(default_factory=list)\n\n\nemail_writer_agent = Agent(\n    'google-vertex:gemini-1.5-pro',\n    result_type=Email,\n    system_prompt='Write a welcome email to our tech blog.',\n)\n\n\n@dataclass\nclass WriteEmail(BaseNode[State]):\n    email_feedback: str | None = None\n\n    async def run(self, ctx: GraphRunContext[State]) -> Feedback:\n        if self.email_feedback:\n            prompt = (\n                f'Rewrite the email for the user:\\n'\n                f'{format_as_xml(ctx.state.user)}\\n'\n                f'Feedback: {self.email_feedback}'\n            )\n        else:\n            prompt = (\n                f'Write a welcome email for the user:\\n'\n                f'{format_as_xml(ctx.state.user)}'\n            )\n\n        result = await email_writer_agent.run(\n            prompt,\n            message_history=ctx.state.write_agent_messages,\n        )\n        ctx.state.write_agent_messages += result.all_messages()\n        return Feedback(result.data)\n\n\nclass EmailRequiresWrite(BaseModel):\n    feedback: str\n\n\nclass EmailOk(BaseModel):\n    pass\n\n\nfeedback_agent = Agent[None, EmailRequiresWrite | EmailOk](\n    'openai:gpt-4o',\n    result_type=EmailRequiresWrite | EmailOk,  # type: ignore\n    system_prompt=(\n        'Review the email and provide feedback, email must reference the users specific interests.'\n    ),\n)\n\n\n@dataclass\nclass Feedback(BaseNode[State, None, Email]):\n    email: Email\n\n    async def run(\n        self,\n        ctx: GraphRunContext[State],\n    ) -> WriteEmail | End[Email]:\n        prompt = format_as_xml({'user': ctx.state.user, 'email': self.email})\n        result = await feedback_agent.run(prompt)\n        if isinstance(result.data, EmailRequiresWrite):\n            return WriteEmail(email_feedback=result.data.feedback)\n        else:\n            return End(self.email)\n\n\nasync def main():\n    user = User(\n        name='John Doe',\n        email='john.joe@example.com',\n        interests=['Haskel', 'Lisp', 'Fortran'],\n    )\n    state = State(user)\n    feedback_graph = Graph(nodes=(WriteEmail, Feedback))\n    result = await feedback_graph.run(WriteEmail(), state=state)\n    print(result.output)\n    \"\"\"\n    Email(\n        subject='Welcome to our tech blog!',\n        body='Hello John, Welcome to our tech blog! ...',\n    )\n    \"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)*\n\nIterating Over a Graph\n----------------------\n\n### Using `Graph.iter` for `async for` iteration\n\nSometimes you want direct control or insight into each node as the graph", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-e7563a1a76b149778e790581bfc9c864", "__created_at__": 1744231651.420514, "content": "Welcome to our tech blog!',\n        body='Hello John, Welcome to our tech blog! ...',\n    )\n    \"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)*\n\nIterating Over a Graph\n----------------------\n\n### Using `Graph.iter` for `async for` iteration\n\nSometimes you want direct control or insight into each node as the graph executes. The easiest way to do that is with the `Graph.iter` method, which returns a **context manager** that yields a `GraphRun` object. The `GraphRun` is an async-iterable over the nodes of your graph, allowing you to record or modify them as they execute.\n\nHere's an example:\n\ncount\\_down.py\n```\nfrom __future__ import annotations as _annotations\n\nfrom dataclasses import dataclass\nfrom pydantic_graph import Graph, BaseNode, End, GraphRunContext\n\n\n@dataclass\nclass CountDownState:\n    counter: int\n\n\n@dataclass\nclass CountDown(BaseNode[CountDownState, None, int]):\n    async def run(self, ctx: GraphRunContext[CountDownState]) -> CountDown | End[int]:\n        if ctx.state.counter <= 0:\n            return End(ctx.state.counter)\n        ctx.state.counter -= 1\n        return CountDown()\n\n\ncount_down_graph = Graph(nodes=[CountDown])\n\n\nasync def main():\n    state = CountDownState(counter=3)\n    async with count_down_graph.iter(CountDown(), state=state) as run:  # (1)!\n        async for node in run:  # (2)!\n            print('Node:', node)\n            #> Node: CountDown()\n            #> Node: CountDown()\n            #> Node: CountDown()\n            #> Node: CountDown()\n            #> Node: End(data=0)\n    print('Final result:', run.result.output)  # (3)!\n    #> Final result: 0\n\n```\n\n1. `Graph.iter(...)` returns a `GraphRun`.\n2. Here, we step through each node as it is executed.\n3. Once the graph returns an `End`, the loop ends, and `run.final_result` becomes a `GraphRunResult` containing the final outcome (`0` here).\n\n### Using `GraphRun.next(node)` manually\n\nAlternatively, you can drive iteration manually with the `GraphRun.next` method, which allows you to pass in whichever node you want to run next. You can modify or selectively skip nodes this way.\n\nBelow is a contrived example that stops whenever the counter is at 2, ignoring any node runs beyond that:\n\ncount\\_down\\_next.py\n```\nfrom pydantic_graph import End, FullStatePersistence\nfrom count_down import CountDown, CountDownState, count_down_graph\n\n\nasync def main():\n    state = CountDownState(counter=5)\n    persistence = FullStatePersistence()  # (7)!\n    async with count_down_graph.iter(\n        CountDown(), state=state, persistence=persistence\n    ) as run:\n        node = run.next_node  # (1)!\n        while not isinstance(node, End):  # (2)!\n            print('Node:', node)\n            #> Node: CountDown()\n            #> Node: CountDown()\n            #> Node: CountDown()\n            #> Node: CountDown()\n            if state.counter == 2:\n                break  # (3)!\n            node = await run.next(node)  # (4)!\n\n        print(run.result)  # (5)!\n        #> None\n\n        for step in persistence.history:  # (6)!\n            print('History Step:', step.state, step.state)\n            #> History Step: CountDownState(counter=5) CountDownState(counter=5)\n            #> History Step: CountDownState(counter=4) CountDownState(counter=4)\n            #> History Step: CountDownState(counter=3) CountDownState(counter=3)\n            #> History Step: CountDownState(counter=2) CountDownState(counter=2)\n\n```\n\n1. We start by grabbing the first node that will be run in the agent's graph.\n2. The agent run is finished once an `End` node has been produced; instances of `End` cannot be passed to `next`.\n3. If the user decides to stop early, we break out of the loop. The graph run won't have a real final result in that case (`run.final_result` remains `None`).\n4. At each step, we call `await run.next(node)` to run it and get the next node (or an `End`).\n5. Because we did not continue the run until it finished, the `result` is not set.\n6. The run's history is still populated with the steps we executed so far.\n7. Use `FullStatePersistence` so we can show the history of the run, see [State Persistence](#state-persistence) below for more information.\n\nState Persistence\n-----------------\n\nOne of the biggest benefits of finite state machine (FSM) graphs is how they simplify the handling of interrupted execution. This might happen for a variety of reasons:\n\n* the state machine logic might fundamentally need to be paused — e.g. the returns workflow for an e-commerce order needs to wait for the item to be posted to the returns center or because execution of the next node needs input from a user so needs to wait for a new http request,\n* the execution takes so long that the entire graph can't reliably be executed in a single continuous run — e.g. a deep research agent that might take hours to run,\n* you want to run multiple graph nodes in parallel in different processes / hardware instances (note: parallel node execution is", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-7852caa62e172f96d8bc0edb1b849a3f", "__created_at__": 1744231651.420514, "content": "the returns workflow for an e-commerce order needs to wait for the item to be posted to the returns center or because execution of the next node needs input from a user so needs to wait for a new http request,\n* the execution takes so long that the entire graph can't reliably be executed in a single continuous run — e.g. a deep research agent that might take hours to run,\n* you want to run multiple graph nodes in parallel in different processes / hardware instances (note: parallel node execution is not yet supported in `pydantic-graph`, see [#704](https://github.com/pydantic/pydantic-ai/issues/704)).\n\nTrying to make a conventional control flow (i.e., boolean logic and nested function calls) implementation compatible with these usage scenarios generally results in brittle and over-complicated spaghetti code, with the logic required to interrupt and resume execution dominating the implementation.\n\nTo allow graph runs to be interrupted and resumed, `pydantic-graph` provides state persistence — a system for snapshotting the state of a graph run before and after each node is run, allowing a graph run to be resumed from any point in the graph.\n\n`pydantic-graph` includes three state persistence implementations:\n\n* `SimpleStatePersistence` — Simple in memory state persistence that just hold the latest snapshot. If no state persistence implementation is provided when running a graph, this is used by default.\n* `FullStatePersistence` — In memory state persistence that hold a list of snapshots.\n* `FileStatePersistence` — File-based state persistence that saves snapshots to a JSON file.\n\nIn production applications, developers should implement their own state persistence by subclassing `BaseStatePersistence` abstract base class, which might persist runs in a relational database like PostgresQL.\n\nAt a high level the role of `StatePersistence` implementations is to store and retrieve `NodeSnapshot` and `EndSnapshot` objects.\n\n`graph.iter_from_persistence()` may be used to run the graph based on the state stored in persistence.\n\nWe can run the `count_down_graph` from [above](#iterating-over-a-graph), using `graph.iter_from_persistence()` and `FileStatePersistence`.\n\nAs you can see in this code, `run_node` requires no external application state (apart from state persistence) to be run, meaning graphs can easily be executed by distributed execution and queueing systems.\n\ncount\\_down\\_from\\_persistence.py\n```\nfrom pathlib import Path\n\nfrom pydantic_graph import End\nfrom pydantic_graph.persistence.file import FileStatePersistence\n\nfrom count_down import CountDown, CountDownState, count_down_graph\n\n\nasync def main():\n    run_id = 'run_abc123'\n    persistence = FileStatePersistence(Path(f'count_down_{run_id}.json'))  # (1)!\n    state = CountDownState(counter=5)\n    await count_down_graph.initialize(  # (2)!\n        CountDown(), state=state, persistence=persistence\n    )\n\n    done = False\n    while not done:\n        done = await run_node(run_id)\n\n\nasync def run_node(run_id: str) -> bool:  # (3)!\n    persistence = FileStatePersistence(Path(f'count_down_{run_id}.json'))\n    async with count_down_graph.iter_from_persistence(persistence) as run:  # (4)!\n        node_or_end = await run.next()  # (5)!\n\n    print('Node:', node_or_end)\n    #> Node: CountDown()\n    #> Node: CountDown()\n    #> Node: CountDown()\n    #> Node: CountDown()\n    #> Node: CountDown()\n    #> Node: End(data=0)\n    return isinstance(node_or_end, End)  # (6)!\n\n```\n\n1. Create a `FileStatePersistence` to use to start the graph.\n2. Call `graph.initialize()` to set the initial graph state in the persistence object.\n3. `run_node` is a pure function that doesn't need access to any other process state to run the next node of the graph, except the ID of the run.\n4. Call `graph.iter_from_persistence()` create a `GraphRun` object that will run the next node of the graph from the state stored in persistence. This will return either a node or an `End` object.\n5. `graph.run()` will return either a node or an `End` object.\n6. Check if the node is an `End` object, if it is, the graph run is complete.\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)*\n\n### Example: Human in the loop.\n\nAs noted above, state persistence allows graphs to be interrupted and resumed. One use case of this is to allow user input to continue.\n\nIn this example, an AI asks the user a question, the user provides an answer, the AI evaluates the answer and ends if the user got it right or asks another question if they got it wrong.\n\nInstead of running the entire graph in a single process invocation, we run the graph by running the process repeatedly, optionally providing an answer to the question as a command line argument.\n\n`ai_q_and_a_graph.py` — `question_graph` definition\nai\\_q\\_and\\_a\\_graph.py\n```\nfrom __future__ import annotations as _annotations\n\nfrom dataclasses import dataclass, field\n\nfrom groq import BaseModel\nfrom pydantic_graph import (\n    BaseNode,\n    End,\n    Graph,\n    GraphRunContext,\n)\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_ai.messages import ModelMessage\n\nask_agent = Agent('openai:g", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-85306b759adcc435ab78397f3cd1a687", "__created_at__": 1744231651.420514, "content": "_and\\_a\\_graph.py\n```\nfrom __future__ import annotations as _annotations\n\nfrom dataclasses import dataclass, field\n\nfrom groq import BaseModel\nfrom pydantic_graph import (\n    BaseNode,\n    End,\n    Graph,\n    GraphRunContext,\n)\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_ai.messages import ModelMessage\n\nask_agent = Agent('openai:gpt-4o', result_type=str, instrument=True)\n\n\n@dataclass\nclass QuestionState:\n    question: str | None = None\n    ask_agent_messages: list[ModelMessage] = field(default_factory=list)\n    evaluate_agent_messages: list[ModelMessage] = field(default_factory=list)\n\n\n@dataclass\nclass Ask(BaseNode[QuestionState]):\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Answer:\n        result = await ask_agent.run(\n            'Ask a simple question with a single correct answer.',\n            message_history=ctx.state.ask_agent_messages,\n        )\n        ctx.state.ask_agent_messages += result.all_messages()\n        ctx.state.question = result.data\n        return Answer(result.data)\n\n\n@dataclass\nclass Answer(BaseNode[QuestionState]):\n    question: str\n\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Evaluate:\n        answer = input(f'{self.question}: ')\n        return Evaluate(answer)\n\n\nclass EvaluationResult(BaseModel, use_attribute_docstrings=True):\n    correct: bool\n    \"\"\"Whether the answer is correct.\"\"\"\n    comment: str\n    \"\"\"Comment on the answer, reprimand the user if the answer is wrong.\"\"\"\n\n\nevaluate_agent = Agent(\n    'openai:gpt-4o',\n    result_type=EvaluationResult,\n    system_prompt='Given a question and answer, evaluate if the answer is correct.',\n)\n\n\n@dataclass\nclass Evaluate(BaseNode[QuestionState, None, str]):\n    answer: str\n\n    async def run(\n        self,\n        ctx: GraphRunContext[QuestionState],\n    ) -> End[str] | Reprimand:\n        assert ctx.state.question is not None\n        result = await evaluate_agent.run(\n            format_as_xml({'question': ctx.state.question, 'answer': self.answer}),\n            message_history=ctx.state.evaluate_agent_messages,\n        )\n        ctx.state.evaluate_agent_messages += result.all_messages()\n        if result.data.correct:\n            return End(result.data.comment)\n        else:\n            return Reprimand(result.data.comment)\n\n\n@dataclass\nclass Reprimand(BaseNode[QuestionState]):\n    comment: str\n\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Ask:\n        print(f'Comment: {self.comment}')\n        ctx.state.question = None\n        return Ask()\n\n\nquestion_graph = Graph(\n    nodes=(Ask, Answer, Evaluate, Reprimand), state_type=QuestionState\n)\n\n```\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+)*\n\n\nai\\_q\\_and\\_a\\_run.py\n```\nimport sys\nfrom pathlib import Path\n\nfrom pydantic_graph import End\nfrom pydantic_graph.persistence.file import FileStatePersistence\nfrom pydantic_ai.messages import ModelMessage  # noqa: F401\n\nfrom ai_q_and_a_graph import Ask, question_graph, Evaluate, QuestionState, Answer\n\n\nasync def main():\n    answer: str | None = sys.argv[1] if len(sys.argv) > 1 else None  # (1)!\n    persistence = FileStatePersistence(Path('question_graph.json'))  # (2)!\n    persistence.set_graph_types(question_graph)  # (3)!\n\n    if snapshot := await persistence.load_next():  # (4)!\n        state = snapshot.state\n        assert answer is not None\n        node = Evaluate(answer)\n    else:\n        state = QuestionState()\n        node = Ask()  # (5)!\n\n    async with question_graph.iter(node, state=state, persistence=persistence) as run:\n        while True:\n            node = await run.next()  # (6)!\n            if isinstance(node, End):  # (7)!\n                print('END:', node.data)\n                history = await persistence.load_all()  # (8)!\n                print([e.node for e in history])\n                break\n            elif isinstance(node, Answer):  # (9)!\n                print(node.question)\n                #> What is the capital of France?\n                break\n            # otherwise just continue\n\n```\n\n1. Get the user's answer from the command line, if provided. See [question graph example](../examples/question-graph/) for a complete example.\n2. Create a state persistence instance the `'question_graph.json'` file may or may not already exist.\n3. Since we're using the persistence interface outside a graph, we need to call `set_graph_types` to set the graph generic types `StateT` and `RunEndT` for the persistence instance. This is necessary to allow the persistence instance to know how to serialize and deserialize graph nodes.\n4. If we're run the graph before, `load_next` will return a snapshot of the next node to run, here we use `state` from that snapshot, and create a new `Evaluate` node with the answer provided on the command line.\n5. If the graph hasn't been run before, we create a new `QuestionState` and start with the `Ask` node.\n6. Call `GraphRun.next()` to run the node. This will return either a node or an `End` object.\n7. If the node is an `End` object, the graph run is complete. The `data` field of the `End` object contains the comment returned by the `evaluate_agent` about the correct answer.\n8. To demonstrate the state", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-241cea24e0ec8915cd8b8580f86bf720", "__created_at__": 1744231651.420514, "content": "the graph hasn't been run before, we create a new `QuestionState` and start with the `Ask` node.\n6. Call `GraphRun.next()` to run the node. This will return either a node or an `End` object.\n7. If the node is an `End` object, the graph run is complete. The `data` field of the `End` object contains the comment returned by the `evaluate_agent` about the correct answer.\n8. To demonstrate the state persistence, we call `load_all` to get all the snapshots from the persistence instance. This will return a list of `Snapshot` objects.\n9. If the node is an `Answer` object, we print the question and break out of the loop to end the process and wait for user input.\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)*\n\nFor a complete example of this graph, see the [question graph example](../examples/question-graph/).\n\nDependency Injection\n--------------------\n\nAs with PydanticAI, `pydantic-graph` supports dependency injection via a generic parameter on `Graph` and `BaseNode`, and the `GraphRunContext.deps` field.\n\nAs an example of dependency injection, let's modify the `DivisibleBy5` example [above](#graph) to use a `ProcessPoolExecutor` to run the compute load in a separate process (this is a contrived example, `ProcessPoolExecutor` wouldn't actually improve performance in this example):\n\ndeps\\_example.py\n```\nfrom __future__ import annotations\n\nimport asyncio\nfrom concurrent.futures import ProcessPoolExecutor\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n\n@dataclass\nclass GraphDeps:\n    executor: ProcessPoolExecutor\n\n\n@dataclass\nclass DivisibleBy5(BaseNode[None, GraphDeps, int]):\n    foo: int\n\n    async def run(\n        self,\n        ctx: GraphRunContext[None, GraphDeps],\n    ) -> Increment | End[int]:\n        if self.foo % 5 == 0:\n            return End(self.foo)\n        else:\n            return Increment(self.foo)\n\n\n@dataclass\nclass Increment(BaseNode[None, GraphDeps]):\n    foo: int\n\n    async def run(self, ctx: GraphRunContext[None, GraphDeps]) -> DivisibleBy5:\n        loop = asyncio.get_running_loop()\n        compute_result = await loop.run_in_executor(\n            ctx.deps.executor,\n            self.compute,\n        )\n        return DivisibleBy5(compute_result)\n\n    def compute(self) -> int:\n        return self.foo + 1\n\n\nfives_graph = Graph(nodes=[DivisibleBy5, Increment])\n\n\nasync def main():\n    with ProcessPoolExecutor() as executor:\n        deps = GraphDeps(executor)\n        result = await fives_graph.run(DivisibleBy5(3), deps=deps)\n    print(result.output)\n    #> 5\n    # the full history is quite verbose (see below), so we'll just print the summary\n    print([item.data_snapshot() for item in result.history])\n    \"\"\"\n    [\n        DivisibleBy5(foo=3),\n        Increment(foo=3),\n        DivisibleBy5(foo=4),\n        Increment(foo=4),\n        DivisibleBy5(foo=5),\n        End(data=5),\n    ]\n    \"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)*\n\nMermaid Diagrams\n----------------\n\nPydantic Graph can generate [mermaid](https://mermaid.js.org/) [`stateDiagram-v2`](https://mermaid.js.org/syntax/stateDiagram.html) diagrams for graphs, as shown above.\n\nThese diagrams can be generated with:\n\n* `Graph.mermaid_code` to generate the mermaid code for a graph\n* `Graph.mermaid_image` to generate an image of the graph using [mermaid.ink](https://mermaid.ink/)\n* `Graph.mermaid_save` to generate an image of the graph using [mermaid.ink](https://mermaid.ink/) and save it to a file\n\nBeyond the diagrams shown above, you can also customize mermaid diagrams with the following options:\n\n* `Edge` allows you to apply a label to an edge\n* `BaseNode.docstring_notes` and `BaseNode.get_note` allows you to add notes to nodes\n* The `highlighted_nodes` parameter allows you to highlight specific node(s) in the diagram\n\nPutting that together, we can edit the last [`ai_q_and_a_graph.py`](#example-human-in-the-loop) example to:\n\n* add labels to some edges\n* add a note to the `Ask` node\n* highlight the `Answer` node\n* save the diagram as a `PNG` image to file\n\nai\\_q\\_and\\_a\\_graph\\_extra.py\n```\n...\nfrom typing import Annotated\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext, Edge\n\n...\n\n@dataclass\nclass Ask(BaseNode[QuestionState]):\n    \"\"\"Generate question using GPT-4o.\"\"\"\n    docstring_notes = True\n    async def run(\n        self, ctx: GraphRunContext[QuestionState]\n    ) -> Annotated[Answer, Edge(label='Ask the question')]:\n        ...\n\n...\n\n@dataclass\nclass Evaluate(BaseNode[QuestionState]):\n    answer: str\n\n    async def run(\n            self,\n            ctx: GraphRunContext[QuestionState],\n    ) -> Annotated[End[str], Edge(label='", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ef03b0f17602b5bd774f2c7cb055f939", "__created_at__": 1744231651.420514, "content": "]):\n    \"\"\"Generate question using GPT-4o.\"\"\"\n    docstring_notes = True\n    async def run(\n        self, ctx: GraphRunContext[QuestionState]\n    ) -> Annotated[Answer, Edge(label='Ask the question')]:\n        ...\n\n...\n\n@dataclass\nclass Evaluate(BaseNode[QuestionState]):\n    answer: str\n\n    async def run(\n            self,\n            ctx: GraphRunContext[QuestionState],\n    ) -> Annotated[End[str], Edge(label='success')] | Reprimand:\n        ...\n\n...\n\nquestion_graph.mermaid_save('image.png', highlighted_nodes=[Answer])\n\n```\n\n*(This example is not complete and cannot be run directly)*\n\nThis would generate an image that looks like this:\n\n```\n---\ntitle: question_graph\n---\nstateDiagram-v2\n  Ask --> Answer: Ask the question\n  note right of Ask\n    Judge the answer.\n    Decide on next step.\n  end note\n  Answer --> Evaluate\n  Evaluate --> Reprimand\n  Evaluate --> [*]: success\n  Reprimand --> Ask\n\nclassDef highlighted fill:#fdff32\nclass Answer highlighted\n```\n### Setting Direction of the State Diagram\n\nYou can specify the direction of the state diagram using one of the following values:\n\n* `'TB'`: Top to bottom, the diagram flows vertically from top to bottom.\n* `'LR'`: Left to right, the diagram flows horizontally from left to right.\n* `'RL'`: Right to left, the diagram flows horizontally from right to left.\n* `'BT'`: Bottom to top, the diagram flows vertically from bottom to top.\n\nHere is an example of how to do this using 'Left to Right' (LR) instead of the default 'Top to Bottom' (TB):\nvending\\_machine\\_diagram.py\n```\nfrom vending_machine import InsertCoin, vending_machine_graph\n\nvending_machine_graph.mermaid_code(start_node=InsertCoin, direction='LR')\n\n```\n\n\n```\n---\ntitle: vending_machine_graph\n---\nstateDiagram-v2\n  direction LR\n  [*] --> InsertCoin\n  InsertCoin --> CoinsInserted\n  CoinsInserted --> SelectProduct\n  CoinsInserted --> Purchase\n  SelectProduct --> Purchase\n  Purchase --> InsertCoin\n  Purchase --> SelectProduct\n  Purchase --> [*]\n```\n\n\nGetting Help\n============\n\nIf you need help getting started with PydanticAI or with advanced usage, the following sources may be useful.\n\nSlack\n-----\n\nJoin the `#pydantic-ai` channel in the [Pydantic Slack](https://logfire.pydantic.dev/docs/join-slack/) to ask questions, get help, and chat about PydanticAI. There's also channels for Pydantic, Logfire, and FastUI.\n\nIf you're on a [Logfire](https://pydantic.dev/logfire) Pro plan, you can also get a dedicated private slack collab channel with us.\n\nGitHub Issues\n-------------\n\nThe [PydanticAI GitHub Issues](https://github.com/pydantic/pydantic-ai/issues) are a great place to ask questions and give us feedback.\n\n\n\nImage, Audio & Document Input\n=============================\n\nSome LLMs are now capable of understanding both audio, image and document content.\n\nImage Input\n-----------\n\nInfo\n\nSome models do not support image input. Please check the model's documentation to confirm whether it supports image input.\n\nIf you have a direct URL for the image, you can use `ImageUrl`:\n\nmain.py\n```\nfrom pydantic_ai import Agent, ImageUrl\n\nagent = Agent(model='openai:gpt-4o')\nresult = agent.run_sync(\n    [\n        'What company is this logo from?',\n        ImageUrl(url='https://iili.io/3Hs4FMg.png'),\n    ]\n)\nprint(result.data)\n#> This is the logo for Pydantic, a data validation and settings management library in Python.\n\n```\n\nIf you have the image locally, you can also use `BinaryContent`:\n\nmain.py\n```\nimport httpx\n\nfrom pydantic_ai import Agent, BinaryContent\n\nimage_response = httpx.get('https://iili.io/3Hs4FMg.png')  # Pydantic logo\n\nagent = Agent(model='openai:gpt-4o')\nresult = agent.run_sync(\n    [\n        'What company is this logo from?',\n        BinaryContent(data=image_response.content, media_type='image/png'),  # (1)!\n    ]\n)\nprint(result.data)\n#> This is the logo for Pydantic, a data validation and settings management library in Python.\n\n```\n\n1. To ensure the example is runnable we download this image from the web, but you can also use `Path().read_bytes()` to read a local file's contents.\n\nAudio Input\n-----------\n\nInfo\n\nSome models do not support audio input. Please check the model's documentation to confirm whether it supports audio input.\n\nYou can provide audio input using either `AudioUrl` or `BinaryContent`. The process is analogous to the examples above.\n\nDocument Input\n--------------\n\nInfo\n\nSome models do not support document input. Please check the model's documentation to confirm whether it supports document input.\n\n\nWarning\n\nWhen using Gemini models, the document content will always be sent as binary data, regardless of whether you use `DocumentUrl` or `BinaryContent`. This is due to differences in how Vertex AI and Google AI handle document inputs.\n\nFor more details, see [this discussion](https://discuss.ai.google.dev/t/i-am-using-google-generative-ai-model-gemini-1-5-pro-for-image-analysis-but-getting-error/34866/4).\n\nIf you are unsatisfied with this behavior, please let us know by opening an issue on\n[GitHub](https://github.com/pydantic/pyd", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-fbac2cd26b16d89a2ad3c129160b997b", "__created_at__": 1744231651.420514, "content": "or `BinaryContent`. This is due to differences in how Vertex AI and Google AI handle document inputs.\n\nFor more details, see [this discussion](https://discuss.ai.google.dev/t/i-am-using-google-generative-ai-model-gemini-1-5-pro-for-image-analysis-but-getting-error/34866/4).\n\nIf you are unsatisfied with this behavior, please let us know by opening an issue on\n[GitHub](https://github.com/pydantic/pydantic-ai/issues).\n\nYou can provide document input using either `DocumentUrl` or `BinaryContent`. The process is similar to the examples above.\n\nIf you have a direct URL for the document, you can use `DocumentUrl`:\n\nmain.py\n```\nfrom pydantic_ai import Agent, DocumentUrl\n\nagent = Agent(model='anthropic:claude-3-sonnet')\nresult = agent.run_sync(\n    [\n        'What is the main content of this document?',\n        DocumentUrl(url='https://storage.googleapis.com/cloud-samples-data/generative-ai/pdf/2403.05530.pdf'),\n    ]\n)\nprint(result.data)\n#> This document is the technical report introducing Gemini 1.5, Google's latest large language model...\n\n```\n\nThe supported document formats vary by model.\n\nYou can also use `BinaryContent` to pass document data directly:\n\nmain.py\n```\nfrom pathlib import Path\nfrom pydantic_ai import Agent, BinaryContent\n\npdf_path = Path('document.pdf')\nagent = Agent(model='anthropic:claude-3-sonnet')\nresult = agent.run_sync(\n    [\n        'What is the main content of this document?',\n        BinaryContent(data=pdf_path.read_bytes(), media_type='application/pdf'),\n    ]\n)\nprint(result.data)\n#> The document discusses...\n\n```\n\n\nInstallation\n============\n\nPydanticAI is available on PyPI as [`pydantic-ai`](https://pypi.org/project/pydantic-ai/) so installation is as simple as:\n\n```\npip install pydantic-ai\n\n```\n\n\n```\nuv add pydantic-ai\n\n```\n\n\n\n(Requires Python 3.9+)\n\nThis installs the `pydantic_ai` package, core dependencies, and libraries required to use all the models\nincluded in PydanticAI. If you want to use a specific model, you can install the [\"slim\"](#slim-install) version of PydanticAI.\n\nUse with Pydantic Logfire\n-------------------------\n\nPydanticAI has an excellent (but completely optional) integration with [Pydantic Logfire](https://pydantic.dev/logfire) to help you view and understand agent runs.\n\nTo use Logfire with PydanticAI, install `pydantic-ai` or `pydantic-ai-slim` with the `logfire` optional group:\n\n```\npip install \"pydantic-ai[logfire]\"\n\n```\n\n\n```\nuv add \"pydantic-ai[logfire]\"\n\n```\n\n\n\nFrom there, follow the [Logfire setup docs](../logfire/#using-logfire) to configure Logfire.\n\nRunning Examples\n----------------\n\nWe distribute the [`pydantic_ai_examples`](https://github.com/pydantic/pydantic-ai/tree/main/examples/pydantic_ai_examples) directory as a separate PyPI package ([`pydantic-ai-examples`](https://pypi.org/project/pydantic-ai-examples/)) to make examples extremely easy to customize and run.\n\nTo install examples, use the `examples` optional group:\n\n```\npip install \"pydantic-ai[examples]\"\n\n```\n\n\n```\nuv add \"pydantic-ai[examples]\"\n\n```\n\n\n\nTo run the examples, follow instructions in the [examples docs](../examples/).\n\nSlim Install\n------------\n\nIf you know which model you're going to use and want to avoid installing superfluous packages, you can use the [`pydantic-ai-slim`](https://pypi.org/project/pydantic-ai-slim/) package.\nFor example, if you're using just `OpenAIModel`, you would run:\n\n```\npip install \"pydantic-ai-slim[openai]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[openai]\"\n\n```\n\n\n\n`pydantic-ai-slim` has the following optional groups:\n\n* `logfire` — installs [`logfire`](../logfire/) [PyPI ↗](https://pypi.org/project/logfire)\n* `evals` — installs [`pydantic-evals`](../evals/) [PyPI ↗](https://pypi.org/project/pydantic-evals)\n* `openai` — installs `openai` [PyPI ↗](https://pypi.org/project/openai)\n* `vertexai` — installs `google-auth` [PyPI ↗](https://pypi.org/project/google-auth) and `requests` [PyPI ↗](https://pypi.org/project/requests)\n* `anthropic` — installs `anthropic` [PyPI ↗](https://pypi.org/project/anthropic)\n* `groq` — installs `groq` [PyPI ↗](https://pypi.org/project/groq)\n* `mistral` — installs `mistralai` [PyPI ↗](https://pypi.org/project/mistralai)\n* `cohere` - installs `cohere` [PyPI ↗](https://pypi.org/project/cohere)\n* `duckduckgo` - installs `duckduckgo-search` [PyPI ↗](https://pypi.org/project/duckduckgo-search)\n* `tavily` - installs `tavily-python` [PyPI ↗](https://", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-803ad293de9341cf22215ab0b0f22dbe", "__created_at__": 1744231651.420514, "content": "` [PyPI ↗](https://pypi.org/project/mistralai)\n* `cohere` - installs `cohere` [PyPI ↗](https://pypi.org/project/cohere)\n* `duckduckgo` - installs `duckduckgo-search` [PyPI ↗](https://pypi.org/project/duckduckgo-search)\n* `tavily` - installs `tavily-python` [PyPI ↗](https://pypi.org/project/tavily-python)\n\nSee the [models](../models/) documentation for information on which optional dependencies are required for each model.\n\nYou can also install dependencies for multiple models and use cases, for example:\n\n```\npip install \"pydantic-ai-slim[openai,vertexai,logfire]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[openai,vertexai,logfire]\"\n\n```\n\n\n\n\n\nDebugging and Monitoring\n========================\n\nApplications that use LLMs have some challenges that are well known and understood: LLMs are **slow**, **unreliable** and **expensive**.\n\nThese applications also have some challenges that most developers have encountered much less often: LLMs are **fickle** and **non-deterministic**. Subtle changes in a prompt can completely change a model's performance, and there's no `EXPLAIN` query you can run to understand why.\n\nWarning\n\nFrom a software engineers point of view, you can think of LLMs as the worst database you've ever heard of, but worse.\n\nIf LLMs weren't so bloody useful, we'd never touch them.\n\nTo build successful applications with LLMs, we need new tools to understand both model performance, and the behavior of applications that rely on them.\n\nLLM Observability tools that just let you understand how your model is performing are useless: making API calls to an LLM is easy, it's building that into an application that's hard.\n\nPydantic Logfire\n----------------\n\n[Pydantic Logfire](https://pydantic.dev/logfire) is an observability platform developed by the team who created and maintain Pydantic and PydanticAI. Logfire aims to let you understand your entire application: Gen AI, classic predictive AI, HTTP traffic, database queries and everything else a modern application needs.\n\nPydantic Logfire is a commercial product\n\nLogfire is a commercially supported, hosted platform with an extremely generous and perpetual [free tier](https://pydantic.dev/pricing/).\nYou can sign up and start using Logfire in a couple of minutes.\n\nPydanticAI has built-in (but optional) support for Logfire. That means if the `logfire` package is installed and configured and agent instrumentation is enabled then detailed information about agent runs is sent to Logfire. Otherwise there's virtually no overhead and nothing is sent.\n\nHere's an example showing details of running the [Weather Agent](../examples/weather-agent/) in Logfire:\n\n[![Weather Agent Logfire](../img/logfire-weather-agent.png)](../img/logfire-weather-agent.png)\n\nUsing Logfire\n-------------\n\nTo use logfire, you'll need a logfire [account](https://logfire.pydantic.dev), and logfire installed:\n\n```\npip install \"pydantic-ai[logfire]\"\n\n```\n\n\n```\nuv add \"pydantic-ai[logfire]\"\n\n```\n\n\n\nThen authenticate your local environment with logfire:\n\n```\n logfire auth\n\n```\n\n\n```\nuv run logfire auth\n\n```\n\n\n\nAnd configure a project to send data to:\n\n```\n logfire projects new\n\n```\n\n\n```\nuv run logfire projects new\n\n```\n\n\n\n(Or use an existing project with `logfire projects use`)\n\nThen add logfire to your code:\n\nadding\\_logfire.py\n```\nimport logfire\n\nlogfire.configure()\n\n```\n\nand enable instrumentation in your agent:\n\ninstrument\\_agent.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', instrument=True)\n# or instrument all agents to avoid needing to add `instrument=True` to each agent:\nAgent.instrument_all()\n\n```\n\nThe [logfire documentation](https://logfire.pydantic.dev/docs/) has more details on how to use logfire,\nincluding how to instrument other libraries like [Pydantic](https://logfire.pydantic.dev/docs/integrations/pydantic/),\n[HTTPX](https://logfire.pydantic.dev/docs/integrations/http-clients/httpx/) and [FastAPI](https://logfire.pydantic.dev/docs/integrations/web-frameworks/fastapi/).\n\nSince Logfire is built on [OpenTelemetry](https://opentelemetry.io/), you can use the Logfire Python SDK to send data to any OpenTelemetry collector.\n\nOnce you have logfire set up, there are two primary ways it can help you understand your application:\n\n* **Debugging** — Using the live view to see what's happening in your application in real-time.\n* **Monitoring** — Using SQL and dashboards to observe the behavior of your application, Logfire is effectively a SQL database that stores information about how your application is running.\n\n### Debugging\n\nTo demonstrate how Logfire can let you visualise the flow of a PydanticAI run, here's the view you get from Logfire while running the [chat app examples](../examples/chat-app/):\n\n### Monitoring Performance\n\nWe can also query data with SQL in Logfire to monitor the performance of an application. Here's a real world example of using Logfire to monitor PydanticAI runs inside Logfire itself:\n\n[![Logfire monitoring PydanticAI](../img/logfire-monitoring-pydanticai.png)](../img/logfire-monitoring-pydanticai.png)\n\n###", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-adafe0dc68284d75a3d5c7256851229e", "__created_at__": 1744231651.420514, "content": "the view you get from Logfire while running the [chat app examples](../examples/chat-app/):\n\n### Monitoring Performance\n\nWe can also query data with SQL in Logfire to monitor the performance of an application. Here's a real world example of using Logfire to monitor PydanticAI runs inside Logfire itself:\n\n[![Logfire monitoring PydanticAI](../img/logfire-monitoring-pydanticai.png)](../img/logfire-monitoring-pydanticai.png)\n\n### Monitoring HTTPX Requests\n\nIn order to monitor HTTPX requests made by models, you can use `logfire`'s [HTTPX](https://logfire.pydantic.dev/docs/integrations/http-clients/httpx/) integration.\n\nInstrumentation is as easy as adding the following three lines to your application:\n\ninstrument\\_httpx.py\n```\nimport logfire\nlogfire.configure()\nlogfire.instrument_httpx(capture_all=True)  # (1)!\n\n```\n\n1. See the [logfire docs](https://logfire.pydantic.dev/docs/integrations/http-clients/httpx/) for more `httpx` instrumentation details.\n\nIn particular, this can help you to trace specific requests, responses, and headers:\n\ninstrument\\_httpx\\_example.py\n```\nimport logfire\nfrom pydantic_ai import Agent\n\nlogfire.configure()\nlogfire.instrument_httpx(capture_all=True)  # (1)!\n\nagent = Agent('openai:gpt-4o', instrument=True)\nresult = agent.run_sync('What is the capital of France?')\nprint(result.data)\n# > The capital of France is Paris.\n\n```\n\n1. Capture all of headers, request body, and response body.\n\n[![Logfire with HTTPX instrumentation](../img/logfire-with-httpx.png)](../img/logfire-with-httpx.png)\n\n\n[![Logfire without HTTPX instrumentation](../img/logfire-without-httpx.png)](../img/logfire-without-httpx.png)\n\n\n\n\nTip\n\n`httpx` instrumentation might be of particular utility if you're using a custom `httpx` client in your model in order to get insights into your custom requests.\n\nUsing OpenTelemetry\n-------------------\n\nPydanticAI's instrumentation uses [OpenTelemetry](https://opentelemetry.io/), which Logfire is based on. You can use the Logfire SDK completely freely and follow the [Alternative backends](https://logfire.pydantic.dev/docs/how-to-guides/alternative-backends/) guide to send the data to any OpenTelemetry collector, such as a self-hosted Jaeger instance. Or you can skip Logfire entirely and use the OpenTelemetry Python SDK directly.\n\nData format\n-----------\n\nPydanticAI follows the [OpenTelemetry Semantic Conventions for Generative AI systems](https://opentelemetry.io/docs/specs/semconv/gen-ai/), with one caveat. The semantic conventions specify that messages should be captured as individual events (logs) that are children of the request span. By default, PydanticAI instead collects these events into a JSON array which is set as a single large attribute called `events` on the request span. To change this, use `InstrumentationSettings(event_mode='logs')`.\n\ninstrumentation\\_settings\\_event\\_mode.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.agent import InstrumentationSettings\n\ninstrumentation_settings = InstrumentationSettings(event_mode='logs')\n\nagent = Agent('openai:gpt-4o', instrument=instrumentation_settings)\n# or instrument all agents:\nAgent.instrument_all(instrumentation_settings)\n\n```\n\nFor now, this won't look as good in the Logfire UI, but we're working on it.\n\nIf you have very long conversations, the `events` span attribute may be truncated. Using `event_mode='logs'` will help avoid this issue.\n\nNote that the OpenTelemetry Semantic Conventions are still experimental and are likely to change.\n\nSetting OpenTelemetry SDK providers\n-----------------------------------\n\nBy default, the global `TracerProvider` and `EventLoggerProvider` are used. These are set automatically by `logfire.configure()`. They can also be set by the `set_tracer_provider` and `set_event_logger_provider` functions in the OpenTelemetry Python SDK. You can set custom providers with `InstrumentationSettings`.\n\ninstrumentation\\_settings\\_providers.py\n```\nfrom opentelemetry.sdk._events import EventLoggerProvider\nfrom opentelemetry.sdk.trace import TracerProvider\n\nfrom pydantic_ai.agent import InstrumentationSettings\n\ninstrumentation_settings = InstrumentationSettings(\n    tracer_provider=TracerProvider(),\n    event_logger_provider=EventLoggerProvider(),\n)\n\n```\n\nInstrumenting a specific `Model`\n--------------------------------\n\ninstrumented\\_model\\_example.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.instrumented import InstrumentationSettings, InstrumentedModel\n\nsettings = InstrumentationSettings()\nmodel = InstrumentedModel('gpt-4o', settings)\nagent = Agent(model)\n\n```\n\n\nMessages and chat history\n=========================\n\nPydanticAI provides access to messages exchanged during an agent run. These messages can be used both to continue a coherent conversation, and to understand how an agent performed.\n\n### Accessing Messages from Results\n\nAfter running an agent, you can access the messages exchanged during that run from the `result` object.\n\nBoth `RunResult`\n(returned by `Agent.run`, `Agent.run_sync`)\nand `StreamedRunResult` (returned by `Agent.run_stream`) have the following methods:\n\n* `all_messages()`: returns all messages, including messages from prior runs. There's also a variant that returns JSON bytes, `all_messages_json()`.\n* `new_messages()`: returns only the messages from the current run. There's also a variant that returns JSON bytes, `new_messages_json", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-438b652bbcaf7fa2a816d183d1cd4b54", "__created_at__": 1744231651.420514, "content": "result` object.\n\nBoth `RunResult`\n(returned by `Agent.run`, `Agent.run_sync`)\nand `StreamedRunResult` (returned by `Agent.run_stream`) have the following methods:\n\n* `all_messages()`: returns all messages, including messages from prior runs. There's also a variant that returns JSON bytes, `all_messages_json()`.\n* `new_messages()`: returns only the messages from the current run. There's also a variant that returns JSON bytes, `new_messages_json()`.\n\nStreamedRunResult and complete messages\n\nOn `StreamedRunResult`, the messages returned from these methods will only include the final result message once the stream has finished.\n\nE.g. you've awaited one of the following coroutines:\n\n* `StreamedRunResult.stream()`\n* `StreamedRunResult.stream_text()`\n* `StreamedRunResult.stream_structured()`\n* `StreamedRunResult.get_data()`\n\n**Note:** The final result message will NOT be added to result messages if you use `.stream_text(delta=True)` since in this case the result content is never built as one string.\n\nExample of accessing methods on a `RunResult` :\n\nrun\\_result\\_messages.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\nresult = agent.run_sync('Tell me a joke.')\nprint(result.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\n\n# all messages from the run\nprint(result.all_messages())\n\"\"\"\n[\n    ModelRequest(\n        parts=[\n            SystemPromptPart(\n                content='Be a helpful assistant.',\n                timestamp=datetime.datetime(...),\n                dynamic_ref=None,\n                part_kind='system-prompt',\n            ),\n            UserPromptPart(\n                content='Tell me a joke.',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            ),\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            TextPart(\n                content='Did you hear about the toothpaste scandal? They called it Colgate.',\n                part_kind='text',\n            )\n        ],\n        model_name='gpt-4o',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n]\n\"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nExample of accessing methods on a `StreamedRunResult` :\n\nstreamed\\_run\\_result\\_messages.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\n\nasync def main():\n    async with agent.run_stream('Tell me a joke.') as result:\n        # incomplete messages before the stream finishes\n        print(result.all_messages())\n        \"\"\"\n        [\n            ModelRequest(\n                parts=[\n                    SystemPromptPart(\n                        content='Be a helpful assistant.',\n                        timestamp=datetime.datetime(...),\n                        dynamic_ref=None,\n                        part_kind='system-prompt',\n                    ),\n                    UserPromptPart(\n                        content='Tell me a joke.',\n                        timestamp=datetime.datetime(...),\n                        part_kind='user-prompt',\n                    ),\n                ],\n                kind='request',\n            )\n        ]\n        \"\"\"\n\n        async for text in result.stream_text():\n            print(text)\n            #> Did you hear\n            #> Did you hear about the toothpaste\n            #> Did you hear about the toothpaste scandal? They called\n            #> Did you hear about the toothpaste scandal? They called it Colgate.\n\n        # complete messages once the stream finishes\n        print(result.all_messages())\n        \"\"\"\n        [\n            ModelRequest(\n                parts=[\n                    SystemPromptPart(\n                        content='Be a helpful assistant.',\n                        timestamp=datetime.datetime(...),\n                        dynamic_ref=None,\n                        part_kind='system-prompt',\n                    ),\n                    UserPromptPart(\n                        content='Tell me a joke.',\n                        timestamp=datetime.datetime(...),\n                        part_kind='user-prompt',\n                    ),\n                ],\n                kind='request',\n            ),\n            ModelResponse(\n                parts=[\n                    TextPart(\n                        content='Did you hear about the toothpaste scandal? They called it Colgate.',\n                        part_kind='text',\n                    )\n                ],\n                model_name='gpt-4o',\n                timestamp=datetime.datetime(...),\n                kind='response',\n            ),\n        ]\n        \"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\n### Using Messages as Input for Further Agent Runs\n\nThe primary use of message histories in PydanticAI is to maintain context across multiple agent runs.\n\nTo use existing messages in a run, pass them to the `message_history` parameter of\n`Agent.run`, `Agent.run_sync` or\n`Agent.run_stream`.\n\nIf `message_history` is set and not empty, a new system prompt is not generated — we assume the existing message history includes a system prompt.\n\nReusing messages in a conversation\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\nresult1 = agent.run_sync('Tell me a joke.')\nprint(result1.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\n\nresult2 = agent.run_sync('Explain?', message_history=result1.new_messages())\nprint(result2.data)\n#> This is an excellent joke invented by Samuel Colvin, it needs no explanation.\n\nprint(result2.all_messages())\n\"\"\"\n[\n    ModelRequest(\n        parts=[\n            SystemPromptPart(\n                content='Be a helpful assistant.',\n                timestamp=datetime.datetime(...),\n                dynamic_ref=None,\n                part_kind='system-prompt',\n            ),\n            UserPromptPart(\n                content='Tell me a joke.',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            ),\n        ],", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-6c1f859347bcf0df691e8fe2fde806fa", "__created_at__": 1744231651.420514, "content": ".data)\n#> This is an excellent joke invented by Samuel Colvin, it needs no explanation.\n\nprint(result2.all_messages())\n\"\"\"\n[\n    ModelRequest(\n        parts=[\n            SystemPromptPart(\n                content='Be a helpful assistant.',\n                timestamp=datetime.datetime(...),\n                dynamic_ref=None,\n                part_kind='system-prompt',\n            ),\n            UserPromptPart(\n                content='Tell me a joke.',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            ),\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            TextPart(\n                content='Did you hear about the toothpaste scandal? They called it Colgate.',\n                part_kind='text',\n            )\n        ],\n        model_name='gpt-4o',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n    ModelRequest(\n        parts=[\n            UserPromptPart(\n                content='Explain?',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            )\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            TextPart(\n                content='This is an excellent joke invented by Samuel Colvin, it needs no explanation.',\n                part_kind='text',\n            )\n        ],\n        model_name='gpt-4o',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n]\n\"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nStoring and loading messages (to JSON)\n--------------------------------------\n\nWhile maintaining conversation state in memory is enough for many applications, often times you may want to store the messages history of an agent run on disk or in a database. This might be for evals, for sharing data between Python and JavaScript/TypeScript, or any number of other use cases.\n\nThe intended way to do this is using a `TypeAdapter`.\n\nWe export `ModelMessagesTypeAdapter` that can be used for this, or you can create your own.\n\nHere's an example showing how:\n\nserialize messages to json\n```\nfrom pydantic_core import to_jsonable_python\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.messages import ModelMessagesTypeAdapter  # (1)!\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\nresult1 = agent.run_sync('Tell me a joke.')\nhistory_step_1 = result1.all_messages()\nas_python_objects = to_jsonable_python(history_step_1)  # (2)!\nsame_history_as_step_1 = ModelMessagesTypeAdapter.validate_python(as_python_objects)\n\nresult2 = agent.run_sync(  # (3)!\n    'Tell me a different joke.', message_history=same_history_as_step_1\n)\n\n```\n\n1. Alternatively, you can create a `TypeAdapter` from scratch:\n   ```\n   from pydantic import TypeAdapter\n   from pydantic_ai.messages import ModelMessage\n   ModelMessagesTypeAdapter = TypeAdapter(list[ModelMessage])\n   \n   ```\n2. Alternatively you can serialize to/from JSON directly:\n   ```\n   from pydantic_core import to_json\n   ...\n   as_json_objects = to_json(history_step_1)\n   same_history_as_step_1 = ModelMessagesTypeAdapter.validate_json(as_json_objects)\n   \n   ```\n3. You can now continue the conversation with history `same_history_as_step_1` despite creating a new agent run.\n\n*(This example is complete, it can be run \"as is\")*\n\nOther ways of using messages\n----------------------------\n\nSince messages are defined by simple dataclasses, you can manually create and manipulate, e.g. for testing.\n\nThe message format is independent of the model used, so you can use messages in different agents, or the same agent with different models.\n\nIn the example below, we reuse the message from the first agent run, which uses the `openai:gpt-4o` model, in a second agent run using the `google-gla:gemini-1.5-pro` model.\n\nReusing messages with a different model\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o', system_prompt='Be a helpful assistant.')\n\nresult1 = agent.run_sync('Tell me a joke.')\nprint(result1.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\n\nresult2 = agent.run_sync(\n    'Explain?',\n    model='google-gla:gemini-1.5-pro',\n    message_history=result1.new_messages(),\n)\nprint(result2.data)\n#> This is an excellent joke invented by Samuel Colvin, it needs no explanation.\n\nprint(result2.all_messages())\n\"\"\"\n[\n    ModelRequest(\n        parts=[\n            SystemPromptPart(\n                content='Be a helpful assistant.',\n                timestamp=datetime.datetime(...),\n                dynamic_ref=None,\n                part_kind='system-prompt',\n            ),\n            UserPromptPart(\n                content='Tell me a joke.',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            ),\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            TextPart(\n                content='Did you hear about the toothpaste scandal? They called it Colgate.',\n                part_kind='text',\n            )\n        ],\n        model_name='gpt-4o',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n    ModelRequest(\n        parts=[\n            UserPromptPart(\n                content='Explain?',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            )\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            TextPart(\n                content='This is an excellent joke invented by Samuel Colvin, it needs no explanation.',\n                part_kind='text',\n            )\n        ],\n        model_name='gemini-1.5-pro',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-0517903d60beb732d23023e1a1755b2e", "__created_at__": 1744231651.420514, "content": "UserPromptPart(\n                content='Explain?',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            )\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            TextPart(\n                content='This is an excellent joke invented by Samuel Colvin, it needs no explanation.',\n                part_kind='text',\n            )\n        ],\n        model_name='gemini-1.5-pro',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n]\n\"\"\"\n\n```\n\nExamples\n--------\n\nFor a more complete example of using messages in conversations, see the [chat app](../examples/chat-app/) example.\n\n\n\nPydanticAI is Model-agnostic and has built in support for the following model providers:\n\n* [OpenAI](#openai)\n* [Anthropic](#anthropic)\n* Gemini via two different APIs: [Generative Language API](#gemini) and [VertexAI API](#gemini-via-vertexai)\n* [Ollama](#ollama)\n* [Groq](#groq)\n* [Mistral](#mistral)\n* [Cohere](#cohere)\n* [Bedrock](#bedrock)\n\nSee [OpenAI-compatible models](#openai-compatible-models) for more examples on how to use models such as [OpenRouter](#openrouter), and [Grok (xAI)](#grok-xai) that support the OpenAI SDK.\n\nYou can also [add support for other models](#implementing-custom-models).\n\nPydanticAI also comes with [`TestModel`](../api/models/test/) and [`FunctionModel`](../api/models/function/) for testing and development.\n\nTo use each model provider, you need to configure your local environment and make sure you have the right packages installed.\n\nModels, Interfaces, and Providers\n---------------------------------\n\nPydanticAI uses a few key terms to describe how it interacts with different LLMs:\n\n* **Model**: This refers to the specific LLM model you want to handle your requests (e.g., `gpt-4o`, `claude-3-5-sonnet-latest`,\n  `gemini-1.5-flash`). It's the \"brain\" that processes your prompts and generates responses. You specify the\n  *Model* as a parameter to the *Interface*.\n* **Interface**: This refers to a PydanticAI class used to make requests following a specific LLM API\n  (generally by wrapping a vendor-provided SDK, like the `openai` python SDK). These classes implement a\n  vendor-SDK-agnostic API, ensuring a single PydanticAI agent is portable to different LLM vendors without\n  any other code changes just by swapping out the *Interface* it uses. Currently, interface classes are named\n  roughly in the format `<VendorSdk>Model`, for example, we have `OpenAIModel`, `AnthropicModel`, `GeminiModel`,\n  etc. These `Model` classes will soon be renamed to `<VendorSdk>Interface` to reflect this terminology better.\n* **Provider**: This refers to *Interface*-specific classes which handle the authentication and connections to an LLM vendor.\n  Passing a non-default *Provider* as a parameter to an *Interface* is how you can ensure that your agent will make\n  requests to a specific endpoint, or make use of a specific approach to authentication (e.g., you can use Vertex-specific\n  auth with the `GeminiModel` by way of the `VertexProvider`). In particular, this is how you can make use of an AI gateway,\n  or an LLM vendor that offers API compatibility with the vendor SDK used by an existing interface (such as `OpenAIModel`).\n\nIn short, you select a *model*, PydanticAI uses the appropriate *interface* class, and the *provider* handles the\nconnection and authentication to the underlying service.\n\nOpenAI\n------\n\n### Install\n\nTo use OpenAI models, you need to either install [`pydantic-ai`](../install/), or install [`pydantic-ai-slim`](../install/#slim-install) with the `openai` optional group:\n\n```\npip install \"pydantic-ai-slim[openai]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[openai]\"\n\n```\n\n\n\n### Configuration\n\nTo use `OpenAIModel` through their main API, go to [platform.openai.com](https://platform.openai.com/) and follow your nose until you find the place to generate an API key.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport OPENAI_API_KEY='your-api-key'\n\n```\n\nYou can then use `OpenAIModel` by name:\n\nopenai\\_model\\_by\\_name.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\nopenai\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\n\nmodel = OpenAIModel('gpt-4o')\nagent = Agent(model)\n...\n\n```\n\nBy default, the `OpenAIModel` uses the `OpenAIProvider`\nwith the `base_url` set to `https://api.openai.com/v1`.\n\n### `provider` argument\n\nYou can provide a custom `Provider` via the `provider` argument:\n\nopenai\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf", "__created_at__": 1744231651.420514, "content": "By default, the `OpenAIModel` uses the `OpenAIProvider`\nwith the `base_url` set to `https://api.openai.com/v1`.\n\n### `provider` argument\n\nYou can provide a custom `Provider` via the `provider` argument:\n\nopenai\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nmodel = OpenAIModel('gpt-4o', provider=OpenAIProvider(api_key='your-api-key'))\nagent = Agent(model)\n...\n\n```\n### Custom OpenAI Client\n\n`OpenAIProvider` also accepts a custom `AsyncOpenAI` client via the\n`openai_client` parameter, so you can customise the\n`organization`, `project`, `base_url` etc. as defined in the [OpenAI API docs](https://platform.openai.com/docs/api-reference).\n\nYou could also use the [`AsyncAzureOpenAI`](https://learn.microsoft.com/en-us/azure/ai-services/openai/how-to/switching-endpoints)\nclient to use the Azure OpenAI API.\n\nopenai\\_azure.py\n```\nfrom openai import AsyncAzureOpenAI\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nclient = AsyncAzureOpenAI(\n    azure_endpoint='...',\n    api_version='2024-07-01-preview',\n    api_key='your-api-key',\n)\n\nmodel = OpenAIModel(\n    'gpt-4o',\n    provider=OpenAIProvider(openai_client=client),\n)\nagent = Agent(model)\n...\n\n```\n### OpenAI Responses API\n\nPydanticAI also supports OpenAI's [Responses API](https://platform.openai.com/docs/api-reference/responses) through the `OpenAIResponsesModel` class.\n\nopenai\\_responses\\_model.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIResponsesModel\n\nmodel = OpenAIResponsesModel('gpt-4o')\nagent = Agent(model)\n...\n\n```\n\nThe Responses API has built-in tools that you can use instead of building your own:\n\n* [Web search](https://platform.openai.com/docs/guides/tools-web-search): allow models to search the web for the latest information before generating a response.\n* [File search](https://platform.openai.com/docs/guides/tools-file-search): allow models to search your files for relevant information before generating a response.\n* [Computer use](https://platform.openai.com/docs/guides/tools-computer-use): allow models to use a computer to perform tasks on your behalf.\n\nYou can use the `OpenAIResponsesModelSettings`\nclass to make use of those built-in tools:\n\nopenai\\_responses\\_model\\_settings.py\n```\nfrom openai.types.responses import WebSearchToolParam  # (1)!\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIResponsesModel, OpenAIResponsesModelSettings\n\nmodel_settings = OpenAIResponsesModelSettings(\n    openai_builtin_tools=[WebSearchToolParam(type='web_search_preview')],\n)\nmodel = OpenAIResponsesModel('gpt-4o')\nagent = Agent(model=model, model_settings=model_settings)\n\nresult = agent.run_sync('What is the weather in Tokyo?')\nprint(result.data)\n\"\"\"\nAs of 7:48 AM on Wednesday, April 2, 2025, in Tokyo, Japan, the weather is cloudy with a temperature of 53°F (12°C).\n\"\"\"\n\n```\n\n1. The file search tool and computer use tool can also be imported from `openai.types.responses`.\n\nYou can learn more about the differences between the Responses API and Chat Completions API in the [OpenAI API docs](https://platform.openai.com/docs/guides/responses-vs-chat-completions).\n\nAnthropic\n---------\n\n### Install\n\nTo use `AnthropicModel` models, you need to either install [`pydantic-ai`](../install/), or install [`pydantic-ai-slim`](../install/#slim-install) with the `anthropic` optional group:\n\n```\npip install \"pydantic-ai-slim[anthropic]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[anthropic]\"\n\n```\n\n\n\n### Configuration\n\nTo use [Anthropic](https://anthropic.com) through their API, go to [console.anthropic.com/settings/keys](https://console.anthropic.com/settings/keys) to generate an API key.\n\n`AnthropicModelName` contains a list of available Anthropic models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport ANTHROPIC_API_KEY='your-api-key'\n\n```\n\nYou can then use `AnthropicModel` by name:\n\nanthropic\\_model\\_by\\_name.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('anthropic:claude-3-5-sonnet-latest')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\nanthropic\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.anthropic import AnthropicModel\n\nmodel = AnthropicModel('claude-3-5-sonnet-latest')\nagent = Agent(model)\n...\n\n```\n### `provider` argument\n\nYou can provide a custom `Provider` via the `provider` argument:\n\nanthropic\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.anthropic import", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a4e01bd25dcff46059903d23d9198862", "__created_at__": 1744231651.420514, "content": "```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.anthropic import AnthropicModel\n\nmodel = AnthropicModel('claude-3-5-sonnet-latest')\nagent = Agent(model)\n...\n\n```\n### `provider` argument\n\nYou can provide a custom `Provider` via the `provider` argument:\n\nanthropic\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.anthropic import AnthropicModel\nfrom pydantic_ai.providers.anthropic import AnthropicProvider\n\nmodel = AnthropicModel(\n    'claude-3-5-sonnet-latest', provider=AnthropicProvider(api_key='your-api-key')\n)\nagent = Agent(model)\n...\n\n```\n### Custom HTTP Client\n\nYou can customize the `AnthropicProvider` with a custom `httpx.AsyncClient`:\n\nanthropic\\_model\\_custom\\_provider.py\n```\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.anthropic import AnthropicModel\nfrom pydantic_ai.providers.anthropic import AnthropicProvider\n\ncustom_http_client = AsyncClient(timeout=30)\nmodel = AnthropicModel(\n    'claude-3-5-sonnet-latest',\n    provider=AnthropicProvider(api_key='your-api-key', http_client=custom_http_client),\n)\nagent = Agent(model)\n...\n\n```\n\nGemini\n------\n\n### Install\n\nTo use `GeminiModel` models, you just need to install [`pydantic-ai`](../install/) or [`pydantic-ai-slim`](../install/#slim-install), no extra dependencies are required.\n\n### Configuration\n\n`GeminiModel` let's you use the Google's Gemini models through their [Generative Language API](https://ai.google.dev/api/all-methods), `generativelanguage.googleapis.com`.\n\n`GeminiModelName` contains a list of available Gemini models that can be used through this interface.\n\nTo use `GeminiModel`, go to [aistudio.google.com](https://aistudio.google.com/apikey) and select \"Create API key\".\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport GEMINI_API_KEY=your-api-key\n\n```\n\nYou can then use `GeminiModel` by name:\n\ngemini\\_model\\_by\\_name.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('google-gla:gemini-2.0-flash')\n...\n\n```\n\nNote\n\nThe `google-gla` provider prefix represents the [Google **G**enerative **L**anguage **A**PI](https://ai.google.dev/api/all-methods) for `GeminiModel`s.\n`google-vertex` is used with [Vertex AI](https://cloud.google.com/vertex-ai/generative-ai/docs/learn/models).\n\nOr initialise the model directly with just the model name and provider:\n\ngemini\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\n\nmodel = GeminiModel('gemini-2.0-flash', provider='google-gla')\nagent = Agent(model)\n...\n\n```\n### `provider` argument\n\nYou can provide a custom `Provider` via the `provider` argument:\n\ngemini\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\nfrom pydantic_ai.providers.google_gla import GoogleGLAProvider\n\nmodel = GeminiModel(\n    'gemini-2.0-flash', provider=GoogleGLAProvider(api_key='your-api-key')\n)\nagent = Agent(model)\n...\n\n```\n\nYou can also customize the `GoogleGLAProvider` with a custom `http_client`:\ngemini\\_model\\_custom\\_provider.py\n```\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\nfrom pydantic_ai.providers.google_gla import GoogleGLAProvider\n\ncustom_http_client = AsyncClient(timeout=30)\nmodel = GeminiModel(\n    'gemini-2.0-flash',\n    provider=GoogleGLAProvider(api_key='your-api-key', http_client=custom_http_client),\n)\nagent = Agent(model)\n...\n\n```\n\n\nGemini via VertexAI\n-------------------\n\nIf you are an enterprise user, you should use the `google-vertex` provider with `GeminiModel` which uses the `*-aiplatform.googleapis.com` API.\n\n`GeminiModelName` contains a list of available Gemini models that can be used through this interface.\n\n### Install\n\nTo use the `google-vertex` provider with `GeminiModel`, you need to either install\n[`pydantic-ai`](../install/), or install [`pydantic-ai-slim`](../install/#slim-install) with the `vertexai` optional group:\n\n```\npip install \"pydantic-ai-slim[vertexai]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[vertexai]\"\n\n```\n\n\n\n### Configuration\n\nThis interface has a number of advantages over `generativelanguage.googleapis.com` documented above:\n\n1. The VertexAI API comes with more enterprise readiness guarantees.\n2. You can\n   [purchase provisioned throughput](https://cloud.google.com/vertex-ai/generative-ai/docs/provisioned-throughput#purchase-provisioned-throughput)\n   with VertexAI to guarantee capacity.\n3. If you're running PydanticAI inside GCP, you don't need to set up authentication, it should \"just work\".\n4. You can decide which region to use, which might", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9ff315bedb1e055a20af27b9db87b652", "__created_at__": 1744231651.420514, "content": "documented above:\n\n1. The VertexAI API comes with more enterprise readiness guarantees.\n2. You can\n   [purchase provisioned throughput](https://cloud.google.com/vertex-ai/generative-ai/docs/provisioned-throughput#purchase-provisioned-throughput)\n   with VertexAI to guarantee capacity.\n3. If you're running PydanticAI inside GCP, you don't need to set up authentication, it should \"just work\".\n4. You can decide which region to use, which might be important from a regulatory perspective,\n   and might improve latency.\n\nThe big disadvantage is that for local development you may need to create and configure a \"service account\", which I've found extremely painful to get right in the past.\n\nWhichever way you authenticate, you'll need to have VertexAI enabled in your GCP account.\n\n### Application default credentials\n\nLuckily if you're running PydanticAI inside GCP, or you have the [`gcloud` CLI](https://cloud.google.com/sdk/gcloud) installed and configured, you should be able to use `VertexAIModel` without any additional setup.\n\nTo use `VertexAIModel`, with [application default credentials](https://cloud.google.com/docs/authentication/application-default-credentials) configured (e.g. with `gcloud`), you can simply use:\n\nvertexai\\_application\\_default\\_credentials.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\n\nmodel = GeminiModel('gemini-2.0-flash', provider='google-vertex')\nagent = Agent(model)\n...\n\n```\n\nInternally this uses [`google.auth.default()`](https://google-auth.readthedocs.io/en/master/reference/google.auth.html) from the `google-auth` package to obtain credentials.\n\nWon't fail until `agent.run()`\n\nBecause `google.auth.default()` requires network requests and can be slow, it's not run until you call `agent.run()`.\n\nYou may also need to pass the `project_id` argument to `GoogleVertexProvider` if application default credentials don't set a project, if you pass `project_id` and it conflicts with the project set by application default credentials, an error is raised.\n\n### Service account\n\nIf instead of application default credentials, you want to authenticate with a service account, you'll need to create a service account, add it to your GCP project (note: AFAIK this step is necessary even if you created the service account within the project), give that service account the \"Vertex AI Service Agent\" role, and download the service account JSON file.\n\nOnce you have the JSON file, you can use it thus:\n\nvertexai\\_service\\_account.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\nfrom pydantic_ai.providers.google_vertex import GoogleVertexProvider\n\nmodel = GeminiModel(\n    'gemini-2.0-flash',\n    provider=GoogleVertexProvider(service_account_file='path/to/service-account.json'),\n)\nagent = Agent(model)\n...\n\n```\n\nAlternatively, if you already have the service account information in memory, you can pass it as a dictionary:\n\nvertexai\\_service\\_account.py\n```\nimport json\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\nfrom pydantic_ai.providers.google_vertex import GoogleVertexProvider\n\nservice_account_info = json.loads(\n    '{\"type\": \"service_account\", \"project_id\": \"my-project-id\"}'\n)\nmodel = GeminiModel(\n    'gemini-2.0-flash',\n    provider=GoogleVertexProvider(service_account_info=service_account_info),\n)\nagent = Agent(model)\n...\n\n```\n### Customising region\n\nWhichever way you authenticate, you can specify which region requests will be sent to via the `region` argument.\n\nUsing a region close to your application can improve latency and might be important from a regulatory perspective.\n\nvertexai\\_region.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\nfrom pydantic_ai.providers.google_vertex import GoogleVertexProvider\n\nmodel = GeminiModel(\n    'gemini-2.0-flash', provider=GoogleVertexProvider(region='asia-east1')\n)\nagent = Agent(model)\n...\n\n```\n\nYou can also customize the `GoogleVertexProvider` with a custom `http_client`:\nvertexai\\_custom\\_provider.py\n```\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.gemini import GeminiModel\nfrom pydantic_ai.providers.google_vertex import GoogleVertexProvider\n\ncustom_http_client = AsyncClient(timeout=30)\nmodel = GeminiModel(\n    'gemini-2.0-flash',\n    provider=GoogleVertexProvider(region='asia-east1', http_client=custom_http_client),\n)\nagent = Agent(model)\n...\n\n```\n\n\nGroq\n----\n\n### Install\n\nTo use `GroqModel`, you need to either install [`pydantic-ai`](../install/), or install [`pydantic-ai-slim`](../install/#slim-install) with the `groq` optional group:\n\n```\npip install \"pydantic-ai-slim[groq]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[groq]\"\n\n```\n\n\n\n### Configuration\n\nTo use [Groq](https://groq.com/) through their API, go to [console.groq.com/keys](https://console.groq.com/keys) and follow your nose until you find the place to generate an API key.\n\n`GroqModelName` contains a list of available Groq models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport GROQ_API_KEY='your-api", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-96f0c03aabc444033deba6ca7c09ac6a", "__created_at__": 1744231651.420514, "content": "```\n\n\n\n### Configuration\n\nTo use [Groq](https://groq.com/) through their API, go to [console.groq.com/keys](https://console.groq.com/keys) and follow your nose until you find the place to generate an API key.\n\n`GroqModelName` contains a list of available Groq models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport GROQ_API_KEY='your-api-key'\n\n```\n\nYou can then use `GroqModel` by name:\n\ngroq\\_model\\_by\\_name.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('groq:llama-3.3-70b-versatile')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\ngroq\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.groq import GroqModel\n\nmodel = GroqModel('llama-3.3-70b-versatile')\nagent = Agent(model)\n...\n\n```\n### `provider` argument\n\nYou can provide a custom `Provider` via the\n`provider` argument:\n\ngroq\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.groq import GroqModel\nfrom pydantic_ai.providers.groq import GroqProvider\n\nmodel = GroqModel(\n    'llama-3.3-70b-versatile', provider=GroqProvider(api_key='your-api-key')\n)\nagent = Agent(model)\n...\n\n```\n\nYou can also customize the `GroqProvider` with a\ncustom `httpx.AsyncHTTPClient`:\n\ngroq\\_model\\_custom\\_provider.py\n```\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.groq import GroqModel\nfrom pydantic_ai.providers.groq import GroqProvider\n\ncustom_http_client = AsyncClient(timeout=30)\nmodel = GroqModel(\n    'llama-3.3-70b-versatile',\n    provider=GroqProvider(api_key='your-api-key', http_client=custom_http_client),\n)\nagent = Agent(model)\n...\n\n```\n\nMistral\n-------\n\n### Install\n\nTo use `MistralModel`, you need to either install [`pydantic-ai`](../install/), or install [`pydantic-ai-slim`](../install/#slim-install) with the `mistral` optional group:\n\n```\npip install \"pydantic-ai-slim[mistral]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[mistral]\"\n\n```\n\n\n\n### Configuration\n\nTo use [Mistral](https://mistral.ai) through their API, go to [console.mistral.ai/api-keys/](https://console.mistral.ai/api-keys/) and follow your nose until you find the place to generate an API key.\n\n`LatestMistralModelNames` contains a list of the most popular Mistral models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport MISTRAL_API_KEY='your-api-key'\n\n```\n\nYou can then use `MistralModel` by name:\n\nmistral\\_model\\_by\\_name.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('mistral:mistral-large-latest')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\nmistral\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.mistral import MistralModel\n\nmodel = MistralModel('mistral-small-latest')\nagent = Agent(model)\n...\n\n```\n### `provider` argument\n\nYou can provide a custom `Provider` via the\n`provider` argument:\n\ngroq\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.mistral import MistralModel\nfrom pydantic_ai.providers.mistral import MistralProvider\n\nmodel = MistralModel(\n    'mistral-large-latest', provider=MistralProvider(api_key='your-api-key')\n)\nagent = Agent(model)\n...\n\n```\n\nYou can also customize the provider with a custom `httpx.AsyncHTTPClient`:\n\ngroq\\_model\\_custom\\_provider.py\n```\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.mistral import MistralModel\nfrom pydantic_ai.providers.mistral import MistralProvider\n\ncustom_http_client = AsyncClient(timeout=30)\nmodel = MistralModel(\n    'mistral-large-latest',\n    provider=MistralProvider(api_key='your-api-key', http_client=custom_http_client),\n)\nagent = Agent(model)\n...\n\n```\n\nCohere\n------\n\n### Install\n\nTo use `CohereModel`, you need to either install [`pydantic-ai`](../install/), or install [`pydantic-ai-slim`](../install/#slim-install) with the `cohere` optional group:\n\n```\npip install \"pydantic-ai-slim[cohere]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[cohere]\"\n\n```\n\n\n\n### Configuration\n\nTo use [Cohere](https://cohere.com/) through their API, go to [dashboard.cohere.com/api-keys](https://dashboard.cohere.com/api-keys) and follow your nose until you find the place to generate an API key", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-cd65bf9ab107ffd8e31233d6347c1d1d", "__created_at__": 1744231651.420514, "content": "`cohere` optional group:\n\n```\npip install \"pydantic-ai-slim[cohere]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[cohere]\"\n\n```\n\n\n\n### Configuration\n\nTo use [Cohere](https://cohere.com/) through their API, go to [dashboard.cohere.com/api-keys](https://dashboard.cohere.com/api-keys) and follow your nose until you find the place to generate an API key.\n\n`CohereModelName` contains a list of the most popular Cohere models.\n\n### Environment variable\n\nOnce you have the API key, you can set it as an environment variable:\n\n```\nexport CO_API_KEY='your-api-key'\n\n```\n\nYou can then use `CohereModel` by name:\n\ncohere\\_model\\_by\\_name.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('cohere:command')\n...\n\n```\n\nOr initialise the model directly with just the model name:\n\ncohere\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.cohere import CohereModel\n\nmodel = CohereModel('command')\nagent = Agent(model)\n...\n\n```\n### `provider` argument\n\nYou can provide a custom `Provider` via the `provider` argument:\n\ncohere\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.cohere import CohereModel\nfrom pydantic_ai.providers.cohere import CohereProvider\n\nmodel = CohereModel('command', provider=CohereProvider(api_key='your-api-key'))\nagent = Agent(model)\n...\n\n```\n\nYou can also customize the `CohereProvider` with a custom `http_client`:\n\ncohere\\_model\\_custom\\_provider.py\n```\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.cohere import CohereModel\nfrom pydantic_ai.providers.cohere import CohereProvider\n\ncustom_http_client = AsyncClient(timeout=30)\nmodel = CohereModel(\n    'command',\n    provider=CohereProvider(api_key='your-api-key', http_client=custom_http_client),\n)\nagent = Agent(model)\n...\n\n```\n\nBedrock\n-------\n\n### Install\n\nTo use `BedrockConverseModel`, you need to either install [`pydantic-ai`](../install/), or install [`pydantic-ai-slim`](../install/#slim-install) with the `bedrock` optional group:\n\n```\npip install \"pydantic-ai-slim[bedrock]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[bedrock]\"\n\n```\n\n\n\n### Configuration\n\nTo use [AWS Bedrock](https://aws.amazon.com/bedrock/), you'll need an AWS account with Bedrock enabled and appropriate credentials. You can use either AWS credentials directly or a pre-configured boto3 client.\n\n`BedrockModelName` contains a list of available Bedrock models, including models from Anthropic, Amazon, Cohere, Meta, and Mistral.\n\n### Environment variables\n\nYou can set your AWS credentials as environment variables ([among other options](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/configuration.html#using-environment-variables):\n\n```\nexport AWS_ACCESS_KEY_ID='your-access-key'\nexport AWS_SECRET_ACCESS_KEY='your-secret-key'\nexport AWS_DEFAULT_REGION='us-east-1'  # or your preferred region\n\n```\n\nYou can then use `BedrockConverseModel` by name:\n\nbedrock\\_model\\_by\\_name.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('bedrock:anthropic.claude-3-sonnet-20240229-v1:0')\n...\n\n```\n\nOr initialize the model directly with just the model name:\n\nbedrock\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.bedrock import BedrockConverseModel\n\nmodel = BedrockConverseModel('anthropic.claude-3-sonnet-20240229-v1:0')\nagent = Agent(model)\n...\n\n```\n### `provider` argument\n\nYou can provide a custom `BedrockProvider` via the `provider` argument. This is useful when you want to specify credentials directly or use a custom boto3 client:\n\nbedrock\\_model\\_provider.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.bedrock import BedrockConverseModel\nfrom pydantic_ai.providers.bedrock import BedrockProvider\n\n# Using AWS credentials directly\nmodel = BedrockConverseModel(\n    'anthropic.claude-3-sonnet-20240229-v1:0',\n    provider=BedrockProvider(\n        region_name='us-east-1',\n        aws_access_key_id='your-access-key',\n        aws_secret_access_key='your-secret-key',\n    ),\n)\nagent = Agent(model)\n...\n\n```\n\nYou can also pass a pre-configured boto3 client:\n\nbedrock\\_model\\_boto3.py\n```\nimport boto3\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.bedrock import BedrockConverseModel\nfrom pydantic_ai.providers.bedrock import BedrockProvider\n\n# Using a pre-configured boto3 client\nbedrock_client = boto3.client('bedrock-runtime', region_name='us-east-1')\nmodel = BedrockConverseModel(\n    'anthropic.claude-3-sonnet-20240229-v1:0',\n    provider=BedrockProvider(bedrock_client=bedrock", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ee3a2195c443994ca9561a9128e4ad0d", "__created_at__": 1744231651.420514, "content": "pydantic_ai.models.bedrock import BedrockConverseModel\nfrom pydantic_ai.providers.bedrock import BedrockProvider\n\n# Using a pre-configured boto3 client\nbedrock_client = boto3.client('bedrock-runtime', region_name='us-east-1')\nmodel = BedrockConverseModel(\n    'anthropic.claude-3-sonnet-20240229-v1:0',\n    provider=BedrockProvider(bedrock_client=bedrock_client),\n)\nagent = Agent(model)\n...\n\n```\n\nOpenAI-compatible Models\n------------------------\n\nMany of the models are compatible with OpenAI API, and thus can be used with `OpenAIModel` in PydanticAI.\nBefore getting started, check the [OpenAI](#openai) section for installation and configuration instructions.\n\nTo use another OpenAI-compatible API, you can make use of the `base_url`\nand `api_key` arguments from `OpenAIProvider`:\n\ndeepseek\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nmodel = OpenAIModel(\n    'model_name',\n    provider=OpenAIProvider(\n        base_url='https://<openai-compatible-api-endpoint>.com', api_key='your-api-key'\n    ),\n)\nagent = Agent(model)\n...\n\n```\n\nYou can also use the `provider` argument with a custom provider class like the `DeepSeekProvider`:\n\ndeepseek\\_model\\_init\\_provider\\_class.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.deepseek import DeepSeekProvider\n\nmodel = OpenAIModel(\n    'deepseek-chat',\n    provider=DeepSeekProvider(api_key='your-deepseek-api-key'),\n)\nagent = Agent(model)\n...\n\n```\n\nYou can also customize any provider with a custom `http_client`:\ndeepseek\\_model\\_init\\_provider\\_custom.py\n```\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.deepseek import DeepSeekProvider\n\ncustom_http_client = AsyncClient(timeout=30)\nmodel = OpenAIModel(\n    'deepseek-chat',\n    provider=DeepSeekProvider(\n        api_key='your-deepseek-api-key', http_client=custom_http_client\n    ),\n)\nagent = Agent(model)\n...\n\n```\n\n\n### Ollama\n\nTo use [Ollama](https://ollama.com/), you must first download the Ollama client, and then download a model using the [Ollama model library](https://ollama.com/library).\n\nYou must also ensure the Ollama server is running when trying to make requests to it. For more information, please see the [Ollama documentation](https://github.com/ollama/ollama/tree/main/docs).\n\n#### Example local usage\n\nWith `ollama` installed, you can run the server with the model you want to use:\n\nterminal-run-ollama\n```\nollama run llama3.2\n\n```\n\n(this will pull the `llama3.2` model if you don't already have it downloaded)\n\nThen run your code, here's a minimal example:\n\nollama\\_example.py\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\n\nclass CityLocation(BaseModel):\n    city: str\n    country: str\n\n\nollama_model = OpenAIModel(\n    model_name='llama3.2', provider=OpenAIProvider(base_url='http://localhost:11434/v1')\n)\nagent = Agent(ollama_model, result_type=CityLocation)\n\nresult = agent.run_sync('Where were the olympics held in 2012?')\nprint(result.data)\n#> city='London' country='United Kingdom'\nprint(result.usage())\n\"\"\"\nUsage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)\n\"\"\"\n\n```\n#### Example using a remote server\n\nollama\\_example\\_with\\_remote\\_server.py\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nollama_model = OpenAIModel(\n    model_name='qwen2.5-coder:7b',  # (1)!\n    provider=OpenAIProvider(base_url='http://192.168.1.74:11434/v1'),  # (2)!\n)\n\n\nclass CityLocation(BaseModel):\n    city: str\n    country: str\n\n\nagent = Agent(model=ollama_model, result_type=CityLocation)\n\nresult = agent.run_sync('Where were the olympics held in 2012?')\nprint(result.data)\n#> city='London' country='United Kingdom'\nprint(result.usage())\n\"\"\"\nUsage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)\n\"\"\"\n\n```\n\n1. The name of the model running on the remote server\n2. The url of the remote server\n\n### Azure AI Foundry\n\nIf you want to use [Azure AI Foundry](https://ai.azure.com/) as your provider, you can do so by using the\n`AzureProvider` class.\n\nazure\\_provider\\_example.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c9a99acd51a50f5d69363aefdceadda8", "__created_at__": 1744231651.420514, "content": "=65, details=None)\n\"\"\"\n\n```\n\n1. The name of the model running on the remote server\n2. The url of the remote server\n\n### Azure AI Foundry\n\nIf you want to use [Azure AI Foundry](https://ai.azure.com/) as your provider, you can do so by using the\n`AzureProvider` class.\n\nazure\\_provider\\_example.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.azure import AzureProvider\n\nmodel = OpenAIModel(\n    'gpt-4o',\n    provider=AzureProvider(\n        azure_endpoint='your-azure-endpoint',\n        api_version='your-api-version',\n        api_key='your-api-key',\n    ),\n)\nagent = Agent(model)\n...\n\n```\n### OpenRouter\n\nTo use [OpenRouter](https://openrouter.ai), first create an API key at [openrouter.ai/keys](https://openrouter.ai/keys).\n\nOnce you have the API key, you can use it with the `OpenAIProvider`:\n\nopenrouter\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nmodel = OpenAIModel(\n    'anthropic/claude-3.5-sonnet',\n    provider=OpenAIProvider(\n        base_url='https://openrouter.ai/api/v1',\n        api_key='your-openrouter-api-key',\n    ),\n)\nagent = Agent(model)\n...\n\n```\n### Grok (xAI)\n\nGo to [xAI API Console](https://console.x.ai/) and create an API key.\nOnce you have the API key, you can use it with the `OpenAIProvider`:\n\ngrok\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nmodel = OpenAIModel(\n    'grok-2-1212',\n    provider=OpenAIProvider(base_url='https://api.x.ai/v1', api_key='your-xai-api-key'),\n)\nagent = Agent(model)\n...\n\n```\n### Perplexity\n\nFollow the Perplexity [getting started](https://docs.perplexity.ai/guides/getting-started)\nguide to create an API key. Then, you can query the Perplexity API with the following:\n\nperplexity\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nmodel = OpenAIModel(\n    'sonar-pro',\n    provider=OpenAIProvider(\n        base_url='https://api.perplexity.ai',\n        api_key='your-perplexity-api-key',\n    ),\n)\nagent = Agent(model)\n...\n\n```\n### Fireworks AI\n\nGo to [Fireworks.AI](https://fireworks.ai/) and create an API key in your account settings.\nOnce you have the API key, you can use it with the `OpenAIProvider`:\n\nfireworks\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nmodel = OpenAIModel(\n    'accounts/fireworks/models/qwq-32b',  # model library available at https://fireworks.ai/models\n    provider=OpenAIProvider(\n        base_url='https://api.fireworks.ai/inference/v1',\n        api_key='your-fireworks-api-key',\n    ),\n)\nagent = Agent(model)\n...\n\n```\n### Together AI\n\nGo to [Together.ai](https://www.together.ai/) and create an API key in your account settings.\nOnce you have the API key, you can use it with the `OpenAIProvider`:\n\ntogether\\_model\\_init.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.openai import OpenAIModel\nfrom pydantic_ai.providers.openai import OpenAIProvider\n\nmodel = OpenAIModel(\n    'meta-llama/Llama-3.3-70B-Instruct-Turbo-Free',  # model library available at https://www.together.ai/models\n    provider=OpenAIProvider(\n        base_url='https://api.together.xyz/v1',\n        api_key='your-together-api-key',\n    ),\n)\nagent = Agent(model)\n...\n\n```\n\nImplementing Custom Models\n--------------------------\n\nTo implement support for models not already supported, you will need to subclass the `Model` abstract base class.\n\nFor streaming, you'll also need to implement the following abstract base class:\n\n* `StreamedResponse`\n\nThe best place to start is to review the source code for existing implementations, e.g. [`OpenAIModel`](https://github.com/pydantic/pydantic-ai/blob/main/pydantic_ai_slim/pydantic_ai/models/openai.py).\n\nFor details on when we'll accept contributions adding new models to PydanticAI, see the [contributing guidelines](../contributing/#new-model-rules).\n\nFallback\n--------\n\nYou can use `FallbackModel` to attempt multiple models\nin sequence until one returns a successful result. Under the hood, PydanticAI automatically switches\nfrom one model to the next if the current model returns a 4xx or 5xx status code.\n\nIn the following example, the agent first makes a request to the OpenAI model (which fails due to an invalid API key),\nand then falls back to the Anthropic model.\n\nfallback\\_model", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4b67c94477ed4dea654a5de4c41af8ac", "__created_at__": 1744231651.420514, "content": "-rules).\n\nFallback\n--------\n\nYou can use `FallbackModel` to attempt multiple models\nin sequence until one returns a successful result. Under the hood, PydanticAI automatically switches\nfrom one model to the next if the current model returns a 4xx or 5xx status code.\n\nIn the following example, the agent first makes a request to the OpenAI model (which fails due to an invalid API key),\nand then falls back to the Anthropic model.\n\nfallback\\_model.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.anthropic import AnthropicModel\nfrom pydantic_ai.models.fallback import FallbackModel\nfrom pydantic_ai.models.openai import OpenAIModel\n\nopenai_model = OpenAIModel('gpt-4o')\nanthropic_model = AnthropicModel('claude-3-5-sonnet-latest')\nfallback_model = FallbackModel(openai_model, anthropic_model)\n\nagent = Agent(fallback_model)\nresponse = agent.run_sync('What is the capital of France?')\nprint(response.data)\n#> Paris\n\nprint(response.all_messages())\n\"\"\"\n[\n    ModelRequest(\n        parts=[\n            UserPromptPart(\n                content='What is the capital of France?',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            )\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[TextPart(content='Paris', part_kind='text')],\n        model_name='claude-3-5-sonnet-latest',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n]\n\"\"\"\n\n```\n\nThe `ModelResponse` message above indicates in the `model_name` field that the result was returned by the Anthropic model, which is the second model specified in the `FallbackModel`.\n\nNote\n\nEach model's options should be configured individually. For example, `base_url`, `api_key`, and custom clients should be set on each model itself, not on the `FallbackModel`.\n\nIn this next example, we demonstrate the exception-handling capabilities of `FallbackModel`.\nIf all models fail, a `FallbackExceptionGroup` is raised, which\ncontains all the exceptions encountered during the `run` execution.\n\nfallback\\_model\\_failure.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.exceptions import ModelHTTPError\nfrom pydantic_ai.models.anthropic import AnthropicModel\nfrom pydantic_ai.models.fallback import FallbackModel\nfrom pydantic_ai.models.openai import OpenAIModel\n\nopenai_model = OpenAIModel('gpt-4o')\nanthropic_model = AnthropicModel('claude-3-5-sonnet-latest')\nfallback_model = FallbackModel(openai_model, anthropic_model)\n\nagent = Agent(fallback_model)\ntry:\n    response = agent.run_sync('What is the capital of France?')\nexcept* ModelHTTPError as exc_group:\n    for exc in exc_group.exceptions:\n        print(exc)\n\n```\n\n\nSince [`except*`](https://docs.python.org/3/reference/compound_stmts.html#except-star) is only supported\nin Python 3.11+, we use the [`exceptiongroup`](https://github.com/agronholm/exceptiongroup) backport\npackage for earlier Python versions:\n\nfallback\\_model\\_failure.py\n```\nfrom exceptiongroup import catch\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.exceptions import ModelHTTPError\nfrom pydantic_ai.models.anthropic import AnthropicModel\nfrom pydantic_ai.models.fallback import FallbackModel\nfrom pydantic_ai.models.openai import OpenAIModel\n\n\ndef model_status_error_handler(exc_group: BaseExceptionGroup) -> None:\n    for exc in exc_group.exceptions:\n        print(exc)\n\n\nopenai_model = OpenAIModel('gpt-4o')\nanthropic_model = AnthropicModel('claude-3-5-sonnet-latest')\nfallback_model = FallbackModel(openai_model, anthropic_model)\n\nagent = Agent(fallback_model)\nwith catch({ModelHTTPError: model_status_error_handler}):\n    response = agent.run_sync('What is the capital of France?')\n\n```\n\n\n\nBy default, the `FallbackModel` only moves on to the next model if the current model raises a\n`ModelHTTPError`. You can customize this behavior by\npassing a custom `fallback_on` argument to the `FallbackModel` constructor.\n\n\n\nMulti-agent Applications\n========================\n\nThere are roughly four levels of complexity when building applications with PydanticAI:\n\n1. Single agent workflows — what most of the `pydantic_ai` documentation covers\n2. [Agent delegation](#agent-delegation) — agents using another agent via tools\n3. [Programmatic agent hand-off](#programmatic-agent-hand-off) — one agent runs, then application code calls another agent\n4. [Graph based control flow](../graph/) — for the most complex cases, a graph-based state machine can be used to control the execution of multiple agents\n\nOf course, you can combine multiple strategies in a single application.\n\nAgent delegation\n----------------\n\n\"Agent delegation\" refers to the scenario where an agent delegates work to another agent, then takes back control when the delegate agent (the agent called from within a tool) finishes.\n\nSince agents are stateless and designed to be global, you do not need to include the agent itself in agent [dependencies](../dependencies/).\n\nYou'll generally want to pass `ctx.usage` to the `usage` keyword argument of the delegate agent run so usage within that run counts towards the total usage of the parent agent run.\n\nMultiple models\n\nAgent delegation doesn't need to use the same model for each agent. If you choose to use different models within a run, calculating the monetary cost from the final `result.usage()`", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4994823cb969174acf1ac36fa20c35c2", "__created_at__": 1744231651.420514, "content": "designed to be global, you do not need to include the agent itself in agent [dependencies](../dependencies/).\n\nYou'll generally want to pass `ctx.usage` to the `usage` keyword argument of the delegate agent run so usage within that run counts towards the total usage of the parent agent run.\n\nMultiple models\n\nAgent delegation doesn't need to use the same model for each agent. If you choose to use different models within a run, calculating the monetary cost from the final `result.usage()` of the run will not be possible, but you can still use `UsageLimits` to avoid unexpected costs.\n\n\nagent\\_delegation\\_simple.py\n```\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.usage import UsageLimits\n\njoke_selection_agent = Agent(  # (1)!\n    'openai:gpt-4o',\n    system_prompt=(\n        'Use the `joke_factory` to generate some jokes, then choose the best. '\n        'You must return just a single joke.'\n    ),\n)\njoke_generation_agent = Agent(  # (2)!\n    'google-gla:gemini-1.5-flash', result_type=list[str]\n)\n\n\n@joke_selection_agent.tool\nasync def joke_factory(ctx: RunContext[None], count: int) -> list[str]:\n    r = await joke_generation_agent.run(  # (3)!\n        f'Please generate {count} jokes.',\n        usage=ctx.usage,  # (4)!\n    )\n    return r.data  # (5)!\n\n\nresult = joke_selection_agent.run_sync(\n    'Tell me a joke.',\n    usage_limits=UsageLimits(request_limit=5, total_tokens_limit=300),\n)\nprint(result.data)\n#> Did you hear about the toothpaste scandal? They called it Colgate.\nprint(result.usage())\n\"\"\"\nUsage(\n    requests=3, request_tokens=204, response_tokens=24, total_tokens=228, details=None\n)\n\"\"\"\n\n```\n\n1. The \"parent\" or controlling agent.\n2. The \"delegate\" agent, which is called from within a tool of the parent agent.\n3. Call the delegate agent from within a tool of the parent agent.\n4. Pass the usage from the parent agent to the delegate agent so the final `result.usage()` includes the usage from both agents.\n5. Since the function returns `list[str]`, and the `result_type` of `joke_generation_agent` is also `list[str]`, we can simply return `r.data` from the tool.\n\n*(This example is complete, it can be run \"as is\")*\n\nThe control flow for this example is pretty simple and can be summarised as follows:\n\n```\ngraph TD\n  START --> joke_selection_agent\n  joke_selection_agent --> joke_factory[\"joke_factory (tool)\"]\n  joke_factory --> joke_generation_agent\n  joke_generation_agent --> joke_factory\n  joke_factory --> joke_selection_agent\n  joke_selection_agent --> END\n```\n### Agent delegation and dependencies\n\nGenerally the delegate agent needs to either have the same [dependencies](../dependencies/) as the calling agent, or dependencies which are a subset of the calling agent's dependencies.\n\nInitializing dependencies\n\nWe say \"generally\" above since there's nothing to stop you initializing dependencies within a tool call and therefore using interdependencies in a delegate agent that are not available on the parent, this should often be avoided since it can be significantly slower than reusing connections etc. from the parent agent.\n\n\nagent\\_delegation\\_deps.py\n```\nfrom dataclasses import dataclass\n\nimport httpx\n\nfrom pydantic_ai import Agent, RunContext\n\n\n@dataclass\nclass ClientAndKey:  # (1)!\n    http_client: httpx.AsyncClient\n    api_key: str\n\n\njoke_selection_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=ClientAndKey,  # (2)!\n    system_prompt=(\n        'Use the `joke_factory` tool to generate some jokes on the given subject, '\n        'then choose the best. You must return just a single joke.'\n    ),\n)\njoke_generation_agent = Agent(\n    'gemini-1.5-flash',\n    deps_type=ClientAndKey,  # (4)!\n    result_type=list[str],\n    system_prompt=(\n        'Use the \"get_jokes\" tool to get some jokes on the given subject, '\n        'then extract each joke into a list.'\n    ),\n)\n\n\n@joke_selection_agent.tool\nasync def joke_factory(ctx: RunContext[ClientAndKey], count: int) -> list[str]:\n    r = await joke_generation_agent.run(\n        f'Please generate {count} jokes.',\n        deps=ctx.deps,  # (3)!\n        usage=ctx.usage,\n    )\n    return r.data\n\n\n@joke_generation_agent.tool  # (5)!\nasync def get_jokes(ctx: RunContext[ClientAndKey], count: int) -> str:\n    response = await ctx.deps.http_client.get(\n        'https://example.com',\n        params={'count': count},\n        headers={'Authorization': f'Bearer {ctx.deps.api_key}'},\n    )\n    response.raise_for_status()\n    return response.text\n\n\nasync def main():\n    async with httpx.AsyncClient() as client:\n        deps = ClientAndKey(client, 'foobar')\n        result = await joke_selection_agent.run('Tell me a joke.', deps=deps)\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n        print(result.usage())  # (6)!\n        \"\"\"\n        Usage(\n            requests=4,\n            request_tokens=309,\n            response_tokens=32,\n            total_tokens=341,\n            details=None,\n        )", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-400fc9d2bf52369f39b31d444b09d05a", "__created_at__": 1744231651.420514, "content": "() as client:\n        deps = ClientAndKey(client, 'foobar')\n        result = await joke_selection_agent.run('Tell me a joke.', deps=deps)\n        print(result.data)\n        #> Did you hear about the toothpaste scandal? They called it Colgate.\n        print(result.usage())  # (6)!\n        \"\"\"\n        Usage(\n            requests=4,\n            request_tokens=309,\n            response_tokens=32,\n            total_tokens=341,\n            details=None,\n        )\n        \"\"\"\n\n```\n\n1. Define a dataclass to hold the client and API key dependencies.\n2. Set the `deps_type` of the calling agent — `joke_selection_agent` here.\n3. Pass the dependencies to the delegate agent's run method within the tool call.\n4. Also set the `deps_type` of the delegate agent — `joke_generation_agent` here.\n5. Define a tool on the delegate agent that uses the dependencies to make an HTTP request.\n6. Usage now includes 4 requests — 2 from the calling agent and 2 from the delegate agent.\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nThis example shows how even a fairly simple agent delegation can lead to a complex control flow:\n\n```\ngraph TD\n  START --> joke_selection_agent\n  joke_selection_agent --> joke_factory[\"joke_factory (tool)\"]\n  joke_factory --> joke_generation_agent\n  joke_generation_agent --> get_jokes[\"get_jokes (tool)\"]\n  get_jokes --> http_request[\"HTTP request\"]\n  http_request --> get_jokes\n  get_jokes --> joke_generation_agent\n  joke_generation_agent --> joke_factory\n  joke_factory --> joke_selection_agent\n  joke_selection_agent --> END\n```\n\nProgrammatic agent hand-off\n---------------------------\n\n\"Programmatic agent hand-off\" refers to the scenario where multiple agents are called in succession, with application code and/or a human in the loop responsible for deciding which agent to call next.\n\nHere agents don't need to use the same deps.\n\nHere we show two agents used in succession, the first to find a flight and the second to extract the user's seat preference.\n\nprogrammatic\\_handoff.py\n```\nfrom typing import Literal, Union\n\nfrom pydantic import BaseModel, Field\nfrom rich.prompt import Prompt\n\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.messages import ModelMessage\nfrom pydantic_ai.usage import Usage, UsageLimits\n\n\nclass FlightDetails(BaseModel):\n    flight_number: str\n\n\nclass Failed(BaseModel):\n    \"\"\"Unable to find a satisfactory choice.\"\"\"\n\n\nflight_search_agent = Agent[None, Union[FlightDetails, Failed]](  # (1)!\n    'openai:gpt-4o',\n    result_type=Union[FlightDetails, Failed],  # type: ignore\n    system_prompt=(\n        'Use the \"flight_search\" tool to find a flight '\n        'from the given origin to the given destination.'\n    ),\n)\n\n\n@flight_search_agent.tool  # (2)!\nasync def flight_search(\n    ctx: RunContext[None], origin: str, destination: str\n) -> Union[FlightDetails, None]:\n    # in reality, this would call a flight search API or\n    # use a browser to scrape a flight search website\n    return FlightDetails(flight_number='AK456')\n\n\nusage_limits = UsageLimits(request_limit=15)  # (3)!\n\n\nasync def find_flight(usage: Usage) -> Union[FlightDetails, None]:  # (4)!\n    message_history: Union[list[ModelMessage], None] = None\n    for _ in range(3):\n        prompt = Prompt.ask(\n            'Where would you like to fly from and to?',\n        )\n        result = await flight_search_agent.run(\n            prompt,\n            message_history=message_history,\n            usage=usage,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, FlightDetails):\n            return result.data\n        else:\n            message_history = result.all_messages(\n                result_tool_return_content='Please try again.'\n            )\n\n\nclass SeatPreference(BaseModel):\n    row: int = Field(ge=1, le=30)\n    seat: Literal['A', 'B', 'C', 'D', 'E', 'F']\n\n\n# This agent is responsible for extracting the user's seat selection\nseat_preference_agent = Agent[None, Union[SeatPreference, Failed]](  # (5)!\n    'openai:gpt-4o',\n    result_type=Union[SeatPreference, Failed],  # type: ignore\n    system_prompt=(\n        \"Extract the user's seat preference. \"\n        'Seats A and F are window seats. '\n        'Row 1 is the front row and has extra leg room. '\n        'Rows 14, and 20 also have extra leg room. '\n    ),\n)\n\n\nasync def find_seat(usage: Usage) -> SeatPreference:  # (6)!\n    message_history: Union[list[ModelMessage], None] = None\n    while True:\n        answer = Prompt.ask('What seat would you like?')\n\n        result = await seat_preference_agent.run(\n            answer,\n            message_history=message_history,\n            usage=usage,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, SeatPreference):\n            return result.data\n        else:\n            print('Could not understand seat preference. Please try again.')\n            message_history = result.all_messages()\n\n\nasync def main():  # (7)!\n    usage: Usage = Usage()\n\n    opt_flight_details = await find_flight(usage)\n    if opt_flight_details is not None:\n        print(f'Flight found: {opt_flight_details", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-888f71ecd85f28d3bd82e9fee16e3882", "__created_at__": 1744231651.420514, "content": "usage,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, SeatPreference):\n            return result.data\n        else:\n            print('Could not understand seat preference. Please try again.')\n            message_history = result.all_messages()\n\n\nasync def main():  # (7)!\n    usage: Usage = Usage()\n\n    opt_flight_details = await find_flight(usage)\n    if opt_flight_details is not None:\n        print(f'Flight found: {opt_flight_details.flight_number}')\n        #> Flight found: AK456\n        seat_preference = await find_seat(usage)\n        print(f'Seat preference: {seat_preference}')\n        #> Seat preference: row=1 seat='A'\n\n```\n\n1. Define the first agent, which finds a flight. We use an explicit type annotation until [PEP-747](https://peps.python.org/pep-0747/) lands, see [structured results](../results/#structured-result-validation). We use a union as the result type so the model can communicate if it's unable to find a satisfactory choice; internally, each member of the union will be registered as a separate tool.\n2. Define a tool on the agent to find a flight. In this simple case we could dispense with the tool and just define the agent to return structured data, then search for a flight, but in more complex scenarios the tool would be necessary.\n3. Define usage limits for the entire app.\n4. Define a function to find a flight, which asks the user for their preferences and then calls the agent to find a flight.\n5. As with `flight_search_agent` above, we use an explicit type annotation to define the agent.\n6. Define a function to find the user's seat preference, which asks the user for their seat preference and then calls the agent to extract the seat preference.\n7. Now that we've put our logic for running each agent into separate functions, our main app becomes very simple.\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nThe control flow for this example can be summarised as follows:\n\n```\ngraph TB\n  START --> ask_user_flight[\"ask user for flight\"]\n\n  subgraph find_flight\n    flight_search_agent --> ask_user_flight\n    ask_user_flight --> flight_search_agent\n  end\n\n  flight_search_agent --> ask_user_seat[\"ask user for seat\"]\n  flight_search_agent --> END\n\n  subgraph find_seat\n    seat_preference_agent --> ask_user_seat\n    ask_user_seat --> seat_preference_agent\n  end\n\n  seat_preference_agent --> END\n```\n\nPydantic Graphs\n---------------\n\nSee the [graph](../graph/) documentation on when and how to use graphs.\n\nExamples\n--------\n\nThe following examples demonstrate how to use dependencies in PydanticAI:\n\n* [Flight booking](../examples/flight-booking/)\n\n\nResults are the final values returned from [running an agent](../agents/#running-agents).\nThe result values are wrapped in `AgentRunResult` and `StreamedRunResult` so you can access other data like usage of the run and [message history](../message-history/#accessing-messages-from-results)\n\nBoth `RunResult` and `StreamedRunResult` are generic in the data they wrap, so typing information about the data returned by the agent is preserved.\n\nolympics.py\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\n\n\nclass CityLocation(BaseModel):\n    city: str\n    country: str\n\n\nagent = Agent('google-gla:gemini-1.5-flash', result_type=CityLocation)\nresult = agent.run_sync('Where were the olympics held in 2012?')\nprint(result.data)\n#> city='London' country='United Kingdom'\nprint(result.usage())\n\"\"\"\nUsage(requests=1, request_tokens=57, response_tokens=8, total_tokens=65, details=None)\n\"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nRuns end when either a plain text response is received or the model calls a tool associated with one of the structured result types. We will add limits to make sure a run doesn't go on indefinitely, see [#70](https://github.com/pydantic/pydantic-ai/issues/70).\n\nResult data\n-----------\n\nWhen the result type is `str`, or a union including `str`, plain text responses are enabled on the model, and the raw text response from the model is used as the response data.\n\nIf the result type is a union with multiple members (after remove `str` from the members), each member is registered as a separate tool with the model in order to reduce the complexity of the tool schemas and maximise the chances a model will respond correctly.\n\nIf the result type schema is not of type `\"object\"`, the result type is wrapped in a single element object, so the schema of all tools registered with the model are object schemas.\n\nStructured results (like tools) use Pydantic to build the JSON schema used for the tool, and to validate the data returned by the model.\n\nBring on PEP-747\n\nUntil [PEP-747](https://peps.python.org/pep-0747/) \"Annotating Type Forms\" lands, unions are not valid as `type`s in Python.\n\nWhen creating the agent we need to `# type: ignore` the `result_type` argument, and add a type hint to tell type checkers about the type of the agent.\n\nHere's an example of returning either text or a structured value\n\nbox\\_or\\_error.py\n```\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\nfrom pydantic_ai", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-efc722ebd98256b20f6a17746e03016e", "__created_at__": 1744231651.420514, "content": "0747/) \"Annotating Type Forms\" lands, unions are not valid as `type`s in Python.\n\nWhen creating the agent we need to `# type: ignore` the `result_type` argument, and add a type hint to tell type checkers about the type of the agent.\n\nHere's an example of returning either text or a structured value\n\nbox\\_or\\_error.py\n```\nfrom typing import Union\n\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\n\n\nclass Box(BaseModel):\n    width: int\n    height: int\n    depth: int\n    units: str\n\n\nagent: Agent[None, Union[Box, str]] = Agent(\n    'openai:gpt-4o-mini',\n    result_type=Union[Box, str],  # type: ignore\n    system_prompt=(\n        \"Extract me the dimensions of a box, \"\n        \"if you can't extract all data, ask the user to try again.\"\n    ),\n)\n\nresult = agent.run_sync('The box is 10x20x30')\nprint(result.data)\n#> Please provide the units for the dimensions (e.g., cm, in, m).\n\nresult = agent.run_sync('The box is 10x20x30 cm')\nprint(result.data)\n#> width=10 height=20 depth=30 units='cm'\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nHere's an example of using a union return type which registered multiple tools, and wraps non-object schemas in an object:\n\ncolors\\_or\\_sizes.py\n```\nfrom typing import Union\n\nfrom pydantic_ai import Agent\n\nagent: Agent[None, Union[list[str], list[int]]] = Agent(\n    'openai:gpt-4o-mini',\n    result_type=Union[list[str], list[int]],  # type: ignore\n    system_prompt='Extract either colors or sizes from the shapes provided.',\n)\n\nresult = agent.run_sync('red square, blue circle, green triangle')\nprint(result.data)\n#> ['red', 'blue', 'green']\n\nresult = agent.run_sync('square size 10, circle size 20, triangle size 30')\nprint(result.data)\n#> [10, 20, 30]\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\n### Result validators functions\n\nSome validation is inconvenient or impossible to do in Pydantic validators, in particular when the validation requires IO and is asynchronous. PydanticAI provides a way to add validation functions via the `agent.result_validator` decorator.\n\nHere's a simplified variant of the [SQL Generation example](../examples/sql-gen/):\n\nsql\\_gen.py\n```\nfrom typing import Union\n\nfrom fake_database import DatabaseConn, QueryError\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent, RunContext, ModelRetry\n\n\nclass Success(BaseModel):\n    sql_query: str\n\n\nclass InvalidRequest(BaseModel):\n    error_message: str\n\n\nResponse = Union[Success, InvalidRequest]\nagent: Agent[DatabaseConn, Response] = Agent(\n    'google-gla:gemini-1.5-flash',\n    result_type=Response,  # type: ignore\n    deps_type=DatabaseConn,\n    system_prompt='Generate PostgreSQL flavored SQL queries based on user input.',\n)\n\n\n@agent.result_validator\nasync def validate_result(ctx: RunContext[DatabaseConn], result: Response) -> Response:\n    if isinstance(result, InvalidRequest):\n        return result\n    try:\n        await ctx.deps.execute(f'EXPLAIN {result.sql_query}')\n    except QueryError as e:\n        raise ModelRetry(f'Invalid query: {e}') from e\n    else:\n        return result\n\n\nresult = agent.run_sync(\n    'get me users who were last active yesterday.', deps=DatabaseConn()\n)\nprint(result.data)\n#> sql_query='SELECT * FROM users WHERE last_active::date = today() - interval 1 day'\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nStreamed Results\n----------------\n\nThere two main challenges with streamed results:\n\n1. Validating structured responses before they're complete, this is achieved by \"partial validation\" which was recently added to Pydantic in [pydantic/pydantic#10748](https://github.com/pydantic/pydantic/pull/10748).\n2. When receiving a response, we don't know if it's the final response without starting to stream it and peeking at the content. PydanticAI streams just enough of the response to sniff out if it's a tool call or a result, then streams the whole thing and calls tools, or returns the stream as a `StreamedRunResult`.\n\n### Streaming Text\n\nExample of streamed text result:\n\nstreamed\\_hello\\_world.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('google-gla:gemini-1.5-flash')  # (1)!\n\n\nasync def main():\n    async with agent.run_stream('Where does \"hello world\" come from?') as result:  # (2)!\n        async for message in result.stream_text():  # (3)!\n            print(message)\n            #> The first known\n            #> The first known use of \"hello,\n            #> The first known use of \"hello, world\" was in\n            #> The first known use of \"hello, world\" was in a 1974 textbook\n            #> The first known use of \"hello, world\" was in a 1974 textbook about the C\n            #> The first known use of \"hello, world\" was in a 1974 textbook about the C programming language.\n\n```\n\n1. Streaming works with the standard `Agent` class,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-8c8fb6037628cc448b0f00de4f71ef82", "__created_at__": 1744231651.420514, "content": "#> The first known use of \"hello, world\" was in\n            #> The first known use of \"hello, world\" was in a 1974 textbook\n            #> The first known use of \"hello, world\" was in a 1974 textbook about the C\n            #> The first known use of \"hello, world\" was in a 1974 textbook about the C programming language.\n\n```\n\n1. Streaming works with the standard `Agent` class, and doesn't require any special setup, just a model that supports streaming (currently all models support streaming).\n2. The `Agent.run_stream()` method is used to start a streamed run, this method returns a context manager so the connection can be closed when the stream completes.\n3. Each item yield by `StreamedRunResult.stream_text()` is the complete text response, extended as new data is received.\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nWe can also stream text as deltas rather than the entire text in each item:\n\nstreamed\\_delta\\_hello\\_world.py\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('google-gla:gemini-1.5-flash')\n\n\nasync def main():\n    async with agent.run_stream('Where does \"hello world\" come from?') as result:\n        async for message in result.stream_text(delta=True):  # (1)!\n            print(message)\n            #> The first known\n            #> use of \"hello,\n            #> world\" was in\n            #> a 1974 textbook\n            #> about the C\n            #> programming language.\n\n```\n\n1. `stream_text` will error if the response is not text\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nResult message not included in `messages`\n\nThe final result message will **NOT** be added to result messages if you use `.stream_text(delta=True)`,\nsee [Messages and chat history](../message-history/) for more information.\n\n### Streaming Structured Responses\n\nNot all types are supported with partial validation in Pydantic, see [pydantic/pydantic#10748](https://github.com/pydantic/pydantic/pull/10748), generally for model-like structures it's currently best to use `TypeDict`.\n\nHere's an example of streaming a use profile as it's built:\n\nstreamed\\_user\\_profile.py\n```\nfrom datetime import date\n\nfrom typing_extensions import TypedDict\n\nfrom pydantic_ai import Agent\n\n\nclass UserProfile(TypedDict, total=False):\n    name: str\n    dob: date\n    bio: str\n\n\nagent = Agent(\n    'openai:gpt-4o',\n    result_type=UserProfile,\n    system_prompt='Extract a user profile from the input',\n)\n\n\nasync def main():\n    user_input = 'My name is Ben, I was born on January 28th 1990, I like the chain the dog and the pyramid.'\n    async with agent.run_stream(user_input) as result:\n        async for profile in result.stream():\n            print(profile)\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the '}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyr'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}\n\n```\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nIf you want fine-grained control of validation, particularly catching validation errors, you can use the following pattern:\n\nstreamed\\_user\\_profile.py\n```\nfrom datetime import date\n\nfrom pydantic import ValidationError\nfrom typing_extensions import TypedDict\n\nfrom pydantic_ai import Agent\n\n\nclass UserProfile(TypedDict, total=False):\n    name: str\n    dob: date\n    bio: str\n\n\nagent = Agent('openai:gpt-4o', result_type=UserProfile)\n\n\nasync def main():\n    user_input = 'My name is Ben, I was born on January 28th 1990, I like the chain the dog and the pyramid.'\n    async with agent.run_stream(user_input) as result:\n        async for message, last in result.stream_structured(debounce_by=0.01):  # (1)!\n            try:\n                profile = await result.validate_structured_result(  # (2)!\n                    message,\n                    allow_partial=not last,\n                )\n            except ValidationError:\n                continue\n            print(profile)\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the '}", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-b4b8fdb92caea638a6b10cb7523f9ba3", "__created_at__": 1744231651.420514, "content": "allow_partial=not last,\n                )\n            except ValidationError:\n                continue\n            print(profile)\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the '}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyr'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}\n            #> {'name': 'Ben', 'dob': date(1990, 1, 28), 'bio': 'Likes the chain the dog and the pyramid'}\n\n```\n\n1. `stream_structured` streams the data as `ModelResponse` objects, thus iteration can't fail with a `ValidationError`.\n2. `validate_structured_result` validates the data, `allow_partial=True` enables pydantic's `experimental_allow_partial` flag on `TypeAdapter`.\n\n*(This example is complete, it can be run \"as is\" — you'll need to add `asyncio.run(main())` to run `main`)*\n\nExamples\n--------\n\nThe following examples demonstrate how to use streamed responses in PydanticAI:\n\n* [Stream markdown](../examples/stream-markdown/)\n* [Stream Whales](../examples/stream-whales/)\n\n\nUnit testing\n============\n\nWriting unit tests for PydanticAI code is just like unit tests for any other Python code.\n\nBecause for the most part they're nothing new, we have pretty well established tools and patterns for writing and running these kinds of tests.\n\nUnless you're really sure you know better, you'll probably want to follow roughly this strategy:\n\n* Use [`pytest`](https://docs.pytest.org/en/stable/) as your test harness\n* If you find yourself typing out long assertions, use [inline-snapshot](https://15r10nk.github.io/inline-snapshot/latest/)\n* Similarly, [dirty-equals](https://dirty-equals.helpmanual.io/latest/) can be useful for comparing large data structures\n* Use `TestModel` or `FunctionModel` in place of your actual model to avoid the usage, latency and variability of real LLM calls\n* Use `Agent.override` to replace your model inside your application logic\n* Set `ALLOW_MODEL_REQUESTS=False` globally to block any requests from being made to non-test models accidentally\n\n### Unit testing with `TestModel`\n\nThe simplest and fastest way to exercise most of your application code is using `TestModel`, this will (by default) call all tools in the agent, then return either plain text or a structured response depending on the return type of the agent.\n\n`TestModel` is not magic\n\nThe \"clever\" (but not too clever) part of `TestModel` is that it will attempt to generate valid structured data for [function tools](../tools/) and [result types](../results/#structured-result-validation) based on the schema of the registered tools.\n\nThere's no ML or AI in `TestModel`, it's just plain old procedural Python code that tries to generate data that satisfies the JSON schema of a tool.\n\nThe resulting data won't look pretty or relevant, but it should pass Pydantic's validation in most cases.\nIf you want something more sophisticated, use `FunctionModel` and write your own data generation logic.\n\nLet's write unit tests for the following application code:\n\nweather\\_app.py\n```\nimport asyncio\nfrom datetime import date\n\nfrom pydantic_ai import Agent, RunContext\n\nfrom fake_database import DatabaseConn  # (1)!\nfrom weather_service import WeatherService  # (2)!\n\nweather_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=WeatherService,\n    system_prompt='Providing a weather forecast at the locations the user provides.',\n)\n\n\n@weather_agent.tool\ndef weather_forecast(\n    ctx: RunContext[WeatherService], location: str, forecast_date: date\n) -> str:\n    if forecast_date < date.today():  # (3)!\n        return ctx.deps.get_historic_weather(location, forecast_date)\n    else:\n        return ctx.deps.get_forecast(location, forecast_date)\n\n\nasync def run_weather_forecast(  # (4)!\n    user_prompts: list[tuple[str, int]], conn: DatabaseConn\n):\n    \"\"\"Run weather forecast for a list of user prompts and save.\"\"\"\n    async with WeatherService() as weather_service:\n\n        async def run_forecast(prompt: str, user_id: int):\n            result = await weather_agent.run(prompt, deps=weather_service)\n            await conn.store_forecast(user_id, result.data)\n\n        # run all prompts in parallel\n        await asyncio.gather(\n            *(run_forecast(prompt, user_id) for (prompt, user_id) in user_prompts)\n        )\n\n```\n\n1. `DatabaseConn` is a class that holds a database connection\n2. `WeatherService` has methods to get weather forecasts and historic data about the weather\n3. We need to call a different endpoint depending on whether the date is in the past or the future, you'll see why this nuance is important below\n4. This function is the code we want to test, together with the agent it uses\n\nHere we have a function that takes a list of `(user_prompt, user_id)` tuples, gets a weather forecast for each prompt, and stores the result in the database.\n\n**We want to test this code without having to mock certain objects or modify our code so we", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-2c24a9be4ac8532ee8ba6bc83b74eb05", "__created_at__": 1744231651.420514, "content": "to call a different endpoint depending on whether the date is in the past or the future, you'll see why this nuance is important below\n4. This function is the code we want to test, together with the agent it uses\n\nHere we have a function that takes a list of `(user_prompt, user_id)` tuples, gets a weather forecast for each prompt, and stores the result in the database.\n\n**We want to test this code without having to mock certain objects or modify our code so we can pass test objects in.**\n\nHere's how we would write tests using `TestModel`:\n\ntest\\_weather\\_app.py\n```\nfrom datetime import timezone\nimport pytest\n\nfrom dirty_equals import IsNow, IsStr\n\nfrom pydantic_ai import models, capture_run_messages\nfrom pydantic_ai.models.test import TestModel\nfrom pydantic_ai.messages import (\n    ModelResponse,\n    SystemPromptPart,\n    TextPart,\n    ToolCallPart,\n    ToolReturnPart,\n    UserPromptPart,\n    ModelRequest,\n)\n\nfrom fake_database import DatabaseConn\nfrom weather_app import run_weather_forecast, weather_agent\n\npytestmark = pytest.mark.anyio  # (1)!\nmodels.ALLOW_MODEL_REQUESTS = False  # (2)!\n\n\nasync def test_forecast():\n    conn = DatabaseConn()\n    user_id = 1\n    with capture_run_messages() as messages:\n        with weather_agent.override(model=TestModel()):  # (3)!\n            prompt = 'What will the weather be like in London on 2024-11-28?'\n            await run_weather_forecast([(prompt, user_id)], conn)  # (4)!\n\n    forecast = await conn.get_forecast(user_id)\n    assert forecast == '{\"weather_forecast\":\"Sunny with a chance of rain\"}'  # (5)!\n\n    assert messages == [  # (6)!\n        ModelRequest(\n            parts=[\n                SystemPromptPart(\n                    content='Providing a weather forecast at the locations the user provides.',\n                    timestamp=IsNow(tz=timezone.utc),\n                ),\n                UserPromptPart(\n                    content='What will the weather be like in London on 2024-11-28?',\n                    timestamp=IsNow(tz=timezone.utc),  # (7)!\n                ),\n            ]\n        ),\n        ModelResponse(\n            parts=[\n                ToolCallPart(\n                    tool_name='weather_forecast',\n                    args={\n                        'location': 'a',\n                        'forecast_date': '2024-01-01',  # (8)!\n                    },\n                    tool_call_id=IsStr(),\n                )\n            ],\n            model_name='test',\n            timestamp=IsNow(tz=timezone.utc),\n        ),\n        ModelRequest(\n            parts=[\n                ToolReturnPart(\n                    tool_name='weather_forecast',\n                    content='Sunny with a chance of rain',\n                    tool_call_id=IsStr(),\n                    timestamp=IsNow(tz=timezone.utc),\n                ),\n            ],\n        ),\n        ModelResponse(\n            parts=[\n                TextPart(\n                    content='{\"weather_forecast\":\"Sunny with a chance of rain\"}',\n                )\n            ],\n            model_name='test',\n            timestamp=IsNow(tz=timezone.utc),\n        ),\n    ]\n\n```\n\n1. We're using [anyio](https://anyio.readthedocs.io/en/stable/) to run async tests.\n2. This is a safety measure to make sure we don't accidentally make real requests to the LLM while testing, see `ALLOW_MODEL_REQUESTS` for more details.\n3. We're using `Agent.override` to replace the agent's model with `TestModel`, the nice thing about `override` is that we can replace the model inside agent without needing access to the agent `run*` methods call site.\n4. Now we call the function we want to test inside the `override` context manager.\n5. But default, `TestModel` will return a JSON string summarising the tools calls made, and what was returned. If you wanted to customise the response to something more closely aligned with the domain, you could add `custom_result_text='Sunny'` when defining `TestModel`.\n6. So far we don't actually know which tools were called and with which values, we can use `capture_run_messages` to inspect messages from the most recent run and assert the exchange between the agent and the model occurred as expected.\n7. The `IsNow` helper allows us to use declarative asserts even with data which will contain timestamps that change over time.\n8. `TestModel` isn't doing anything clever to extract values from the prompt, so these values are hardcoded.\n\n### Unit testing with `FunctionModel`\n\nThe above tests are a great start, but careful readers will notice that the `WeatherService.get_forecast` is never called since `TestModel` calls `weather_forecast` with a date in the past.\n\nTo fully exercise `weather_forecast`, we need to use `FunctionModel` to customise how the tools is called.\n\nHere's an example of using `FunctionModel` to test the `weather_forecast` tool with custom inputs\n\ntest\\_weather\\_app2.py\n```\nimport re\n\nimport pytest\n\nfrom pydantic_ai import models\nfrom pydantic_ai.messages import (\n    ModelMessage,\n    ModelResponse,\n    TextPart,\n    ToolCallPart,\n)\nfrom pydantic_ai.models.function import AgentInfo, FunctionModel\n\nfrom fake_database import DatabaseConn\nfrom weather_app import run_weather_forecast, weather_agent\n\npytestmark = pytest.mark.anyio\nmodels.ALLOW_MODEL_REQUESTS = False\n\n\ndef call_weather_forecast(  # (1)!\n    messages: list[ModelMessage], info: AgentInfo\n) -> ModelResponse:\n    if len(messages) == 1:\n        # first call, call the weather forecast tool\n        user_prompt = messages[", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-88421b6a92c107220e0c204663c39a71", "__created_at__": 1744231651.420514, "content": ".models.function import AgentInfo, FunctionModel\n\nfrom fake_database import DatabaseConn\nfrom weather_app import run_weather_forecast, weather_agent\n\npytestmark = pytest.mark.anyio\nmodels.ALLOW_MODEL_REQUESTS = False\n\n\ndef call_weather_forecast(  # (1)!\n    messages: list[ModelMessage], info: AgentInfo\n) -> ModelResponse:\n    if len(messages) == 1:\n        # first call, call the weather forecast tool\n        user_prompt = messages[0].parts[-1]\n        m = re.search(r'\\d{4}-\\d{2}-\\d{2}', user_prompt.content)\n        assert m is not None\n        args = {'location': 'London', 'forecast_date': m.group()}  # (2)!\n        return ModelResponse(parts=[ToolCallPart('weather_forecast', args)])\n    else:\n        # second call, return the forecast\n        msg = messages[-1].parts[0]\n        assert msg.part_kind == 'tool-return'\n        return ModelResponse(parts=[TextPart(f'The forecast is: {msg.content}')])\n\n\nasync def test_forecast_future():\n    conn = DatabaseConn()\n    user_id = 1\n    with weather_agent.override(model=FunctionModel(call_weather_forecast)):  # (3)!\n        prompt = 'What will the weather be like in London on 2032-01-01?'\n        await run_weather_forecast([(prompt, user_id)], conn)\n\n    forecast = await conn.get_forecast(user_id)\n    assert forecast == 'The forecast is: Rainy with a chance of sun'\n\n```\n\n1. We define a function `call_weather_forecast` that will be called by `FunctionModel` in place of the LLM, this function has access to the list of `ModelMessage`s that make up the run, and `AgentInfo` which contains information about the agent and the function tools and return tools.\n2. Our function is slightly intelligent in that it tries to extract a date from the prompt, but just hard codes the location.\n3. We use `FunctionModel` to replace the agent's model with our custom function.\n\n### Overriding model via pytest fixtures\n\nIf you're writing lots of tests that all require model to be overridden, you can use [pytest fixtures](https://docs.pytest.org/en/6.2.x/fixture.html) to override the model with `TestModel` or `FunctionModel` in a reusable way.\n\nHere's an example of a fixture that overrides the model with `TestModel`:\n\ntests.py\n```\nimport pytest\nfrom weather_app import weather_agent\n\nfrom pydantic_ai.models.test import TestModel\n\n\n@pytest.fixture\ndef override_weather_agent():\n    with weather_agent.override(model=TestModel()):\n        yield\n\n\nasync def test_forecast(override_weather_agent: None):\n    ...\n    # test code here\n\n```\n\n\nFunction Tools\n==============\n\nFunction tools provide a mechanism for models to retrieve extra information to help them generate a response.\n\nThey're useful when it is impractical or impossible to put all the context an agent might need into the system prompt, or when you want to make agents' behavior more deterministic or reliable by deferring some of the logic required to generate a response to another (not necessarily AI-powered) tool.\n\nFunction tools vs. RAG\n\nFunction tools are basically the \"R\" of RAG (Retrieval-Augmented Generation) — they augment what the model can do by letting it request extra information.\n\nThe main semantic difference between PydanticAI Tools and RAG is RAG is synonymous with vector search, while PydanticAI tools are more general-purpose. (Note: we may add support for vector search functionality in the future, particularly an API for generating embeddings. See [#58](https://github.com/pydantic/pydantic-ai/issues/58))\n\nThere are a number of ways to register tools with an agent:\n\n* via the `@agent.tool` decorator — for tools that need access to the agent context\n* via the `@agent.tool_plain` decorator — for tools that do not need access to the agent context\n* via the `tools` keyword argument to `Agent` which can take either plain functions, or instances of `Tool`\n\n`@agent.tool` is considered the default decorator since in the majority of cases tools will need access to the agent context.\n\nHere's an example using both:\n\ndice\\_game.py\n```\nimport random\n\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent(\n    'google-gla:gemini-1.5-flash',  # (1)!\n    deps_type=str,  # (2)!\n    system_prompt=(\n        \"You're a dice game, you should roll the die and see if the number \"\n        \"you get back matches the user's guess. If so, tell them they're a winner. \"\n        \"Use the player's name in the response.\"\n    ),\n)\n\n\n@agent.tool_plain  # (3)!\ndef roll_die() -> str:\n    \"\"\"Roll a six-sided die and return the result.\"\"\"\n    return str(random.randint(1, 6))\n\n\n@agent.tool  # (4)!\ndef get_player_name(ctx: RunContext[str]) -> str:\n    \"\"\"Get the player's name.\"\"\"\n    return ctx.deps\n\n\ndice_result = agent.run_sync('My guess is 4', deps='Anne')  # (5)!\nprint(dice_result.data)\n#> Congratulations Anne, you guessed correctly! You're a winner!\n\n```\n\n1. This is a pretty simple task, so we can use the fast and cheap Gemini flash model.\n2. We pass the user's name as the dependency, to keep things simple we use just the name as a string as the dependency.\n3. This tool doesn't need any context, it just returns a random number. You could probably use a dynamic system", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-0d5b65b7fc5f3988bd8cbb2a78491eac", "__created_at__": 1744231651.420514, "content": "='Anne')  # (5)!\nprint(dice_result.data)\n#> Congratulations Anne, you guessed correctly! You're a winner!\n\n```\n\n1. This is a pretty simple task, so we can use the fast and cheap Gemini flash model.\n2. We pass the user's name as the dependency, to keep things simple we use just the name as a string as the dependency.\n3. This tool doesn't need any context, it just returns a random number. You could probably use a dynamic system prompt in this case.\n4. This tool needs the player's name, so it uses `RunContext` to access dependencies which are just the player's name in this case.\n5. Run the agent, passing the player's name as the dependency.\n\n*(This example is complete, it can be run \"as is\")*\n\nLet's print the messages from that game to see what happened:\n\ndice\\_game\\_messages.py\n```\nfrom dice_game import dice_result\n\nprint(dice_result.all_messages())\n\"\"\"\n[\n    ModelRequest(\n        parts=[\n            SystemPromptPart(\n                content=\"You're a dice game, you should roll the die and see if the number you get back matches the user's guess. If so, tell them they're a winner. Use the player's name in the response.\",\n                timestamp=datetime.datetime(...),\n                dynamic_ref=None,\n                part_kind='system-prompt',\n            ),\n            UserPromptPart(\n                content='My guess is 4',\n                timestamp=datetime.datetime(...),\n                part_kind='user-prompt',\n            ),\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            ToolCallPart(\n                tool_name='roll_die',\n                args={},\n                tool_call_id='pyd_ai_tool_call_id',\n                part_kind='tool-call',\n            )\n        ],\n        model_name='gemini-1.5-flash',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n    ModelRequest(\n        parts=[\n            ToolReturnPart(\n                tool_name='roll_die',\n                content='4',\n                tool_call_id='pyd_ai_tool_call_id',\n                timestamp=datetime.datetime(...),\n                part_kind='tool-return',\n            )\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            ToolCallPart(\n                tool_name='get_player_name',\n                args={},\n                tool_call_id='pyd_ai_tool_call_id',\n                part_kind='tool-call',\n            )\n        ],\n        model_name='gemini-1.5-flash',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n    ModelRequest(\n        parts=[\n            ToolReturnPart(\n                tool_name='get_player_name',\n                content='Anne',\n                tool_call_id='pyd_ai_tool_call_id',\n                timestamp=datetime.datetime(...),\n                part_kind='tool-return',\n            )\n        ],\n        kind='request',\n    ),\n    ModelResponse(\n        parts=[\n            TextPart(\n                content=\"Congratulations Anne, you guessed correctly! You're a winner!\",\n                part_kind='text',\n            )\n        ],\n        model_name='gemini-1.5-flash',\n        timestamp=datetime.datetime(...),\n        kind='response',\n    ),\n]\n\"\"\"\n\n```\n\nWe can represent this with a diagram:\n\n```\nsequenceDiagram\n    participant Agent\n    participant LLM\n\n    Note over Agent: Send prompts\n    Agent ->> LLM: System: \"You're a dice game...\"<br>User: \"My guess is 4\"\n    activate LLM\n    Note over LLM: LLM decides to use<br>a tool\n\n    LLM ->> Agent: Call tool<br>roll_die()\n    deactivate LLM\n    activate Agent\n    Note over Agent: Rolls a six-sided die\n\n    Agent -->> LLM: ToolReturn<br>\"4\"\n    deactivate Agent\n    activate LLM\n    Note over LLM: LLM decides to use<br>another tool\n\n    LLM ->> Agent: Call tool<br>get_player_name()\n    deactivate LLM\n    activate Agent\n    Note over Agent: Retrieves player name\n    Agent -->> LLM: ToolReturn<br>\"Anne\"\n    deactivate Agent\n    activate LLM\n    Note over LLM: LLM constructs final response\n\n    LLM ->> Agent: ModelResponse<br>\"Congratulations Anne, ...\"\n    deactivate LLM\n    Note over Agent: Game session complete\n```\n\nRegistering Function Tools via kwarg\n------------------------------------\n\nAs well as using the decorators, we can register tools via the `tools` argument to the `Agent` constructor. This is useful when you want to reuse tools, and can also give more fine-grained control over the tools.\n\ndice\\_game\\_tool\\_kwarg.py\n```\nimport random\n\nfrom pydantic_ai import Agent, RunContext, Tool\n\nsystem_prompt = \"\"\"\\\nYou're a dice game, you should roll the die and see if the number\nyou get back matches the user's guess. If so, tell them they're a winner.\nUse the player's name in the response.\n\"\"\"\n\n\ndef roll_die() -> str:\n    \"\"\"Roll a six-sided die and return the result.\"\"\"\n    return str(random.randint(1, 6))\n\n\ndef get_player_name(ctx: RunContext[str]) -> str:\n    \"\"\"Get the player's name.\"\"\"\n    return ctx.deps\n\n\nagent_a = Agent(\n    'google-gla:gemini-1.5-flash',\n    deps_type=str,\n    tools=[roll_die, get_player_name],  # (1)!\n    system_prompt=system_prompt,\n)\nagent_b = Agent(\n    'google-gla:gemini-1.5-flash',\n    deps_type=str,\n    tools=[  # (2)!\n        Tool(roll_die, takes_ctx=False),\n        Tool(get_player_name, takes_ctx=True),\n    ],\n    system_prompt=system_prompt,\n)\n\ndice_result = {}", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9aa9b9f3160592a6de9590d495a31f97", "__created_at__": 1744231651.420514, "content": ".5-flash',\n    deps_type=str,\n    tools=[roll_die, get_player_name],  # (1)!\n    system_prompt=system_prompt,\n)\nagent_b = Agent(\n    'google-gla:gemini-1.5-flash',\n    deps_type=str,\n    tools=[  # (2)!\n        Tool(roll_die, takes_ctx=False),\n        Tool(get_player_name, takes_ctx=True),\n    ],\n    system_prompt=system_prompt,\n)\n\ndice_result = {}\ndice_result['a'] = agent_a.run_sync('My guess is 6', deps='Yashar')\ndice_result['b'] = agent_b.run_sync('My guess is 4', deps='Anne')\nprint(dice_result['a'].data)\n#> Tough luck, Yashar, you rolled a 4. Better luck next time.\nprint(dice_result['b'].data)\n#> Congratulations Anne, you guessed correctly! You're a winner!\n\n```\n\n1. The simplest way to register tools via the `Agent` constructor is to pass a list of functions, the function signature is inspected to determine if the tool takes `RunContext`.\n2. `agent_a` and `agent_b` are identical — but we can use `Tool` to reuse tool definitions and give more fine-grained control over how tools are defined, e.g. setting their name or description, or using a custom [`prepare`](#tool-prepare) method.\n\n*(This example is complete, it can be run \"as is\")*\n\nFunction Tools vs. Structured Results\n-------------------------------------\n\nAs the name suggests, function tools use the model's \"tools\" or \"functions\" API to let the model know what is available to call. Tools or functions are also used to define the schema(s) for structured responses, thus a model might have access to many tools, some of which call function tools while others end the run and return a result.\n\nFunction tools and schema\n-------------------------\n\nFunction parameters are extracted from the function signature, and all parameters except `RunContext` are used to build the schema for that tool call.\n\nEven better, PydanticAI extracts the docstring from functions and (thanks to [griffe](https://mkdocstrings.github.io/griffe/)) extracts parameter descriptions from the docstring and adds them to the schema.\n\n[Griffe supports](https://mkdocstrings.github.io/griffe/reference/docstrings/#docstrings) extracting parameter descriptions from `google`, `numpy`, and `sphinx` style docstrings. PydanticAI will infer the format to use based on the docstring, but you can explicitly set it using `docstring_format`. You can also enforce parameter requirements by setting `require_parameter_descriptions=True`. This will raise a `UserError` if a parameter description is missing.\n\nTo demonstrate a tool's schema, here we use `FunctionModel` to print the schema a model would receive:\n\ntool\\_schema.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.messages import ModelMessage, ModelResponse, TextPart\nfrom pydantic_ai.models.function import AgentInfo, FunctionModel\n\nagent = Agent()\n\n\n@agent.tool_plain(docstring_format='google', require_parameter_descriptions=True)\ndef foobar(a: int, b: str, c: dict[str, list[float]]) -> str:\n    \"\"\"Get me foobar.\n\n    Args:\n        a: apple pie\n        b: banana cake\n        c: carrot smoothie\n    \"\"\"\n    return f'{a} {b} {c}'\n\n\ndef print_schema(messages: list[ModelMessage], info: AgentInfo) -> ModelResponse:\n    tool = info.function_tools[0]\n    print(tool.description)\n    #> Get me foobar.\n    print(tool.parameters_json_schema)\n    \"\"\"\n    {\n        'additionalProperties': False,\n        'properties': {\n            'a': {'description': 'apple pie', 'type': 'integer'},\n            'b': {'description': 'banana cake', 'type': 'string'},\n            'c': {\n                'additionalProperties': {'items': {'type': 'number'}, 'type': 'array'},\n                'description': 'carrot smoothie',\n                'type': 'object',\n            },\n        },\n        'required': ['a', 'b', 'c'],\n        'type': 'object',\n    }\n    \"\"\"\n    return ModelResponse(parts=[TextPart('foobar')])\n\n\nagent.run_sync('hello', model=FunctionModel(print_schema))\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nThe return type of tool can be anything which Pydantic can serialize to JSON as some models (e.g. Gemini) support semi-structured return values, some expect text (OpenAI) but seem to be just as good at extracting meaning from the data. If a Python object is returned and the model expects a string, the value will be serialized to JSON.\n\nIf a tool has a single parameter that can be represented as an object in JSON schema (e.g. dataclass, TypedDict, pydantic model), the schema for the tool is simplified to be just that object.\n\nHere's an example where we use `TestModel.last_model_request_parameters` to inspect the tool schema that would be passed to the model.\n\nsingle\\_parameter\\_tool.py\n```\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.test import TestModel\n\nagent = Agent()\n\n\nclass Foobar(BaseModel):\n    \"\"\"This is a Foobar\"\"\"\n\n    x: int\n    y: str\n    z: float = 3.14\n\n\n@agent.tool_plain\ndef foobar(f: Foobar) -> str:\n    return str(f)\n\n\ntest_model = TestModel()\nresult = agent.run_sync('hello', model=test_model)\nprint(result.data)\n#", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-259f4fd17962e6b1541b3f663527bc58", "__created_at__": 1744231651.420514, "content": "pydantic_ai import Agent\nfrom pydantic_ai.models.test import TestModel\n\nagent = Agent()\n\n\nclass Foobar(BaseModel):\n    \"\"\"This is a Foobar\"\"\"\n\n    x: int\n    y: str\n    z: float = 3.14\n\n\n@agent.tool_plain\ndef foobar(f: Foobar) -> str:\n    return str(f)\n\n\ntest_model = TestModel()\nresult = agent.run_sync('hello', model=test_model)\nprint(result.data)\n#> {\"foobar\":\"x=0 y='a' z=3.14\"}\nprint(test_model.last_model_request_parameters.function_tools)\n\"\"\"\n[\n    ToolDefinition(\n        name='foobar',\n        description='This is a Foobar',\n        parameters_json_schema={\n            'properties': {\n                'x': {'type': 'integer'},\n                'y': {'type': 'string'},\n                'z': {'default': 3.14, 'type': 'number'},\n            },\n            'required': ['x', 'y'],\n            'title': 'Foobar',\n            'type': 'object',\n        },\n        outer_typed_dict_key=None,\n        strict=None,\n    )\n]\n\"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nDynamic Function tools\n----------------------\n\nTools can optionally be defined with another function: `prepare`, which is called at each step of a run to\ncustomize the definition of the tool passed to the model, or omit the tool completely from that step.\n\nA `prepare` method can be registered via the `prepare` kwarg to any of the tool registration mechanisms:\n\n* `@agent.tool` decorator\n* `@agent.tool_plain` decorator\n* `Tool` dataclass\n\nThe `prepare` method, should be of type `ToolPrepareFunc`, a function which takes `RunContext` and a pre-built `ToolDefinition`, and should either return that `ToolDefinition` with or without modifying it, return a new `ToolDefinition`, or return `None` to indicate this tools should not be registered for that step.\n\nHere's a simple `prepare` method that only includes the tool if the value of the dependency is `42`.\n\nAs with the previous example, we use `TestModel` to demonstrate the behavior without calling a real model.\n\ntool\\_only\\_if\\_42.py\n```\nfrom typing import Union\n\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.tools import ToolDefinition\n\nagent = Agent('test')\n\n\nasync def only_if_42(\n    ctx: RunContext[int], tool_def: ToolDefinition\n) -> Union[ToolDefinition, None]:\n    if ctx.deps == 42:\n        return tool_def\n\n\n@agent.tool(prepare=only_if_42)\ndef hitchhiker(ctx: RunContext[int], answer: str) -> str:\n    return f'{ctx.deps} {answer}'\n\n\nresult = agent.run_sync('testing...', deps=41)\nprint(result.data)\n#> success (no tool calls)\nresult = agent.run_sync('testing...', deps=42)\nprint(result.data)\n#> {\"hitchhiker\":\"42 a\"}\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nHere's a more complex example where we change the description of the `name` parameter to based on the value of `deps`\n\nFor the sake of variation, we create this tool using the `Tool` dataclass.\n\ncustomize\\_name.py\n```\nfrom __future__ import annotations\n\nfrom typing import Literal\n\nfrom pydantic_ai import Agent, RunContext\nfrom pydantic_ai.models.test import TestModel\nfrom pydantic_ai.tools import Tool, ToolDefinition\n\n\ndef greet(name: str) -> str:\n    return f'hello {name}'\n\n\nasync def prepare_greet(\n    ctx: RunContext[Literal['human', 'machine']], tool_def: ToolDefinition\n) -> ToolDefinition | None:\n    d = f'Name of the {ctx.deps} to greet.'\n    tool_def.parameters_json_schema['properties']['name']['description'] = d\n    return tool_def\n\n\ngreet_tool = Tool(greet, prepare=prepare_greet)\ntest_model = TestModel()\nagent = Agent(test_model, tools=[greet_tool], deps_type=Literal['human', 'machine'])\n\nresult = agent.run_sync('testing...', deps='human')\nprint(result.data)\n#> {\"greet\":\"hello a\"}\nprint(test_model.last_model_request_parameters.function_tools)\n\"\"\"\n[\n    ToolDefinition(\n        name='greet',\n        description='',\n        parameters_json_schema={\n            'additionalProperties': False,\n            'properties': {\n                'name': {'type': 'string', 'description': 'Name of the human to greet.'}\n            },\n            'required': ['name'],\n            'type': 'object',\n        },\n        outer_typed_dict_key=None,\n        strict=None,\n    )\n]\n\"\"\"\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\n\n\nTroubleshooting\n===============\n\nBelow are suggestions on how to fix some common errors you might encounter while using PydanticAI. If the issue you're experiencing is not listed below or addressed in the documentation, please feel free to ask in the [Pydantic Slack](../help/) or create an issue on [GitHub](https://github.com/pydantic/pydantic-ai/issues).\n\nJupyter Notebook Errors\n-----------------------\n\n### `RuntimeError: This event loop is already running`\n\nThis error is caused by conflicts between the event loops in Jupyter notebook and PydanticAI's. One way to manage these conflicts is by using [`nest-asyncio`](https://pypi.org/project/nest-asyncio/). Namely, before you execute any agent runs, do the following:\n```\nimport nest", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-459acdb5bfa20be2d698a80bc830b084", "__created_at__": 1744231651.420514, "content": "https://github.com/pydantic/pydantic-ai/issues).\n\nJupyter Notebook Errors\n-----------------------\n\n### `RuntimeError: This event loop is already running`\n\nThis error is caused by conflicts between the event loops in Jupyter notebook and PydanticAI's. One way to manage these conflicts is by using [`nest-asyncio`](https://pypi.org/project/nest-asyncio/). Namely, before you execute any agent runs, do the following:\n```\nimport nest_asyncio\n\nnest_asyncio.apply()\n\n```\n\nNote: This fix also applies to Google Colab.\n\nAPI Key Configuration\n---------------------\n\n### `UserError: API key must be provided or set in the [MODEL]_API_KEY environment variable`\n\nIf you're running into issues with setting the API key for your model, visit the [Models](../models/) page to learn more about how to set an environment variable and/or pass in an `api_key` argument.\n\nMonitoring HTTPX Requests\n-------------------------\n\nYou can use custom `httpx` clients in your models in order to access specific requests, responses, and headers at runtime.\n\nIt's particularly helpful to use `logfire`'s [HTTPX integration](../logfire/#monitoring-httpx-requests) to monitor the above.\n\n\n\n`pydantic_ai.agent`\n===================\n\n### Agent `dataclass`\n\nBases: `Generic[AgentDepsT, ResultDataT]`\n\nClass for defining \"agents\" - a way to have a specific type of \"conversation\" with an LLM.\n\nAgents are generic in the dependency type they take `AgentDepsT`\nand the result data type they return, `ResultDataT`.\n\nBy default, if neither generic parameter is customised, agents have type `Agent[None, str]`.\n\nMinimal usage example:\n\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\nresult = agent.run_sync('What is the capital of France?')\nprint(result.data)\n#> Paris\n\n```\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@final\n@dataclasses.dataclass(init=False)\nclass Agent(Generic[AgentDepsT, ResultDataT]):\n    \"\"\"Class for defining \"agents\" - a way to have a specific type of \"conversation\" with an LLM.\n\n    Agents are generic in the dependency type they take [`AgentDepsT`][pydantic_ai.tools.AgentDepsT]\n    and the result data type they return, [`ResultDataT`][pydantic_ai.result.ResultDataT].\n\n    By default, if neither generic parameter is customised, agents have type `Agent[None, str]`.\n\n    Minimal usage example:\n\n    ```python\n    from pydantic_ai import Agent\n\n    agent = Agent('openai:gpt-4o')\n    result = agent.run_sync('What is the capital of France?')\n    print(result.data)\n    #> Paris\n    ```\n    \"\"\"\n\n    model: models.Model | models.KnownModelName | str | None\n    \"\"\"The default model configured for this agent.\n\n    We allow str here since the actual list of allowed models changes frequently.\n    \"\"\"\n\n    name: str | None\n    \"\"\"The name of the agent, used for logging.\n\n    If `None`, we try to infer the agent name from the call frame when the agent is first run.\n    \"\"\"\n    end_strategy: EndStrategy\n    \"\"\"Strategy for handling tool calls when a final result is found.\"\"\"\n\n    model_settings: ModelSettings | None\n    \"\"\"Optional model request settings to use for this agents's runs, by default.\n\n    Note, if `model_settings` is provided by `run`, `run_sync`, or `run_stream`, those settings will\n    be merged with this value, with the runtime argument taking priority.\n    \"\"\"\n\n    result_type: type[ResultDataT] = dataclasses.field(repr=False)\n    \"\"\"\n    The type of the result data, used to validate the result data, defaults to `str`.\n    \"\"\"\n\n    instrument: InstrumentationSettings | bool | None\n    \"\"\"Options to automatically instrument with OpenTelemetry.\"\"\"\n\n    _instrument_default: ClassVar[InstrumentationSettings | bool] = False\n\n    _deps_type: type[AgentDepsT] = dataclasses.field(repr=False)\n    _result_tool_name: str = dataclasses.field(repr=False)\n    _result_tool_description: str | None = dataclasses.field(repr=False)\n    _result_schema: _result.ResultSchema[ResultDataT] | None = dataclasses.field(repr=False)\n    _result_validators: list[_result.ResultValidator[AgentDepsT, ResultDataT]] = dataclasses.field(repr=False)\n    _system_prompts: tuple[str, ...] = dataclasses.field(repr=False)\n    _system_prompt_functions: list[_system_prompt.SystemPromptRunner[AgentDepsT]] = dataclasses.field(repr=False)\n    _system_prompt_dynamic_functions: dict[str, _system_prompt.SystemPromptRunner[AgentDepsT]] = dataclasses.field(\n        repr=False\n    )\n    _function_tools: dict[str, Tool[AgentDepsT]] = dataclasses.field(repr=False)\n    _mcp_servers: Sequence[MCPServer] = dataclasses.field(repr=False)\n    _default_retries: int = dataclasses.field(repr=False)\n    _max_result_retries: int = dataclasses.field(repr=False)\n    _override_deps: _utils.Option[AgentDepsT] = dataclasses.field(default=None, repr=False)\n    _override_model: _utils.Option[models.Model] = dataclasses.field(default=None, repr=False)\n\n    def __init__(\n        self,\n        model: models.Model | models.KnownModelName | str | None = None,\n        *,\n        result_type: type[ResultDataT] =", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c77a6c2c8bc1fe9a2d7df96c3a536533", "__created_at__": 1744231651.420514, "content": "_max_result_retries: int = dataclasses.field(repr=False)\n    _override_deps: _utils.Option[AgentDepsT] = dataclasses.field(default=None, repr=False)\n    _override_model: _utils.Option[models.Model] = dataclasses.field(default=None, repr=False)\n\n    def __init__(\n        self,\n        model: models.Model | models.KnownModelName | str | None = None,\n        *,\n        result_type: type[ResultDataT] = str,\n        system_prompt: str | Sequence[str] = (),\n        deps_type: type[AgentDepsT] = NoneType,\n        name: str | None = None,\n        model_settings: ModelSettings | None = None,\n        retries: int = 1,\n        result_tool_name: str = 'final_result',\n        result_tool_description: str | None = None,\n        result_retries: int | None = None,\n        tools: Sequence[Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]] = (),\n        mcp_servers: Sequence[MCPServer] = (),\n        defer_model_check: bool = False,\n        end_strategy: EndStrategy = 'early',\n        instrument: InstrumentationSettings | bool | None = None,\n    ):\n        \"\"\"Create an agent.\n\n        Args:\n            model: The default model to use for this agent, if not provide,\n                you must provide the model when calling it. We allow str here since the actual list of allowed models changes frequently.\n            result_type: The type of the result data, used to validate the result data, defaults to `str`.\n            system_prompt: Static system prompts to use for this agent, you can also register system\n                prompts via a function with [`system_prompt`][pydantic_ai.Agent.system_prompt].\n            deps_type: The type used for dependency injection, this parameter exists solely to allow you to fully\n                parameterize the agent, and therefore get the best out of static type checking.\n                If you're not using deps, but want type checking to pass, you can set `deps=None` to satisfy Pyright\n                or add a type hint `: Agent[None, ]`.\n            name: The name of the agent, used for logging. If `None`, we try to infer the agent name from the call frame\n                when the agent is first run.\n            model_settings: Optional model request settings to use for this agent's runs, by default.\n            retries: The default number of retries to allow before raising an error.\n            result_tool_name: The name of the tool to use for the final result.\n            result_tool_description: The description of the final result tool.\n            result_retries: The maximum number of retries to allow for result validation, defaults to `retries`.\n            tools: Tools to register with the agent, you can also register tools via the decorators\n                [`@agent.tool`][pydantic_ai.Agent.tool] and [`@agent.tool_plain`][pydantic_ai.Agent.tool_plain].\n            mcp_servers: MCP servers to register with the agent. You should register a [`MCPServer`][pydantic_ai.mcp.MCPServer]\n                for each server you want the agent to connect to.\n            defer_model_check: by default, if you provide a [named][pydantic_ai.models.KnownModelName] model,\n                it's evaluated to create a [`Model`][pydantic_ai.models.Model] instance immediately,\n                which checks for the necessary environment variables. Set this to `false`\n                to defer the evaluation until the first run. Useful if you want to\n                [override the model][pydantic_ai.Agent.override] for testing.\n            end_strategy: Strategy for handling tool calls that are requested alongside a final result.\n                See [`EndStrategy`][pydantic_ai.agent.EndStrategy] for more information.\n            instrument: Set to True to automatically instrument with OpenTelemetry,\n                which will use Logfire if it's configured.\n                Set to an instance of [`InstrumentationSettings`][pydantic_ai.agent.InstrumentationSettings] to customize.\n                If this isn't set, then the last value set by\n                [`Agent.instrument_all()`][pydantic_ai.Agent.instrument_all]\n                will be used, which defaults to False.\n                See the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info.\n        \"\"\"\n        if model is None or defer_model_check:\n            self.model = model\n        else:\n            self.model = models.infer_model(model)\n\n        self.end_strategy = end_strategy\n        self.name = name\n        self.model_settings = model_settings\n        self.result_type = result_type\n        self.instrument = instrument\n\n        self._deps_type = deps_type\n\n        self._result_tool_name = result_tool_name\n        self._result_tool_description = result_tool_description\n        self._result_schema = _result.ResultSchema[result_type].build(\n            result_type, result_tool_name, result_tool_description\n        )\n        self._result_validators = []\n\n        self._system_prompts = (system_prompt,) if isinstance(system_prompt, str) else tuple(system_prompt)\n        self._system_prompt_functions = []\n        self._system_prompt_dynamic_functions = {}\n\n        self._function_tools = {}\n\n        self._default_retries = retries\n        self._max_result_retries = result_retries if result_retries is not None else retries\n        self._mcp_servers = mcp_servers\n        for tool in tools:\n            if isinstance(tool, Tool):\n                self._register_tool(tool)\n            else:\n                self._register_tool(Tool(tool))\n\n    @staticmethod\n    def instrument_all(instrument: InstrumentationSettings | bool = True) -> None:\n        \"\"\"Set the instrumentation options for all agents where `instrument` is not set.\"\"\"\n        Agent._instrument", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-5b7a596ee9422b565de815722b0e31dc", "__created_at__": 1744231651.420514, "content": "= result_retries if result_retries is not None else retries\n        self._mcp_servers = mcp_servers\n        for tool in tools:\n            if isinstance(tool, Tool):\n                self._register_tool(tool)\n            else:\n                self._register_tool(Tool(tool))\n\n    @staticmethod\n    def instrument_all(instrument: InstrumentationSettings | bool = True) -> None:\n        \"\"\"Set the instrumentation options for all agents where `instrument` is not set.\"\"\"\n        Agent._instrument_default = instrument\n\n    @overload\n    async def run(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: None = None,\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AgentRunResult[ResultDataT]: ...\n\n    @overload\n    async def run(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: type[RunResultDataT],\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AgentRunResult[RunResultDataT]: ...\n\n    async def run(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: type[RunResultDataT] | None = None,\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AgentRunResult[Any]:\n        \"\"\"Run the agent with a user prompt in async mode.\n\n        This method builds an internal agent graph (using system prompts, tools and result schemas) and then\n        runs the graph to completion. The result of the run is returned.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent\n\n        agent = Agent('openai:gpt-4o')\n\n        async def main():\n            agent_run = await agent.run('What is the capital of France?')\n            print(agent_run.data)\n            #> Paris\n        ```\n\n        Args:\n            user_prompt: User input to start/continue the conversation.\n            result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no\n                result validators since result validators would expect an argument that matches the agent's result type.\n            message_history: History of the conversation so far.\n            model: Optional model to use for this run, required if `model` was not set when creating the agent.\n            deps: Optional dependencies to use for this run.\n            model_settings: Optional settings to use for this model's request.\n            usage_limits: Optional limits on model request count or token usage.\n            usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n            infer_name: Whether to try to infer the agent name from the call frame if it's not set.\n\n        Returns:\n            The result of the run.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n        async with self.iter(\n            user_prompt=user_prompt,\n            result_type=result_type,\n            message_history=message_history,\n            model=model,\n            deps=deps,\n            model_settings=model_settings,\n            usage_limits=usage_limits,\n            usage=usage,\n        ) as agent_run:\n            async for _ in agent_run:\n                pass\n\n        assert agent_run.result is not None, 'The graph run did not finish properly'\n        return agent_run.result\n\n    @asynccontextmanager\n    async def iter(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: type[RunResultDataT] | None = None,\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AsyncIterator[AgentRun[AgentDepsT, Any]]:\n        \"\"\"A contextmanager which can be used to iterate over the agent graph's nodes as they are executed.\n\n        This method builds an internal agent graph (using system prompts, tools and result schemas) and then returns an\n        `AgentRun` object. The `AgentRun` can be used to async-iterate over the nodes of the graph as they are\n        executed. This is the API to use if you want to consume the outputs coming from each LLM model response, or the\n        stream of events coming from the execution of", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-026d208ef4ddc45c65e52cfc9aeb6151", "__created_at__": 1744231651.420514, "content": "iterate over the agent graph's nodes as they are executed.\n\n        This method builds an internal agent graph (using system prompts, tools and result schemas) and then returns an\n        `AgentRun` object. The `AgentRun` can be used to async-iterate over the nodes of the graph as they are\n        executed. This is the API to use if you want to consume the outputs coming from each LLM model response, or the\n        stream of events coming from the execution of tools.\n\n        The `AgentRun` also provides methods to access the full message history, new messages, and usage statistics,\n        and the final result of the run once it has completed.\n\n        For more details, see the documentation of `AgentRun`.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent\n\n        agent = Agent('openai:gpt-4o')\n\n        async def main():\n            nodes = []\n            async with agent.iter('What is the capital of France?') as agent_run:\n                async for node in agent_run:\n                    nodes.append(node)\n            print(nodes)\n            '''\n            [\n                UserPromptNode(\n                    user_prompt='What is the capital of France?',\n                    system_prompts=(),\n                    system_prompt_functions=[],\n                    system_prompt_dynamic_functions={},\n                ),\n                ModelRequestNode(\n                    request=ModelRequest(\n                        parts=[\n                            UserPromptPart(\n                                content='What is the capital of France?',\n                                timestamp=datetime.datetime(...),\n                                part_kind='user-prompt',\n                            )\n                        ],\n                        kind='request',\n                    )\n                ),\n                CallToolsNode(\n                    model_response=ModelResponse(\n                        parts=[TextPart(content='Paris', part_kind='text')],\n                        model_name='gpt-4o',\n                        timestamp=datetime.datetime(...),\n                        kind='response',\n                    )\n                ),\n                End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n            ]\n            '''\n            print(agent_run.result.data)\n            #> Paris\n        ```\n\n        Args:\n            user_prompt: User input to start/continue the conversation.\n            result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no\n                result validators since result validators would expect an argument that matches the agent's result type.\n            message_history: History of the conversation so far.\n            model: Optional model to use for this run, required if `model` was not set when creating the agent.\n            deps: Optional dependencies to use for this run.\n            model_settings: Optional settings to use for this model's request.\n            usage_limits: Optional limits on model request count or token usage.\n            usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n            infer_name: Whether to try to infer the agent name from the call frame if it's not set.\n\n        Returns:\n            The result of the run.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n        model_used = self._get_model(model)\n        del model\n\n        deps = self._get_deps(deps)\n        new_message_index = len(message_history) if message_history else 0\n        result_schema: _result.ResultSchema[RunResultDataT] | None = self._prepare_result_schema(result_type)\n\n        # Build the graph\n        graph = self._build_graph(result_type)\n\n        # Build the initial state\n        state = _agent_graph.GraphAgentState(\n            message_history=message_history[:] if message_history else [],\n            usage=usage or _usage.Usage(),\n            retries=0,\n            run_step=0,\n        )\n\n        # We consider it a user error if a user tries to restrict the result type while having a result validator that\n        # may change the result type from the restricted type to something else. Therefore, we consider the following\n        # typecast reasonable, even though it is possible to violate it with otherwise-type-checked code.\n        result_validators = cast(list[_result.ResultValidator[AgentDepsT, RunResultDataT]], self._result_validators)\n\n        # TODO: Instead of this, copy the function tools to ensure they don't share current_retry state between agent\n        #  runs. Requires some changes to `Tool` to make them copyable though.\n        for v in self._function_tools.values():\n            v.current_retry = 0\n\n        model_settings = merge_model_settings(self.model_settings, model_settings)\n        usage_limits = usage_limits or _usage.UsageLimits()\n\n        if isinstance(model_used, InstrumentedModel):\n            tracer = model_used.settings.tracer\n        else:\n            tracer = NoOpTracer()\n        agent_name = self.name or 'agent'\n        run_span = tracer.start_span(\n            'agent run',\n            attributes={\n                'model_name': model_used.model_name if model_used else 'no-model',\n                'agent_name': agent_name,\n                'logfire.msg': f'{agent_name} run',\n            },\n        )\n\n        graph_deps = _agent_graph.GraphAgentDeps[AgentDepsT, RunResultDataT](\n            user_deps=deps,\n            prompt=user_prompt,\n            new_message_index=new_message_index,\n            model=model_used,\n            model_settings=model_settings,\n            usage_limits=usage_limits,\n            max_result_retries=self._max_result_retries,\n            end_strategy=self.end_strategy,\n            result_schema=result_schema,\n            result_tools=self._result_schema.tool_defs() if self._result_schema else [],\n            result_validators=result_validators,\n            function_tools=self._function_tools,\n            mcp_servers=self._mcp_servers,\n            run_span=run_span,\n            tracer=tracer,\n        )\n        start_node = _agent_graph.UserPromptNode[AgentDepsT](\n            user_prompt=user_prompt,\n            system_prompts", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4c2a3419dcd475440c12988735eb5e77", "__created_at__": 1744231651.420514, "content": "_retries,\n            end_strategy=self.end_strategy,\n            result_schema=result_schema,\n            result_tools=self._result_schema.tool_defs() if self._result_schema else [],\n            result_validators=result_validators,\n            function_tools=self._function_tools,\n            mcp_servers=self._mcp_servers,\n            run_span=run_span,\n            tracer=tracer,\n        )\n        start_node = _agent_graph.UserPromptNode[AgentDepsT](\n            user_prompt=user_prompt,\n            system_prompts=self._system_prompts,\n            system_prompt_functions=self._system_prompt_functions,\n            system_prompt_dynamic_functions=self._system_prompt_dynamic_functions,\n        )\n\n        async with graph.iter(\n            start_node,\n            state=state,\n            deps=graph_deps,\n            span=use_span(run_span, end_on_exit=True),\n            infer_name=False,\n        ) as graph_run:\n            yield AgentRun(graph_run)\n\n    @overload\n    def run_sync(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AgentRunResult[ResultDataT]: ...\n\n    @overload\n    def run_sync(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: type[RunResultDataT] | None,\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AgentRunResult[RunResultDataT]: ...\n\n    def run_sync(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: type[RunResultDataT] | None = None,\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AgentRunResult[Any]:\n        \"\"\"Synchronously run the agent with a user prompt.\n\n        This is a convenience method that wraps [`self.run`][pydantic_ai.Agent.run] with `loop.run_until_complete(...)`.\n        You therefore can't use this method inside async code or if there's an active event loop.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent\n\n        agent = Agent('openai:gpt-4o')\n\n        result_sync = agent.run_sync('What is the capital of Italy?')\n        print(result_sync.data)\n        #> Rome\n        ```\n\n        Args:\n            user_prompt: User input to start/continue the conversation.\n            result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no\n                result validators since result validators would expect an argument that matches the agent's result type.\n            message_history: History of the conversation so far.\n            model: Optional model to use for this run, required if `model` was not set when creating the agent.\n            deps: Optional dependencies to use for this run.\n            model_settings: Optional settings to use for this model's request.\n            usage_limits: Optional limits on model request count or token usage.\n            usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n            infer_name: Whether to try to infer the agent name from the call frame if it's not set.\n\n        Returns:\n            The result of the run.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n        return get_event_loop().run_until_complete(\n            self.run(\n                user_prompt,\n                result_type=result_type,\n                message_history=message_history,\n                model=model,\n                deps=deps,\n                model_settings=model_settings,\n                usage_limits=usage_limits,\n                usage=usage,\n                infer_name=False,\n            )\n        )\n\n    @overload\n    def run_stream(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: None = None,\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AbstractAsyncContextManager[result.StreamedRunResult[AgentDepsT, ResultDataT]]: ...\n\n    @overload\n    def run_stream(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: type[RunResultDataT],\n        message_history: list[_messages.ModelMessage] | None = None,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ab85d0443eef9eae16c396f2077c5031", "__created_at__": 1744231651.420514, "content": ": _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AbstractAsyncContextManager[result.StreamedRunResult[AgentDepsT, ResultDataT]]: ...\n\n    @overload\n    def run_stream(\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: type[RunResultDataT],\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AbstractAsyncContextManager[result.StreamedRunResult[AgentDepsT, RunResultDataT]]: ...\n\n    @asynccontextmanager\n    async def run_stream(  # noqa C901\n        self,\n        user_prompt: str | Sequence[_messages.UserContent] | None = None,\n        *,\n        result_type: type[RunResultDataT] | None = None,\n        message_history: list[_messages.ModelMessage] | None = None,\n        model: models.Model | models.KnownModelName | str | None = None,\n        deps: AgentDepsT = None,\n        model_settings: ModelSettings | None = None,\n        usage_limits: _usage.UsageLimits | None = None,\n        usage: _usage.Usage | None = None,\n        infer_name: bool = True,\n    ) -> AsyncIterator[result.StreamedRunResult[AgentDepsT, Any]]:\n        \"\"\"Run the agent with a user prompt in async mode, returning a streamed response.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent\n\n        agent = Agent('openai:gpt-4o')\n\n        async def main():\n            async with agent.run_stream('What is the capital of the UK?') as response:\n                print(await response.get_data())\n                #> London\n        ```\n\n        Args:\n            user_prompt: User input to start/continue the conversation.\n            result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no\n                result validators since result validators would expect an argument that matches the agent's result type.\n            message_history: History of the conversation so far.\n            model: Optional model to use for this run, required if `model` was not set when creating the agent.\n            deps: Optional dependencies to use for this run.\n            model_settings: Optional settings to use for this model's request.\n            usage_limits: Optional limits on model request count or token usage.\n            usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n            infer_name: Whether to try to infer the agent name from the call frame if it's not set.\n\n        Returns:\n            The result of the run.\n        \"\"\"\n        # TODO: We need to deprecate this now that we have the `iter` method.\n        #   Before that, though, we should add an event for when we reach the final result of the stream.\n        if infer_name and self.name is None:\n            # f_back because `asynccontextmanager` adds one frame\n            if frame := inspect.currentframe():  # pragma: no branch\n                self._infer_name(frame.f_back)\n\n        yielded = False\n        async with self.iter(\n            user_prompt,\n            result_type=result_type,\n            message_history=message_history,\n            model=model,\n            deps=deps,\n            model_settings=model_settings,\n            usage_limits=usage_limits,\n            usage=usage,\n            infer_name=False,\n        ) as agent_run:\n            first_node = agent_run.next_node  # start with the first node\n            assert isinstance(first_node, _agent_graph.UserPromptNode)  # the first node should be a user prompt node\n            node = first_node\n            while True:\n                if self.is_model_request_node(node):\n                    graph_ctx = agent_run.ctx\n                    async with node._stream(graph_ctx) as streamed_response:  # pyright: ignore[reportPrivateUsage]\n\n                        async def stream_to_final(\n                            s: models.StreamedResponse,\n                        ) -> FinalResult[models.StreamedResponse] | None:\n                            result_schema = graph_ctx.deps.result_schema\n                            async for maybe_part_event in streamed_response:\n                                if isinstance(maybe_part_event, _messages.PartStartEvent):\n                                    new_part = maybe_part_event.part\n                                    if isinstance(new_part, _messages.TextPart):\n                                        if _agent_graph.allow_text_result(result_schema):\n                                            return FinalResult(s, None, None)\n                                    elif isinstance(new_part, _messages.ToolCallPart) and result_schema:\n                                        for call, _ in result_schema.find_tool([new_part]):\n                                            return FinalResult(s, call.tool_name, call.tool_call_id)\n                            return None\n\n                        final_result_details = await stream_to_final(streamed_response)\n                        if final_result_details is not None:\n                            if yielded:\n                                raise exceptions.AgentRunError('Agent run produced final results')\n                            yielded = True\n\n                            messages = graph_ctx.state.message_history.copy()\n\n                            async def on_complete() -> None:\n                                \"\"\"Called when the stream has completed.\n\n                                The model response will have been added to messages by now\n                                by `StreamedRunResult._marked_completed`.\n                                \"\"\"\n                                last_message = messages[-1]\n                                assert isinstance(last_message, _messages.ModelResponse)\n                                tool_calls = [\n                                    part for part in last_message.parts if isinstance(part, _messages.ToolCallPart)\n                                ]\n\n                                parts: list[_messages.ModelRequestPart] = []\n                                async for _event in _agent_graph.process_function", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-65bc4779c39b4dfb61824a17bf7103db", "__created_at__": 1744231651.420514, "content": "Called when the stream has completed.\n\n                                The model response will have been added to messages by now\n                                by `StreamedRunResult._marked_completed`.\n                                \"\"\"\n                                last_message = messages[-1]\n                                assert isinstance(last_message, _messages.ModelResponse)\n                                tool_calls = [\n                                    part for part in last_message.parts if isinstance(part, _messages.ToolCallPart)\n                                ]\n\n                                parts: list[_messages.ModelRequestPart] = []\n                                async for _event in _agent_graph.process_function_tools(\n                                    tool_calls,\n                                    final_result_details.tool_name,\n                                    final_result_details.tool_call_id,\n                                    graph_ctx,\n                                    parts,\n                                ):\n                                    pass\n                                # TODO: Should we do something here related to the retry count?\n                                #   Maybe we should move the incrementing of the retry count to where we actually make a request?\n                                # if any(isinstance(part, _messages.RetryPromptPart) for part in parts):\n                                #     ctx.state.increment_retries(ctx.deps.max_result_retries)\n                                if parts:\n                                    messages.append(_messages.ModelRequest(parts))\n\n                            yield StreamedRunResult(\n                                messages,\n                                graph_ctx.deps.new_message_index,\n                                graph_ctx.deps.usage_limits,\n                                streamed_response,\n                                graph_ctx.deps.result_schema,\n                                _agent_graph.build_run_context(graph_ctx),\n                                graph_ctx.deps.result_validators,\n                                final_result_details.tool_name,\n                                on_complete,\n                            )\n                            break\n                next_node = await agent_run.next(node)\n                if not isinstance(next_node, _agent_graph.AgentNode):\n                    raise exceptions.AgentRunError('Should have produced a StreamedRunResult before getting here')\n                node = cast(_agent_graph.AgentNode[Any, Any], next_node)\n\n        if not yielded:\n            raise exceptions.AgentRunError('Agent run finished without producing a final result')\n\n    @contextmanager\n    def override(\n        self,\n        *,\n        deps: AgentDepsT | _utils.Unset = _utils.UNSET,\n        model: models.Model | models.KnownModelName | str | _utils.Unset = _utils.UNSET,\n    ) -> Iterator[None]:\n        \"\"\"Context manager to temporarily override agent dependencies and model.\n\n        This is particularly useful when testing.\n        You can find an example of this [here](../testing.md#overriding-model-via-pytest-fixtures).\n\n        Args:\n            deps: The dependencies to use instead of the dependencies passed to the agent run.\n            model: The model to use instead of the model passed to the agent run.\n        \"\"\"\n        if _utils.is_set(deps):\n            override_deps_before = self._override_deps\n            self._override_deps = _utils.Some(deps)\n        else:\n            override_deps_before = _utils.UNSET\n\n        if _utils.is_set(model):\n            override_model_before = self._override_model\n            self._override_model = _utils.Some(models.infer_model(model))\n        else:\n            override_model_before = _utils.UNSET\n\n        try:\n            yield\n        finally:\n            if _utils.is_set(override_deps_before):\n                self._override_deps = override_deps_before\n            if _utils.is_set(override_model_before):\n                self._override_model = override_model_before\n\n    @overload\n    def system_prompt(\n        self, func: Callable[[RunContext[AgentDepsT]], str], /\n    ) -> Callable[[RunContext[AgentDepsT]], str]: ...\n\n    @overload\n    def system_prompt(\n        self, func: Callable[[RunContext[AgentDepsT]], Awaitable[str]], /\n    ) -> Callable[[RunContext[AgentDepsT]], Awaitable[str]]: ...\n\n    @overload\n    def system_prompt(self, func: Callable[[], str], /) -> Callable[[], str]: ...\n\n    @overload\n    def system_prompt(self, func: Callable[[], Awaitable[str]], /) -> Callable[[], Awaitable[str]]: ...\n\n    @overload\n    def system_prompt(\n        self, /, *, dynamic: bool = False\n    ) -> Callable[[_system_prompt.SystemPromptFunc[AgentDepsT]], _system_prompt.SystemPromptFunc[AgentDepsT]]: ...\n\n    def system_prompt(\n        self,\n        func: _system_prompt.SystemPromptFunc[AgentDepsT] | None = None,\n        /,\n        *,\n        dynamic: bool = False,\n    ) -> (\n        Callable[[_system_prompt.SystemPromptFunc[AgentDepsT]], _system_prompt.SystemPromptFunc[AgentDepsT]]\n        | _system_prompt.SystemPromptFunc[AgentDepsT]\n    ):\n        \"\"\"Decorator to register a system prompt function.\n\n        Optionally takes [`RunContext`][pydantic_ai.tools.RunContext] as its only argument.\n        Can decorate a sync or async functions.\n\n        The decorator can be used either bare (`agent.system_prompt`) or as a function call\n        (`agent.system_prompt(...)`), see the examples below.\n\n        Overloads for every possible signature of `system_prompt` are included so the decorator doesn't obscure\n        the type of the function, see `tests/typed_agent.py` for tests.\n\n        Args:\n            func: The function to decorate\n            dynamic: If True, the system prompt will be reevaluated even when `messages_history` is provided,\n                see [`SystemPromptPart.dynamic_ref`][pydantic_ai.messages.SystemPromptPart.dynamic_ref]\n\n        Example:\n        ```python\n        from pydantic_ai import Agent, RunContext\n\n        agent = Agent('test', deps_type=str)\n\n        @agent.system_prompt\n        def simple_system_prompt() -> str:\n            return 'foobar'\n\n        @agent.system_prompt(dynamic=True)\n        async def async_system_prompt(ctx: RunContext[str]) -> str:\n            return f'{ctx.deps} is the", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ff513df1fc0c234137e78a2a4fdf00c8", "__created_at__": 1744231651.420514, "content": "PromptPart.dynamic_ref`][pydantic_ai.messages.SystemPromptPart.dynamic_ref]\n\n        Example:\n        ```python\n        from pydantic_ai import Agent, RunContext\n\n        agent = Agent('test', deps_type=str)\n\n        @agent.system_prompt\n        def simple_system_prompt() -> str:\n            return 'foobar'\n\n        @agent.system_prompt(dynamic=True)\n        async def async_system_prompt(ctx: RunContext[str]) -> str:\n            return f'{ctx.deps} is the best'\n        ```\n        \"\"\"\n        if func is None:\n\n            def decorator(\n                func_: _system_prompt.SystemPromptFunc[AgentDepsT],\n            ) -> _system_prompt.SystemPromptFunc[AgentDepsT]:\n                runner = _system_prompt.SystemPromptRunner[AgentDepsT](func_, dynamic=dynamic)\n                self._system_prompt_functions.append(runner)\n                if dynamic:\n                    self._system_prompt_dynamic_functions[func_.__qualname__] = runner\n                return func_\n\n            return decorator\n        else:\n            assert not dynamic, \"dynamic can't be True in this case\"\n            self._system_prompt_functions.append(_system_prompt.SystemPromptRunner[AgentDepsT](func, dynamic=dynamic))\n            return func\n\n    @overload\n    def result_validator(\n        self, func: Callable[[RunContext[AgentDepsT], ResultDataT], ResultDataT], /\n    ) -> Callable[[RunContext[AgentDepsT], ResultDataT], ResultDataT]: ...\n\n    @overload\n    def result_validator(\n        self, func: Callable[[RunContext[AgentDepsT], ResultDataT], Awaitable[ResultDataT]], /\n    ) -> Callable[[RunContext[AgentDepsT], ResultDataT], Awaitable[ResultDataT]]: ...\n\n    @overload\n    def result_validator(\n        self, func: Callable[[ResultDataT], ResultDataT], /\n    ) -> Callable[[ResultDataT], ResultDataT]: ...\n\n    @overload\n    def result_validator(\n        self, func: Callable[[ResultDataT], Awaitable[ResultDataT]], /\n    ) -> Callable[[ResultDataT], Awaitable[ResultDataT]]: ...\n\n    def result_validator(\n        self, func: _result.ResultValidatorFunc[AgentDepsT, ResultDataT], /\n    ) -> _result.ResultValidatorFunc[AgentDepsT, ResultDataT]:\n        \"\"\"Decorator to register a result validator function.\n\n        Optionally takes [`RunContext`][pydantic_ai.tools.RunContext] as its first argument.\n        Can decorate a sync or async functions.\n\n        Overloads for every possible signature of `result_validator` are included so the decorator doesn't obscure\n        the type of the function, see `tests/typed_agent.py` for tests.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent, ModelRetry, RunContext\n\n        agent = Agent('test', deps_type=str)\n\n        @agent.result_validator\n        def result_validator_simple(data: str) -> str:\n            if 'wrong' in data:\n                raise ModelRetry('wrong response')\n            return data\n\n        @agent.result_validator\n        async def result_validator_deps(ctx: RunContext[str], data: str) -> str:\n            if ctx.deps in data:\n                raise ModelRetry('wrong response')\n            return data\n\n        result = agent.run_sync('foobar', deps='spam')\n        print(result.data)\n        #> success (no tool calls)\n        ```\n        \"\"\"\n        self._result_validators.append(_result.ResultValidator[AgentDepsT, Any](func))\n        return func\n\n    @overload\n    def tool(self, func: ToolFuncContext[AgentDepsT, ToolParams], /) -> ToolFuncContext[AgentDepsT, ToolParams]: ...\n\n    @overload\n    def tool(\n        self,\n        /,\n        *,\n        name: str | None = None,\n        retries: int | None = None,\n        prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n        docstring_format: DocstringFormat = 'auto',\n        require_parameter_descriptions: bool = False,\n        schema_generator: type[GenerateJsonSchema] = GenerateToolJsonSchema,\n        strict: bool | None = None,\n    ) -> Callable[[ToolFuncContext[AgentDepsT, ToolParams]], ToolFuncContext[AgentDepsT, ToolParams]]: ...\n\n    def tool(\n        self,\n        func: ToolFuncContext[AgentDepsT, ToolParams] | None = None,\n        /,\n        *,\n        name: str | None = None,\n        retries: int | None = None,\n        prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n        docstring_format: DocstringFormat = 'auto',\n        require_parameter_descriptions: bool = False,\n        schema_generator: type[GenerateJsonSchema] = GenerateToolJsonSchema,\n        strict: bool | None = None,\n    ) -> Any:\n        \"\"\"Decorator to register a tool function which takes [`RunContext`][pydantic_ai.tools.RunContext] as its first argument.\n\n        Can decorate a sync or async functions.\n\n        The docstring is inspected to extract both the tool description and description of each parameter,\n        [learn more](../tools.md#function-tools-and-schema).\n\n        We can't add overloads for every possible signature of tool, since the return type is a recursive union\n        so the signature of functions decorated with `@agent.tool` is obscured.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent, RunContext\n\n        agent = Agent('test', deps_type=int)\n\n        @agent.tool\n        def foobar(ctx: RunContext[int], x: int) -> int:\n            return ctx.deps + x\n\n        @agent.tool(retries", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f3ddcdd6dcfe55ac66d9a731536a392d", "__created_at__": 1744231651.420514, "content": "s for every possible signature of tool, since the return type is a recursive union\n        so the signature of functions decorated with `@agent.tool` is obscured.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent, RunContext\n\n        agent = Agent('test', deps_type=int)\n\n        @agent.tool\n        def foobar(ctx: RunContext[int], x: int) -> int:\n            return ctx.deps + x\n\n        @agent.tool(retries=2)\n        async def spam(ctx: RunContext[str], y: float) -> float:\n            return ctx.deps + y\n\n        result = agent.run_sync('foobar', deps=1)\n        print(result.data)\n        #> {\"foobar\":1,\"spam\":1.0}\n        ```\n\n        Args:\n            func: The tool function to register.\n            name: The name of the tool, defaults to the function name.\n            retries: The number of retries to allow for this tool, defaults to the agent's default retries,\n                which defaults to 1.\n            prepare: custom method to prepare the tool definition for each step, return `None` to omit this\n                tool from a given step. This is useful if you want to customise a tool at call time,\n                or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].\n            docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].\n                Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n            require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.\n            schema_generator: The JSON schema generator class to use for this tool. Defaults to `GenerateToolJsonSchema`.\n            strict: Whether to enforce JSON schema compliance (only affects OpenAI).\n                See [`ToolDefinition`][pydantic_ai.tools.ToolDefinition] for more info.\n        \"\"\"\n        if func is None:\n\n            def tool_decorator(\n                func_: ToolFuncContext[AgentDepsT, ToolParams],\n            ) -> ToolFuncContext[AgentDepsT, ToolParams]:\n                # noinspection PyTypeChecker\n                self._register_function(\n                    func_,\n                    True,\n                    name,\n                    retries,\n                    prepare,\n                    docstring_format,\n                    require_parameter_descriptions,\n                    schema_generator,\n                    strict,\n                )\n                return func_\n\n            return tool_decorator\n        else:\n            # noinspection PyTypeChecker\n            self._register_function(\n                func,\n                True,\n                name,\n                retries,\n                prepare,\n                docstring_format,\n                require_parameter_descriptions,\n                schema_generator,\n                strict,\n            )\n            return func\n\n    @overload\n    def tool_plain(self, func: ToolFuncPlain[ToolParams], /) -> ToolFuncPlain[ToolParams]: ...\n\n    @overload\n    def tool_plain(\n        self,\n        /,\n        *,\n        name: str | None = None,\n        retries: int | None = None,\n        prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n        docstring_format: DocstringFormat = 'auto',\n        require_parameter_descriptions: bool = False,\n        schema_generator: type[GenerateJsonSchema] = GenerateToolJsonSchema,\n        strict: bool | None = None,\n    ) -> Callable[[ToolFuncPlain[ToolParams]], ToolFuncPlain[ToolParams]]: ...\n\n    def tool_plain(\n        self,\n        func: ToolFuncPlain[ToolParams] | None = None,\n        /,\n        *,\n        name: str | None = None,\n        retries: int | None = None,\n        prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n        docstring_format: DocstringFormat = 'auto',\n        require_parameter_descriptions: bool = False,\n        schema_generator: type[GenerateJsonSchema] = GenerateToolJsonSchema,\n        strict: bool | None = None,\n    ) -> Any:\n        \"\"\"Decorator to register a tool function which DOES NOT take `RunContext` as an argument.\n\n        Can decorate a sync or async functions.\n\n        The docstring is inspected to extract both the tool description and description of each parameter,\n        [learn more](../tools.md#function-tools-and-schema).\n\n        We can't add overloads for every possible signature of tool, since the return type is a recursive union\n        so the signature of functions decorated with `@agent.tool` is obscured.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent, RunContext\n\n        agent = Agent('test')\n\n        @agent.tool\n        def foobar(ctx: RunContext[int]) -> int:\n            return 123\n\n        @agent.tool(retries=2)\n        async def spam(ctx: RunContext[str]) -> float:\n            return 3.14\n\n        result = agent.run_sync('foobar', deps=1)\n        print(result.data)\n        #> {\"foobar\":123,\"spam\":3.14}\n        ```\n\n        Args:\n            func: The tool function to register.\n            name: The name of the tool, defaults to the function name.\n            retries: The number of retries to allow for this tool, defaults to the agent's default retries,\n                which defaults to 1.\n            prepare: custom method to prepare the tool definition for each step, return `None` to omit this\n                tool from a given step. This is useful if you want to customise a tool at call time,\n                or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].\n            docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-09588c5157091a4aa47d5c46bda7856c", "__created_at__": 1744231651.420514, "content": "defaults to 1.\n            prepare: custom method to prepare the tool definition for each step, return `None` to omit this\n                tool from a given step. This is useful if you want to customise a tool at call time,\n                or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].\n            docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].\n                Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n            require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.\n            schema_generator: The JSON schema generator class to use for this tool. Defaults to `GenerateToolJsonSchema`.\n            strict: Whether to enforce JSON schema compliance (only affects OpenAI).\n                See [`ToolDefinition`][pydantic_ai.tools.ToolDefinition] for more info.\n        \"\"\"\n        if func is None:\n\n            def tool_decorator(func_: ToolFuncPlain[ToolParams]) -> ToolFuncPlain[ToolParams]:\n                # noinspection PyTypeChecker\n                self._register_function(\n                    func_,\n                    False,\n                    name,\n                    retries,\n                    prepare,\n                    docstring_format,\n                    require_parameter_descriptions,\n                    schema_generator,\n                    strict,\n                )\n                return func_\n\n            return tool_decorator\n        else:\n            self._register_function(\n                func,\n                False,\n                name,\n                retries,\n                prepare,\n                docstring_format,\n                require_parameter_descriptions,\n                schema_generator,\n                strict,\n            )\n            return func\n\n    def _register_function(\n        self,\n        func: ToolFuncEither[AgentDepsT, ToolParams],\n        takes_ctx: bool,\n        name: str | None,\n        retries: int | None,\n        prepare: ToolPrepareFunc[AgentDepsT] | None,\n        docstring_format: DocstringFormat,\n        require_parameter_descriptions: bool,\n        schema_generator: type[GenerateJsonSchema],\n        strict: bool | None,\n    ) -> None:\n        \"\"\"Private utility to register a function as a tool.\"\"\"\n        retries_ = retries if retries is not None else self._default_retries\n        tool = Tool[AgentDepsT](\n            func,\n            takes_ctx=takes_ctx,\n            name=name,\n            max_retries=retries_,\n            prepare=prepare,\n            docstring_format=docstring_format,\n            require_parameter_descriptions=require_parameter_descriptions,\n            schema_generator=schema_generator,\n            strict=strict,\n        )\n        self._register_tool(tool)\n\n    def _register_tool(self, tool: Tool[AgentDepsT]) -> None:\n        \"\"\"Private utility to register a tool instance.\"\"\"\n        if tool.max_retries is None:\n            # noinspection PyTypeChecker\n            tool = dataclasses.replace(tool, max_retries=self._default_retries)\n\n        if tool.name in self._function_tools:\n            raise exceptions.UserError(f'Tool name conflicts with existing tool: {tool.name!r}')\n\n        if self._result_schema and tool.name in self._result_schema.tools:\n            raise exceptions.UserError(f'Tool name conflicts with result schema name: {tool.name!r}')\n\n        self._function_tools[tool.name] = tool\n\n    def _get_model(self, model: models.Model | models.KnownModelName | str | None) -> models.Model:\n        \"\"\"Create a model configured for this agent.\n\n        Args:\n            model: model to use for this run, required if `model` was not set when creating the agent.\n\n        Returns:\n            The model used\n        \"\"\"\n        model_: models.Model\n        if some_model := self._override_model:\n            # we don't want `override()` to cover up errors from the model not being defined, hence this check\n            if model is None and self.model is None:\n                raise exceptions.UserError(\n                    '`model` must either be set on the agent or included when calling it. '\n                    '(Even when `override(model=...)` is customizing the model that will actually be called)'\n                )\n            model_ = some_model.value\n        elif model is not None:\n            model_ = models.infer_model(model)\n        elif self.model is not None:\n            # noinspection PyTypeChecker\n            model_ = self.model = models.infer_model(self.model)\n        else:\n            raise exceptions.UserError('`model` must either be set on the agent or included when calling it.')\n\n        instrument = self.instrument\n        if instrument is None:\n            instrument = self._instrument_default\n\n        if instrument and not isinstance(model_, InstrumentedModel):\n            if instrument is True:\n                instrument = InstrumentationSettings()\n\n            model_ = InstrumentedModel(model_, instrument)\n\n        return model_\n\n    def _get_deps(self: Agent[T, ResultDataT], deps: T) -> T:\n        \"\"\"Get deps for a run.\n\n        If we've overridden deps via `_override_deps`, use that, otherwise use the deps passed to the call.\n\n        We could do runtime type checking of deps against `self._deps_type`, but that's a slippery slope.\n        \"\"\"\n        if some_deps := self._override_deps:\n            return some_deps.value\n        else:\n            return deps\n\n    def _infer_name(self, function_frame: FrameType | None) -> None:\n        \"\"\"Infer the agent name from the call frame.\n\n        Usage should be `self._infer_name(inspect.currentframe())`.\n        \"\"\"\n        assert self.name is None, 'Name already set'\n        if function_frame is not None:  # pragma: no branch\n            if parent_frame := function_frame.f_back:  # pragma: no branch\n                for name, item in parent_frame.f_locals.items():\n                    if item is self", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-8de45bf595a0df1a297d984f0b5ee185", "__created_at__": 1744231651.420514, "content": "_frame: FrameType | None) -> None:\n        \"\"\"Infer the agent name from the call frame.\n\n        Usage should be `self._infer_name(inspect.currentframe())`.\n        \"\"\"\n        assert self.name is None, 'Name already set'\n        if function_frame is not None:  # pragma: no branch\n            if parent_frame := function_frame.f_back:  # pragma: no branch\n                for name, item in parent_frame.f_locals.items():\n                    if item is self:\n                        self.name = name\n                        return\n                if parent_frame.f_locals != parent_frame.f_globals:\n                    # if we couldn't find the agent in locals and globals are a different dict, try globals\n                    for name, item in parent_frame.f_globals.items():\n                        if item is self:\n                            self.name = name\n                            return\n\n    @property\n    @deprecated(\n        'The `last_run_messages` attribute has been removed, use `capture_run_messages` instead.', category=None\n    )\n    def last_run_messages(self) -> list[_messages.ModelMessage]:\n        raise AttributeError('The `last_run_messages` attribute has been removed, use `capture_run_messages` instead.')\n\n    def _build_graph(\n        self, result_type: type[RunResultDataT] | None\n    ) -> Graph[_agent_graph.GraphAgentState, _agent_graph.GraphAgentDeps[AgentDepsT, Any], FinalResult[Any]]:\n        return _agent_graph.build_agent_graph(self.name, self._deps_type, result_type or self.result_type)\n\n    def _prepare_result_schema(\n        self, result_type: type[RunResultDataT] | None\n    ) -> _result.ResultSchema[RunResultDataT] | None:\n        if result_type is not None:\n            if self._result_validators:\n                raise exceptions.UserError('Cannot set a custom run `result_type` when the agent has result validators')\n            return _result.ResultSchema[result_type].build(\n                result_type, self._result_tool_name, self._result_tool_description\n            )\n        else:\n            return self._result_schema  # pyright: ignore[reportReturnType]\n\n    @staticmethod\n    def is_model_request_node(\n        node: _agent_graph.AgentNode[T, S] | End[result.FinalResult[S]],\n    ) -> TypeGuard[_agent_graph.ModelRequestNode[T, S]]:\n        \"\"\"Check if the node is a `ModelRequestNode`, narrowing the type if it is.\n\n        This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n        \"\"\"\n        return isinstance(node, _agent_graph.ModelRequestNode)\n\n    @staticmethod\n    def is_call_tools_node(\n        node: _agent_graph.AgentNode[T, S] | End[result.FinalResult[S]],\n    ) -> TypeGuard[_agent_graph.CallToolsNode[T, S]]:\n        \"\"\"Check if the node is a `CallToolsNode`, narrowing the type if it is.\n\n        This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n        \"\"\"\n        return isinstance(node, _agent_graph.CallToolsNode)\n\n    @staticmethod\n    def is_user_prompt_node(\n        node: _agent_graph.AgentNode[T, S] | End[result.FinalResult[S]],\n    ) -> TypeGuard[_agent_graph.UserPromptNode[T, S]]:\n        \"\"\"Check if the node is a `UserPromptNode`, narrowing the type if it is.\n\n        This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n        \"\"\"\n        return isinstance(node, _agent_graph.UserPromptNode)\n\n    @staticmethod\n    def is_end_node(\n        node: _agent_graph.AgentNode[T, S] | End[result.FinalResult[S]],\n    ) -> TypeGuard[End[result.FinalResult[S]]]:\n        \"\"\"Check if the node is a `End`, narrowing the type if it is.\n\n        This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n        \"\"\"\n        return isinstance(node, End)\n\n    @asynccontextmanager\n    async def run_mcp_servers(self) -> AsyncIterator[None]:\n        \"\"\"Run [`MCPServerStdio`s][pydantic_ai.mcp.MCPServerStdio] so they can be used by the agent.\n\n        Returns: a context manager to start and shutdown the servers.\n        \"\"\"\n        exit_stack = AsyncExitStack()\n        try:\n            for mcp_server in self._mcp_servers:\n                await exit_stack.enter_async_context(mcp_server)\n            yield\n        finally:\n            await exit_stack.aclose()\n\n```\n\n\n#### model `instance-attribute`\n\n```\nmodel: Model | KnownModelName | str | None\n\n```\n\nThe default model configured for this agent.\n\nWe allow str here since the actual list of allowed models changes frequently.\n\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model: Model | KnownModelName | str | None = None,\n    *,\n    result_type: type[ResultDataT] = str,\n    system_prompt: str | Sequence[str] = (),\n    deps_type: type[AgentDepsT] = NoneType,\n    name: str | None = None,\n    model_settings: ModelSettings | None = None,\n    retries: int = 1,\n    result_tool_name: str = \"final_result\",\n    result_tool_description: str | None = None,\n    result_retries: int | None = None,\n    tools: Sequence[\n        Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]\n    ] = (),\n    mcp_servers: Sequence[MCPServer] = (),\n    defer_model_check: bool = False,\n    end_strategy: EndStrategy = \"early\",\n    instrument: InstrumentationSettings | bool | None = None\n)\n\n```\n\nCreate an agent.", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-cc724d184134671e86784e1ef1d1caf1", "__created_at__": 1744231651.420514, "content": "result_tool_description: str | None = None,\n    result_retries: int | None = None,\n    tools: Sequence[\n        Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]\n    ] = (),\n    mcp_servers: Sequence[MCPServer] = (),\n    defer_model_check: bool = False,\n    end_strategy: EndStrategy = \"early\",\n    instrument: InstrumentationSettings | bool | None = None\n)\n\n```\n\nCreate an agent.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model` | `Model | KnownModelName | str | None` | The default model to use for this agent, if not provide, you must provide the model when calling it. We allow str here since the actual list of allowed models changes frequently. | `None` |\n| `result_type` | `type[ResultDataT]` | The type of the result data, used to validate the result data, defaults to `str`. | `str` |\n| `system_prompt` | `str | Sequence[str]` | Static system prompts to use for this agent, you can also register system prompts via a function with `system_prompt`. | `()` |\n| `deps_type` | `type[AgentDepsT]` | The type used for dependency injection, this parameter exists solely to allow you to fully parameterize the agent, and therefore get the best out of static type checking. If you're not using deps, but want type checking to pass, you can set `deps=None` to satisfy Pyright or add a type hint `: Agent[None, <return type>]`. | `NoneType` |\n| `name` | `str | None` | The name of the agent, used for logging. If `None`, we try to infer the agent name from the call frame when the agent is first run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional model request settings to use for this agent's runs, by default. | `None` |\n| `retries` | `int` | The default number of retries to allow before raising an error. | `1` |\n| `result_tool_name` | `str` | The name of the tool to use for the final result. | `'final_result'` |\n| `result_tool_description` | `str | None` | The description of the final result tool. | `None` |\n| `result_retries` | `int | None` | The maximum number of retries to allow for result validation, defaults to `retries`. | `None` |\n| `tools` | `Sequence[Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]]` | Tools to register with the agent, you can also register tools via the decorators `@agent.tool` and `@agent.tool_plain`. | `()` |\n| `mcp_servers` | `Sequence[MCPServer]` | MCP servers to register with the agent. You should register a `MCPServer` for each server you want the agent to connect to. | `()` |\n| `defer_model_check` | `bool` | by default, if you provide a named model, it's evaluated to create a `Model` instance immediately, which checks for the necessary environment variables. Set this to `false` to defer the evaluation until the first run. Useful if you want to override the model for testing. | `False` |\n| `end_strategy` | `EndStrategy` | Strategy for handling tool calls that are requested alongside a final result. See `EndStrategy` for more information. | `'early'` |\n| `instrument` | `InstrumentationSettings | bool | None` | Set to True to automatically instrument with OpenTelemetry, which will use Logfire if it's configured. Set to an instance of `InstrumentationSettings` to customize. If this isn't set, then the last value set by `Agent.instrument_all()` will be used, which defaults to False. See the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef __init__(\n    self,\n    model: models.Model | models.KnownModelName | str | None = None,\n    *,\n    result_type: type[ResultDataT] = str,\n    system_prompt: str | Sequence[str] = (),\n    deps_type: type[AgentDepsT] = NoneType,\n    name: str | None = None,\n    model_settings: ModelSettings | None = None,\n    retries: int = 1,\n    result_tool_name: str = 'final_result',\n    result_tool_description: str | None = None,\n    result_retries: int | None = None,\n    tools: Sequence[Tool[AgentDepsT] | ToolFuncEither[AgentDepsT, ...]] = (),\n    mcp_servers: Sequence[MCPServer] = (),\n    defer_model_check: bool = False,\n    end_strategy: EndStrategy = 'early',\n    instrument: InstrumentationSettings | bool | None = None,\n):\n    \"\"\"Create an agent.\n\n    Args:\n        model: The default model to use for this agent, if not provide,\n            you must provide the model when calling it. We allow str here since the actual list of allowed models changes frequently.\n        result_type: The type of the result data, used to validate the result data, defaults to `str`.\n        system_prompt: Static system prompts to use for this agent, you can also register system\n            prompts via a function with [`system_prompt`][pydantic_ai.Agent.system_prompt].\n        deps_type: The type used for dependency injection,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c8a1efe96649b981276d2273ee539b22", "__created_at__": 1744231651.420514, "content": "if not provide,\n            you must provide the model when calling it. We allow str here since the actual list of allowed models changes frequently.\n        result_type: The type of the result data, used to validate the result data, defaults to `str`.\n        system_prompt: Static system prompts to use for this agent, you can also register system\n            prompts via a function with [`system_prompt`][pydantic_ai.Agent.system_prompt].\n        deps_type: The type used for dependency injection, this parameter exists solely to allow you to fully\n            parameterize the agent, and therefore get the best out of static type checking.\n            If you're not using deps, but want type checking to pass, you can set `deps=None` to satisfy Pyright\n            or add a type hint `: Agent[None, ]`.\n        name: The name of the agent, used for logging. If `None`, we try to infer the agent name from the call frame\n            when the agent is first run.\n        model_settings: Optional model request settings to use for this agent's runs, by default.\n        retries: The default number of retries to allow before raising an error.\n        result_tool_name: The name of the tool to use for the final result.\n        result_tool_description: The description of the final result tool.\n        result_retries: The maximum number of retries to allow for result validation, defaults to `retries`.\n        tools: Tools to register with the agent, you can also register tools via the decorators\n            [`@agent.tool`][pydantic_ai.Agent.tool] and [`@agent.tool_plain`][pydantic_ai.Agent.tool_plain].\n        mcp_servers: MCP servers to register with the agent. You should register a [`MCPServer`][pydantic_ai.mcp.MCPServer]\n            for each server you want the agent to connect to.\n        defer_model_check: by default, if you provide a [named][pydantic_ai.models.KnownModelName] model,\n            it's evaluated to create a [`Model`][pydantic_ai.models.Model] instance immediately,\n            which checks for the necessary environment variables. Set this to `false`\n            to defer the evaluation until the first run. Useful if you want to\n            [override the model][pydantic_ai.Agent.override] for testing.\n        end_strategy: Strategy for handling tool calls that are requested alongside a final result.\n            See [`EndStrategy`][pydantic_ai.agent.EndStrategy] for more information.\n        instrument: Set to True to automatically instrument with OpenTelemetry,\n            which will use Logfire if it's configured.\n            Set to an instance of [`InstrumentationSettings`][pydantic_ai.agent.InstrumentationSettings] to customize.\n            If this isn't set, then the last value set by\n            [`Agent.instrument_all()`][pydantic_ai.Agent.instrument_all]\n            will be used, which defaults to False.\n            See the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info.\n    \"\"\"\n    if model is None or defer_model_check:\n        self.model = model\n    else:\n        self.model = models.infer_model(model)\n\n    self.end_strategy = end_strategy\n    self.name = name\n    self.model_settings = model_settings\n    self.result_type = result_type\n    self.instrument = instrument\n\n    self._deps_type = deps_type\n\n    self._result_tool_name = result_tool_name\n    self._result_tool_description = result_tool_description\n    self._result_schema = _result.ResultSchema[result_type].build(\n        result_type, result_tool_name, result_tool_description\n    )\n    self._result_validators = []\n\n    self._system_prompts = (system_prompt,) if isinstance(system_prompt, str) else tuple(system_prompt)\n    self._system_prompt_functions = []\n    self._system_prompt_dynamic_functions = {}\n\n    self._function_tools = {}\n\n    self._default_retries = retries\n    self._max_result_retries = result_retries if result_retries is not None else retries\n    self._mcp_servers = mcp_servers\n    for tool in tools:\n        if isinstance(tool, Tool):\n            self._register_tool(tool)\n        else:\n            self._register_tool(Tool(tool))\n\n```\n\n\n\n\n#### end\\_strategy `instance-attribute`\n\n```\nend_strategy: EndStrategy = end_strategy\n\n```\n\nStrategy for handling tool calls when a final result is found.\n\n\n\n#### name `instance-attribute`\n\n```\nname: str | None = name\n\n```\n\nThe name of the agent, used for logging.\n\nIf `None`, we try to infer the agent name from the call frame when the agent is first run.\n\n\n\n#### model\\_settings `instance-attribute`\n\n```\nmodel_settings: ModelSettings | None = model_settings\n\n```\n\nOptional model request settings to use for this agents's runs, by default.\n\nNote, if `model_settings` is provided by `run`, `run_sync`, or `run_stream`, those settings will\nbe merged with this value, with the runtime argument taking priority.\n\n\n\n#### result\\_type `class-attribute` `instance-attribute`\n\n```\nresult_type: type[ResultDataT] = result_type\n\n```\n\nThe type of the result data, used to validate the result data, defaults to `str`.\n\n\n\n#### instrument `instance-attribute`\n\n```\ninstrument: InstrumentationSettings | bool | None = (\n    instrument\n)\n\n```\n\nOptions to automatically instrument with OpenTelemetry.\n\n\n\n#### instrument\\_all `staticmethod`\n\n```\ninstrument_all(\n    instrument: InstrumentationSettings | bool = True,\n) -> None\n\n```\n\nSet the instrumentation options for all agents where `instrument` is not set.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@staticmethod\ndef", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-083b11d23237b569b4c6fd479cf45e1c", "__created_at__": 1744231651.420514, "content": "instance-attribute`\n\n```\ninstrument: InstrumentationSettings | bool | None = (\n    instrument\n)\n\n```\n\nOptions to automatically instrument with OpenTelemetry.\n\n\n\n#### instrument\\_all `staticmethod`\n\n```\ninstrument_all(\n    instrument: InstrumentationSettings | bool = True,\n) -> None\n\n```\n\nSet the instrumentation options for all agents where `instrument` is not set.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@staticmethod\ndef instrument_all(instrument: InstrumentationSettings | bool = True) -> None:\n    \"\"\"Set the instrumentation options for all agents where `instrument` is not set.\"\"\"\n    Agent._instrument_default = instrument\n\n```\n\n\n\n\n#### run `async`\n\n```\nrun(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AgentRunResult[ResultDataT]\n\n```\n```\nrun(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT],\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AgentRunResult[RunResultDataT]\n\n```\n \n```\nrun(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AgentRunResult[Any]\n\n```\n\nRun the agent with a user prompt in async mode.\n\nThis method builds an internal agent graph (using system prompts, tools and result schemas) and then\nruns the graph to completion. The result of the run is returned.\n\nExample:\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nasync def main():\n    agent_run = await agent.run('What is the capital of France?')\n    print(agent_run.data)\n    #> Paris\n\n```\n\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `user_prompt` | `str | Sequence[UserContent] | None` | User input to start/continue the conversation. | `None` |\n| `result_type` | `type[RunResultDataT] | None` | Custom result type to use for this run, `result_type` may only be used if the agent has no result validators since result validators would expect an argument that matches the agent's result type. | `None` |\n| `message_history` | `list[ModelMessage] | None` | History of the conversation so far. | `None` |\n| `model` | `Model | KnownModelName | str | None` | Optional model to use for this run, required if `model` was not set when creating the agent. | `None` |\n| `deps` | `AgentDepsT` | Optional dependencies to use for this run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional settings to use for this model's request. | `None` |\n| `usage_limits` | `UsageLimits | None` | Optional limits on model request count or token usage. | `None` |\n| `usage` | `Usage | None` | Optional usage to start with, useful for resuming a conversation or agents used in tools. | `None` |\n| `infer_name` | `bool` | Whether to try to infer the agent name from the call frame if it's not set. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AgentRunResult[Any]` | The result of the run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\nasync def run(\n    self,\n    user_prompt: str | Sequence[_messages.UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[_messages.ModelMessage] | None = None,\n    model: models.Model | models.KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: _usage.UsageLimits | None = None,\n    usage: _usage.Usage | None = None,\n    infer_name: bool = True,\n) -> AgentRunResult[Any]:\n    \"\"\"Run the agent with a user prompt in async mode.\n\n    This method builds an internal agent graph (using system prompts, tools and result schemas) and then\n    runs the graph to completion. The result of the run is returned.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent\n\n    agent =", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-845fe9f41721b0a309c27bcf17a16a5f", "__created_at__": 1744231651.420514, "content": "| None = None,\n    usage: _usage.Usage | None = None,\n    infer_name: bool = True,\n) -> AgentRunResult[Any]:\n    \"\"\"Run the agent with a user prompt in async mode.\n\n    This method builds an internal agent graph (using system prompts, tools and result schemas) and then\n    runs the graph to completion. The result of the run is returned.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent\n\n    agent = Agent('openai:gpt-4o')\n\n    async def main():\n        agent_run = await agent.run('What is the capital of France?')\n        print(agent_run.data)\n        #> Paris\n    ```\n\n    Args:\n        user_prompt: User input to start/continue the conversation.\n        result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no\n            result validators since result validators would expect an argument that matches the agent's result type.\n        message_history: History of the conversation so far.\n        model: Optional model to use for this run, required if `model` was not set when creating the agent.\n        deps: Optional dependencies to use for this run.\n        model_settings: Optional settings to use for this model's request.\n        usage_limits: Optional limits on model request count or token usage.\n        usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n        infer_name: Whether to try to infer the agent name from the call frame if it's not set.\n\n    Returns:\n        The result of the run.\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n    async with self.iter(\n        user_prompt=user_prompt,\n        result_type=result_type,\n        message_history=message_history,\n        model=model,\n        deps=deps,\n        model_settings=model_settings,\n        usage_limits=usage_limits,\n        usage=usage,\n    ) as agent_run:\n        async for _ in agent_run:\n            pass\n\n    assert agent_run.result is not None, 'The graph run did not finish properly'\n    return agent_run.result\n\n```\n\n\n\n\n#### iter `async`\n\n```\niter(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AsyncIterator[AgentRun[AgentDepsT, Any]]\n\n```\n\nA contextmanager which can be used to iterate over the agent graph's nodes as they are executed.\n\nThis method builds an internal agent graph (using system prompts, tools and result schemas) and then returns an\n`AgentRun` object. The `AgentRun` can be used to async-iterate over the nodes of the graph as they are\nexecuted. This is the API to use if you want to consume the outputs coming from each LLM model response, or the\nstream of events coming from the execution of tools.\n\nThe `AgentRun` also provides methods to access the full message history, new messages, and usage statistics,\nand the final result of the run once it has completed.\n\nFor more details, see the documentation of `AgentRun`.\n\nExample:\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nasync def main():\n    nodes = []\n    async with agent.iter('What is the capital of France?') as agent_run:\n        async for node in agent_run:\n            nodes.append(node)\n    print(nodes)\n    '''\n    [\n        UserPromptNode(\n            user_prompt='What is the capital of France?',\n            system_prompts=(),\n            system_prompt_functions=[],\n            system_prompt_dynamic_functions={},\n        ),\n        ModelRequestNode(\n            request=ModelRequest(\n                parts=[\n                    UserPromptPart(\n                        content='What is the capital of France?',\n                        timestamp=datetime.datetime(...),\n                        part_kind='user-prompt',\n                    )\n                ],\n                kind='request',\n            )\n        ),\n        CallToolsNode(\n            model_response=ModelResponse(\n                parts=[TextPart(content='Paris', part_kind='text')],\n                model_name='gpt-4o',\n                timestamp=datetime.datetime(...),\n                kind='response',\n            )\n        ),\n        End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n    ]\n    '''\n    print(agent_run.result.data)\n    #> Paris\n\n```\n\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `user_prompt` | `str | Sequence[UserContent] | None` | User input to start/continue the conversation. | `None` |\n| `result_type` | `type[RunResultDataT] | None` | Custom result type to use for this run, `result_type` may only be used if the agent has no result validators since result validators would expect an argument that matches the agent's result type. | `None` |\n| `message_history` | `list[ModelMessage] | None` | History of the conversation so far. | `None` |\n| `model` | `Model | KnownModelName | str | None` | Optional model to use for this run, required if `model` was not set when creating the agent. | `None` |\n| `deps` | `AgentDepsT` | Optional dependencies to use for this run. | `None` |\n|", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ba0f6d002d71ff318d304dea37c2feb5", "__created_at__": 1744231651.420514, "content": "`None` |\n| `message_history` | `list[ModelMessage] | None` | History of the conversation so far. | `None` |\n| `model` | `Model | KnownModelName | str | None` | Optional model to use for this run, required if `model` was not set when creating the agent. | `None` |\n| `deps` | `AgentDepsT` | Optional dependencies to use for this run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional settings to use for this model's request. | `None` |\n| `usage_limits` | `UsageLimits | None` | Optional limits on model request count or token usage. | `None` |\n| `usage` | `Usage | None` | Optional usage to start with, useful for resuming a conversation or agents used in tools. | `None` |\n| `infer_name` | `bool` | Whether to try to infer the agent name from the call frame if it's not set. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AsyncIterator[AgentRun[AgentDepsT, Any]]` | The result of the run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@asynccontextmanager\nasync def iter(\n    self,\n    user_prompt: str | Sequence[_messages.UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[_messages.ModelMessage] | None = None,\n    model: models.Model | models.KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: _usage.UsageLimits | None = None,\n    usage: _usage.Usage | None = None,\n    infer_name: bool = True,\n) -> AsyncIterator[AgentRun[AgentDepsT, Any]]:\n    \"\"\"A contextmanager which can be used to iterate over the agent graph's nodes as they are executed.\n\n    This method builds an internal agent graph (using system prompts, tools and result schemas) and then returns an\n    `AgentRun` object. The `AgentRun` can be used to async-iterate over the nodes of the graph as they are\n    executed. This is the API to use if you want to consume the outputs coming from each LLM model response, or the\n    stream of events coming from the execution of tools.\n\n    The `AgentRun` also provides methods to access the full message history, new messages, and usage statistics,\n    and the final result of the run once it has completed.\n\n    For more details, see the documentation of `AgentRun`.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent\n\n    agent = Agent('openai:gpt-4o')\n\n    async def main():\n        nodes = []\n        async with agent.iter('What is the capital of France?') as agent_run:\n            async for node in agent_run:\n                nodes.append(node)\n        print(nodes)\n        '''\n        [\n            UserPromptNode(\n                user_prompt='What is the capital of France?',\n                system_prompts=(),\n                system_prompt_functions=[],\n                system_prompt_dynamic_functions={},\n            ),\n            ModelRequestNode(\n                request=ModelRequest(\n                    parts=[\n                        UserPromptPart(\n                            content='What is the capital of France?',\n                            timestamp=datetime.datetime(...),\n                            part_kind='user-prompt',\n                        )\n                    ],\n                    kind='request',\n                )\n            ),\n            CallToolsNode(\n                model_response=ModelResponse(\n                    parts=[TextPart(content='Paris', part_kind='text')],\n                    model_name='gpt-4o',\n                    timestamp=datetime.datetime(...),\n                    kind='response',\n                )\n            ),\n            End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n        ]\n        '''\n        print(agent_run.result.data)\n        #> Paris\n    ```\n\n    Args:\n        user_prompt: User input to start/continue the conversation.\n        result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no\n            result validators since result validators would expect an argument that matches the agent's result type.\n        message_history: History of the conversation so far.\n        model: Optional model to use for this run, required if `model` was not set when creating the agent.\n        deps: Optional dependencies to use for this run.\n        model_settings: Optional settings to use for this model's request.\n        usage_limits: Optional limits on model request count or token usage.\n        usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n        infer_name: Whether to try to infer the agent name from the call frame if it's not set.\n\n    Returns:\n        The result of the run.\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n    model_used = self._get_model(model)\n    del model\n\n    deps = self._get_deps(deps)\n    new_message_index = len(message_history) if message_history else 0\n    result_schema: _result.ResultSchema[RunResultDataT] | None = self._prepare_result_schema(result_type)\n\n    # Build the graph\n    graph = self._build_graph(result_type)\n\n    # Build the initial state\n    state = _agent_graph.GraphAgentState(\n        message_history=message_history[:] if message_history else [],\n        usage=usage or _usage.Usage(),\n        retries=0,\n        run_step=0,\n    )\n\n    # We consider it a user error if a user tries to", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-5dd90ca26b9a717c2bb167611fc310a1", "__created_at__": 1744231651.420514, "content": ".ResultSchema[RunResultDataT] | None = self._prepare_result_schema(result_type)\n\n    # Build the graph\n    graph = self._build_graph(result_type)\n\n    # Build the initial state\n    state = _agent_graph.GraphAgentState(\n        message_history=message_history[:] if message_history else [],\n        usage=usage or _usage.Usage(),\n        retries=0,\n        run_step=0,\n    )\n\n    # We consider it a user error if a user tries to restrict the result type while having a result validator that\n    # may change the result type from the restricted type to something else. Therefore, we consider the following\n    # typecast reasonable, even though it is possible to violate it with otherwise-type-checked code.\n    result_validators = cast(list[_result.ResultValidator[AgentDepsT, RunResultDataT]], self._result_validators)\n\n    # TODO: Instead of this, copy the function tools to ensure they don't share current_retry state between agent\n    #  runs. Requires some changes to `Tool` to make them copyable though.\n    for v in self._function_tools.values():\n        v.current_retry = 0\n\n    model_settings = merge_model_settings(self.model_settings, model_settings)\n    usage_limits = usage_limits or _usage.UsageLimits()\n\n    if isinstance(model_used, InstrumentedModel):\n        tracer = model_used.settings.tracer\n    else:\n        tracer = NoOpTracer()\n    agent_name = self.name or 'agent'\n    run_span = tracer.start_span(\n        'agent run',\n        attributes={\n            'model_name': model_used.model_name if model_used else 'no-model',\n            'agent_name': agent_name,\n            'logfire.msg': f'{agent_name} run',\n        },\n    )\n\n    graph_deps = _agent_graph.GraphAgentDeps[AgentDepsT, RunResultDataT](\n        user_deps=deps,\n        prompt=user_prompt,\n        new_message_index=new_message_index,\n        model=model_used,\n        model_settings=model_settings,\n        usage_limits=usage_limits,\n        max_result_retries=self._max_result_retries,\n        end_strategy=self.end_strategy,\n        result_schema=result_schema,\n        result_tools=self._result_schema.tool_defs() if self._result_schema else [],\n        result_validators=result_validators,\n        function_tools=self._function_tools,\n        mcp_servers=self._mcp_servers,\n        run_span=run_span,\n        tracer=tracer,\n    )\n    start_node = _agent_graph.UserPromptNode[AgentDepsT](\n        user_prompt=user_prompt,\n        system_prompts=self._system_prompts,\n        system_prompt_functions=self._system_prompt_functions,\n        system_prompt_dynamic_functions=self._system_prompt_dynamic_functions,\n    )\n\n    async with graph.iter(\n        start_node,\n        state=state,\n        deps=graph_deps,\n        span=use_span(run_span, end_on_exit=True),\n        infer_name=False,\n    ) as graph_run:\n        yield AgentRun(graph_run)\n\n```\n\n\n\n\n#### run\\_sync\n\n```\nrun_sync(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AgentRunResult[ResultDataT]\n\n```\n```\nrun_sync(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AgentRunResult[RunResultDataT]\n\n```\n \n```\nrun_sync(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AgentRunResult[Any]\n\n```\n\nSynchronously run the agent with a user prompt.\n\nThis is a convenience method that wraps `self.run` with `loop.run_until_complete(...)`.\nYou therefore can't use this method inside async code or if there's an active event loop.\n\nExample:\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nresult_sync = agent.run_sync('What is the capital of Italy?')\nprint(result_sync.data)\n#> Rome\n\n```\n\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `user_prompt` | `str | Sequence[UserContent] | None` | User input to start/continue the conversation. | `None` |\n| `result_type` | `type[RunResultDataT] | None` | Custom result type to use for this run, `result_type` may only be used if the agent has no result validators since result validators would expect an argument that matches the agent's result type. | `None` |", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-632e225b36efe3528b4513b2ab669d21", "__created_at__": 1744231651.420514, "content": "--- | --- | --- |\n| `user_prompt` | `str | Sequence[UserContent] | None` | User input to start/continue the conversation. | `None` |\n| `result_type` | `type[RunResultDataT] | None` | Custom result type to use for this run, `result_type` may only be used if the agent has no result validators since result validators would expect an argument that matches the agent's result type. | `None` |\n| `message_history` | `list[ModelMessage] | None` | History of the conversation so far. | `None` |\n| `model` | `Model | KnownModelName | str | None` | Optional model to use for this run, required if `model` was not set when creating the agent. | `None` |\n| `deps` | `AgentDepsT` | Optional dependencies to use for this run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional settings to use for this model's request. | `None` |\n| `usage_limits` | `UsageLimits | None` | Optional limits on model request count or token usage. | `None` |\n| `usage` | `Usage | None` | Optional usage to start with, useful for resuming a conversation or agents used in tools. | `None` |\n| `infer_name` | `bool` | Whether to try to infer the agent name from the call frame if it's not set. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AgentRunResult[Any]` | The result of the run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef run_sync(\n    self,\n    user_prompt: str | Sequence[_messages.UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[_messages.ModelMessage] | None = None,\n    model: models.Model | models.KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: _usage.UsageLimits | None = None,\n    usage: _usage.Usage | None = None,\n    infer_name: bool = True,\n) -> AgentRunResult[Any]:\n    \"\"\"Synchronously run the agent with a user prompt.\n\n    This is a convenience method that wraps [`self.run`][pydantic_ai.Agent.run] with `loop.run_until_complete(...)`.\n    You therefore can't use this method inside async code or if there's an active event loop.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent\n\n    agent = Agent('openai:gpt-4o')\n\n    result_sync = agent.run_sync('What is the capital of Italy?')\n    print(result_sync.data)\n    #> Rome\n    ```\n\n    Args:\n        user_prompt: User input to start/continue the conversation.\n        result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no\n            result validators since result validators would expect an argument that matches the agent's result type.\n        message_history: History of the conversation so far.\n        model: Optional model to use for this run, required if `model` was not set when creating the agent.\n        deps: Optional dependencies to use for this run.\n        model_settings: Optional settings to use for this model's request.\n        usage_limits: Optional limits on model request count or token usage.\n        usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n        infer_name: Whether to try to infer the agent name from the call frame if it's not set.\n\n    Returns:\n        The result of the run.\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n    return get_event_loop().run_until_complete(\n        self.run(\n            user_prompt,\n            result_type=result_type,\n            message_history=message_history,\n            model=model,\n            deps=deps,\n            model_settings=model_settings,\n            usage_limits=usage_limits,\n            usage=usage,\n            infer_name=False,\n        )\n    )\n\n```\n\n\n\n\n#### run\\_stream `async`\n\n```\nrun_stream(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AbstractAsyncContextManager[\n    StreamedRunResult[AgentDepsT, ResultDataT]\n]\n\n```\n```\nrun_stream(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT],\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AbstractAsyncContextManager[\n    StreamedRunResult[AgentDepsT, RunResultDataT]\n]\n\n```\n \n```\nrun_stream(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ed10d031435c9386fd353a8330563748", "__created_at__": 1744231651.420514, "content": "deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AbstractAsyncContextManager[\n    StreamedRunResult[AgentDepsT, RunResultDataT]\n]\n\n```\n \n```\nrun_stream(\n    user_prompt: str | Sequence[UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[ModelMessage] | None = None,\n    model: Model | KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: UsageLimits | None = None,\n    usage: Usage | None = None,\n    infer_name: bool = True\n) -> AsyncIterator[StreamedRunResult[AgentDepsT, Any]]\n\n```\n\nRun the agent with a user prompt in async mode, returning a streamed response.\n\nExample:\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nasync def main():\n    async with agent.run_stream('What is the capital of the UK?') as response:\n        print(await response.get_data())\n        #> London\n\n```\n\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `user_prompt` | `str | Sequence[UserContent] | None` | User input to start/continue the conversation. | `None` |\n| `result_type` | `type[RunResultDataT] | None` | Custom result type to use for this run, `result_type` may only be used if the agent has no result validators since result validators would expect an argument that matches the agent's result type. | `None` |\n| `message_history` | `list[ModelMessage] | None` | History of the conversation so far. | `None` |\n| `model` | `Model | KnownModelName | str | None` | Optional model to use for this run, required if `model` was not set when creating the agent. | `None` |\n| `deps` | `AgentDepsT` | Optional dependencies to use for this run. | `None` |\n| `model_settings` | `ModelSettings | None` | Optional settings to use for this model's request. | `None` |\n| `usage_limits` | `UsageLimits | None` | Optional limits on model request count or token usage. | `None` |\n| `usage` | `Usage | None` | Optional usage to start with, useful for resuming a conversation or agents used in tools. | `None` |\n| `infer_name` | `bool` | Whether to try to infer the agent name from the call frame if it's not set. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AsyncIterator[StreamedRunResult[AgentDepsT, Any]]` | The result of the run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@asynccontextmanager\nasync def run_stream(  # noqa C901\n    self,\n    user_prompt: str | Sequence[_messages.UserContent] | None = None,\n    *,\n    result_type: type[RunResultDataT] | None = None,\n    message_history: list[_messages.ModelMessage] | None = None,\n    model: models.Model | models.KnownModelName | str | None = None,\n    deps: AgentDepsT = None,\n    model_settings: ModelSettings | None = None,\n    usage_limits: _usage.UsageLimits | None = None,\n    usage: _usage.Usage | None = None,\n    infer_name: bool = True,\n) -> AsyncIterator[result.StreamedRunResult[AgentDepsT, Any]]:\n    \"\"\"Run the agent with a user prompt in async mode, returning a streamed response.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent\n\n    agent = Agent('openai:gpt-4o')\n\n    async def main():\n        async with agent.run_stream('What is the capital of the UK?') as response:\n            print(await response.get_data())\n            #> London\n    ```\n\n    Args:\n        user_prompt: User input to start/continue the conversation.\n        result_type: Custom result type to use for this run, `result_type` may only be used if the agent has no\n            result validators since result validators would expect an argument that matches the agent's result type.\n        message_history: History of the conversation so far.\n        model: Optional model to use for this run, required if `model` was not set when creating the agent.\n        deps: Optional dependencies to use for this run.\n        model_settings: Optional settings to use for this model's request.\n        usage_limits: Optional limits on model request count or token usage.\n        usage: Optional usage to start with, useful for resuming a conversation or agents used in tools.\n        infer_name: Whether to try to infer the agent name from the call frame if it's not set.\n\n    Returns:\n        The result of the run.\n    \"\"\"\n    # TODO: We need to deprecate this now that we have the `iter` method.\n    #   Before that, though, we should add an event for when we reach the final result of the stream.\n    if infer_name and self.name is None:\n        # f_back because `asynccontextmanager` adds one frame\n        if frame := inspect.currentframe():  # pragma: no branch\n            self._infer_name(frame.f_back)\n\n    yielded =", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-b0ca3e3a47d636078489a814af89439f", "__created_at__": 1744231651.420514, "content": "run.\n    \"\"\"\n    # TODO: We need to deprecate this now that we have the `iter` method.\n    #   Before that, though, we should add an event for when we reach the final result of the stream.\n    if infer_name and self.name is None:\n        # f_back because `asynccontextmanager` adds one frame\n        if frame := inspect.currentframe():  # pragma: no branch\n            self._infer_name(frame.f_back)\n\n    yielded = False\n    async with self.iter(\n        user_prompt,\n        result_type=result_type,\n        message_history=message_history,\n        model=model,\n        deps=deps,\n        model_settings=model_settings,\n        usage_limits=usage_limits,\n        usage=usage,\n        infer_name=False,\n    ) as agent_run:\n        first_node = agent_run.next_node  # start with the first node\n        assert isinstance(first_node, _agent_graph.UserPromptNode)  # the first node should be a user prompt node\n        node = first_node\n        while True:\n            if self.is_model_request_node(node):\n                graph_ctx = agent_run.ctx\n                async with node._stream(graph_ctx) as streamed_response:  # pyright: ignore[reportPrivateUsage]\n\n                    async def stream_to_final(\n                        s: models.StreamedResponse,\n                    ) -> FinalResult[models.StreamedResponse] | None:\n                        result_schema = graph_ctx.deps.result_schema\n                        async for maybe_part_event in streamed_response:\n                            if isinstance(maybe_part_event, _messages.PartStartEvent):\n                                new_part = maybe_part_event.part\n                                if isinstance(new_part, _messages.TextPart):\n                                    if _agent_graph.allow_text_result(result_schema):\n                                        return FinalResult(s, None, None)\n                                elif isinstance(new_part, _messages.ToolCallPart) and result_schema:\n                                    for call, _ in result_schema.find_tool([new_part]):\n                                        return FinalResult(s, call.tool_name, call.tool_call_id)\n                        return None\n\n                    final_result_details = await stream_to_final(streamed_response)\n                    if final_result_details is not None:\n                        if yielded:\n                            raise exceptions.AgentRunError('Agent run produced final results')\n                        yielded = True\n\n                        messages = graph_ctx.state.message_history.copy()\n\n                        async def on_complete() -> None:\n                            \"\"\"Called when the stream has completed.\n\n                            The model response will have been added to messages by now\n                            by `StreamedRunResult._marked_completed`.\n                            \"\"\"\n                            last_message = messages[-1]\n                            assert isinstance(last_message, _messages.ModelResponse)\n                            tool_calls = [\n                                part for part in last_message.parts if isinstance(part, _messages.ToolCallPart)\n                            ]\n\n                            parts: list[_messages.ModelRequestPart] = []\n                            async for _event in _agent_graph.process_function_tools(\n                                tool_calls,\n                                final_result_details.tool_name,\n                                final_result_details.tool_call_id,\n                                graph_ctx,\n                                parts,\n                            ):\n                                pass\n                            # TODO: Should we do something here related to the retry count?\n                            #   Maybe we should move the incrementing of the retry count to where we actually make a request?\n                            # if any(isinstance(part, _messages.RetryPromptPart) for part in parts):\n                            #     ctx.state.increment_retries(ctx.deps.max_result_retries)\n                            if parts:\n                                messages.append(_messages.ModelRequest(parts))\n\n                        yield StreamedRunResult(\n                            messages,\n                            graph_ctx.deps.new_message_index,\n                            graph_ctx.deps.usage_limits,\n                            streamed_response,\n                            graph_ctx.deps.result_schema,\n                            _agent_graph.build_run_context(graph_ctx),\n                            graph_ctx.deps.result_validators,\n                            final_result_details.tool_name,\n                            on_complete,\n                        )\n                        break\n            next_node = await agent_run.next(node)\n            if not isinstance(next_node, _agent_graph.AgentNode):\n                raise exceptions.AgentRunError('Should have produced a StreamedRunResult before getting here')\n            node = cast(_agent_graph.AgentNode[Any, Any], next_node)\n\n    if not yielded:\n        raise exceptions.AgentRunError('Agent run finished without producing a final result')\n\n```\n\n\n\n\n#### override\n\n```\noverride(\n    *,\n    deps: AgentDepsT | Unset = UNSET,\n    model: Model | KnownModelName | str | Unset = UNSET\n) -> Iterator[None]\n\n```\n\nContext manager to temporarily override agent dependencies and model.\n\nThis is particularly useful when testing.\nYou can find an example of this [here](../../testing/#overriding-model-via-pytest-fixtures).\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `deps` | `AgentDepsT | Unset` | The dependencies to use instead of the dependencies passed to the agent run. | `UNSET` |\n| `model` | `Model | KnownModelName | str | Unset` | The model to use instead of the model passed to the agent run. | `UNSET` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@contextmanager\ndef override(\n    self,\n    *,\n    deps: AgentDepsT | _utils.Unset = _utils.UNSET,\n    model: models.Model | models.KnownModelName | str | _utils.Unset = _utils.UNSET,\n) -> Iterator[None]:\n    \"\"\"Context manager to temporarily override agent dependencies and model.\n\n    This is particularly useful when testing.\n    You can find an example of this [here](../testing.md#overriding-model-via-pytest-fixtures).\n\n    Args:\n        deps: The dependencies to use instead of the dependencies passed to the agent run.\n        model: The model to use instead of the model passed to the agent run.\n    \"\"\"\n    if _utils.is", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-263f86d77c473effe9073f383e8bfb9e", "__created_at__": 1744231651.420514, "content": ".UNSET,\n) -> Iterator[None]:\n    \"\"\"Context manager to temporarily override agent dependencies and model.\n\n    This is particularly useful when testing.\n    You can find an example of this [here](../testing.md#overriding-model-via-pytest-fixtures).\n\n    Args:\n        deps: The dependencies to use instead of the dependencies passed to the agent run.\n        model: The model to use instead of the model passed to the agent run.\n    \"\"\"\n    if _utils.is_set(deps):\n        override_deps_before = self._override_deps\n        self._override_deps = _utils.Some(deps)\n    else:\n        override_deps_before = _utils.UNSET\n\n    if _utils.is_set(model):\n        override_model_before = self._override_model\n        self._override_model = _utils.Some(models.infer_model(model))\n    else:\n        override_model_before = _utils.UNSET\n\n    try:\n        yield\n    finally:\n        if _utils.is_set(override_deps_before):\n            self._override_deps = override_deps_before\n        if _utils.is_set(override_model_before):\n            self._override_model = override_model_before\n\n```\n\n\n\n\n#### system\\_prompt\n\n```\nsystem_prompt(\n    func: Callable[[RunContext[AgentDepsT]], str],\n) -> Callable[[RunContext[AgentDepsT]], str]\n\n```\n```\nsystem_prompt(\n    func: Callable[\n        [RunContext[AgentDepsT]], Awaitable[str]\n    ],\n) -> Callable[[RunContext[AgentDepsT]], Awaitable[str]]\n\n```\n```\nsystem_prompt(func: Callable[[], str]) -> Callable[[], str]\n\n```\n```\nsystem_prompt(\n    func: Callable[[], Awaitable[str]],\n) -> Callable[[], Awaitable[str]]\n\n```\n```\nsystem_prompt(*, dynamic: bool = False) -> Callable[\n    [SystemPromptFunc[AgentDepsT]],\n    SystemPromptFunc[AgentDepsT],\n]\n\n```\n \n```\nsystem_prompt(\n    func: SystemPromptFunc[AgentDepsT] | None = None,\n    /,\n    *,\n    dynamic: bool = False,\n) -> (\n    Callable[\n        [SystemPromptFunc[AgentDepsT]],\n        SystemPromptFunc[AgentDepsT],\n    ]\n    | SystemPromptFunc[AgentDepsT]\n)\n\n```\n\nDecorator to register a system prompt function.\n\nOptionally takes `RunContext` as its only argument.\nCan decorate a sync or async functions.\n\nThe decorator can be used either bare (`agent.system_prompt`) or as a function call\n(`agent.system_prompt(...)`), see the examples below.\n\nOverloads for every possible signature of `system_prompt` are included so the decorator doesn't obscure\nthe type of the function, see `tests/typed_agent.py` for tests.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `func` | `SystemPromptFunc[AgentDepsT] | None` | The function to decorate | `None` |\n| `dynamic` | `bool` | If True, the system prompt will be reevaluated even when `messages_history` is provided, see `SystemPromptPart.dynamic_ref` | `False` |\n\nExample:\n```\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent('test', deps_type=str)\n\n@agent.system_prompt\ndef simple_system_prompt() -> str:\n    return 'foobar'\n\n@agent.system_prompt(dynamic=True)\nasync def async_system_prompt(ctx: RunContext[str]) -> str:\n    return f'{ctx.deps} is the best'\n\n```\n\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef system_prompt(\n    self,\n    func: _system_prompt.SystemPromptFunc[AgentDepsT] | None = None,\n    /,\n    *,\n    dynamic: bool = False,\n) -> (\n    Callable[[_system_prompt.SystemPromptFunc[AgentDepsT]], _system_prompt.SystemPromptFunc[AgentDepsT]]\n    | _system_prompt.SystemPromptFunc[AgentDepsT]\n):\n    \"\"\"Decorator to register a system prompt function.\n\n    Optionally takes [`RunContext`][pydantic_ai.tools.RunContext] as its only argument.\n    Can decorate a sync or async functions.\n\n    The decorator can be used either bare (`agent.system_prompt`) or as a function call\n    (`agent.system_prompt(...)`), see the examples below.\n\n    Overloads for every possible signature of `system_prompt` are included so the decorator doesn't obscure\n    the type of the function, see `tests/typed_agent.py` for tests.\n\n    Args:\n        func: The function to decorate\n        dynamic: If True, the system prompt will be reevaluated even when `messages_history` is provided,\n            see [`SystemPromptPart.dynamic_ref`][pydantic_ai.messages.SystemPromptPart.dynamic_ref]\n\n    Example:\n    ```python\n    from pydantic_ai import Agent, RunContext\n\n    agent = Agent('test', deps_type=str)\n\n    @agent.system_prompt\n    def simple_system_prompt() -> str:\n        return 'foobar'\n\n    @agent.system_prompt(dynamic=True)\n    async def async_system_prompt(ctx: RunContext[str]) -> str:\n        return f'{ctx.deps} is the best'\n    ```\n    \"\"\"\n    if func is None:\n\n        def decorator(\n            func_: _system_prompt.SystemPromptFunc[AgentDepsT],\n        ) -> _system_prompt.SystemPromptFunc[AgentDepsT]:\n            runner = _system_prompt.SystemPromptRunner[AgentDepsT](func_, dynamic=dynamic)\n            self._system_prompt_functions.append(runner)\n            if dynamic:\n                self._system_prompt_dynamic_functions[func_.__qualname__] = runner\n            return func_\n\n        return decorator\n    else:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3480f7d762a13a5f3859e9d819c5ecd1", "__created_at__": 1744231651.420514, "content": "if func is None:\n\n        def decorator(\n            func_: _system_prompt.SystemPromptFunc[AgentDepsT],\n        ) -> _system_prompt.SystemPromptFunc[AgentDepsT]:\n            runner = _system_prompt.SystemPromptRunner[AgentDepsT](func_, dynamic=dynamic)\n            self._system_prompt_functions.append(runner)\n            if dynamic:\n                self._system_prompt_dynamic_functions[func_.__qualname__] = runner\n            return func_\n\n        return decorator\n    else:\n        assert not dynamic, \"dynamic can't be True in this case\"\n        self._system_prompt_functions.append(_system_prompt.SystemPromptRunner[AgentDepsT](func, dynamic=dynamic))\n        return func\n\n```\n\n\n\n\n#### result\\_validator\n\n```\nresult_validator(\n    func: Callable[\n        [RunContext[AgentDepsT], ResultDataT], ResultDataT\n    ],\n) -> Callable[\n    [RunContext[AgentDepsT], ResultDataT], ResultDataT\n]\n\n```\n```\nresult_validator(\n    func: Callable[\n        [RunContext[AgentDepsT], ResultDataT],\n        Awaitable[ResultDataT],\n    ],\n) -> Callable[\n    [RunContext[AgentDepsT], ResultDataT],\n    Awaitable[ResultDataT],\n]\n\n```\n```\nresult_validator(\n    func: Callable[[ResultDataT], ResultDataT],\n) -> Callable[[ResultDataT], ResultDataT]\n\n```\n```\nresult_validator(\n    func: Callable[[ResultDataT], Awaitable[ResultDataT]],\n) -> Callable[[ResultDataT], Awaitable[ResultDataT]]\n\n```\n \n```\nresult_validator(\n    func: ResultValidatorFunc[AgentDepsT, ResultDataT],\n) -> ResultValidatorFunc[AgentDepsT, ResultDataT]\n\n```\n\nDecorator to register a result validator function.\n\nOptionally takes `RunContext` as its first argument.\nCan decorate a sync or async functions.\n\nOverloads for every possible signature of `result_validator` are included so the decorator doesn't obscure\nthe type of the function, see `tests/typed_agent.py` for tests.\n\nExample:\n```\nfrom pydantic_ai import Agent, ModelRetry, RunContext\n\nagent = Agent('test', deps_type=str)\n\n@agent.result_validator\ndef result_validator_simple(data: str) -> str:\n    if 'wrong' in data:\n        raise ModelRetry('wrong response')\n    return data\n\n@agent.result_validator\nasync def result_validator_deps(ctx: RunContext[str], data: str) -> str:\n    if ctx.deps in data:\n        raise ModelRetry('wrong response')\n    return data\n\nresult = agent.run_sync('foobar', deps='spam')\nprint(result.data)\n#> success (no tool calls)\n\n```\n\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef result_validator(\n    self, func: _result.ResultValidatorFunc[AgentDepsT, ResultDataT], /\n) -> _result.ResultValidatorFunc[AgentDepsT, ResultDataT]:\n    \"\"\"Decorator to register a result validator function.\n\n    Optionally takes [`RunContext`][pydantic_ai.tools.RunContext] as its first argument.\n    Can decorate a sync or async functions.\n\n    Overloads for every possible signature of `result_validator` are included so the decorator doesn't obscure\n    the type of the function, see `tests/typed_agent.py` for tests.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent, ModelRetry, RunContext\n\n    agent = Agent('test', deps_type=str)\n\n    @agent.result_validator\n    def result_validator_simple(data: str) -> str:\n        if 'wrong' in data:\n            raise ModelRetry('wrong response')\n        return data\n\n    @agent.result_validator\n    async def result_validator_deps(ctx: RunContext[str], data: str) -> str:\n        if ctx.deps in data:\n            raise ModelRetry('wrong response')\n        return data\n\n    result = agent.run_sync('foobar', deps='spam')\n    print(result.data)\n    #> success (no tool calls)\n    ```\n    \"\"\"\n    self._result_validators.append(_result.ResultValidator[AgentDepsT, Any](func))\n    return func\n\n```\n\n\n\n\n#### tool\n\n```\ntool(\n    func: ToolFuncContext[AgentDepsT, ToolParams],\n) -> ToolFuncContext[AgentDepsT, ToolParams]\n\n```\n```\ntool(\n    *,\n    name: str | None = None,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[\n        GenerateJsonSchema\n    ] = GenerateToolJsonSchema,\n    strict: bool | None = None\n) -> Callable[\n    [ToolFuncContext[AgentDepsT, ToolParams]],\n    ToolFuncContext[AgentDepsT, ToolParams],\n]\n\n```\n \n```\ntool(\n    func: (\n        ToolFuncContext[AgentDepsT, ToolParams] | None\n    ) = None,\n    /,\n    *,\n    name: str | None = None,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[\n        GenerateJsonSchema\n    ] = GenerateToolJsonSchema,\n    strict: bool | None = None,\n) -> Any\n\n```\n\nDecorator to register a tool function which takes `RunContext` as its first argument.\n\nCan decorate a sync or async functions.\n\nThe docstring is inspected to extract both the tool description", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-6ca3dfc741d5edc1408783244b6d8d85", "__created_at__": 1744231651.420514, "content": "DepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[\n        GenerateJsonSchema\n    ] = GenerateToolJsonSchema,\n    strict: bool | None = None,\n) -> Any\n\n```\n\nDecorator to register a tool function which takes `RunContext` as its first argument.\n\nCan decorate a sync or async functions.\n\nThe docstring is inspected to extract both the tool description and description of each parameter,\n[learn more](../../tools/#function-tools-and-schema).\n\nWe can't add overloads for every possible signature of tool, since the return type is a recursive union\nso the signature of functions decorated with `@agent.tool` is obscured.\n\nExample:\n```\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent('test', deps_type=int)\n\n@agent.tool\ndef foobar(ctx: RunContext[int], x: int) -> int:\n    return ctx.deps + x\n\n@agent.tool(retries=2)\nasync def spam(ctx: RunContext[str], y: float) -> float:\n    return ctx.deps + y\n\nresult = agent.run_sync('foobar', deps=1)\nprint(result.data)\n#> {\"foobar\":1,\"spam\":1.0}\n\n```\n\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `func` | `ToolFuncContext[AgentDepsT, ToolParams] | None` | The tool function to register. | `None` |\n| `name` | `str | None` | The name of the tool, defaults to the function name. | `None` |\n| `retries` | `int | None` | The number of retries to allow for this tool, defaults to the agent's default retries, which defaults to 1. | `None` |\n| `prepare` | `ToolPrepareFunc[AgentDepsT] | None` | custom method to prepare the tool definition for each step, return `None` to omit this tool from a given step. This is useful if you want to customise a tool at call time, or omit it completely from a step. See `ToolPrepareFunc`. | `None` |\n| `docstring_format` | `DocstringFormat` | The format of the docstring, see `DocstringFormat`. Defaults to `'auto'`, such that the format is inferred from the structure of the docstring. | `'auto'` |\n| `require_parameter_descriptions` | `bool` | If True, raise an error if a parameter description is missing. Defaults to False. | `False` |\n| `schema_generator` | `type[GenerateJsonSchema]` | The JSON schema generator class to use for this tool. Defaults to `GenerateToolJsonSchema`. | `GenerateToolJsonSchema` |\n| `strict` | `bool | None` | Whether to enforce JSON schema compliance (only affects OpenAI). See `ToolDefinition` for more info. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef tool(\n    self,\n    func: ToolFuncContext[AgentDepsT, ToolParams] | None = None,\n    /,\n    *,\n    name: str | None = None,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = 'auto',\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[GenerateJsonSchema] = GenerateToolJsonSchema,\n    strict: bool | None = None,\n) -> Any:\n    \"\"\"Decorator to register a tool function which takes [`RunContext`][pydantic_ai.tools.RunContext] as its first argument.\n\n    Can decorate a sync or async functions.\n\n    The docstring is inspected to extract both the tool description and description of each parameter,\n    [learn more](../tools.md#function-tools-and-schema).\n\n    We can't add overloads for every possible signature of tool, since the return type is a recursive union\n    so the signature of functions decorated with `@agent.tool` is obscured.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent, RunContext\n\n    agent = Agent('test', deps_type=int)\n\n    @agent.tool\n    def foobar(ctx: RunContext[int], x: int) -> int:\n        return ctx.deps + x\n\n    @agent.tool(retries=2)\n    async def spam(ctx: RunContext[str], y: float) -> float:\n        return ctx.deps + y\n\n    result = agent.run_sync('foobar', deps=1)\n    print(result.data)\n    #> {\"foobar\":1,\"spam\":1.0}\n    ```\n\n    Args:\n        func: The tool function to register.\n        name: The name of the tool, defaults to the function name.\n        retries: The number of retries to allow for this tool, defaults to the agent's default retries,\n            which defaults to 1.\n        prepare: custom method to prepare the tool definition for each step, return `None` to omit this\n            tool from a given step. This is useful if you want to customise a tool at call time,\n            or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].\n        docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].\n            Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n        require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-18a72d852226f42ca9377ccc8f1d77d6", "__created_at__": 1744231651.420514, "content": "time,\n            or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].\n        docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].\n            Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n        require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.\n        schema_generator: The JSON schema generator class to use for this tool. Defaults to `GenerateToolJsonSchema`.\n        strict: Whether to enforce JSON schema compliance (only affects OpenAI).\n            See [`ToolDefinition`][pydantic_ai.tools.ToolDefinition] for more info.\n    \"\"\"\n    if func is None:\n\n        def tool_decorator(\n            func_: ToolFuncContext[AgentDepsT, ToolParams],\n        ) -> ToolFuncContext[AgentDepsT, ToolParams]:\n            # noinspection PyTypeChecker\n            self._register_function(\n                func_,\n                True,\n                name,\n                retries,\n                prepare,\n                docstring_format,\n                require_parameter_descriptions,\n                schema_generator,\n                strict,\n            )\n            return func_\n\n        return tool_decorator\n    else:\n        # noinspection PyTypeChecker\n        self._register_function(\n            func,\n            True,\n            name,\n            retries,\n            prepare,\n            docstring_format,\n            require_parameter_descriptions,\n            schema_generator,\n            strict,\n        )\n        return func\n\n```\n\n\n\n\n#### tool\\_plain\n\n```\ntool_plain(\n    func: ToolFuncPlain[ToolParams],\n) -> ToolFuncPlain[ToolParams]\n\n```\n```\ntool_plain(\n    *,\n    name: str | None = None,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[\n        GenerateJsonSchema\n    ] = GenerateToolJsonSchema,\n    strict: bool | None = None\n) -> Callable[\n    [ToolFuncPlain[ToolParams]], ToolFuncPlain[ToolParams]\n]\n\n```\n \n```\ntool_plain(\n    func: ToolFuncPlain[ToolParams] | None = None,\n    /,\n    *,\n    name: str | None = None,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[\n        GenerateJsonSchema\n    ] = GenerateToolJsonSchema,\n    strict: bool | None = None,\n) -> Any\n\n```\n\nDecorator to register a tool function which DOES NOT take `RunContext` as an argument.\n\nCan decorate a sync or async functions.\n\nThe docstring is inspected to extract both the tool description and description of each parameter,\n[learn more](../../tools/#function-tools-and-schema).\n\nWe can't add overloads for every possible signature of tool, since the return type is a recursive union\nso the signature of functions decorated with `@agent.tool` is obscured.\n\nExample:\n```\nfrom pydantic_ai import Agent, RunContext\n\nagent = Agent('test')\n\n@agent.tool\ndef foobar(ctx: RunContext[int]) -> int:\n    return 123\n\n@agent.tool(retries=2)\nasync def spam(ctx: RunContext[str]) -> float:\n    return 3.14\n\nresult = agent.run_sync('foobar', deps=1)\nprint(result.data)\n#> {\"foobar\":123,\"spam\":3.14}\n\n```\n\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `func` | `ToolFuncPlain[ToolParams] | None` | The tool function to register. | `None` |\n| `name` | `str | None` | The name of the tool, defaults to the function name. | `None` |\n| `retries` | `int | None` | The number of retries to allow for this tool, defaults to the agent's default retries, which defaults to 1. | `None` |\n| `prepare` | `ToolPrepareFunc[AgentDepsT] | None` | custom method to prepare the tool definition for each step, return `None` to omit this tool from a given step. This is useful if you want to customise a tool at call time, or omit it completely from a step. See `ToolPrepareFunc`. | `None` |\n| `docstring_format` | `DocstringFormat` | The format of the docstring, see `DocstringFormat`. Defaults to `'auto'`, such that the format is inferred from the structure of the docstring. | `'auto'` |\n| `require_parameter_descriptions` | `bool` | If True, raise an error if a parameter description is missing. Defaults to False. | `False` |\n| `schema_generator` | `type[GenerateJsonSchema]` | The JSON schema generator class to use for this tool. Defaults to `GenerateToolJsonSchema`. | `GenerateToolJsonSchema` |\n| `strict` | `bool | None` | Whether to enforce JSON schema compliance (only affects OpenAI). See `ToolDefinition` for more info. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef tool_plain(\n    self,\n    func: ToolFuncPlain[ToolParams] | None = None,\n    /,\n    *,\n    name: str | None = None,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDeps", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-74d8bed4a268265e628208d04e7ee018", "__created_at__": 1744231651.420514, "content": "Whether to enforce JSON schema compliance (only affects OpenAI). See `ToolDefinition` for more info. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef tool_plain(\n    self,\n    func: ToolFuncPlain[ToolParams] | None = None,\n    /,\n    *,\n    name: str | None = None,\n    retries: int | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = 'auto',\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[GenerateJsonSchema] = GenerateToolJsonSchema,\n    strict: bool | None = None,\n) -> Any:\n    \"\"\"Decorator to register a tool function which DOES NOT take `RunContext` as an argument.\n\n    Can decorate a sync or async functions.\n\n    The docstring is inspected to extract both the tool description and description of each parameter,\n    [learn more](../tools.md#function-tools-and-schema).\n\n    We can't add overloads for every possible signature of tool, since the return type is a recursive union\n    so the signature of functions decorated with `@agent.tool` is obscured.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent, RunContext\n\n    agent = Agent('test')\n\n    @agent.tool\n    def foobar(ctx: RunContext[int]) -> int:\n        return 123\n\n    @agent.tool(retries=2)\n    async def spam(ctx: RunContext[str]) -> float:\n        return 3.14\n\n    result = agent.run_sync('foobar', deps=1)\n    print(result.data)\n    #> {\"foobar\":123,\"spam\":3.14}\n    ```\n\n    Args:\n        func: The tool function to register.\n        name: The name of the tool, defaults to the function name.\n        retries: The number of retries to allow for this tool, defaults to the agent's default retries,\n            which defaults to 1.\n        prepare: custom method to prepare the tool definition for each step, return `None` to omit this\n            tool from a given step. This is useful if you want to customise a tool at call time,\n            or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].\n        docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].\n            Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n        require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.\n        schema_generator: The JSON schema generator class to use for this tool. Defaults to `GenerateToolJsonSchema`.\n        strict: Whether to enforce JSON schema compliance (only affects OpenAI).\n            See [`ToolDefinition`][pydantic_ai.tools.ToolDefinition] for more info.\n    \"\"\"\n    if func is None:\n\n        def tool_decorator(func_: ToolFuncPlain[ToolParams]) -> ToolFuncPlain[ToolParams]:\n            # noinspection PyTypeChecker\n            self._register_function(\n                func_,\n                False,\n                name,\n                retries,\n                prepare,\n                docstring_format,\n                require_parameter_descriptions,\n                schema_generator,\n                strict,\n            )\n            return func_\n\n        return tool_decorator\n    else:\n        self._register_function(\n            func,\n            False,\n            name,\n            retries,\n            prepare,\n            docstring_format,\n            require_parameter_descriptions,\n            schema_generator,\n            strict,\n        )\n        return func\n\n```\n\n\n\n\n#### is\\_model\\_request\\_node `staticmethod`\n\n```\nis_model_request_node(\n    node: AgentNode[T, S] | End[FinalResult[S]],\n) -> TypeGuard[ModelRequestNode[T, S]]\n\n```\n\nCheck if the node is a `ModelRequestNode`, narrowing the type if it is.\n\nThis method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@staticmethod\ndef is_model_request_node(\n    node: _agent_graph.AgentNode[T, S] | End[result.FinalResult[S]],\n) -> TypeGuard[_agent_graph.ModelRequestNode[T, S]]:\n    \"\"\"Check if the node is a `ModelRequestNode`, narrowing the type if it is.\n\n    This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n    \"\"\"\n    return isinstance(node, _agent_graph.ModelRequestNode)\n\n```\n\n\n\n\n#### is\\_call\\_tools\\_node `staticmethod`\n\n```\nis_call_tools_node(\n    node: AgentNode[T, S] | End[FinalResult[S]],\n) -> TypeGuard[CallToolsNode[T, S]]\n\n```\n\nCheck if the node is a `CallToolsNode`, narrowing the type if it is.\n\nThis method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@staticmethod\ndef is_call_tools_node(\n    node: _agent_graph.AgentNode[T, S] | End[result.FinalResult[S]],\n) -> TypeGuard[_agent_graph.CallToolsNode[T, S]]:\n    \"\"\"Check if the node is a `CallToolsNode`, narrowing the type if it is.\n\n    This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n    \"\"\"\n    return isinstance(node, _agent_graph.CallToolsNode)\n\n```\n\n\n\n\n#### is\\_user\\_prompt\\_node `staticmethod`\n\n```\nis_user_prompt_node(", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ce01e842b7551c639f7aa44b6b7502a6", "__created_at__": 1744231651.420514, "content": "| End[result.FinalResult[S]],\n) -> TypeGuard[_agent_graph.CallToolsNode[T, S]]:\n    \"\"\"Check if the node is a `CallToolsNode`, narrowing the type if it is.\n\n    This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n    \"\"\"\n    return isinstance(node, _agent_graph.CallToolsNode)\n\n```\n\n\n\n\n#### is\\_user\\_prompt\\_node `staticmethod`\n\n```\nis_user_prompt_node(\n    node: AgentNode[T, S] | End[FinalResult[S]],\n) -> TypeGuard[UserPromptNode[T, S]]\n\n```\n\nCheck if the node is a `UserPromptNode`, narrowing the type if it is.\n\nThis method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@staticmethod\ndef is_user_prompt_node(\n    node: _agent_graph.AgentNode[T, S] | End[result.FinalResult[S]],\n) -> TypeGuard[_agent_graph.UserPromptNode[T, S]]:\n    \"\"\"Check if the node is a `UserPromptNode`, narrowing the type if it is.\n\n    This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n    \"\"\"\n    return isinstance(node, _agent_graph.UserPromptNode)\n\n```\n\n\n\n\n#### is\\_end\\_node `staticmethod`\n\n```\nis_end_node(\n    node: AgentNode[T, S] | End[FinalResult[S]],\n) -> TypeGuard[End[FinalResult[S]]]\n\n```\n\nCheck if the node is a `End`, narrowing the type if it is.\n\nThis method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@staticmethod\ndef is_end_node(\n    node: _agent_graph.AgentNode[T, S] | End[result.FinalResult[S]],\n) -> TypeGuard[End[result.FinalResult[S]]]:\n    \"\"\"Check if the node is a `End`, narrowing the type if it is.\n\n    This method preserves the generic parameters while narrowing the type, unlike a direct call to `isinstance`.\n    \"\"\"\n    return isinstance(node, End)\n\n```\n\n\n\n\n#### run\\_mcp\\_servers `async`\n\n```\nrun_mcp_servers() -> AsyncIterator[None]\n\n```\n\nRun `MCPServerStdio`s so they can be used by the agent.\n\nReturns: a context manager to start and shutdown the servers.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@asynccontextmanager\nasync def run_mcp_servers(self) -> AsyncIterator[None]:\n    \"\"\"Run [`MCPServerStdio`s][pydantic_ai.mcp.MCPServerStdio] so they can be used by the agent.\n\n    Returns: a context manager to start and shutdown the servers.\n    \"\"\"\n    exit_stack = AsyncExitStack()\n    try:\n        for mcp_server in self._mcp_servers:\n            await exit_stack.enter_async_context(mcp_server)\n        yield\n    finally:\n        await exit_stack.aclose()\n\n```\n\n\n\n\n\n\n\n### AgentRun `dataclass`\n\nBases: `Generic[AgentDepsT, ResultDataT]`\n\nA stateful, async-iterable run of an `Agent`.\n\nYou generally obtain an `AgentRun` instance by calling `async with my_agent.iter(...) as agent_run:`.\n\nOnce you have an instance, you can use it to iterate through the run's nodes as they execute. When an\n`End` is reached, the run finishes and `result`\nbecomes available.\n\nExample:\n```\nfrom pydantic_ai import Agent\n\nagent = Agent('openai:gpt-4o')\n\nasync def main():\n    nodes = []\n    # Iterate through the run, recording each node along the way:\n    async with agent.iter('What is the capital of France?') as agent_run:\n        async for node in agent_run:\n            nodes.append(node)\n    print(nodes)\n    '''\n    [\n        UserPromptNode(\n            user_prompt='What is the capital of France?',\n            system_prompts=(),\n            system_prompt_functions=[],\n            system_prompt_dynamic_functions={},\n        ),\n        ModelRequestNode(\n            request=ModelRequest(\n                parts=[\n                    UserPromptPart(\n                        content='What is the capital of France?',\n                        timestamp=datetime.datetime(...),\n                        part_kind='user-prompt',\n                    )\n                ],\n                kind='request',\n            )\n        ),\n        CallToolsNode(\n            model_response=ModelResponse(\n                parts=[TextPart(content='Paris', part_kind='text')],\n                model_name='gpt-4o',\n                timestamp=datetime.datetime(...),\n                kind='response',\n            )\n        ),\n        End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n    ]\n    '''\n    print(agent_run.result.data)\n    #> Paris\n\n```\n\n\nYou can also manually drive the iteration using the `next` method for\nmore granular control.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@dataclasses.dataclass(repr=False)\nclass AgentRun(Generic[AgentDepsT, ResultDataT]):\n    \"\"\"A stateful, async-iterable run of an [`Agent`][pydantic_ai.agent.Agent].\n\n    You generally obtain an `AgentRun` instance by calling `async with my_agent.iter(...) as agent_run:`.\n\n    Once you have an instance, you can use it to iterate through the run's nodes as they execute. When an\n    [`End`][pydantic_graph.nodes.End] is reached, the run finishes and [`result`][pydantic_ai.agent.AgentRun.result]", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f29114dc6d88a06ac1343874c6b2fe1d", "__created_at__": 1744231651.420514, "content": "async-iterable run of an [`Agent`][pydantic_ai.agent.Agent].\n\n    You generally obtain an `AgentRun` instance by calling `async with my_agent.iter(...) as agent_run:`.\n\n    Once you have an instance, you can use it to iterate through the run's nodes as they execute. When an\n    [`End`][pydantic_graph.nodes.End] is reached, the run finishes and [`result`][pydantic_ai.agent.AgentRun.result]\n    becomes available.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent\n\n    agent = Agent('openai:gpt-4o')\n\n    async def main():\n        nodes = []\n        # Iterate through the run, recording each node along the way:\n        async with agent.iter('What is the capital of France?') as agent_run:\n            async for node in agent_run:\n                nodes.append(node)\n        print(nodes)\n        '''\n        [\n            UserPromptNode(\n                user_prompt='What is the capital of France?',\n                system_prompts=(),\n                system_prompt_functions=[],\n                system_prompt_dynamic_functions={},\n            ),\n            ModelRequestNode(\n                request=ModelRequest(\n                    parts=[\n                        UserPromptPart(\n                            content='What is the capital of France?',\n                            timestamp=datetime.datetime(...),\n                            part_kind='user-prompt',\n                        )\n                    ],\n                    kind='request',\n                )\n            ),\n            CallToolsNode(\n                model_response=ModelResponse(\n                    parts=[TextPart(content='Paris', part_kind='text')],\n                    model_name='gpt-4o',\n                    timestamp=datetime.datetime(...),\n                    kind='response',\n                )\n            ),\n            End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n        ]\n        '''\n        print(agent_run.result.data)\n        #> Paris\n    ```\n\n    You can also manually drive the iteration using the [`next`][pydantic_ai.agent.AgentRun.next] method for\n    more granular control.\n    \"\"\"\n\n    _graph_run: GraphRun[\n        _agent_graph.GraphAgentState, _agent_graph.GraphAgentDeps[AgentDepsT, Any], FinalResult[ResultDataT]\n    ]\n\n    @property\n    def ctx(self) -> GraphRunContext[_agent_graph.GraphAgentState, _agent_graph.GraphAgentDeps[AgentDepsT, Any]]:\n        \"\"\"The current context of the agent run.\"\"\"\n        return GraphRunContext[_agent_graph.GraphAgentState, _agent_graph.GraphAgentDeps[AgentDepsT, Any]](\n            self._graph_run.state, self._graph_run.deps\n        )\n\n    @property\n    def next_node(\n        self,\n    ) -> _agent_graph.AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]:\n        \"\"\"The next node that will be run in the agent graph.\n\n        This is the next node that will be used during async iteration, or if a node is not passed to `self.next(...)`.\n        \"\"\"\n        next_node = self._graph_run.next_node\n        if isinstance(next_node, End):\n            return next_node\n        if _agent_graph.is_agent_node(next_node):\n            return next_node\n        raise exceptions.AgentRunError(f'Unexpected node type: {type(next_node)}')  # pragma: no cover\n\n    @property\n    def result(self) -> AgentRunResult[ResultDataT] | None:\n        \"\"\"The final result of the run if it has ended, otherwise `None`.\n\n        Once the run returns an [`End`][pydantic_graph.nodes.End] node, `result` is populated\n        with an [`AgentRunResult`][pydantic_ai.agent.AgentRunResult].\n        \"\"\"\n        graph_run_result = self._graph_run.result\n        if graph_run_result is None:\n            return None\n        return AgentRunResult(\n            graph_run_result.output.data,\n            graph_run_result.output.tool_name,\n            graph_run_result.state,\n            self._graph_run.deps.new_message_index,\n        )\n\n    def __aiter__(\n        self,\n    ) -> AsyncIterator[_agent_graph.AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]]:\n        \"\"\"Provide async-iteration over the nodes in the agent run.\"\"\"\n        return self\n\n    async def __anext__(\n        self,\n    ) -> _agent_graph.AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]:\n        \"\"\"Advance to the next node automatically based on the last returned node.\"\"\"\n        next_node = await self._graph_run.__anext__()\n        if _agent_graph.is_agent_node(next_node):\n            return next_node\n        assert isinstance(next_node, End), f'Unexpected node type: {type(next_node)}'\n        return next_node\n\n    async def next(\n        self,\n        node: _agent_graph.AgentNode[AgentDepsT, ResultDataT],\n    ) -> _agent_graph.AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]:\n        \"\"\"Manually drive the agent run by passing in the node you want to run next.\n\n        This lets you inspect or mutate the node before continuing execution, or skip certain nodes\n        under dynamic conditions. The agent run should be stopped when you return an [`End`][pydantic_graph.nodes.End]\n        node.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent\n        from pydantic_graph import End\n\n        agent = Agent('openai:gpt-4o')\n\n        async def main():\n            async with agent.iter('What is the capital of France?') as agent_run:\n                next_node = agent_run.next_node  # start with the first node\n                nodes = [next_node]\n                while not isinstance(next_node, End):", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f05343baae3f62f1bed61aebb48d39ae", "__created_at__": 1744231651.420514, "content": ".nodes.End]\n        node.\n\n        Example:\n        ```python\n        from pydantic_ai import Agent\n        from pydantic_graph import End\n\n        agent = Agent('openai:gpt-4o')\n\n        async def main():\n            async with agent.iter('What is the capital of France?') as agent_run:\n                next_node = agent_run.next_node  # start with the first node\n                nodes = [next_node]\n                while not isinstance(next_node, End):\n                    next_node = await agent_run.next(next_node)\n                    nodes.append(next_node)\n                # Once `next_node` is an End, we've finished:\n                print(nodes)\n                '''\n                [\n                    UserPromptNode(\n                        user_prompt='What is the capital of France?',\n                        system_prompts=(),\n                        system_prompt_functions=[],\n                        system_prompt_dynamic_functions={},\n                    ),\n                    ModelRequestNode(\n                        request=ModelRequest(\n                            parts=[\n                                UserPromptPart(\n                                    content='What is the capital of France?',\n                                    timestamp=datetime.datetime(...),\n                                    part_kind='user-prompt',\n                                )\n                            ],\n                            kind='request',\n                        )\n                    ),\n                    CallToolsNode(\n                        model_response=ModelResponse(\n                            parts=[TextPart(content='Paris', part_kind='text')],\n                            model_name='gpt-4o',\n                            timestamp=datetime.datetime(...),\n                            kind='response',\n                        )\n                    ),\n                    End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n                ]\n                '''\n                print('Final result:', agent_run.result.data)\n                #> Final result: Paris\n        ```\n\n        Args:\n            node: The node to run next in the graph.\n\n        Returns:\n            The next node returned by the graph logic, or an [`End`][pydantic_graph.nodes.End] node if\n            the run has completed.\n        \"\"\"\n        # Note: It might be nice to expose a synchronous interface for iteration, but we shouldn't do it\n        # on this class, or else IDEs won't warn you if you accidentally use `for` instead of `async for` to iterate.\n        next_node = await self._graph_run.next(node)\n        if _agent_graph.is_agent_node(next_node):\n            return next_node\n        assert isinstance(next_node, End), f'Unexpected node type: {type(next_node)}'\n        return next_node\n\n    def usage(self) -> _usage.Usage:\n        \"\"\"Get usage statistics for the run so far, including token usage, model requests, and so on.\"\"\"\n        return self._graph_run.state.usage\n\n    def __repr__(self) -> str:\n        result = self._graph_run.result\n        result_repr = '' if result is None else repr(result.output)\n        return f'<{type(self).__name__} result={result_repr} usage={self.usage()}>'\n\n```\n\n\n#### ctx `property`\n\n```\nctx: GraphRunContext[\n    GraphAgentState, GraphAgentDeps[AgentDepsT, Any]\n]\n\n```\n\nThe current context of the agent run.\n\n\n\n#### next\\_node `property`\n\n```\nnext_node: (\n    AgentNode[AgentDepsT, ResultDataT]\n    | End[FinalResult[ResultDataT]]\n)\n\n```\n\nThe next node that will be run in the agent graph.\n\nThis is the next node that will be used during async iteration, or if a node is not passed to `self.next(...)`.\n\n\n\n#### result `property`\n\n```\nresult: AgentRunResult[ResultDataT] | None\n\n```\n\nThe final result of the run if it has ended, otherwise `None`.\n\nOnce the run returns an `End` node, `result` is populated\nwith an `AgentRunResult`.\n\n\n\n#### \\_\\_aiter\\_\\_\n\n```\n__aiter__() -> (\n    AsyncIterator[\n        AgentNode[AgentDepsT, ResultDataT]\n        | End[FinalResult[ResultDataT]]\n    ]\n)\n\n```\n\nProvide async-iteration over the nodes in the agent run.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef __aiter__(\n    self,\n) -> AsyncIterator[_agent_graph.AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]]:\n    \"\"\"Provide async-iteration over the nodes in the agent run.\"\"\"\n    return self\n\n```\n\n\n\n\n#### \\_\\_anext\\_\\_ `async`\n\n```\n__anext__() -> (\n    AgentNode[AgentDepsT, ResultDataT]\n    | End[FinalResult[ResultDataT]]\n)\n\n```\n\nAdvance to the next node automatically based on the last returned node.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\nasync def __anext__(\n    self,\n) -> _agent_graph.AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]:\n    \"\"\"Advance to the next node automatically based on the last returned node.\"\"\"\n    next_node = await self._graph_run.__anext__()\n    if _agent_graph.is_agent_node(next_node):\n        return next_node\n    assert isinstance(next_node, End), f'Unexpected node type: {type(next_node)}'\n    return next_node\n\n```\n\n\n\n\n#### next `async`\n\n```\nnext(\n    node: AgentNode[AgentDepsT, ResultDataT],\n) -> (\n    AgentNode[AgentDepsT, ResultDataT]\n    | End[FinalResult[ResultDataT]]\n)\n\n```\n\nManually drive the agent run by passing in the node you want to run next.\n\nThis lets you inspect or mutate the node before continuing execution, or skip certain nodes\nunder dynamic conditions. The agent run should be stopped when you return an `End`\nnode.\n\nExample:\n```\nfrom p", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4d3f57edc4c3f799d03bb18401fc8f09", "__created_at__": 1744231651.420514, "content": ": AgentNode[AgentDepsT, ResultDataT],\n) -> (\n    AgentNode[AgentDepsT, ResultDataT]\n    | End[FinalResult[ResultDataT]]\n)\n\n```\n\nManually drive the agent run by passing in the node you want to run next.\n\nThis lets you inspect or mutate the node before continuing execution, or skip certain nodes\nunder dynamic conditions. The agent run should be stopped when you return an `End`\nnode.\n\nExample:\n```\nfrom pydantic_ai import Agent\nfrom pydantic_graph import End\n\nagent = Agent('openai:gpt-4o')\n\nasync def main():\n    async with agent.iter('What is the capital of France?') as agent_run:\n        next_node = agent_run.next_node  # start with the first node\n        nodes = [next_node]\n        while not isinstance(next_node, End):\n            next_node = await agent_run.next(next_node)\n            nodes.append(next_node)\n        # Once `next_node` is an End, we've finished:\n        print(nodes)\n        '''\n        [\n            UserPromptNode(\n                user_prompt='What is the capital of France?',\n                system_prompts=(),\n                system_prompt_functions=[],\n                system_prompt_dynamic_functions={},\n            ),\n            ModelRequestNode(\n                request=ModelRequest(\n                    parts=[\n                        UserPromptPart(\n                            content='What is the capital of France?',\n                            timestamp=datetime.datetime(...),\n                            part_kind='user-prompt',\n                        )\n                    ],\n                    kind='request',\n                )\n            ),\n            CallToolsNode(\n                model_response=ModelResponse(\n                    parts=[TextPart(content='Paris', part_kind='text')],\n                    model_name='gpt-4o',\n                    timestamp=datetime.datetime(...),\n                    kind='response',\n                )\n            ),\n            End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n        ]\n        '''\n        print('Final result:', agent_run.result.data)\n        #> Final result: Paris\n\n```\n\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `node` | `AgentNode[AgentDepsT, ResultDataT]` | The node to run next in the graph. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]` | The next node returned by the graph logic, or an `End` node if |\n| `AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]` | the run has completed. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\nasync def next(\n    self,\n    node: _agent_graph.AgentNode[AgentDepsT, ResultDataT],\n) -> _agent_graph.AgentNode[AgentDepsT, ResultDataT] | End[FinalResult[ResultDataT]]:\n    \"\"\"Manually drive the agent run by passing in the node you want to run next.\n\n    This lets you inspect or mutate the node before continuing execution, or skip certain nodes\n    under dynamic conditions. The agent run should be stopped when you return an [`End`][pydantic_graph.nodes.End]\n    node.\n\n    Example:\n    ```python\n    from pydantic_ai import Agent\n    from pydantic_graph import End\n\n    agent = Agent('openai:gpt-4o')\n\n    async def main():\n        async with agent.iter('What is the capital of France?') as agent_run:\n            next_node = agent_run.next_node  # start with the first node\n            nodes = [next_node]\n            while not isinstance(next_node, End):\n                next_node = await agent_run.next(next_node)\n                nodes.append(next_node)\n            # Once `next_node` is an End, we've finished:\n            print(nodes)\n            '''\n            [\n                UserPromptNode(\n                    user_prompt='What is the capital of France?',\n                    system_prompts=(),\n                    system_prompt_functions=[],\n                    system_prompt_dynamic_functions={},\n                ),\n                ModelRequestNode(\n                    request=ModelRequest(\n                        parts=[\n                            UserPromptPart(\n                                content='What is the capital of France?',\n                                timestamp=datetime.datetime(...),\n                                part_kind='user-prompt',\n                            )\n                        ],\n                        kind='request',\n                    )\n                ),\n                CallToolsNode(\n                    model_response=ModelResponse(\n                        parts=[TextPart(content='Paris', part_kind='text')],\n                        model_name='gpt-4o',\n                        timestamp=datetime.datetime(...),\n                        kind='response',\n                    )\n                ),\n                End(data=FinalResult(data='Paris', tool_name=None, tool_call_id=None)),\n            ]\n            '''\n            print('Final result:', agent_run.result.data)\n            #> Final result: Paris\n    ```\n\n    Args:\n        node: The node to run next in the graph.\n\n    Returns:\n        The next node returned by the graph logic, or an [`End`][pydantic_graph.nodes.End] node if\n        the run has completed.\n    \"\"\"\n    # Note: It might be nice to expose a synchronous interface for iteration, but we shouldn't do it\n    # on this class, or else IDEs won't warn you if you accidentally use `for` instead of `async for` to iterate.\n    next_node = await self._graph_run.next(node)\n    if _agent_graph.is_agent_node(next_node):\n        return next_node\n    assert isinstance(next_node, End), f'Unexpected node type: {type(next_node)}'\n    return next_node\n\n```\n\n\n\n\n#### usage\n\n```\nusage() -> Usage\n\n```\n\nGet usage statistics for the run so far, including token usage, model requests, and so on.\n\nSource code in `pydantic_ai", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f", "__created_at__": 1744231651.420514, "content": "for` to iterate.\n    next_node = await self._graph_run.next(node)\n    if _agent_graph.is_agent_node(next_node):\n        return next_node\n    assert isinstance(next_node, End), f'Unexpected node type: {type(next_node)}'\n    return next_node\n\n```\n\n\n\n\n#### usage\n\n```\nusage() -> Usage\n\n```\n\nGet usage statistics for the run so far, including token usage, model requests, and so on.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef usage(self) -> _usage.Usage:\n    \"\"\"Get usage statistics for the run so far, including token usage, model requests, and so on.\"\"\"\n    return self._graph_run.state.usage\n\n```\n\n\n\n\n\n\n\n### AgentRunResult `dataclass`\n\nBases: `Generic[ResultDataT]`\n\nThe final result of an agent run.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\n@dataclasses.dataclass\nclass AgentRunResult(Generic[ResultDataT]):\n    \"\"\"The final result of an agent run.\"\"\"\n\n    data: ResultDataT  # TODO: rename this to output. I'm putting this off for now mostly to reduce the size of the diff\n\n    _result_tool_name: str | None = dataclasses.field(repr=False)\n    _state: _agent_graph.GraphAgentState = dataclasses.field(repr=False)\n    _new_message_index: int = dataclasses.field(repr=False)\n\n    def _set_result_tool_return(self, return_content: str) -> list[_messages.ModelMessage]:\n        \"\"\"Set return content for the result tool.\n\n        Useful if you want to continue the conversation and want to set the response to the result tool call.\n        \"\"\"\n        if not self._result_tool_name:\n            raise ValueError('Cannot set result tool return content when the return type is `str`.')\n        messages = deepcopy(self._state.message_history)\n        last_message = messages[-1]\n        for part in last_message.parts:\n            if isinstance(part, _messages.ToolReturnPart) and part.tool_name == self._result_tool_name:\n                part.content = return_content\n                return messages\n        raise LookupError(f'No tool call found with tool name {self._result_tool_name!r}.')\n\n    def all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:\n        \"\"\"Return the history of _messages.\n\n        Args:\n            result_tool_return_content: The return content of the tool call to set in the last message.\n                This provides a convenient way to modify the content of the result tool call if you want to continue\n                the conversation and want to set the response to the result tool call. If `None`, the last message will\n                not be modified.\n\n        Returns:\n            List of messages.\n        \"\"\"\n        if result_tool_return_content is not None:\n            return self._set_result_tool_return(result_tool_return_content)\n        else:\n            return self._state.message_history\n\n    def all_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n        \"\"\"Return all messages from [`all_messages`][pydantic_ai.agent.AgentRunResult.all_messages] as JSON bytes.\n\n        Args:\n            result_tool_return_content: The return content of the tool call to set in the last message.\n                This provides a convenient way to modify the content of the result tool call if you want to continue\n                the conversation and want to set the response to the result tool call. If `None`, the last message will\n                not be modified.\n\n        Returns:\n            JSON bytes representing the messages.\n        \"\"\"\n        return _messages.ModelMessagesTypeAdapter.dump_json(\n            self.all_messages(result_tool_return_content=result_tool_return_content)\n        )\n\n    def new_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:\n        \"\"\"Return new messages associated with this run.\n\n        Messages from older runs are excluded.\n\n        Args:\n            result_tool_return_content: The return content of the tool call to set in the last message.\n                This provides a convenient way to modify the content of the result tool call if you want to continue\n                the conversation and want to set the response to the result tool call. If `None`, the last message will\n                not be modified.\n\n        Returns:\n            List of new messages.\n        \"\"\"\n        return self.all_messages(result_tool_return_content=result_tool_return_content)[self._new_message_index :]\n\n    def new_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n        \"\"\"Return new messages from [`new_messages`][pydantic_ai.agent.AgentRunResult.new_messages] as JSON bytes.\n\n        Args:\n            result_tool_return_content: The return content of the tool call to set in the last message.\n                This provides a convenient way to modify the content of the result tool call if you want to continue\n                the conversation and want to set the response to the result tool call. If `None`, the last message will\n                not be modified.\n\n        Returns:\n            JSON bytes representing the new messages.\n        \"\"\"\n        return _messages.ModelMessagesTypeAdapter.dump_json(\n            self.new_messages(result_tool_return_content=result_tool_return_content)\n        )\n\n    def usage(self) -> _usage.Usage:\n        \"\"\"Return the usage of the whole run.\"\"\"\n        return self._state.usage\n\n```\n\n\n#### all\\_messages\n\n```\nall_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn the history of \\_messages.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-7024ed9fea1c2b8447084fcacb8e7cfc", "__created_at__": 1744231651.420514, "content": ":\n        \"\"\"Return the usage of the whole run.\"\"\"\n        return self._state.usage\n\n```\n\n\n#### all\\_messages\n\n```\nall_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn the history of \\_messages.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[ModelMessage]` | List of messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:\n    \"\"\"Return the history of _messages.\n\n    Args:\n        result_tool_return_content: The return content of the tool call to set in the last message.\n            This provides a convenient way to modify the content of the result tool call if you want to continue\n            the conversation and want to set the response to the result tool call. If `None`, the last message will\n            not be modified.\n\n    Returns:\n        List of messages.\n    \"\"\"\n    if result_tool_return_content is not None:\n        return self._set_result_tool_return(result_tool_return_content)\n    else:\n        return self._state.message_history\n\n```\n\n\n\n\n#### all\\_messages\\_json\n\n```\nall_messages_json(\n    *, result_tool_return_content: str | None = None\n) -> bytes\n\n```\n\nReturn all messages from `all_messages` as JSON bytes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef all_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n    \"\"\"Return all messages from [`all_messages`][pydantic_ai.agent.AgentRunResult.all_messages] as JSON bytes.\n\n    Args:\n        result_tool_return_content: The return content of the tool call to set in the last message.\n            This provides a convenient way to modify the content of the result tool call if you want to continue\n            the conversation and want to set the response to the result tool call. If `None`, the last message will\n            not be modified.\n\n    Returns:\n        JSON bytes representing the messages.\n    \"\"\"\n    return _messages.ModelMessagesTypeAdapter.dump_json(\n        self.all_messages(result_tool_return_content=result_tool_return_content)\n    )\n\n```\n\n\n\n\n#### new\\_messages\n\n```\nnew_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn new messages associated with this run.\n\nMessages from older runs are excluded.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[ModelMessage]` | List of new messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef new_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:\n    \"\"\"Return new messages associated with this run.\n\n    Messages from older runs are excluded.\n\n    Args:\n        result_tool_return_content: The return content of the tool call to set in the last message.\n            This provides a convenient way to modify the content of the result tool call if you want to continue\n            the conversation and want to set the response to the result tool call. If `None`, the last message will\n            not be modified.\n\n    Returns:\n        List of new messages.\n    \"\"\"\n    return self.all_messages(result_tool_return_content=result_tool_return_content)[self._new_message_index :]\n\n```\n\n\n\n\n#### new\\_messages\\_json\n\n```\nnew_messages_json(\n    *, result_tool_return_content: str | None = None\n) -> bytes\n\n```\n\nReturn new messages from `new_messages` as JSON bytes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n|", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-15fc395902f1d91634e46bd619e7e35a", "__created_at__": 1744231651.420514, "content": "| Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the new messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef new_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n    \"\"\"Return new messages from [`new_messages`][pydantic_ai.agent.AgentRunResult.new_messages] as JSON bytes.\n\n    Args:\n        result_tool_return_content: The return content of the tool call to set in the last message.\n            This provides a convenient way to modify the content of the result tool call if you want to continue\n            the conversation and want to set the response to the result tool call. If `None`, the last message will\n            not be modified.\n\n    Returns:\n        JSON bytes representing the new messages.\n    \"\"\"\n    return _messages.ModelMessagesTypeAdapter.dump_json(\n        self.new_messages(result_tool_return_content=result_tool_return_content)\n    )\n\n```\n\n\n\n\n#### usage\n\n```\nusage() -> Usage\n\n```\n\nReturn the usage of the whole run.\n\nSource code in `pydantic_ai_slim/pydantic_ai/agent.py`\n```\ndef usage(self) -> _usage.Usage:\n    \"\"\"Return the usage of the whole run.\"\"\"\n    return self._state.usage\n\n```\n\n\n\n\n\n\n\n### EndStrategy `module-attribute`\n\n```\nEndStrategy = EndStrategy\n\n```\n\n\n\n### RunResultDataT `module-attribute`\n\n```\nRunResultDataT = TypeVar('RunResultDataT')\n\n```\n\nType variable for the result data of a run where `result_type` was customized on the run call.\n\n\n\n### capture\\_run\\_messages `module-attribute`\n\n```\ncapture_run_messages = capture_run_messages\n\n```\n\n\n\n### InstrumentationSettings `dataclass`\n\nOptions for instrumenting models and agents with OpenTelemetry.\n\nUsed in:\n\n* `Agent(instrument=...)`\n* `Agent.instrument_all()`\n* `InstrumentedModel`\n\nSee the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/instrumented.py`\n```\n@dataclass(init=False)\nclass InstrumentationSettings:\n    \"\"\"Options for instrumenting models and agents with OpenTelemetry.\n\n    Used in:\n\n    - `Agent(instrument=...)`\n    - [`Agent.instrument_all()`][pydantic_ai.agent.Agent.instrument_all]\n    - [`InstrumentedModel`][pydantic_ai.models.instrumented.InstrumentedModel]\n\n    See the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info.\n    \"\"\"\n\n    tracer: Tracer = field(repr=False)\n    event_logger: EventLogger = field(repr=False)\n    event_mode: Literal['attributes', 'logs'] = 'attributes'\n\n    def __init__(\n        self,\n        *,\n        event_mode: Literal['attributes', 'logs'] = 'attributes',\n        tracer_provider: TracerProvider | None = None,\n        event_logger_provider: EventLoggerProvider | None = None,\n    ):\n        \"\"\"Create instrumentation options.\n\n        Args:\n            event_mode: The mode for emitting events. If `'attributes'`, events are attached to the span as attributes.\n                If `'logs'`, events are emitted as OpenTelemetry log-based events.\n            tracer_provider: The OpenTelemetry tracer provider to use.\n                If not provided, the global tracer provider is used.\n                Calling `logfire.configure()` sets the global tracer provider, so most users don't need this.\n            event_logger_provider: The OpenTelemetry event logger provider to use.\n                If not provided, the global event logger provider is used.\n                Calling `logfire.configure()` sets the global event logger provider, so most users don't need this.\n                This is only used if `event_mode='logs'`.\n        \"\"\"\n        from pydantic_ai import __version__\n\n        tracer_provider = tracer_provider or get_tracer_provider()\n        event_logger_provider = event_logger_provider or get_event_logger_provider()\n        self.tracer = tracer_provider.get_tracer('pydantic-ai', __version__)\n        self.event_logger = event_logger_provider.get_event_logger('pydantic-ai', __version__)\n        self.event_mode = event_mode\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    event_mode: Literal[\n        \"attributes\", \"logs\"\n    ] = \"attributes\",\n    tracer_provider: TracerProvider | None = None,\n    event_logger_provider: EventLoggerProvider | None = None\n)\n\n```\n\nCreate instrumentation options.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `event_mode` | `Literal['attributes', 'logs']` | The mode for emitting events. If `'attributes'`, events are attached to the span as attributes. If `'logs'`, events are emitted as OpenTelemetry log-based events. | `'attributes'` |\n| `tracer_provider` | `TracerProvider | None` | The OpenTelemetry tracer provider to use. If not provided, the global tracer provider is used. Calling `logfire.configure()` sets the global tracer provider, so most users don't need this. | `None` |\n| `event_logger_provider` | `EventLoggerProvider | None` | The OpenTelemetry event logger provider to use", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-21a3cb379899823f20a4957eba46c558", "__created_at__": 1744231651.420514, "content": "`'logs'`, events are emitted as OpenTelemetry log-based events. | `'attributes'` |\n| `tracer_provider` | `TracerProvider | None` | The OpenTelemetry tracer provider to use. If not provided, the global tracer provider is used. Calling `logfire.configure()` sets the global tracer provider, so most users don't need this. | `None` |\n| `event_logger_provider` | `EventLoggerProvider | None` | The OpenTelemetry event logger provider to use. If not provided, the global event logger provider is used. Calling `logfire.configure()` sets the global event logger provider, so most users don't need this. This is only used if `event_mode='logs'`. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/instrumented.py`\n```\ndef __init__(\n    self,\n    *,\n    event_mode: Literal['attributes', 'logs'] = 'attributes',\n    tracer_provider: TracerProvider | None = None,\n    event_logger_provider: EventLoggerProvider | None = None,\n):\n    \"\"\"Create instrumentation options.\n\n    Args:\n        event_mode: The mode for emitting events. If `'attributes'`, events are attached to the span as attributes.\n            If `'logs'`, events are emitted as OpenTelemetry log-based events.\n        tracer_provider: The OpenTelemetry tracer provider to use.\n            If not provided, the global tracer provider is used.\n            Calling `logfire.configure()` sets the global tracer provider, so most users don't need this.\n        event_logger_provider: The OpenTelemetry event logger provider to use.\n            If not provided, the global event logger provider is used.\n            Calling `logfire.configure()` sets the global event logger provider, so most users don't need this.\n            This is only used if `event_mode='logs'`.\n    \"\"\"\n    from pydantic_ai import __version__\n\n    tracer_provider = tracer_provider or get_tracer_provider()\n    event_logger_provider = event_logger_provider or get_event_logger_provider()\n    self.tracer = tracer_provider.get_tracer('pydantic-ai', __version__)\n    self.event_logger = event_logger_provider.get_event_logger('pydantic-ai', __version__)\n    self.event_mode = event_mode\n\n```\n\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.common_tools`\n==========================\n\n### duckduckgo\\_search\\_tool\n\n```\nduckduckgo_search_tool(\n    duckduckgo_client: DDGS | None = None,\n    max_results: int | None = None,\n)\n\n```\n\nCreates a DuckDuckGo search tool.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `duckduckgo_client` | `DDGS | None` | The DuckDuckGo search client. | `None` |\n| `max_results` | `int | None` | The maximum number of results. If None, returns results only from the first response. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/common_tools/duckduckgo.py`\n```\ndef duckduckgo_search_tool(duckduckgo_client: DDGS | None = None, max_results: int | None = None):\n    \"\"\"Creates a DuckDuckGo search tool.\n\n    Args:\n        duckduckgo_client: The DuckDuckGo search client.\n        max_results: The maximum number of results. If None, returns results only from the first response.\n    \"\"\"\n    return Tool(\n        DuckDuckGoSearchTool(client=duckduckgo_client or DDGS(), max_results=max_results).__call__,\n        name='duckduckgo_search',\n        description='Searches DuckDuckGo for the given query and returns the results.',\n    )\n\n```\n\n\n\n\n\n\n\n### tavily\\_search\\_tool\n\n```\ntavily_search_tool(api_key: str)\n\n```\n\nCreates a Tavily search tool.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `api_key` | `str` | The Tavily API key.  You can get one by signing up at <https://app.tavily.com/home>. | *required* |\n\nSource code in `pydantic_ai_slim/pydantic_ai/common_tools/tavily.py`\n```\ndef tavily_search_tool(api_key: str):\n    \"\"\"Creates a Tavily search tool.\n\n    Args:\n        api_key: The Tavily API key.\n\n            You can get one by signing up at [https://app.tavily.com/home](https://app.tavily.com/home).\n    \"\"\"\n    return Tool(\n        TavilySearchTool(client=AsyncTavilyClient(api_key)).__call__,\n        name='tavily_search',\n        description='Searches Tavily for the given query and returns the results.',\n    )\n\n```\n\n\n\n\n\n\n\n\n`pydantic_ai.exceptions`\n========================\n\n### ModelRetry\n\nBases: `Exception`\n\nException raised when a tool function should be retried.\n\nThe agent will return the message to the model and ask it to try calling the function/tool again.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n```\nclass ModelRetry(Exception):\n    \"\"\"Exception raised when a tool function should be retried.\n\n    The agent will return the message to the model and ask it to try calling the function/tool again.\n    \"\"\"\n\n    message: str\n    \"\"\"The message to return to the model.\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(message)\n\n```\n\n\n#### message `instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nThe message to return to the model.\n\n\n\n\n\n\n### UserError\n\nBases: `RuntimeError`\n\nError caused by a usage mistake by the application developer — You!\n\nSource code in `pydantic", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-93010a3465ed2346e5ca1cbbf11fbc95", "__created_at__": 1744231651.420514, "content": ".\n    \"\"\"\n\n    message: str\n    \"\"\"The message to return to the model.\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(message)\n\n```\n\n\n#### message `instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nThe message to return to the model.\n\n\n\n\n\n\n### UserError\n\nBases: `RuntimeError`\n\nError caused by a usage mistake by the application developer — You!\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n```\nclass UserError(RuntimeError):\n    \"\"\"Error caused by a usage mistake by the application developer — You!\"\"\"\n\n    message: str\n    \"\"\"Description of the mistake.\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(message)\n\n```\n\n\n#### message `instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nDescription of the mistake.\n\n\n\n\n\n\n### AgentRunError\n\nBases: `RuntimeError`\n\nBase class for errors occurring during an agent run.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n```\nclass AgentRunError(RuntimeError):\n    \"\"\"Base class for errors occurring during an agent run.\"\"\"\n\n    message: str\n    \"\"\"The error message.\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(message)\n\n    def __str__(self) -> str:\n        return self.message\n\n```\n\n\n#### message `instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nThe error message.\n\n\n\n\n\n\n### UsageLimitExceeded\n\nBases: `AgentRunError`\n\nError raised when a Model's usage exceeds the specified limits.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n```\nclass UsageLimitExceeded(AgentRunError):\n    \"\"\"Error raised when a Model's usage exceeds the specified limits.\"\"\"\n\n```\n\n\n\n\n\n### UnexpectedModelBehavior\n\nBases: `AgentRunError`\n\nError caused by unexpected Model behavior, e.g. an unexpected response code.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n```\nclass UnexpectedModelBehavior(AgentRunError):\n    \"\"\"Error caused by unexpected Model behavior, e.g. an unexpected response code.\"\"\"\n\n    message: str\n    \"\"\"Description of the unexpected behavior.\"\"\"\n    body: str | None\n    \"\"\"The body of the response, if available.\"\"\"\n\n    def __init__(self, message: str, body: str | None = None):\n        self.message = message\n        if body is None:\n            self.body: str | None = None\n        else:\n            try:\n                self.body = json.dumps(json.loads(body), indent=2)\n            except ValueError:\n                self.body = body\n        super().__init__(message)\n\n    def __str__(self) -> str:\n        if self.body:\n            return f'{self.message}, body:\\n{self.body}'\n        else:\n            return self.message\n\n```\n\n\n#### message `instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nDescription of the unexpected behavior.\n\n\n\n#### body `instance-attribute`\n\n```\nbody: str | None = dumps(loads(body), indent=2)\n\n```\n\nThe body of the response, if available.\n\n\n\n\n\n\n### ModelHTTPError\n\nBases: `AgentRunError`\n\nRaised when an model provider response has a status code of 4xx or 5xx.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n```\nclass ModelHTTPError(AgentRunError):\n    \"\"\"Raised when an model provider response has a status code of 4xx or 5xx.\"\"\"\n\n    status_code: int\n    \"\"\"The HTTP status code returned by the API.\"\"\"\n\n    model_name: str\n    \"\"\"The name of the model associated with the error.\"\"\"\n\n    body: object | None\n    \"\"\"The body of the response, if available.\"\"\"\n\n    message: str\n    \"\"\"The error message with the status code and response body, if available.\"\"\"\n\n    def __init__(self, status_code: int, model_name: str, body: object | None = None):\n        self.status_code = status_code\n        self.model_name = model_name\n        self.body = body\n        message = f'status_code: {status_code}, model_name: {model_name}, body: {body}'\n        super().__init__(message)\n\n```\n\n\n#### message `instance-attribute`\n\n```\nmessage: str\n\n```\n\nThe error message with the status code and response body, if available.\n\n\n\n#### status\\_code `instance-attribute`\n\n```\nstatus_code: int = status_code\n\n```\n\nThe HTTP status code returned by the API.\n\n\n\n#### model\\_name `instance-attribute`\n\n```\nmodel_name: str = model_name\n\n```\n\nThe name of the model associated with the error.\n\n\n\n#### body `instance-attribute`\n\n```\nbody: object | None = body\n\n```\n\nThe body of the response, if available.\n\n\n\n\n\n\n### FallbackExceptionGroup\n\nBases: `ExceptionGroup`\n\nA group of exceptions that can be raised when all fallback models fail.\n\nSource code in `pydantic_ai_slim/pydantic_ai/exceptions.py`\n```\nclass FallbackExceptionGroup(ExceptionGroup):\n    \"\"\"A group of exceptions that can be raised when all fallback models fail.\"\"\"\n\n```\n\n\n\n\n\n\n\n\n`pydantic_ai.format_as_xml`\n===========================\n\n### format\\_as\\_xml\n\n```\nformat_as_xml(\n    obj: Any,\n    root_tag: str = \"examples\",\n    item_tag: str = \"example\",\n    include_root_tag: bool = True,\n    none_str: str = \"null\",\n    indent: str | None = \"  \",\n) -> str\n\n```\n\nFormat a Python object as XML.", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4379cd84952d0fee03cfcca822fde7ed", "__created_at__": 1744231651.420514, "content": "raised when all fallback models fail.\"\"\"\n\n```\n\n\n\n\n\n\n\n\n`pydantic_ai.format_as_xml`\n===========================\n\n### format\\_as\\_xml\n\n```\nformat_as_xml(\n    obj: Any,\n    root_tag: str = \"examples\",\n    item_tag: str = \"example\",\n    include_root_tag: bool = True,\n    none_str: str = \"null\",\n    indent: str | None = \"  \",\n) -> str\n\n```\n\nFormat a Python object as XML.\n\nThis is useful since LLMs often find it easier to read semi-structured data (e.g. examples) as XML,\nrather than JSON etc.\n\nSupports: `str`, `bytes`, `bytearray`, `bool`, `int`, `float`, `date`, `datetime`, `Mapping`,\n`Iterable`, `dataclass`, and `BaseModel`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `obj` | `Any` | Python Object to serialize to XML. | *required* |\n| `root_tag` | `str` | Outer tag to wrap the XML in, use `None` to omit the outer tag. | `'examples'` |\n| `item_tag` | `str` | Tag to use for each item in an iterable (e.g. list), this is overridden by the class name for dataclasses and Pydantic models. | `'example'` |\n| `include_root_tag` | `bool` | Whether to include the root tag in the output (The root tag is always included if it includes a body - e.g. when the input is a simple value). | `True` |\n| `none_str` | `str` | String to use for `None` values. | `'null'` |\n| `indent` | `str | None` | Indentation string to use for pretty printing. | `' '` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `str` | XML representation of the object. |\n\nExample:\nformat\\_as\\_xml\\_example.py\n```\nfrom pydantic_ai.format_as_xml import format_as_xml\n\nprint(format_as_xml({'name': 'John', 'height': 6, 'weight': 200}, root_tag='user'))\n'''\n<user>\n  <name>John</name>\n  <height>6</height>\n  <weight>200</weight>\n</user>\n'''\n\n```\n\n\nSource code in `pydantic_ai_slim/pydantic_ai/format_as_xml.py`\n```\ndef format_as_xml(\n    obj: Any,\n    root_tag: str = 'examples',\n    item_tag: str = 'example',\n    include_root_tag: bool = True,\n    none_str: str = 'null',\n    indent: str | None = '  ',\n) -> str:\n    \"\"\"Format a Python object as XML.\n\n    This is useful since LLMs often find it easier to read semi-structured data (e.g. examples) as XML,\n    rather than JSON etc.\n\n    Supports: `str`, `bytes`, `bytearray`, `bool`, `int`, `float`, `date`, `datetime`, `Mapping`,\n    `Iterable`, `dataclass`, and `BaseModel`.\n\n    Args:\n        obj: Python Object to serialize to XML.\n        root_tag: Outer tag to wrap the XML in, use `None` to omit the outer tag.\n        item_tag: Tag to use for each item in an iterable (e.g. list), this is overridden by the class name\n            for dataclasses and Pydantic models.\n        include_root_tag: Whether to include the root tag in the output\n            (The root tag is always included if it includes a body - e.g. when the input is a simple value).\n        none_str: String to use for `None` values.\n        indent: Indentation string to use for pretty printing.\n\n    Returns:\n        XML representation of the object.\n\n    Example:\n    ```python {title=\"format_as_xml_example.py\" lint=\"skip\"}\n    from pydantic_ai.format_as_xml import format_as_xml\n\n    print(format_as_xml({'name': 'John', 'height': 6, 'weight': 200}, root_tag='user'))\n    '''\n    \n      John\n      6\n      200\n    \n    '''\n    ```\n    \"\"\"\n    el = _ToXml(item_tag=item_tag, none_str=none_str).to_xml(obj, root_tag)\n    if not include_root_tag and el.text is None:\n        join = '' if indent is None else '\\n'\n        return join.join(_rootless_xml_elements(el, indent))\n    else:\n        if indent is not None:\n            ElementTree.indent(el, space=indent)\n        return ElementTree.tostring(el, encoding='unicode')\n\n```\n\n\n\n\n\n\n\n\n`pydantic_ai.mcp`\n=================\n\n### MCPServer\n\nBases: `ABC`\n\nBase class for attaching agents to MCP servers.\n\nSee <https://modelcontextprotocol.io> for more information.\n\nSource code in `pydantic_ai_slim/pydantic_ai/mcp.py`\n```\nclass MCPServer(ABC):\n    \"\"\"Base class for attaching agents to MCP servers.\n\n    See  for more information.\n    \"\"\"\n\n    is_running: bool = False\n\n    _client: ClientSession\n    _read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception]\n    _write_stream: MemoryObjectSendStream[JSONRPCMessage]\n    _exit_stack: AsyncExitStack\n\n    @abstractmethod\n    @asynccontextmanager\n    async def client_streams(\n        self,\n    ) -> AsyncIterator[\n        tuple[MemoryObjectReceiveStream[JSONRPCMessage | Exception], MemoryObjectSendStream[JSONRPCMessage]]\n    ]:\n        \"\"\"Create the streams for the", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-209c7ce456d62ec8593bbdf7185e8894", "__created_at__": 1744231651.420514, "content": "_read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception]\n    _write_stream: MemoryObjectSendStream[JSONRPCMessage]\n    _exit_stack: AsyncExitStack\n\n    @abstractmethod\n    @asynccontextmanager\n    async def client_streams(\n        self,\n    ) -> AsyncIterator[\n        tuple[MemoryObjectReceiveStream[JSONRPCMessage | Exception], MemoryObjectSendStream[JSONRPCMessage]]\n    ]:\n        \"\"\"Create the streams for the MCP server.\"\"\"\n        raise NotImplementedError('MCP Server subclasses must implement this method.')\n        yield\n\n    async def list_tools(self) -> list[ToolDefinition]:\n        \"\"\"Retrieve tools that are currently active on the server.\n\n        Note:\n        - We don't cache tools as they might change.\n        - We also don't subscribe to the server to avoid complexity.\n        \"\"\"\n        tools = await self._client.list_tools()\n        return [\n            ToolDefinition(\n                name=tool.name,\n                description=tool.description or '',\n                parameters_json_schema=tool.inputSchema,\n            )\n            for tool in tools.tools\n        ]\n\n    async def call_tool(self, tool_name: str, arguments: dict[str, Any]) -> CallToolResult:\n        \"\"\"Call a tool on the server.\n\n        Args:\n            tool_name: The name of the tool to call.\n            arguments: The arguments to pass to the tool.\n\n        Returns:\n            The result of the tool call.\n        \"\"\"\n        return await self._client.call_tool(tool_name, arguments)\n\n    async def __aenter__(self) -> Self:\n        self._exit_stack = AsyncExitStack()\n\n        self._read_stream, self._write_stream = await self._exit_stack.enter_async_context(self.client_streams())\n        client = ClientSession(read_stream=self._read_stream, write_stream=self._write_stream)\n        self._client = await self._exit_stack.enter_async_context(client)\n\n        await self._client.initialize()\n        self.is_running = True\n        return self\n\n    async def __aexit__(\n        self, exc_type: type[BaseException] | None, exc_value: BaseException | None, traceback: TracebackType | None\n    ) -> bool | None:\n        await self._exit_stack.aclose()\n        self.is_running = False\n\n```\n\n\n#### client\\_streams `abstractmethod` `async`\n\n```\nclient_streams() -> AsyncIterator[\n    tuple[\n        MemoryObjectReceiveStream[\n            JSONRPCMessage | Exception\n        ],\n        MemoryObjectSendStream[JSONRPCMessage],\n    ]\n]\n\n```\n\nCreate the streams for the MCP server.\n\nSource code in `pydantic_ai_slim/pydantic_ai/mcp.py`\n```\n@abstractmethod\n@asynccontextmanager\nasync def client_streams(\n    self,\n) -> AsyncIterator[\n    tuple[MemoryObjectReceiveStream[JSONRPCMessage | Exception], MemoryObjectSendStream[JSONRPCMessage]]\n]:\n    \"\"\"Create the streams for the MCP server.\"\"\"\n    raise NotImplementedError('MCP Server subclasses must implement this method.')\n    yield\n\n```\n\n\n\n\n#### list\\_tools `async`\n\n```\nlist_tools() -> list[ToolDefinition]\n\n```\n\nRetrieve tools that are currently active on the server.\n\nNote:\n- We don't cache tools as they might change.\n- We also don't subscribe to the server to avoid complexity.\n\nSource code in `pydantic_ai_slim/pydantic_ai/mcp.py`\n```\nasync def list_tools(self) -> list[ToolDefinition]:\n    \"\"\"Retrieve tools that are currently active on the server.\n\n    Note:\n    - We don't cache tools as they might change.\n    - We also don't subscribe to the server to avoid complexity.\n    \"\"\"\n    tools = await self._client.list_tools()\n    return [\n        ToolDefinition(\n            name=tool.name,\n            description=tool.description or '',\n            parameters_json_schema=tool.inputSchema,\n        )\n        for tool in tools.tools\n    ]\n\n```\n\n\n\n\n#### call\\_tool `async`\n\n```\ncall_tool(\n    tool_name: str, arguments: dict[str, Any]\n) -> CallToolResult\n\n```\n\nCall a tool on the server.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `tool_name` | `str` | The name of the tool to call. | *required* |\n| `arguments` | `dict[str, Any]` | The arguments to pass to the tool. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `CallToolResult` | The result of the tool call. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/mcp.py`\n```\nasync def call_tool(self, tool_name: str, arguments: dict[str, Any]) -> CallToolResult:\n    \"\"\"Call a tool on the server.\n\n    Args:\n        tool_name: The name of the tool to call.\n        arguments: The arguments to pass to the tool.\n\n    Returns:\n        The result of the tool call.\n    \"\"\"\n    return await self._client.call_tool(tool_name, arguments)\n\n```\n\n\n\n\n\n\n\n### MCPServerStdio `dataclass`\n\nBases: `MCPServer`\n\nRuns an MCP server in a subprocess and communicates with it over stdin/stdout.\n\nThis class implements the stdio transport from the MCP specification.\nSee <https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#stdio> for more information.\n\nNote\n\nUsing this class as an async context manager will start the server as a subprocess when entering the context,\nand stop it when exiting the context.\n\nExample:\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerStdio\n\nserver = MCPServerStdio(  # (1)!\n    'deno',\n    args=[", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-570bd1954ac1dec6ff5e11d27332192d", "__created_at__": 1744231651.420514, "content": "://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#stdio> for more information.\n\nNote\n\nUsing this class as an async context manager will start the server as a subprocess when entering the context,\nand stop it when exiting the context.\n\nExample:\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerStdio\n\nserver = MCPServerStdio(  # (1)!\n    'deno',\n    args=[\n        'run',\n        '-N',\n        '-R=node_modules',\n        '-W=node_modules',\n        '--node-modules-dir=auto',\n        'jsr:@pydantic/mcp-run-python',\n        'stdio',\n    ]\n)\nagent = Agent('openai:gpt-4o', mcp_servers=[server])\n\nasync def main():\n    async with agent.run_mcp_servers():  # (2)!\n        ...\n\n```\n\n\n1. See [MCP Run Python](../../mcp/run-python/) for more information.\n2. This will start the server as a subprocess and connect to it.\n\nSource code in `pydantic_ai_slim/pydantic_ai/mcp.py`\n```\n@dataclass\nclass MCPServerStdio(MCPServer):\n    \"\"\"Runs an MCP server in a subprocess and communicates with it over stdin/stdout.\n\n    This class implements the stdio transport from the MCP specification.\n    See  for more information.\n\n    !!! note\n        Using this class as an async context manager will start the server as a subprocess when entering the context,\n        and stop it when exiting the context.\n\n    Example:\n    ```python {py=\"3.10\"}\n    from pydantic_ai import Agent\n    from pydantic_ai.mcp import MCPServerStdio\n\n    server = MCPServerStdio(  # (1)!\n        'deno',\n        args=[\n            'run',\n            '-N',\n            '-R=node_modules',\n            '-W=node_modules',\n            '--node-modules-dir=auto',\n            'jsr:@pydantic/mcp-run-python',\n            'stdio',\n        ]\n    )\n    agent = Agent('openai:gpt-4o', mcp_servers=[server])\n\n    async def main():\n        async with agent.run_mcp_servers():  # (2)!\n            ...\n    ```\n\n    1. See [MCP Run Python](../mcp/run-python.md) for more information.\n    2. This will start the server as a subprocess and connect to it.\n    \"\"\"\n\n    command: str\n    \"\"\"The command to run.\"\"\"\n\n    args: Sequence[str]\n    \"\"\"The arguments to pass to the command.\"\"\"\n\n    env: dict[str, str] | None = None\n    \"\"\"The environment variables the CLI server will have access to.\n\n    By default the subprocess will not inherit any environment variables from the parent process.\n    If you want to inherit the environment variables from the parent process, use `env=os.environ`.\n    \"\"\"\n\n    @asynccontextmanager\n    async def client_streams(\n        self,\n    ) -> AsyncIterator[\n        tuple[MemoryObjectReceiveStream[JSONRPCMessage | Exception], MemoryObjectSendStream[JSONRPCMessage]]\n    ]:\n        server = StdioServerParameters(command=self.command, args=list(self.args), env=self.env)\n        async with stdio_client(server=server) as (read_stream, write_stream):\n            yield read_stream, write_stream\n\n```\n\n\n#### command `instance-attribute`\n\n```\ncommand: str\n\n```\n\nThe command to run.\n\n\n\n#### args `instance-attribute`\n\n```\nargs: Sequence[str]\n\n```\n\nThe arguments to pass to the command.\n\n\n\n#### env `class-attribute` `instance-attribute`\n\n```\nenv: dict[str, str] | None = None\n\n```\n\nThe environment variables the CLI server will have access to.\n\nBy default the subprocess will not inherit any environment variables from the parent process.\nIf you want to inherit the environment variables from the parent process, use `env=os.environ`.\n\n\n\n\n\n\n### MCPServerHTTP `dataclass`\n\nBases: `MCPServer`\n\nAn MCP server that connects over streamable HTTP connections.\n\nThis class implements the SSE transport from the MCP specification.\nSee <https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#http-with-sse> for more information.\n\nThe name \"HTTP\" is used since this implemented will be adapted in future to use the new\n[Streamable HTTP](https://github.com/modelcontextprotocol/specification/pull/206) currently in development.\n\nNote\n\nUsing this class as an async context manager will create a new pool of HTTP connections to connect\nto a server which should already be running.\n\nExample:\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerHTTP\n\nserver = MCPServerHTTP('http://localhost:3001/sse')  # (1)!\nagent = Agent('openai:gpt-4o', mcp_servers=[server])\n\nasync def main():\n    async with agent.run_mcp_servers():  # (2)!\n        ...\n\n```\n\n\n1. E.g. you might be connecting to a server run with [`mcp-run-python`](../../mcp/run-python/).\n2. This will connect to a server running on `localhost:3001`.\n\nSource code in `pydantic_ai_slim/pydantic_ai/mcp.py`\n```\n@dataclass\nclass MCPServerHTTP(MCPServer):\n    \"\"\"An MCP server that connects over streamable HTTP connections.\n\n    This class implements the SSE transport from the MCP specification.\n    See  for more information.\n\n    The name \"HTTP\" is used since this implemented will be adapted in future to use the new\n    [Streamable HTTP](https://github.com/modelcontextprotocol/specification/pull/206) currently in development", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a9c68832b6e867224ec251f612bde7de", "__created_at__": 1744231651.420514, "content": "_ai_slim/pydantic_ai/mcp.py`\n```\n@dataclass\nclass MCPServerHTTP(MCPServer):\n    \"\"\"An MCP server that connects over streamable HTTP connections.\n\n    This class implements the SSE transport from the MCP specification.\n    See  for more information.\n\n    The name \"HTTP\" is used since this implemented will be adapted in future to use the new\n    [Streamable HTTP](https://github.com/modelcontextprotocol/specification/pull/206) currently in development.\n\n    !!! note\n        Using this class as an async context manager will create a new pool of HTTP connections to connect\n        to a server which should already be running.\n\n    Example:\n    ```python {py=\"3.10\"}\n    from pydantic_ai import Agent\n    from pydantic_ai.mcp import MCPServerHTTP\n\n    server = MCPServerHTTP('http://localhost:3001/sse')  # (1)!\n    agent = Agent('openai:gpt-4o', mcp_servers=[server])\n\n    async def main():\n        async with agent.run_mcp_servers():  # (2)!\n            ...\n    ```\n\n    1. E.g. you might be connecting to a server run with [`mcp-run-python`](../mcp/run-python.md).\n    2. This will connect to a server running on `localhost:3001`.\n    \"\"\"\n\n    url: str\n    \"\"\"The URL of the SSE endpoint on the MCP server.\n\n    For example for a server running locally, this might be `http://localhost:3001/sse`.\n    \"\"\"\n\n    headers: dict[str, Any] | None = None\n    \"\"\"Optional HTTP headers to be sent with each request to the SSE endpoint.\n\n    These headers will be passed directly to the underlying `httpx.AsyncClient`.\n    Useful for authentication, custom headers, or other HTTP-specific configurations.\n    \"\"\"\n\n    timeout: float = 5\n    \"\"\"Initial connection timeout in seconds for establishing the SSE connection.\n\n    This timeout applies to the initial connection setup and handshake.\n    If the connection cannot be established within this time, the operation will fail.\n    \"\"\"\n\n    sse_read_timeout: float = 60 * 5\n    \"\"\"Maximum time in seconds to wait for new SSE messages before timing out.\n\n    This timeout applies to the long-lived SSE connection after it's established.\n    If no new messages are received within this time, the connection will be considered stale\n    and may be closed. Defaults to 5 minutes (300 seconds).\n    \"\"\"\n\n    @asynccontextmanager\n    async def client_streams(\n        self,\n    ) -> AsyncIterator[\n        tuple[MemoryObjectReceiveStream[JSONRPCMessage | Exception], MemoryObjectSendStream[JSONRPCMessage]]\n    ]:  # pragma: no cover\n        async with sse_client(\n            url=self.url, headers=self.headers, timeout=self.timeout, sse_read_timeout=self.sse_read_timeout\n        ) as (read_stream, write_stream):\n            yield read_stream, write_stream\n\n```\n\n\n#### url `instance-attribute`\n\n```\nurl: str\n\n```\n\nThe URL of the SSE endpoint on the MCP server.\n\nFor example for a server running locally, this might be `http://localhost:3001/sse`.\n\n\n\n#### headers `class-attribute` `instance-attribute`\n\n```\nheaders: dict[str, Any] | None = None\n\n```\n\nOptional HTTP headers to be sent with each request to the SSE endpoint.\n\nThese headers will be passed directly to the underlying `httpx.AsyncClient`.\nUseful for authentication, custom headers, or other HTTP-specific configurations.\n\n\n\n#### timeout `class-attribute` `instance-attribute`\n\n```\ntimeout: float = 5\n\n```\n\nInitial connection timeout in seconds for establishing the SSE connection.\n\nThis timeout applies to the initial connection setup and handshake.\nIf the connection cannot be established within this time, the operation will fail.\n\n\n\n#### sse\\_read\\_timeout `class-attribute` `instance-attribute`\n\n```\nsse_read_timeout: float = 60 * 5\n\n```\n\nMaximum time in seconds to wait for new SSE messages before timing out.\n\nThis timeout applies to the long-lived SSE connection after it's established.\nIf no new messages are received within this time, the connection will be considered stale\nand may be closed. Defaults to 5 minutes (300 seconds).\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.messages`\n======================\n\nThe structure of `ModelMessage` can be shown as a graph:\n\n```\ngraph RL\n    SystemPromptPart(SystemPromptPart) --- ModelRequestPart\n    UserPromptPart(UserPromptPart) --- ModelRequestPart\n    ToolReturnPart(ToolReturnPart) --- ModelRequestPart\n    RetryPromptPart(RetryPromptPart) --- ModelRequestPart\n    TextPart(TextPart) --- ModelResponsePart\n    ToolCallPart(ToolCallPart) --- ModelResponsePart\n    ModelRequestPart(\"ModelRequestPart<br>(Union)\") --- ModelRequest\n    ModelRequest(\"ModelRequest(parts=list[...])\") --- ModelMessage\n    ModelResponsePart(\"ModelResponsePart<br>(Union)\") --- ModelResponse\n    ModelResponse(\"ModelResponse(parts=list[...])\") --- ModelMessage(\"ModelMessage<br>(Union)\")\n```\n\n### SystemPromptPart `dataclass`\n\nA system prompt, generally written by the application developer.\n\nThis gives the model context and guidance on how to respond.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass SystemPromptPart:\n    \"\"\"A system prompt, generally written by the application developer.\n\n    This gives the model context and guidance on how to respond.\n    \"\"\"\n\n    content: str\n    \"\"\"The content of the prompt.\"\"\"\n\n    timestamp: datetime = field(default_factory=_now_utc)\n    \"\"\"The timestamp of the prompt.\"\"\"\n\n    dynamic_ref: str |", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-7d1e8771351fdf8b093090b4c0eb88d6", "__created_at__": 1744231651.420514, "content": "on how to respond.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass SystemPromptPart:\n    \"\"\"A system prompt, generally written by the application developer.\n\n    This gives the model context and guidance on how to respond.\n    \"\"\"\n\n    content: str\n    \"\"\"The content of the prompt.\"\"\"\n\n    timestamp: datetime = field(default_factory=_now_utc)\n    \"\"\"The timestamp of the prompt.\"\"\"\n\n    dynamic_ref: str | None = None\n    \"\"\"The ref of the dynamic system prompt function that generated this part.\n\n    Only set if system prompt is dynamic, see [`system_prompt`][pydantic_ai.Agent.system_prompt] for more information.\n    \"\"\"\n\n    part_kind: Literal['system-prompt'] = 'system-prompt'\n    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    def otel_event(self) -> Event:\n        return Event('gen_ai.system.message', body={'content': self.content, 'role': 'system'})\n\n```\n\n\n#### content `instance-attribute`\n\n```\ncontent: str\n\n```\n\nThe content of the prompt.\n\n\n\n#### timestamp `class-attribute` `instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp of the prompt.\n\n\n\n#### dynamic\\_ref `class-attribute` `instance-attribute`\n\n```\ndynamic_ref: str | None = None\n\n```\n\nThe ref of the dynamic system prompt function that generated this part.\n\nOnly set if system prompt is dynamic, see `system_prompt` for more information.\n\n\n\n#### part\\_kind `class-attribute` `instance-attribute`\n\n```\npart_kind: Literal['system-prompt'] = 'system-prompt'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n\n\n\n\n\n### AudioUrl `dataclass`\n\nA URL to an audio file.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass AudioUrl:\n    \"\"\"A URL to an audio file.\"\"\"\n\n    url: str\n    \"\"\"The URL of the audio file.\"\"\"\n\n    kind: Literal['audio-url'] = 'audio-url'\n    \"\"\"Type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    @property\n    def media_type(self) -> AudioMediaType:\n        \"\"\"Return the media type of the audio file, based on the url.\"\"\"\n        if self.url.endswith('.mp3'):\n            return 'audio/mpeg'\n        elif self.url.endswith('.wav'):\n            return 'audio/wav'\n        else:\n            raise ValueError(f'Unknown audio file extension: {self.url}')\n\n```\n\n\n#### url `instance-attribute`\n\n```\nurl: str\n\n```\n\nThe URL of the audio file.\n\n\n\n#### kind `class-attribute` `instance-attribute`\n\n```\nkind: Literal['audio-url'] = 'audio-url'\n\n```\n\nType identifier, this is available on all parts as a discriminator.\n\n\n\n#### media\\_type `property`\n\n```\nmedia_type: AudioMediaType\n\n```\n\nReturn the media type of the audio file, based on the url.\n\n\n\n\n\n\n### ImageUrl `dataclass`\n\nA URL to an image.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass ImageUrl:\n    \"\"\"A URL to an image.\"\"\"\n\n    url: str\n    \"\"\"The URL of the image.\"\"\"\n\n    kind: Literal['image-url'] = 'image-url'\n    \"\"\"Type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    @property\n    def media_type(self) -> ImageMediaType:\n        \"\"\"Return the media type of the image, based on the url.\"\"\"\n        if self.url.endswith(('.jpg', '.jpeg')):\n            return 'image/jpeg'\n        elif self.url.endswith('.png'):\n            return 'image/png'\n        elif self.url.endswith('.gif'):\n            return 'image/gif'\n        elif self.url.endswith('.webp'):\n            return 'image/webp'\n        else:\n            raise ValueError(f'Unknown image file extension: {self.url}')\n\n    @property\n    def format(self) -> ImageFormat:\n        \"\"\"The file format of the image.\n\n        The choice of supported formats were based on the Bedrock Converse API. Other APIs don't require to use a format.\n        \"\"\"\n        return _image_format(self.media_type)\n\n```\n\n\n#### url `instance-attribute`\n\n```\nurl: str\n\n```\n\nThe URL of the image.\n\n\n\n#### kind `class-attribute` `instance-attribute`\n\n```\nkind: Literal['image-url'] = 'image-url'\n\n```\n\nType identifier, this is available on all parts as a discriminator.\n\n\n\n#### media\\_type `property`\n\n```\nmedia_type: ImageMediaType\n\n```\n\nReturn the media type of the image, based on the url.\n\n\n\n#### format `property`\n\n```\nformat: ImageFormat\n\n```\n\nThe file format of the image.\n\nThe choice of supported formats were based on the Bedrock Converse API. Other APIs don't require to use a format.\n\n\n\n\n\n\n### DocumentUrl `dataclass`\n\nThe URL of the document.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass DocumentUrl:\n    \"\"\"The URL of the document.\"\"\"\n\n    url: str\n    \"\"\"The URL of the document.\"\"\"\n\n    kind: Literal['document-url'] = 'document-url'\n    \"\"\"Type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    @property\n    def media_type(self) -> str:\n        \"\"\"Return the media type of the document, based on the url.\"\"\"\n        type_, _ = guess_type(self.url)\n        if type_ is None:\n            raise RuntimeError(f'Unknown document file extension: {self.url}')\n        return type_\n\n    @property", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-cfb555b3d68851a2fa259151f0745e2a", "__created_at__": 1744231651.420514, "content": "of the document.\"\"\"\n\n    kind: Literal['document-url'] = 'document-url'\n    \"\"\"Type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    @property\n    def media_type(self) -> str:\n        \"\"\"Return the media type of the document, based on the url.\"\"\"\n        type_, _ = guess_type(self.url)\n        if type_ is None:\n            raise RuntimeError(f'Unknown document file extension: {self.url}')\n        return type_\n\n    @property\n    def format(self) -> DocumentFormat:\n        \"\"\"The file format of the document.\n\n        The choice of supported formats were based on the Bedrock Converse API. Other APIs don't require to use a format.\n        \"\"\"\n        return _document_format(self.media_type)\n\n```\n\n\n#### url `instance-attribute`\n\n```\nurl: str\n\n```\n\nThe URL of the document.\n\n\n\n#### kind `class-attribute` `instance-attribute`\n\n```\nkind: Literal['document-url'] = 'document-url'\n\n```\n\nType identifier, this is available on all parts as a discriminator.\n\n\n\n#### media\\_type `property`\n\n```\nmedia_type: str\n\n```\n\nReturn the media type of the document, based on the url.\n\n\n\n#### format `property`\n\n```\nformat: DocumentFormat\n\n```\n\nThe file format of the document.\n\nThe choice of supported formats were based on the Bedrock Converse API. Other APIs don't require to use a format.\n\n\n\n\n\n\n### BinaryContent `dataclass`\n\nBinary content, e.g. an audio or image file.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass BinaryContent:\n    \"\"\"Binary content, e.g. an audio or image file.\"\"\"\n\n    data: bytes\n    \"\"\"The binary data.\"\"\"\n\n    media_type: AudioMediaType | ImageMediaType | DocumentMediaType | str\n    \"\"\"The media type of the binary data.\"\"\"\n\n    kind: Literal['binary'] = 'binary'\n    \"\"\"Type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    @property\n    def is_audio(self) -> bool:\n        \"\"\"Return `True` if the media type is an audio type.\"\"\"\n        return self.media_type.startswith('audio/')\n\n    @property\n    def is_image(self) -> bool:\n        \"\"\"Return `True` if the media type is an image type.\"\"\"\n        return self.media_type.startswith('image/')\n\n    @property\n    def is_document(self) -> bool:\n        \"\"\"Return `True` if the media type is a document type.\"\"\"\n        return self.media_type in {\n            'application/pdf',\n            'text/plain',\n            'text/csv',\n            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n            'text/html',\n            'text/markdown',\n            'application/vnd.ms-excel',\n        }\n\n    @property\n    def format(self) -> str:\n        \"\"\"The file format of the binary content.\"\"\"\n        if self.is_audio:\n            if self.media_type == 'audio/mpeg':\n                return 'mp3'\n            elif self.media_type == 'audio/wav':\n                return 'wav'\n        elif self.is_image:\n            return _image_format(self.media_type)\n        elif self.is_document:\n            return _document_format(self.media_type)\n        raise ValueError(f'Unknown media type: {self.media_type}')\n\n```\n\n\n#### data `instance-attribute`\n\n```\ndata: bytes\n\n```\n\nThe binary data.\n\n\n\n#### media\\_type `instance-attribute`\n\n```\nmedia_type: (\n    AudioMediaType\n    | ImageMediaType\n    | DocumentMediaType\n    | str\n)\n\n```\n\nThe media type of the binary data.\n\n\n\n#### kind `class-attribute` `instance-attribute`\n\n```\nkind: Literal['binary'] = 'binary'\n\n```\n\nType identifier, this is available on all parts as a discriminator.\n\n\n\n#### is\\_audio `property`\n\n```\nis_audio: bool\n\n```\n\nReturn `True` if the media type is an audio type.\n\n\n\n#### is\\_image `property`\n\n```\nis_image: bool\n\n```\n\nReturn `True` if the media type is an image type.\n\n\n\n#### is\\_document `property`\n\n```\nis_document: bool\n\n```\n\nReturn `True` if the media type is a document type.\n\n\n\n#### format `property`\n\n```\nformat: str\n\n```\n\nThe file format of the binary content.\n\n\n\n\n\n\n### UserPromptPart `dataclass`\n\nA user prompt, generally written by the end user.\n\nContent comes from the `user_prompt` parameter of `Agent.run`,\n`Agent.run_sync`, and `Agent.run_stream`.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass UserPromptPart:\n    \"\"\"A user prompt, generally written by the end user.\n\n    Content comes from the `user_prompt` parameter of [`Agent.run`][pydantic_ai.Agent.run],\n    [`Agent.run_sync`][pydantic_ai.Agent.run_sync], and [`Agent.run_stream`][pydantic_ai.Agent.run_stream].\n    \"\"\"\n\n    content: str | Sequence[UserContent]\n    \"\"\"The content of the prompt.\"\"\"\n\n    timestamp: datetime = field(default_factory=_now_utc)\n    \"\"\"The timestamp of the prompt.\"\"\"\n\n    part_kind: Literal['user-prompt'] = 'user-prompt'\n    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    def otel_event(self) -> Event:\n        if isinstance(self.content, str):\n            content = self.content\n        else:\n            # TODO figure out what to record for images and audio\n            content = [part if isinstance(part, str) else {'kind': part.kind} for part in self.content]\n        return Event('gen", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4f4eceed73ea96cd06f2303055d3cd57", "__created_at__": 1744231651.420514, "content": "part_kind: Literal['user-prompt'] = 'user-prompt'\n    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    def otel_event(self) -> Event:\n        if isinstance(self.content, str):\n            content = self.content\n        else:\n            # TODO figure out what to record for images and audio\n            content = [part if isinstance(part, str) else {'kind': part.kind} for part in self.content]\n        return Event('gen_ai.user.message', body={'content': content, 'role': 'user'})\n\n```\n\n\n#### content `instance-attribute`\n\n```\ncontent: str | Sequence[UserContent]\n\n```\n\nThe content of the prompt.\n\n\n\n#### timestamp `class-attribute` `instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp of the prompt.\n\n\n\n#### part\\_kind `class-attribute` `instance-attribute`\n\n```\npart_kind: Literal['user-prompt'] = 'user-prompt'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n\n\n\n\n\n### ToolReturnPart `dataclass`\n\nA tool return message, this encodes the result of running a tool.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass ToolReturnPart:\n    \"\"\"A tool return message, this encodes the result of running a tool.\"\"\"\n\n    tool_name: str\n    \"\"\"The name of the \"tool\" was called.\"\"\"\n\n    content: Any\n    \"\"\"The return value.\"\"\"\n\n    tool_call_id: str\n    \"\"\"The tool call identifier, this is used by some models including OpenAI.\"\"\"\n\n    timestamp: datetime = field(default_factory=_now_utc)\n    \"\"\"The timestamp, when the tool returned.\"\"\"\n\n    part_kind: Literal['tool-return'] = 'tool-return'\n    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    def model_response_str(self) -> str:\n        \"\"\"Return a string representation of the content for the model.\"\"\"\n        if isinstance(self.content, str):\n            return self.content\n        else:\n            return tool_return_ta.dump_json(self.content).decode()\n\n    def model_response_object(self) -> dict[str, Any]:\n        \"\"\"Return a dictionary representation of the content, wrapping non-dict types appropriately.\"\"\"\n        # gemini supports JSON dict return values, but no other JSON types, hence we wrap anything else in a dict\n        if isinstance(self.content, dict):\n            return tool_return_ta.dump_python(self.content, mode='json')  # pyright: ignore[reportUnknownMemberType]\n        else:\n            return {'return_value': tool_return_ta.dump_python(self.content, mode='json')}\n\n    def otel_event(self) -> Event:\n        return Event(\n            'gen_ai.tool.message',\n            body={'content': self.content, 'role': 'tool', 'id': self.tool_call_id, 'name': self.tool_name},\n        )\n\n```\n\n\n#### tool\\_name `instance-attribute`\n\n```\ntool_name: str\n\n```\n\nThe name of the \"tool\" was called.\n\n\n\n#### content `instance-attribute`\n\n```\ncontent: Any\n\n```\n\nThe return value.\n\n\n\n#### tool\\_call\\_id `instance-attribute`\n\n```\ntool_call_id: str\n\n```\n\nThe tool call identifier, this is used by some models including OpenAI.\n\n\n\n#### timestamp `class-attribute` `instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp, when the tool returned.\n\n\n\n#### part\\_kind `class-attribute` `instance-attribute`\n\n```\npart_kind: Literal['tool-return'] = 'tool-return'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n\n\n#### model\\_response\\_str\n\n```\nmodel_response_str() -> str\n\n```\n\nReturn a string representation of the content for the model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef model_response_str(self) -> str:\n    \"\"\"Return a string representation of the content for the model.\"\"\"\n    if isinstance(self.content, str):\n        return self.content\n    else:\n        return tool_return_ta.dump_json(self.content).decode()\n\n```\n\n\n\n\n#### model\\_response\\_object\n\n```\nmodel_response_object() -> dict[str, Any]\n\n```\n\nReturn a dictionary representation of the content, wrapping non-dict types appropriately.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef model_response_object(self) -> dict[str, Any]:\n    \"\"\"Return a dictionary representation of the content, wrapping non-dict types appropriately.\"\"\"\n    # gemini supports JSON dict return values, but no other JSON types, hence we wrap anything else in a dict\n    if isinstance(self.content, dict):\n        return tool_return_ta.dump_python(self.content, mode='json')  # pyright: ignore[reportUnknownMemberType]\n    else:\n        return {'return_value': tool_return_ta.dump_python(self.content, mode='json')}\n\n```\n\n\n\n\n\n\n\n### RetryPromptPart `dataclass`\n\nA message back to a model asking it to try again.\n\nThis can be sent for a number of reasons:\n\n* Pydantic validation of tool arguments failed, here content is derived from a Pydantic\n  `ValidationError`\n* a tool raised a `ModelRetry` exception\n* no tool was found for the tool name\n* the model returned plain text when a structured response was expected\n* Pydantic validation of a structured response failed, here content is derived from a Pydantic\n  `ValidationError`\n* a result validator raised a `ModelRetry` exception\n\nSource code in `pydantic_ai_slim/p", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-6917f262ab39c9184d0d42aaa934095b", "__created_at__": 1744231651.420514, "content": "failed, here content is derived from a Pydantic\n  `ValidationError`\n* a tool raised a `ModelRetry` exception\n* no tool was found for the tool name\n* the model returned plain text when a structured response was expected\n* Pydantic validation of a structured response failed, here content is derived from a Pydantic\n  `ValidationError`\n* a result validator raised a `ModelRetry` exception\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass RetryPromptPart:\n    \"\"\"A message back to a model asking it to try again.\n\n    This can be sent for a number of reasons:\n\n    * Pydantic validation of tool arguments failed, here content is derived from a Pydantic\n      [`ValidationError`][pydantic_core.ValidationError]\n    * a tool raised a [`ModelRetry`][pydantic_ai.exceptions.ModelRetry] exception\n    * no tool was found for the tool name\n    * the model returned plain text when a structured response was expected\n    * Pydantic validation of a structured response failed, here content is derived from a Pydantic\n      [`ValidationError`][pydantic_core.ValidationError]\n    * a result validator raised a [`ModelRetry`][pydantic_ai.exceptions.ModelRetry] exception\n    \"\"\"\n\n    content: list[pydantic_core.ErrorDetails] | str\n    \"\"\"Details of why and how the model should retry.\n\n    If the retry was triggered by a [`ValidationError`][pydantic_core.ValidationError], this will be a list of\n    error details.\n    \"\"\"\n\n    tool_name: str | None = None\n    \"\"\"The name of the tool that was called, if any.\"\"\"\n\n    tool_call_id: str = field(default_factory=_generate_tool_call_id)\n    \"\"\"The tool call identifier, this is used by some models including OpenAI.\n\n    In case the tool call id is not provided by the model, PydanticAI will generate a random one.\n    \"\"\"\n\n    timestamp: datetime = field(default_factory=_now_utc)\n    \"\"\"The timestamp, when the retry was triggered.\"\"\"\n\n    part_kind: Literal['retry-prompt'] = 'retry-prompt'\n    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    def model_response(self) -> str:\n        \"\"\"Return a string message describing why the retry is requested.\"\"\"\n        if isinstance(self.content, str):\n            description = self.content\n        else:\n            json_errors = error_details_ta.dump_json(self.content, exclude={'__all__': {'ctx'}}, indent=2)\n            description = f'{len(self.content)} validation errors: {json_errors.decode()}'\n        return f'{description}\\n\\nFix the errors and try again.'\n\n    def otel_event(self) -> Event:\n        if self.tool_name is None:\n            return Event('gen_ai.user.message', body={'content': self.model_response(), 'role': 'user'})\n        else:\n            return Event(\n                'gen_ai.tool.message',\n                body={\n                    'content': self.model_response(),\n                    'role': 'tool',\n                    'id': self.tool_call_id,\n                    'name': self.tool_name,\n                },\n            )\n\n```\n\n\n#### content `instance-attribute`\n\n```\ncontent: list[ErrorDetails] | str\n\n```\n\nDetails of why and how the model should retry.\n\nIf the retry was triggered by a `ValidationError`, this will be a list of\nerror details.\n\n\n\n#### tool\\_name `class-attribute` `instance-attribute`\n\n```\ntool_name: str | None = None\n\n```\n\nThe name of the tool that was called, if any.\n\n\n\n#### tool\\_call\\_id `class-attribute` `instance-attribute`\n\n```\ntool_call_id: str = field(\n    default_factory=generate_tool_call_id\n)\n\n```\n\nThe tool call identifier, this is used by some models including OpenAI.\n\nIn case the tool call id is not provided by the model, PydanticAI will generate a random one.\n\n\n\n#### timestamp `class-attribute` `instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp, when the retry was triggered.\n\n\n\n#### part\\_kind `class-attribute` `instance-attribute`\n\n```\npart_kind: Literal['retry-prompt'] = 'retry-prompt'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n\n\n#### model\\_response\n\n```\nmodel_response() -> str\n\n```\n\nReturn a string message describing why the retry is requested.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef model_response(self) -> str:\n    \"\"\"Return a string message describing why the retry is requested.\"\"\"\n    if isinstance(self.content, str):\n        description = self.content\n    else:\n        json_errors = error_details_ta.dump_json(self.content, exclude={'__all__': {'ctx'}}, indent=2)\n        description = f'{len(self.content)} validation errors: {json_errors.decode()}'\n    return f'{description}\\n\\nFix the errors and try again.'\n\n```\n\n\n\n\n\n\n\n### ModelRequestPart `module-attribute`\n\n```\nModelRequestPart = Annotated[\n    Union[\n        SystemPromptPart,\n        UserPromptPart,\n        ToolReturnPart,\n        RetryPromptPart,\n    ],\n    Discriminator(\"part_kind\"),\n]\n\n```\n\nA message part sent by PydanticAI to a model.\n\n\n\n### ModelRequest `dataclass`\n\nA request generated by PydanticAI and sent to a model, e.g. a message from the PydanticAI app to the model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-b76bef668c33d18b6f44870e86c33a1b", "__created_at__": 1744231651.420514, "content": "UserPromptPart,\n        ToolReturnPart,\n        RetryPromptPart,\n    ],\n    Discriminator(\"part_kind\"),\n]\n\n```\n\nA message part sent by PydanticAI to a model.\n\n\n\n### ModelRequest `dataclass`\n\nA request generated by PydanticAI and sent to a model, e.g. a message from the PydanticAI app to the model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass ModelRequest:\n    \"\"\"A request generated by PydanticAI and sent to a model, e.g. a message from the PydanticAI app to the model.\"\"\"\n\n    parts: list[ModelRequestPart]\n    \"\"\"The parts of the user message.\"\"\"\n\n    kind: Literal['request'] = 'request'\n    \"\"\"Message type identifier, this is available on all parts as a discriminator.\"\"\"\n\n```\n\n\n#### parts `instance-attribute`\n\n```\nparts: list[ModelRequestPart]\n\n```\n\nThe parts of the user message.\n\n\n\n#### kind `class-attribute` `instance-attribute`\n\n```\nkind: Literal['request'] = 'request'\n\n```\n\nMessage type identifier, this is available on all parts as a discriminator.\n\n\n\n\n\n\n### TextPart `dataclass`\n\nA plain text response from a model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass TextPart:\n    \"\"\"A plain text response from a model.\"\"\"\n\n    content: str\n    \"\"\"The text content of the response.\"\"\"\n\n    part_kind: Literal['text'] = 'text'\n    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    def has_content(self) -> bool:\n        \"\"\"Return `True` if the text content is non-empty.\"\"\"\n        return bool(self.content)\n\n```\n\n\n#### content `instance-attribute`\n\n```\ncontent: str\n\n```\n\nThe text content of the response.\n\n\n\n#### part\\_kind `class-attribute` `instance-attribute`\n\n```\npart_kind: Literal['text'] = 'text'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n\n\n#### has\\_content\n\n```\nhas_content() -> bool\n\n```\n\nReturn `True` if the text content is non-empty.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef has_content(self) -> bool:\n    \"\"\"Return `True` if the text content is non-empty.\"\"\"\n    return bool(self.content)\n\n```\n\n\n\n\n\n\n\n### ToolCallPart `dataclass`\n\nA tool call from a model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass ToolCallPart:\n    \"\"\"A tool call from a model.\"\"\"\n\n    tool_name: str\n    \"\"\"The name of the tool to call.\"\"\"\n\n    args: str | dict[str, Any]\n    \"\"\"The arguments to pass to the tool.\n\n    This is stored either as a JSON string or a Python dictionary depending on how data was received.\n    \"\"\"\n\n    tool_call_id: str = field(default_factory=_generate_tool_call_id)\n    \"\"\"The tool call identifier, this is used by some models including OpenAI.\n\n    In case the tool call id is not provided by the model, PydanticAI will generate a random one.\n    \"\"\"\n\n    part_kind: Literal['tool-call'] = 'tool-call'\n    \"\"\"Part type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    def args_as_dict(self) -> dict[str, Any]:\n        \"\"\"Return the arguments as a Python dictionary.\n\n        This is just for convenience with models that require dicts as input.\n        \"\"\"\n        if isinstance(self.args, dict):\n            return self.args\n        args = pydantic_core.from_json(self.args)\n        assert isinstance(args, dict), 'args should be a dict'\n        return cast(dict[str, Any], args)\n\n    def args_as_json_str(self) -> str:\n        \"\"\"Return the arguments as a JSON string.\n\n        This is just for convenience with models that require JSON strings as input.\n        \"\"\"\n        if isinstance(self.args, str):\n            return self.args\n        return pydantic_core.to_json(self.args).decode()\n\n    def has_content(self) -> bool:\n        \"\"\"Return `True` if the arguments contain any data.\"\"\"\n        if isinstance(self.args, dict):\n            # TODO: This should probably return True if you have the value False, or 0, etc.\n            #   It makes sense to me to ignore empty strings, but not sure about empty lists or dicts\n            return any(self.args.values())\n        else:\n            return bool(self.args)\n\n```\n\n\n#### tool\\_name `instance-attribute`\n\n```\ntool_name: str\n\n```\n\nThe name of the tool to call.\n\n\n\n#### args `instance-attribute`\n\n```\nargs: str | dict[str, Any]\n\n```\n\nThe arguments to pass to the tool.\n\nThis is stored either as a JSON string or a Python dictionary depending on how data was received.\n\n\n\n#### tool\\_call\\_id `class-attribute` `instance-attribute`\n\n```\ntool_call_id: str = field(\n    default_factory=generate_tool_call_id\n)\n\n```\n\nThe tool call identifier, this is used by some models including OpenAI.\n\nIn case the tool call id is not provided by the model, PydanticAI will generate a random one.\n\n\n\n#### part\\_kind `class-attribute` `instance-attribute`\n\n```\npart_kind: Literal['tool-call'] = 'tool-call'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n\n\n#### args\\_as\\_dict\n\n```\nargs_as_dict() -> dict[str, Any]\n\n```\n\nReturn the arguments as a Python dictionary.\n\nThis is just for convenience with models that require dicts", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-2eb1c494e4f675bfe12e4e3047f70efc", "__created_at__": 1744231651.420514, "content": "model, PydanticAI will generate a random one.\n\n\n\n#### part\\_kind `class-attribute` `instance-attribute`\n\n```\npart_kind: Literal['tool-call'] = 'tool-call'\n\n```\n\nPart type identifier, this is available on all parts as a discriminator.\n\n\n\n#### args\\_as\\_dict\n\n```\nargs_as_dict() -> dict[str, Any]\n\n```\n\nReturn the arguments as a Python dictionary.\n\nThis is just for convenience with models that require dicts as input.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef args_as_dict(self) -> dict[str, Any]:\n    \"\"\"Return the arguments as a Python dictionary.\n\n    This is just for convenience with models that require dicts as input.\n    \"\"\"\n    if isinstance(self.args, dict):\n        return self.args\n    args = pydantic_core.from_json(self.args)\n    assert isinstance(args, dict), 'args should be a dict'\n    return cast(dict[str, Any], args)\n\n```\n\n\n\n\n#### args\\_as\\_json\\_str\n\n```\nargs_as_json_str() -> str\n\n```\n\nReturn the arguments as a JSON string.\n\nThis is just for convenience with models that require JSON strings as input.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef args_as_json_str(self) -> str:\n    \"\"\"Return the arguments as a JSON string.\n\n    This is just for convenience with models that require JSON strings as input.\n    \"\"\"\n    if isinstance(self.args, str):\n        return self.args\n    return pydantic_core.to_json(self.args).decode()\n\n```\n\n\n\n\n#### has\\_content\n\n```\nhas_content() -> bool\n\n```\n\nReturn `True` if the arguments contain any data.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef has_content(self) -> bool:\n    \"\"\"Return `True` if the arguments contain any data.\"\"\"\n    if isinstance(self.args, dict):\n        # TODO: This should probably return True if you have the value False, or 0, etc.\n        #   It makes sense to me to ignore empty strings, but not sure about empty lists or dicts\n        return any(self.args.values())\n    else:\n        return bool(self.args)\n\n```\n\n\n\n\n\n\n\n### ModelResponsePart `module-attribute`\n\n```\nModelResponsePart = Annotated[\n    Union[TextPart, ToolCallPart],\n    Discriminator(\"part_kind\"),\n]\n\n```\n\nA message part returned by a model.\n\n\n\n### ModelResponse `dataclass`\n\nA response from a model, e.g. a message from the model to the PydanticAI app.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass ModelResponse:\n    \"\"\"A response from a model, e.g. a message from the model to the PydanticAI app.\"\"\"\n\n    parts: list[ModelResponsePart]\n    \"\"\"The parts of the model message.\"\"\"\n\n    model_name: str | None = None\n    \"\"\"The name of the model that generated the response.\"\"\"\n\n    timestamp: datetime = field(default_factory=_now_utc)\n    \"\"\"The timestamp of the response.\n\n    If the model provides a timestamp in the response (as OpenAI does) that will be used.\n    \"\"\"\n\n    kind: Literal['response'] = 'response'\n    \"\"\"Message type identifier, this is available on all parts as a discriminator.\"\"\"\n\n    def otel_events(self) -> list[Event]:\n        \"\"\"Return OpenTelemetry events for the response.\"\"\"\n        result: list[Event] = []\n\n        def new_event_body():\n            new_body: dict[str, Any] = {'role': 'assistant'}\n            ev = Event('gen_ai.assistant.message', body=new_body)\n            result.append(ev)\n            return new_body\n\n        body = new_event_body()\n        for part in self.parts:\n            if isinstance(part, ToolCallPart):\n                body.setdefault('tool_calls', []).append(\n                    {\n                        'id': part.tool_call_id,\n                        'type': 'function',  # TODO https://github.com/pydantic/pydantic-ai/issues/888\n                        'function': {\n                            'name': part.tool_name,\n                            'arguments': part.args,\n                        },\n                    }\n                )\n            elif isinstance(part, TextPart):\n                if body.get('content'):\n                    body = new_event_body()\n                body['content'] = part.content\n\n        return result\n\n```\n\n\n#### parts `instance-attribute`\n\n```\nparts: list[ModelResponsePart]\n\n```\n\nThe parts of the model message.\n\n\n\n#### model\\_name `class-attribute` `instance-attribute`\n\n```\nmodel_name: str | None = None\n\n```\n\nThe name of the model that generated the response.\n\n\n\n#### timestamp `class-attribute` `instance-attribute`\n\n```\ntimestamp: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp of the response.\n\nIf the model provides a timestamp in the response (as OpenAI does) that will be used.\n\n\n\n#### kind `class-attribute` `instance-attribute`\n\n```\nkind: Literal['response'] = 'response'\n\n```\n\nMessage type identifier, this is available on all parts as a discriminator.\n\n\n\n#### otel\\_events\n\n```\notel_events() -> list[Event]\n\n```\n\nReturn OpenTelemetry events for the response.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef otel_events(self) -> list[Event]:\n    \"\"\"Return OpenTelemetry events for the response.\"\"\"\n    result: list[Event] = []\n\n    def new_event_body():\n        new_body: dict[str, Any] = {'role': 'assistant'}\n        ev = Event('gen_ai.assistant.message', body=new_body)\n        result.append", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3c9b6b4ee61bee314208883b07d282a5", "__created_at__": 1744231651.420514, "content": "]\n\n```\n\nReturn OpenTelemetry events for the response.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef otel_events(self) -> list[Event]:\n    \"\"\"Return OpenTelemetry events for the response.\"\"\"\n    result: list[Event] = []\n\n    def new_event_body():\n        new_body: dict[str, Any] = {'role': 'assistant'}\n        ev = Event('gen_ai.assistant.message', body=new_body)\n        result.append(ev)\n        return new_body\n\n    body = new_event_body()\n    for part in self.parts:\n        if isinstance(part, ToolCallPart):\n            body.setdefault('tool_calls', []).append(\n                {\n                    'id': part.tool_call_id,\n                    'type': 'function',  # TODO https://github.com/pydantic/pydantic-ai/issues/888\n                    'function': {\n                        'name': part.tool_name,\n                        'arguments': part.args,\n                    },\n                }\n            )\n        elif isinstance(part, TextPart):\n            if body.get('content'):\n                body = new_event_body()\n            body['content'] = part.content\n\n    return result\n\n```\n\n\n\n\n\n\n\n### ModelMessage `module-attribute`\n\n```\nModelMessage = Annotated[\n    Union[ModelRequest, ModelResponse],\n    Discriminator(\"kind\"),\n]\n\n```\n\nAny message sent to or returned by a model.\n\n\n\n### ModelMessagesTypeAdapter `module-attribute`\n\n```\nModelMessagesTypeAdapter = TypeAdapter(\n    list[ModelMessage],\n    config=ConfigDict(\n        defer_build=True, ser_json_bytes=\"base64\"\n    ),\n)\n\n```\n\nPydantic `TypeAdapter` for (de)serializing messages.\n\n\n\n### TextPartDelta `dataclass`\n\nA partial update (delta) for a `TextPart` to append new text content.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass TextPartDelta:\n    \"\"\"A partial update (delta) for a `TextPart` to append new text content.\"\"\"\n\n    content_delta: str\n    \"\"\"The incremental text content to add to the existing `TextPart` content.\"\"\"\n\n    part_delta_kind: Literal['text'] = 'text'\n    \"\"\"Part delta type identifier, used as a discriminator.\"\"\"\n\n    def apply(self, part: ModelResponsePart) -> TextPart:\n        \"\"\"Apply this text delta to an existing `TextPart`.\n\n        Args:\n            part: The existing model response part, which must be a `TextPart`.\n\n        Returns:\n            A new `TextPart` with updated text content.\n\n        Raises:\n            ValueError: If `part` is not a `TextPart`.\n        \"\"\"\n        if not isinstance(part, TextPart):\n            raise ValueError('Cannot apply TextPartDeltas to non-TextParts')\n        return replace(part, content=part.content + self.content_delta)\n\n```\n\n\n#### content\\_delta `instance-attribute`\n\n```\ncontent_delta: str\n\n```\n\nThe incremental text content to add to the existing `TextPart` content.\n\n\n\n#### part\\_delta\\_kind `class-attribute` `instance-attribute`\n\n```\npart_delta_kind: Literal['text'] = 'text'\n\n```\n\nPart delta type identifier, used as a discriminator.\n\n\n\n#### apply\n\n```\napply(part: ModelResponsePart) -> TextPart\n\n```\n\nApply this text delta to an existing `TextPart`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `part` | `ModelResponsePart` | The existing model response part, which must be a `TextPart`. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `TextPart` | A new `TextPart` with updated text content. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValueError` | If `part` is not a `TextPart`. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef apply(self, part: ModelResponsePart) -> TextPart:\n    \"\"\"Apply this text delta to an existing `TextPart`.\n\n    Args:\n        part: The existing model response part, which must be a `TextPart`.\n\n    Returns:\n        A new `TextPart` with updated text content.\n\n    Raises:\n        ValueError: If `part` is not a `TextPart`.\n    \"\"\"\n    if not isinstance(part, TextPart):\n        raise ValueError('Cannot apply TextPartDeltas to non-TextParts')\n    return replace(part, content=part.content + self.content_delta)\n\n```\n\n\n\n\n\n\n\n### ToolCallPartDelta `dataclass`\n\nA partial update (delta) for a `ToolCallPart` to modify tool name, arguments, or tool call ID.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass ToolCallPartDelta:\n    \"\"\"A partial update (delta) for a `ToolCallPart` to modify tool name, arguments, or tool call ID.\"\"\"\n\n    tool_name_delta: str | None = None\n    \"\"\"Incremental text to add to the existing tool name, if any.\"\"\"\n\n    args_delta: str | dict[str, Any] | None = None\n    \"\"\"Incremental data to add to the tool arguments.\n\n    If this is a string, it will be appended to existing JSON arguments.\n    If this is a dict, it will be merged with existing dict arguments.\n    \"\"\"\n\n    tool_call_id: str | None = None\n    \"\"\"Optional tool call identifier, this is used by some models including OpenAI.\n\n    Note this is never treated as a delta — it can replace None, but otherwise if a\n    non-matching value is provided an error will be raised.\"\"\"\n\n    part_delta_kind: Literal['tool", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-1c5ccdde7a3769386d9598c66c9e6650", "__created_at__": 1744231651.420514, "content": "is a string, it will be appended to existing JSON arguments.\n    If this is a dict, it will be merged with existing dict arguments.\n    \"\"\"\n\n    tool_call_id: str | None = None\n    \"\"\"Optional tool call identifier, this is used by some models including OpenAI.\n\n    Note this is never treated as a delta — it can replace None, but otherwise if a\n    non-matching value is provided an error will be raised.\"\"\"\n\n    part_delta_kind: Literal['tool_call'] = 'tool_call'\n    \"\"\"Part delta type identifier, used as a discriminator.\"\"\"\n\n    def as_part(self) -> ToolCallPart | None:\n        \"\"\"Convert this delta to a fully formed `ToolCallPart` if possible, otherwise return `None`.\n\n        Returns:\n            A `ToolCallPart` if both `tool_name_delta` and `args_delta` are set, otherwise `None`.\n        \"\"\"\n        if self.tool_name_delta is None or self.args_delta is None:\n            return None\n\n        return ToolCallPart(self.tool_name_delta, self.args_delta, self.tool_call_id or _generate_tool_call_id())\n\n    @overload\n    def apply(self, part: ModelResponsePart) -> ToolCallPart: ...\n\n    @overload\n    def apply(self, part: ModelResponsePart | ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta: ...\n\n    def apply(self, part: ModelResponsePart | ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta:\n        \"\"\"Apply this delta to a part or delta, returning a new part or delta with the changes applied.\n\n        Args:\n            part: The existing model response part or delta to update.\n\n        Returns:\n            Either a new `ToolCallPart` or an updated `ToolCallPartDelta`.\n\n        Raises:\n            ValueError: If `part` is neither a `ToolCallPart` nor a `ToolCallPartDelta`.\n            UnexpectedModelBehavior: If applying JSON deltas to dict arguments or vice versa.\n        \"\"\"\n        if isinstance(part, ToolCallPart):\n            return self._apply_to_part(part)\n\n        if isinstance(part, ToolCallPartDelta):\n            return self._apply_to_delta(part)\n\n        raise ValueError(f'Can only apply ToolCallPartDeltas to ToolCallParts or ToolCallPartDeltas, not {part}')\n\n    def _apply_to_delta(self, delta: ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta:\n        \"\"\"Internal helper to apply this delta to another delta.\"\"\"\n        if self.tool_name_delta:\n            # Append incremental text to the existing tool_name_delta\n            updated_tool_name_delta = (delta.tool_name_delta or '') + self.tool_name_delta\n            delta = replace(delta, tool_name_delta=updated_tool_name_delta)\n\n        if isinstance(self.args_delta, str):\n            if isinstance(delta.args_delta, dict):\n                raise UnexpectedModelBehavior(\n                    f'Cannot apply JSON deltas to non-JSON tool arguments ({delta=}, {self=})'\n                )\n            updated_args_delta = (delta.args_delta or '') + self.args_delta\n            delta = replace(delta, args_delta=updated_args_delta)\n        elif isinstance(self.args_delta, dict):\n            if isinstance(delta.args_delta, str):\n                raise UnexpectedModelBehavior(\n                    f'Cannot apply dict deltas to non-dict tool arguments ({delta=}, {self=})'\n                )\n            updated_args_delta = {**(delta.args_delta or {}), **self.args_delta}\n            delta = replace(delta, args_delta=updated_args_delta)\n\n        if self.tool_call_id:\n            delta = replace(delta, tool_call_id=self.tool_call_id)\n\n        # If we now have enough data to create a full ToolCallPart, do so\n        if delta.tool_name_delta is not None and delta.args_delta is not None:\n            return ToolCallPart(delta.tool_name_delta, delta.args_delta, delta.tool_call_id or _generate_tool_call_id())\n\n        return delta\n\n    def _apply_to_part(self, part: ToolCallPart) -> ToolCallPart:\n        \"\"\"Internal helper to apply this delta directly to a `ToolCallPart`.\"\"\"\n        if self.tool_name_delta:\n            # Append incremental text to the existing tool_name\n            tool_name = part.tool_name + self.tool_name_delta\n            part = replace(part, tool_name=tool_name)\n\n        if isinstance(self.args_delta, str):\n            if not isinstance(part.args, str):\n                raise UnexpectedModelBehavior(f'Cannot apply JSON deltas to non-JSON tool arguments ({part=}, {self=})')\n            updated_json = part.args + self.args_delta\n            part = replace(part, args=updated_json)\n        elif isinstance(self.args_delta, dict):\n            if not isinstance(part.args, dict):\n                raise UnexpectedModelBehavior(f'Cannot apply dict deltas to non-dict tool arguments ({part=}, {self=})')\n            updated_dict = {**(part.args or {}), **self.args_delta}\n            part = replace(part, args=updated_dict)\n\n        if self.tool_call_id:\n            part = replace(part, tool_call_id=self.tool_call_id)\n        return part\n\n```\n\n\n#### tool\\_name\\_delta `class-attribute` `instance-attribute`\n\n```\ntool_name_delta: str | None = None\n\n```\n\nIncremental text to add to the existing tool name, if any.\n\n\n\n#### args\\_delta `class-attribute` `instance-attribute`\n\n```\nargs_delta: str | dict[str, Any] | None = None\n\n```\n\nIncremental data to add to the tool arguments.\n\nIf this is a string, it will be appended to existing JSON arguments.\nIf this is a dict, it will be merged with existing dict arguments.\n\n\n\n#### tool\\_call\\_id `class-attribute` `instance-attribute`\n\n``", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-88a4268ed0561dee36cedfe0e8bce930", "__created_at__": 1744231651.420514, "content": "existing tool name, if any.\n\n\n\n#### args\\_delta `class-attribute` `instance-attribute`\n\n```\nargs_delta: str | dict[str, Any] | None = None\n\n```\n\nIncremental data to add to the tool arguments.\n\nIf this is a string, it will be appended to existing JSON arguments.\nIf this is a dict, it will be merged with existing dict arguments.\n\n\n\n#### tool\\_call\\_id `class-attribute` `instance-attribute`\n\n```\ntool_call_id: str | None = None\n\n```\n\nOptional tool call identifier, this is used by some models including OpenAI.\n\nNote this is never treated as a delta — it can replace None, but otherwise if a\nnon-matching value is provided an error will be raised.\n\n\n\n#### part\\_delta\\_kind `class-attribute` `instance-attribute`\n\n```\npart_delta_kind: Literal['tool_call'] = 'tool_call'\n\n```\n\nPart delta type identifier, used as a discriminator.\n\n\n\n#### as\\_part\n\n```\nas_part() -> ToolCallPart | None\n\n```\n\nConvert this delta to a fully formed `ToolCallPart` if possible, otherwise return `None`.\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `ToolCallPart | None` | A `ToolCallPart` if both `tool_name_delta` and `args_delta` are set, otherwise `None`. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef as_part(self) -> ToolCallPart | None:\n    \"\"\"Convert this delta to a fully formed `ToolCallPart` if possible, otherwise return `None`.\n\n    Returns:\n        A `ToolCallPart` if both `tool_name_delta` and `args_delta` are set, otherwise `None`.\n    \"\"\"\n    if self.tool_name_delta is None or self.args_delta is None:\n        return None\n\n    return ToolCallPart(self.tool_name_delta, self.args_delta, self.tool_call_id or _generate_tool_call_id())\n\n```\n\n\n\n\n#### apply\n\n```\napply(part: ModelResponsePart) -> ToolCallPart\n\n```\n```\napply(\n    part: ModelResponsePart | ToolCallPartDelta,\n) -> ToolCallPart | ToolCallPartDelta\n\n```\n \n```\napply(\n    part: ModelResponsePart | ToolCallPartDelta,\n) -> ToolCallPart | ToolCallPartDelta\n\n```\n\nApply this delta to a part or delta, returning a new part or delta with the changes applied.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `part` | `ModelResponsePart | ToolCallPartDelta` | The existing model response part or delta to update. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `ToolCallPart | ToolCallPartDelta` | Either a new `ToolCallPart` or an updated `ToolCallPartDelta`. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValueError` | If `part` is neither a `ToolCallPart` nor a `ToolCallPartDelta`. |\n| `UnexpectedModelBehavior` | If applying JSON deltas to dict arguments or vice versa. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\ndef apply(self, part: ModelResponsePart | ToolCallPartDelta) -> ToolCallPart | ToolCallPartDelta:\n    \"\"\"Apply this delta to a part or delta, returning a new part or delta with the changes applied.\n\n    Args:\n        part: The existing model response part or delta to update.\n\n    Returns:\n        Either a new `ToolCallPart` or an updated `ToolCallPartDelta`.\n\n    Raises:\n        ValueError: If `part` is neither a `ToolCallPart` nor a `ToolCallPartDelta`.\n        UnexpectedModelBehavior: If applying JSON deltas to dict arguments or vice versa.\n    \"\"\"\n    if isinstance(part, ToolCallPart):\n        return self._apply_to_part(part)\n\n    if isinstance(part, ToolCallPartDelta):\n        return self._apply_to_delta(part)\n\n    raise ValueError(f'Can only apply ToolCallPartDeltas to ToolCallParts or ToolCallPartDeltas, not {part}')\n\n```\n\n\n\n\n\n\n\n### ModelResponsePartDelta `module-attribute`\n\n```\nModelResponsePartDelta = Annotated[\n    Union[TextPartDelta, ToolCallPartDelta],\n    Discriminator(\"part_delta_kind\"),\n]\n\n```\n\nA partial update (delta) for any model response part.\n\n\n\n### PartStartEvent `dataclass`\n\nAn event indicating that a new part has started.\n\nIf multiple `PartStartEvent`s are received with the same index,\nthe new one should fully replace the old one.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass PartStartEvent:\n    \"\"\"An event indicating that a new part has started.\n\n    If multiple `PartStartEvent`s are received with the same index,\n    the new one should fully replace the old one.\n    \"\"\"\n\n    index: int\n    \"\"\"The index of the part within the overall response parts list.\"\"\"\n\n    part: ModelResponsePart\n    \"\"\"The newly started `ModelResponsePart`.\"\"\"\n\n    event_kind: Literal['part_start'] = 'part_start'\n    \"\"\"Event type identifier, used as a discriminator.\"\"\"\n\n```\n\n\n#### index `instance-attribute`\n\n```\nindex: int\n\n```\n\nThe index of the part within the overall response parts list.\n\n\n\n#### part `instance-attribute`\n\n```\npart: ModelResponsePart\n\n```\n\nThe newly started `ModelResponsePart`.\n\n\n\n#### event\\_kind `class-attribute` `instance-attribute`\n\n```\nevent_kind: Literal['part_start'] = 'part_start'", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-16a247913aead6b056519aa63f310789", "__created_at__": 1744231651.420514, "content": "'part_start'\n    \"\"\"Event type identifier, used as a discriminator.\"\"\"\n\n```\n\n\n#### index `instance-attribute`\n\n```\nindex: int\n\n```\n\nThe index of the part within the overall response parts list.\n\n\n\n#### part `instance-attribute`\n\n```\npart: ModelResponsePart\n\n```\n\nThe newly started `ModelResponsePart`.\n\n\n\n#### event\\_kind `class-attribute` `instance-attribute`\n\n```\nevent_kind: Literal['part_start'] = 'part_start'\n\n```\n\nEvent type identifier, used as a discriminator.\n\n\n\n\n\n\n### PartDeltaEvent `dataclass`\n\nAn event indicating a delta update for an existing part.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass PartDeltaEvent:\n    \"\"\"An event indicating a delta update for an existing part.\"\"\"\n\n    index: int\n    \"\"\"The index of the part within the overall response parts list.\"\"\"\n\n    delta: ModelResponsePartDelta\n    \"\"\"The delta to apply to the specified part.\"\"\"\n\n    event_kind: Literal['part_delta'] = 'part_delta'\n    \"\"\"Event type identifier, used as a discriminator.\"\"\"\n\n```\n\n\n#### index `instance-attribute`\n\n```\nindex: int\n\n```\n\nThe index of the part within the overall response parts list.\n\n\n\n#### delta `instance-attribute`\n\n```\ndelta: ModelResponsePartDelta\n\n```\n\nThe delta to apply to the specified part.\n\n\n\n#### event\\_kind `class-attribute` `instance-attribute`\n\n```\nevent_kind: Literal['part_delta'] = 'part_delta'\n\n```\n\nEvent type identifier, used as a discriminator.\n\n\n\n\n\n\n### FinalResultEvent `dataclass`\n\nAn event indicating the response to the current model request matches the result schema.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass FinalResultEvent:\n    \"\"\"An event indicating the response to the current model request matches the result schema.\"\"\"\n\n    tool_name: str | None\n    \"\"\"The name of the result tool that was called. `None` if the result is from text content and not from a tool.\"\"\"\n    tool_call_id: str | None\n    \"\"\"The tool call ID, if any, that this result is associated with.\"\"\"\n    event_kind: Literal['final_result'] = 'final_result'\n    \"\"\"Event type identifier, used as a discriminator.\"\"\"\n\n```\n\n\n#### tool\\_name `instance-attribute`\n\n```\ntool_name: str | None\n\n```\n\nThe name of the result tool that was called. `None` if the result is from text content and not from a tool.\n\n\n\n#### tool\\_call\\_id `instance-attribute`\n\n```\ntool_call_id: str | None\n\n```\n\nThe tool call ID, if any, that this result is associated with.\n\n\n\n#### event\\_kind `class-attribute` `instance-attribute`\n\n```\nevent_kind: Literal['final_result'] = 'final_result'\n\n```\n\nEvent type identifier, used as a discriminator.\n\n\n\n\n\n\n### ModelResponseStreamEvent `module-attribute`\n\n```\nModelResponseStreamEvent = Annotated[\n    Union[PartStartEvent, PartDeltaEvent],\n    Discriminator(\"event_kind\"),\n]\n\n```\n\nAn event in the model response stream, either starting a new part or applying a delta to an existing one.\n\n\n\n### AgentStreamEvent `module-attribute`\n\n```\nAgentStreamEvent = Annotated[\n    Union[PartStartEvent, PartDeltaEvent, FinalResultEvent],\n    Discriminator(\"event_kind\"),\n]\n\n```\n\nAn event in the agent stream.\n\n\n\n### FunctionToolCallEvent `dataclass`\n\nAn event indicating the start to a call to a function tool.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass FunctionToolCallEvent:\n    \"\"\"An event indicating the start to a call to a function tool.\"\"\"\n\n    part: ToolCallPart\n    \"\"\"The (function) tool call to make.\"\"\"\n    call_id: str = field(init=False)\n    \"\"\"An ID used for matching details about the call to its result. If present, defaults to the part's tool_call_id.\"\"\"\n    event_kind: Literal['function_tool_call'] = 'function_tool_call'\n    \"\"\"Event type identifier, used as a discriminator.\"\"\"\n\n    def __post_init__(self):\n        self.call_id = self.part.tool_call_id or str(uuid.uuid4())\n\n```\n\n\n#### part `instance-attribute`\n\n```\npart: ToolCallPart\n\n```\n\nThe (function) tool call to make.\n\n\n\n#### call\\_id `class-attribute` `instance-attribute`\n\n```\ncall_id: str = field(init=False)\n\n```\n\nAn ID used for matching details about the call to its result. If present, defaults to the part's tool\\_call\\_id.\n\n\n\n#### event\\_kind `class-attribute` `instance-attribute`\n\n```\nevent_kind: Literal[\"function_tool_call\"] = (\n    \"function_tool_call\"\n)\n\n```\n\nEvent type identifier, used as a discriminator.\n\n\n\n\n\n\n### FunctionToolResultEvent `dataclass`\n\nAn event indicating the result of a function tool call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/messages.py`\n```\n@dataclass\nclass FunctionToolResultEvent:\n    \"\"\"An event indicating the result of a function tool call.\"\"\"\n\n    result: ToolReturnPart | RetryPromptPart\n    \"\"\"The result of the call to the function tool.\"\"\"\n    tool_call_id: str\n    \"\"\"An ID used to match the result to its original call.\"\"\"\n    event_kind: Literal['function_tool_result'] = 'function_tool_result'\n    \"\"\"Event type identifier, used as a discriminator.\"\"\"\n\n```\n\n\n#### result `instance-attribute`\n\n```\nresult: ToolReturnPart | RetryPromptPart\n\n```\n\nThe result of the call to the function tool.\n\n\n\n#### tool", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-795b05e67738f70446b444b9153346b5", "__created_at__": 1744231651.420514, "content": "| RetryPromptPart\n    \"\"\"The result of the call to the function tool.\"\"\"\n    tool_call_id: str\n    \"\"\"An ID used to match the result to its original call.\"\"\"\n    event_kind: Literal['function_tool_result'] = 'function_tool_result'\n    \"\"\"Event type identifier, used as a discriminator.\"\"\"\n\n```\n\n\n#### result `instance-attribute`\n\n```\nresult: ToolReturnPart | RetryPromptPart\n\n```\n\nThe result of the call to the function tool.\n\n\n\n#### tool\\_call\\_id `instance-attribute`\n\n```\ntool_call_id: str\n\n```\n\nAn ID used to match the result to its original call.\n\n\n\n#### event\\_kind `class-attribute` `instance-attribute`\n\n```\nevent_kind: Literal[\"function_tool_result\"] = (\n    \"function_tool_result\"\n)\n\n```\n\nEvent type identifier, used as a discriminator.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.providers`\n=======================\n\nBases: `ABC`, `Generic[InterfaceClient]`\n\nAbstract class for a provider.\n\nThe provider is in charge of providing an authenticated client to the API.\n\nEach provider only supports a specific interface. A interface can be supported by multiple providers.\n\nFor example, the OpenAIModel interface can be supported by the OpenAIProvider and the DeepSeekProvider.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/__init__.py`\n```\nclass Provider(ABC, Generic[InterfaceClient]):\n    \"\"\"Abstract class for a provider.\n\n    The provider is in charge of providing an authenticated client to the API.\n\n    Each provider only supports a specific interface. A interface can be supported by multiple providers.\n\n    For example, the OpenAIModel interface can be supported by the OpenAIProvider and the DeepSeekProvider.\n    \"\"\"\n\n    _client: InterfaceClient\n\n    @property\n    @abstractmethod\n    def name(self) -> str:\n        \"\"\"The provider name.\"\"\"\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def base_url(self) -> str:\n        \"\"\"The base URL for the provider API.\"\"\"\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def client(self) -> InterfaceClient:\n        \"\"\"The client for the provider.\"\"\"\n        raise NotImplementedError()\n\n```\n\n\n### name `abstractmethod` `property`\n\n```\nname: str\n\n```\n\nThe provider name.\n\n\n\n### base\\_url `abstractmethod` `property`\n\n```\nbase_url: str\n\n```\n\nThe base URL for the provider API.\n\n\n\n### client `abstractmethod` `property`\n\n```\nclient: InterfaceClient\n\n```\n\nThe client for the provider.\n\n\n\n\n\n\n### GoogleVertexProvider\n\nBases: `Provider[AsyncClient]`\n\nProvider for Vertex AI API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/google_vertex.py`\n```\nclass GoogleVertexProvider(Provider[httpx.AsyncClient]):\n    \"\"\"Provider for Vertex AI API.\"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'google-vertex'\n\n    @property\n    def base_url(self) -> str:\n        return (\n            f'https://{self.region}-aiplatform.googleapis.com/v1'\n            f'/projects/{self.project_id}'\n            f'/locations/{self.region}'\n            f'/publishers/{self.model_publisher}/models/'\n        )\n\n    @property\n    def client(self) -> httpx.AsyncClient:\n        return self._client\n\n    @overload\n    def __init__(\n        self,\n        *,\n        service_account_file: Path | str | None = None,\n        project_id: str | None = None,\n        region: VertexAiRegion = 'us-central1',\n        model_publisher: str = 'google',\n        http_client: httpx.AsyncClient | None = None,\n    ) -> None: ...\n\n    @overload\n    def __init__(\n        self,\n        *,\n        service_account_info: Mapping[str, str] | None = None,\n        project_id: str | None = None,\n        region: VertexAiRegion = 'us-central1',\n        model_publisher: str = 'google',\n        http_client: httpx.AsyncClient | None = None,\n    ) -> None: ...\n\n    def __init__(\n        self,\n        *,\n        service_account_file: Path | str | None = None,\n        service_account_info: Mapping[str, str] | None = None,\n        project_id: str | None = None,\n        region: VertexAiRegion = 'us-central1',\n        model_publisher: str = 'google',\n        http_client: httpx.AsyncClient | None = None,\n    ) -> None:\n        \"\"\"Create a new Vertex AI provider.\n\n        Args:\n            service_account_file: Path to a service account file.\n                If not provided, the service_account_info or default environment credentials will be used.\n            service_account_info: The loaded service_account_file contents.\n                If not provided, the service_account_file or default environment credentials will be used.\n            project_id: The project ID to use, if not provided it will be taken from the credentials.\n            region: The region to make requests to.\n            model_publisher: The model publisher to use, I couldn't find a good list of available publishers,\n                and from trial and error it seems non-google models don't work with the `generateContent` and\n                `streamGenerateContent` functions, hence only `google` is currently supported.\n                Please create an issue or PR if you know how to use other publishers.\n            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n        \"\"\"\n        if service_account_file and service_account_info:\n            raise ValueError('Only one of `service_account_file` or `service_account_info` can be provided.')\n\n        self._client = http_client or cached_async_http_client(provider='google-vertex')", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4789175c72630811bc7e624447f539f5", "__created_at__": 1744231651.420514, "content": "functions, hence only `google` is currently supported.\n                Please create an issue or PR if you know how to use other publishers.\n            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n        \"\"\"\n        if service_account_file and service_account_info:\n            raise ValueError('Only one of `service_account_file` or `service_account_info` can be provided.')\n\n        self._client = http_client or cached_async_http_client(provider='google-vertex')\n        self.service_account_file = service_account_file\n        self.service_account_info = service_account_info\n        self.project_id = project_id\n        self.region = region\n        self.model_publisher = model_publisher\n\n        self._client.auth = _VertexAIAuth(service_account_file, service_account_info, project_id, region)\n        self._client.base_url = self.base_url\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    service_account_file: Path | str | None = None,\n    project_id: str | None = None,\n    region: VertexAiRegion = \"us-central1\",\n    model_publisher: str = \"google\",\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n```\n__init__(\n    *,\n    service_account_info: Mapping[str, str] | None = None,\n    project_id: str | None = None,\n    region: VertexAiRegion = \"us-central1\",\n    model_publisher: str = \"google\",\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n \n```\n__init__(\n    *,\n    service_account_file: Path | str | None = None,\n    service_account_info: Mapping[str, str] | None = None,\n    project_id: str | None = None,\n    region: VertexAiRegion = \"us-central1\",\n    model_publisher: str = \"google\",\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n\nCreate a new Vertex AI provider.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `service_account_file` | `Path | str | None` | Path to a service account file. If not provided, the service\\_account\\_info or default environment credentials will be used. | `None` |\n| `service_account_info` | `Mapping[str, str] | None` | The loaded service\\_account\\_file contents. If not provided, the service\\_account\\_file or default environment credentials will be used. | `None` |\n| `project_id` | `str | None` | The project ID to use, if not provided it will be taken from the credentials. | `None` |\n| `region` | `VertexAiRegion` | The region to make requests to. | `'us-central1'` |\n| `model_publisher` | `str` | The model publisher to use, I couldn't find a good list of available publishers, and from trial and error it seems non-google models don't work with the `generateContent` and `streamGenerateContent` functions, hence only `google` is currently supported. Please create an issue or PR if you know how to use other publishers. | `'google'` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/google_vertex.py`\n```\ndef __init__(\n    self,\n    *,\n    service_account_file: Path | str | None = None,\n    service_account_info: Mapping[str, str] | None = None,\n    project_id: str | None = None,\n    region: VertexAiRegion = 'us-central1',\n    model_publisher: str = 'google',\n    http_client: httpx.AsyncClient | None = None,\n) -> None:\n    \"\"\"Create a new Vertex AI provider.\n\n    Args:\n        service_account_file: Path to a service account file.\n            If not provided, the service_account_info or default environment credentials will be used.\n        service_account_info: The loaded service_account_file contents.\n            If not provided, the service_account_file or default environment credentials will be used.\n        project_id: The project ID to use, if not provided it will be taken from the credentials.\n        region: The region to make requests to.\n        model_publisher: The model publisher to use, I couldn't find a good list of available publishers,\n            and from trial and error it seems non-google models don't work with the `generateContent` and\n            `streamGenerateContent` functions, hence only `google` is currently supported.\n            Please create an issue or PR if you know how to use other publishers.\n        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n    \"\"\"\n    if service_account_file and service_account_info:\n        raise ValueError('Only one of `service_account_file` or `service_account_info` can be provided.')\n\n    self._client = http_client or cached_async_http_client(provider='google-vertex')\n    self.service_account_file = service_account_file\n    self.service_account_info = service_account_info\n    self.project_id = project_id\n    self.region = region\n    self.model_publisher = model_publisher\n\n    self._client.auth = _VertexAIAuth(service_account_file, service_account_info, project_id, region)\n    self._client.base_url = self.base_url\n\n```\n\n\n\n\n\n\n\n\n\n\n### OpenAIProvider\n\nBases: `Provider[AsyncOpenAI]`\n\nProvider for OpenAI API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/openai.py`\n```\nclass OpenAIProvider(Provider[", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-233c44dbbafc40133b53d2417bab6371", "__created_at__": 1744231651.420514, "content": ".region = region\n    self.model_publisher = model_publisher\n\n    self._client.auth = _VertexAIAuth(service_account_file, service_account_info, project_id, region)\n    self._client.base_url = self.base_url\n\n```\n\n\n\n\n\n\n\n\n\n\n### OpenAIProvider\n\nBases: `Provider[AsyncOpenAI]`\n\nProvider for OpenAI API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/openai.py`\n```\nclass OpenAIProvider(Provider[AsyncOpenAI]):\n    \"\"\"Provider for OpenAI API.\"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'openai'  # pragma: no cover\n\n    @property\n    def base_url(self) -> str:\n        return str(self.client.base_url)\n\n    @property\n    def client(self) -> AsyncOpenAI:\n        return self._client\n\n    def __init__(\n        self,\n        base_url: str | None = None,\n        api_key: str | None = None,\n        openai_client: AsyncOpenAI | None = None,\n        http_client: httpx.AsyncClient | None = None,\n    ) -> None:\n        \"\"\"Create a new OpenAI provider.\n\n        Args:\n            base_url: The base url for the OpenAI requests. If not provided, the `OPENAI_BASE_URL` environment variable\n                will be used if available. Otherwise, defaults to OpenAI's base url.\n            api_key: The API key to use for authentication, if not provided, the `OPENAI_API_KEY` environment variable\n                will be used if available.\n            openai_client: An existing\n                [`AsyncOpenAI`](https://github.com/openai/openai-python?tab=readme-ov-file#async-usage)\n                client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`.\n            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n        \"\"\"\n        # This is a workaround for the OpenAI client requiring an API key, whilst locally served,\n        # openai compatible models do not always need an API key, but a placeholder (non-empty) key is required.\n        if api_key is None and 'OPENAI_API_KEY' not in os.environ and base_url is not None and openai_client is None:\n            api_key = 'api-key-not-set'\n\n        if openai_client is not None:\n            assert base_url is None, 'Cannot provide both `openai_client` and `base_url`'\n            assert http_client is None, 'Cannot provide both `openai_client` and `http_client`'\n            assert api_key is None, 'Cannot provide both `openai_client` and `api_key`'\n            self._client = openai_client\n        elif http_client is not None:\n            self._client = AsyncOpenAI(base_url=base_url, api_key=api_key, http_client=http_client)\n        else:\n            http_client = cached_async_http_client(provider='openai')\n            self._client = AsyncOpenAI(base_url=base_url, api_key=api_key, http_client=http_client)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    base_url: str | None = None,\n    api_key: str | None = None,\n    openai_client: AsyncOpenAI | None = None,\n    http_client: AsyncClient | None = None,\n) -> None\n\n```\n\nCreate a new OpenAI provider.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `base_url` | `str | None` | The base url for the OpenAI requests. If not provided, the `OPENAI_BASE_URL` environment variable will be used if available. Otherwise, defaults to OpenAI's base url. | `None` |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `OPENAI_API_KEY` environment variable will be used if available. | `None` |\n| `openai_client` | `AsyncOpenAI | None` | An existing [`AsyncOpenAI`](https://github.com/openai/openai-python?tab=readme-ov-file#async-usage) client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/openai.py`\n```\ndef __init__(\n    self,\n    base_url: str | None = None,\n    api_key: str | None = None,\n    openai_client: AsyncOpenAI | None = None,\n    http_client: httpx.AsyncClient | None = None,\n) -> None:\n    \"\"\"Create a new OpenAI provider.\n\n    Args:\n        base_url: The base url for the OpenAI requests. If not provided, the `OPENAI_BASE_URL` environment variable\n            will be used if available. Otherwise, defaults to OpenAI's base url.\n        api_key: The API key to use for authentication, if not provided, the `OPENAI_API_KEY` environment variable\n            will be used if available.\n        openai_client: An existing\n            [`AsyncOpenAI`](https://github.com/openai/openai-python?tab=readme-ov-file#async-usage)\n            client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`.\n        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n    \"\"\"", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-72ca9e59f2d2201907ab534202af4af4", "__created_at__": 1744231651.420514, "content": "the `OPENAI_API_KEY` environment variable\n            will be used if available.\n        openai_client: An existing\n            [`AsyncOpenAI`](https://github.com/openai/openai-python?tab=readme-ov-file#async-usage)\n            client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`.\n        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n    \"\"\"\n    # This is a workaround for the OpenAI client requiring an API key, whilst locally served,\n    # openai compatible models do not always need an API key, but a placeholder (non-empty) key is required.\n    if api_key is None and 'OPENAI_API_KEY' not in os.environ and base_url is not None and openai_client is None:\n        api_key = 'api-key-not-set'\n\n    if openai_client is not None:\n        assert base_url is None, 'Cannot provide both `openai_client` and `base_url`'\n        assert http_client is None, 'Cannot provide both `openai_client` and `http_client`'\n        assert api_key is None, 'Cannot provide both `openai_client` and `api_key`'\n        self._client = openai_client\n    elif http_client is not None:\n        self._client = AsyncOpenAI(base_url=base_url, api_key=api_key, http_client=http_client)\n    else:\n        http_client = cached_async_http_client(provider='openai')\n        self._client = AsyncOpenAI(base_url=base_url, api_key=api_key, http_client=http_client)\n\n```\n\n\n\n\n\n\n\n\n\n\n### DeepSeekProvider\n\nBases: `Provider[AsyncOpenAI]`\n\nProvider for DeepSeek API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/deepseek.py`\n```\nclass DeepSeekProvider(Provider[AsyncOpenAI]):\n    \"\"\"Provider for DeepSeek API.\"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'deepseek'\n\n    @property\n    def base_url(self) -> str:\n        return 'https://api.deepseek.com'\n\n    @property\n    def client(self) -> AsyncOpenAI:\n        return self._client\n\n    @overload\n    def __init__(self) -> None: ...\n\n    @overload\n    def __init__(self, *, api_key: str) -> None: ...\n\n    @overload\n    def __init__(self, *, api_key: str, http_client: AsyncHTTPClient) -> None: ...\n\n    @overload\n    def __init__(self, *, openai_client: AsyncOpenAI | None = None) -> None: ...\n\n    def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        openai_client: AsyncOpenAI | None = None,\n        http_client: AsyncHTTPClient | None = None,\n    ) -> None:\n        api_key = api_key or os.getenv('DEEPSEEK_API_KEY')\n        if not api_key and openai_client is None:\n            raise UserError(\n                'Set the `DEEPSEEK_API_KEY` environment variable or pass it via `DeepSeekProvider(api_key=...)`'\n                'to use the DeepSeek provider.'\n            )\n\n        if openai_client is not None:\n            self._client = openai_client\n        elif http_client is not None:\n            self._client = AsyncOpenAI(base_url=self.base_url, api_key=api_key, http_client=http_client)\n        else:\n            http_client = cached_async_http_client(provider='deepseek')\n            self._client = AsyncOpenAI(base_url=self.base_url, api_key=api_key, http_client=http_client)\n\n```\n\n\n\n\n\n\n\n\n### BedrockProvider\n\nBases: `Provider[BaseClient]`\n\nProvider for AWS Bedrock.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/bedrock.py`\n```\nclass BedrockProvider(Provider[BaseClient]):\n    \"\"\"Provider for AWS Bedrock.\"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'bedrock'\n\n    @property\n    def base_url(self) -> str:\n        return self._client.meta.endpoint_url\n\n    @property\n    def client(self) -> BaseClient:\n        return self._client\n\n    @overload\n    def __init__(self, *, bedrock_client: BaseClient) -> None: ...\n\n    @overload\n    def __init__(\n        self,\n        *,\n        region_name: str | None = None,\n        aws_access_key_id: str | None = None,\n        aws_secret_access_key: str | None = None,\n        aws_session_token: str | None = None,\n        aws_read_timeout: float | None = None,\n        aws_connect_timeout: float | None = None,\n    ) -> None: ...\n\n    def __init__(\n        self,\n        *,\n        bedrock_client: BaseClient | None = None,\n        region_name: str | None = None,\n        aws_access_key_id: str | None = None,\n        aws_secret_access_key: str | None = None,\n        aws_session_token: str | None = None,\n        aws_read_timeout: float | None = None,\n        aws_connect_timeout: float | None = None,\n    ) -> None:\n        \"\"\"Initialize the Bedrock provider.\n\n        Args:\n            bedrock_client: A boto3 client for Bedrock Runtime. If provided, other arguments are ignored.\n            region_name: The AWS region name.\n            aws_access_key_id: The AWS access key ID.\n            aws_secret_access_key: The AWS secret access key.\n            aws_session_token: The AWS session token.\n            aws_read_timeout: The read timeout for Bedrock client.\n            aws_connect_timeout", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae", "__created_at__": 1744231651.420514, "content": "None,\n    ) -> None:\n        \"\"\"Initialize the Bedrock provider.\n\n        Args:\n            bedrock_client: A boto3 client for Bedrock Runtime. If provided, other arguments are ignored.\n            region_name: The AWS region name.\n            aws_access_key_id: The AWS access key ID.\n            aws_secret_access_key: The AWS secret access key.\n            aws_session_token: The AWS session token.\n            aws_read_timeout: The read timeout for Bedrock client.\n            aws_connect_timeout: The connect timeout for Bedrock client.\n        \"\"\"\n        if bedrock_client is not None:\n            self._client = bedrock_client\n        else:\n            try:\n                read_timeout = aws_read_timeout or float(os.getenv('AWS_READ_TIMEOUT', 300))\n                connect_timeout = aws_connect_timeout or float(os.getenv('AWS_CONNECT_TIMEOUT', 60))\n                self._client = boto3.client(  # type: ignore[reportUnknownMemberType]\n                    'bedrock-runtime',\n                    aws_access_key_id=aws_access_key_id,\n                    aws_secret_access_key=aws_secret_access_key,\n                    aws_session_token=aws_session_token,\n                    region_name=region_name,\n                    config=Config(read_timeout=read_timeout, connect_timeout=connect_timeout),\n                )\n            except NoRegionError as exc:  # pragma: no cover\n                raise UserError('You must provide a `region_name` or a boto3 client for Bedrock Runtime.') from exc\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(*, bedrock_client: BaseClient) -> None\n\n```\n```\n__init__(\n    *,\n    region_name: str | None = None,\n    aws_access_key_id: str | None = None,\n    aws_secret_access_key: str | None = None,\n    aws_session_token: str | None = None,\n    aws_read_timeout: float | None = None,\n    aws_connect_timeout: float | None = None\n) -> None\n\n```\n \n```\n__init__(\n    *,\n    bedrock_client: BaseClient | None = None,\n    region_name: str | None = None,\n    aws_access_key_id: str | None = None,\n    aws_secret_access_key: str | None = None,\n    aws_session_token: str | None = None,\n    aws_read_timeout: float | None = None,\n    aws_connect_timeout: float | None = None\n) -> None\n\n```\n\nInitialize the Bedrock provider.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `bedrock_client` | `BaseClient | None` | A boto3 client for Bedrock Runtime. If provided, other arguments are ignored. | `None` |\n| `region_name` | `str | None` | The AWS region name. | `None` |\n| `aws_access_key_id` | `str | None` | The AWS access key ID. | `None` |\n| `aws_secret_access_key` | `str | None` | The AWS secret access key. | `None` |\n| `aws_session_token` | `str | None` | The AWS session token. | `None` |\n| `aws_read_timeout` | `float | None` | The read timeout for Bedrock client. | `None` |\n| `aws_connect_timeout` | `float | None` | The connect timeout for Bedrock client. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/bedrock.py`\n```\ndef __init__(\n    self,\n    *,\n    bedrock_client: BaseClient | None = None,\n    region_name: str | None = None,\n    aws_access_key_id: str | None = None,\n    aws_secret_access_key: str | None = None,\n    aws_session_token: str | None = None,\n    aws_read_timeout: float | None = None,\n    aws_connect_timeout: float | None = None,\n) -> None:\n    \"\"\"Initialize the Bedrock provider.\n\n    Args:\n        bedrock_client: A boto3 client for Bedrock Runtime. If provided, other arguments are ignored.\n        region_name: The AWS region name.\n        aws_access_key_id: The AWS access key ID.\n        aws_secret_access_key: The AWS secret access key.\n        aws_session_token: The AWS session token.\n        aws_read_timeout: The read timeout for Bedrock client.\n        aws_connect_timeout: The connect timeout for Bedrock client.\n    \"\"\"\n    if bedrock_client is not None:\n        self._client = bedrock_client\n    else:\n        try:\n            read_timeout = aws_read_timeout or float(os.getenv('AWS_READ_TIMEOUT', 300))\n            connect_timeout = aws_connect_timeout or float(os.getenv('AWS_CONNECT_TIMEOUT', 60))\n            self._client = boto3.client(  # type: ignore[reportUnknownMemberType]\n                'bedrock-runtime',\n                aws_access_key_id=aws_access_key_id,\n                aws_secret_access_key=aws_secret_access_key,\n                aws_session_token=aws_session_token,\n                region_name=region_name,\n                config=Config(read_timeout=read_timeout, connect_timeout=connect_timeout),\n            )\n        except NoRegionError as exc:  # pragma: no cover\n            raise UserError('You must provide a `region_name` or a boto3 client for Bedrock Runtime.') from exc\n\n```\n\n\n\n\n\n\n\n\n\n\n### GroqProvider\n\nBases: `Provider[AsyncGroq]`\n\nProvider for Groq API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/groq.py`\n```\nclass GroqProvider(Provider[AsyncGroq]):\n    \"\"\"Provider for Groq API.\"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'groq'\n\n    @property\n    def base_url(self", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3daa082fe580b04c6ec4f3234e7a073b", "__created_at__": 1744231651.420514, "content": "client for Bedrock Runtime.') from exc\n\n```\n\n\n\n\n\n\n\n\n\n\n### GroqProvider\n\nBases: `Provider[AsyncGroq]`\n\nProvider for Groq API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/groq.py`\n```\nclass GroqProvider(Provider[AsyncGroq]):\n    \"\"\"Provider for Groq API.\"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'groq'\n\n    @property\n    def base_url(self) -> str:\n        return os.environ.get('GROQ_BASE_URL', 'https://api.groq.com')\n\n    @property\n    def client(self) -> AsyncGroq:\n        return self._client\n\n    @overload\n    def __init__(self, *, groq_client: AsyncGroq | None = None) -> None: ...\n\n    @overload\n    def __init__(self, *, api_key: str | None = None, http_client: AsyncHTTPClient | None = None) -> None: ...\n\n    def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        groq_client: AsyncGroq | None = None,\n        http_client: AsyncHTTPClient | None = None,\n    ) -> None:\n        \"\"\"Create a new Groq provider.\n\n        Args:\n            api_key: The API key to use for authentication, if not provided, the `GROQ_API_KEY` environment variable\n                will be used if available.\n            groq_client: An existing\n                [`AsyncGroq`](https://github.com/groq/groq-python?tab=readme-ov-file#async-usage)\n                client to use. If provided, `api_key` and `http_client` must be `None`.\n            http_client: An existing `AsyncHTTPClient` to use for making HTTP requests.\n        \"\"\"\n        if groq_client is not None:\n            assert http_client is None, 'Cannot provide both `groq_client` and `http_client`'\n            assert api_key is None, 'Cannot provide both `groq_client` and `api_key`'\n            self._client = groq_client\n        else:\n            api_key = api_key or os.environ.get('GROQ_API_KEY')\n\n            if not api_key:\n                raise UserError(\n                    'Set the `GROQ_API_KEY` environment variable or pass it via `GroqProvider(api_key=...)`'\n                    'to use the Groq provider.'\n                )\n            elif http_client is not None:\n                self._client = AsyncGroq(base_url=self.base_url, api_key=api_key, http_client=http_client)\n            else:\n                http_client = cached_async_http_client(provider='groq')\n                self._client = AsyncGroq(base_url=self.base_url, api_key=api_key, http_client=http_client)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(*, groq_client: AsyncGroq | None = None) -> None\n\n```\n```\n__init__(\n    *,\n    api_key: str | None = None,\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n \n```\n__init__(\n    *,\n    api_key: str | None = None,\n    groq_client: AsyncGroq | None = None,\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n\nCreate a new Groq provider.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `GROQ_API_KEY` environment variable will be used if available. | `None` |\n| `groq_client` | `AsyncGroq | None` | An existing [`AsyncGroq`](https://github.com/groq/groq-python?tab=readme-ov-file#async-usage) client to use. If provided, `api_key` and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `AsyncHTTPClient` to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/groq.py`\n```\ndef __init__(\n    self,\n    *,\n    api_key: str | None = None,\n    groq_client: AsyncGroq | None = None,\n    http_client: AsyncHTTPClient | None = None,\n) -> None:\n    \"\"\"Create a new Groq provider.\n\n    Args:\n        api_key: The API key to use for authentication, if not provided, the `GROQ_API_KEY` environment variable\n            will be used if available.\n        groq_client: An existing\n            [`AsyncGroq`](https://github.com/groq/groq-python?tab=readme-ov-file#async-usage)\n            client to use. If provided, `api_key` and `http_client` must be `None`.\n        http_client: An existing `AsyncHTTPClient` to use for making HTTP requests.\n    \"\"\"\n    if groq_client is not None:\n        assert http_client is None, 'Cannot provide both `groq_client` and `http_client`'\n        assert api_key is None, 'Cannot provide both `groq_client` and `api_key`'\n        self._client = groq_client\n    else:\n        api_key = api_key or os.environ.get('GROQ_API_KEY')\n\n        if not api_key:\n            raise UserError(\n                'Set the `GROQ_API_KEY` environment variable or pass it via `GroqProvider(api_key=...)`'\n                'to use the Groq provider.'", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad", "__created_at__": 1744231651.420514, "content": "`'\n        assert api_key is None, 'Cannot provide both `groq_client` and `api_key`'\n        self._client = groq_client\n    else:\n        api_key = api_key or os.environ.get('GROQ_API_KEY')\n\n        if not api_key:\n            raise UserError(\n                'Set the `GROQ_API_KEY` environment variable or pass it via `GroqProvider(api_key=...)`'\n                'to use the Groq provider.'\n            )\n        elif http_client is not None:\n            self._client = AsyncGroq(base_url=self.base_url, api_key=api_key, http_client=http_client)\n        else:\n            http_client = cached_async_http_client(provider='groq')\n            self._client = AsyncGroq(base_url=self.base_url, api_key=api_key, http_client=http_client)\n\n```\n\n\n\n\n\n\n\n\n\n\n### AzureProvider\n\nBases: `Provider[AsyncOpenAI]`\n\nProvider for Azure OpenAI API.\n\nSee <https://azure.microsoft.com/en-us/products/ai-foundry> for more information.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/azure.py`\n```\nclass AzureProvider(Provider[AsyncOpenAI]):\n    \"\"\"Provider for Azure OpenAI API.\n\n    See  for more information.\n    \"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'azure'\n\n    @property\n    def base_url(self) -> str:\n        assert self._base_url is not None\n        return self._base_url\n\n    @property\n    def client(self) -> AsyncOpenAI:\n        return self._client\n\n    @overload\n    def __init__(self, *, openai_client: AsyncAzureOpenAI) -> None: ...\n\n    @overload\n    def __init__(\n        self,\n        *,\n        azure_endpoint: str | None = None,\n        api_version: str | None = None,\n        api_key: str | None = None,\n        http_client: httpx.AsyncClient | None = None,\n    ) -> None: ...\n\n    def __init__(\n        self,\n        *,\n        azure_endpoint: str | None = None,\n        api_version: str | None = None,\n        api_key: str | None = None,\n        openai_client: AsyncAzureOpenAI | None = None,\n        http_client: httpx.AsyncClient | None = None,\n    ) -> None:\n        \"\"\"Create a new Azure provider.\n\n        Args:\n            azure_endpoint: The Azure endpoint to use for authentication, if not provided, the `AZURE_OPENAI_ENDPOINT`\n                environment variable will be used if available.\n            api_version: The API version to use for authentication, if not provided, the `OPENAI_API_VERSION`\n                environment variable will be used if available.\n            api_key: The API key to use for authentication, if not provided, the `AZURE_OPENAI_API_KEY` environment variable\n                will be used if available.\n            openai_client: An existing\n                [`AsyncAzureOpenAI`](https://github.com/openai/openai-python#microsoft-azure-openai)\n                client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`.\n            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n        \"\"\"\n        if openai_client is not None:\n            assert azure_endpoint is None, 'Cannot provide both `openai_client` and `azure_endpoint`'\n            assert http_client is None, 'Cannot provide both `openai_client` and `http_client`'\n            assert api_key is None, 'Cannot provide both `openai_client` and `api_key`'\n            self._base_url = str(openai_client.base_url)\n            self._client = openai_client\n        else:\n            azure_endpoint = azure_endpoint or os.getenv('AZURE_OPENAI_ENDPOINT')\n            if not azure_endpoint:  # pragma: no cover\n                raise UserError(\n                    'Must provide one of the `azure_endpoint` argument or the `AZURE_OPENAI_ENDPOINT` environment variable'\n                )\n\n            if not api_key and 'AZURE_OPENAI_API_KEY' not in os.environ:  # pragma: no cover\n                raise UserError(\n                    'Must provide one of the `api_key` argument or the `AZURE_OPENAI_API_KEY` environment variable'\n                )\n\n            if not api_version and 'OPENAI_API_VERSION' not in os.environ:  # pragma: no cover\n                raise UserError(\n                    'Must provide one of the `api_version` argument or the `OPENAI_API_VERSION` environment variable'\n                )\n\n            http_client = http_client or cached_async_http_client(provider='azure')\n            self._client = AsyncAzureOpenAI(\n                azure_endpoint=azure_endpoint,\n                api_key=api_key,\n                api_version=api_version,\n                http_client=http_client,\n            )\n            self._base_url = str(self._client.base_url)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(*, openai_client: AsyncAzureOpenAI) -> None\n\n```\n```\n__init__(\n    *,\n    azure_endpoint: str | None = None,\n    api_version: str | None = None,\n    api_key: str | None = None,\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n \n```\n__init__(\n    *,\n    azure_endpoint: str | None = None,\n    api_version: str | None = None,\n    api_key: str | None = None,\n    openai_client: AsyncAzureOpenAI | None = None,\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n\nCreate a new Azure provider.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- |", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a0f0b34a0a28fff06a9b6be854290df6", "__created_at__": 1744231651.420514, "content": "= None\n) -> None\n\n```\n \n```\n__init__(\n    *,\n    azure_endpoint: str | None = None,\n    api_version: str | None = None,\n    api_key: str | None = None,\n    openai_client: AsyncAzureOpenAI | None = None,\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n\nCreate a new Azure provider.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `azure_endpoint` | `str | None` | The Azure endpoint to use for authentication, if not provided, the `AZURE_OPENAI_ENDPOINT` environment variable will be used if available. | `None` |\n| `api_version` | `str | None` | The API version to use for authentication, if not provided, the `OPENAI_API_VERSION` environment variable will be used if available. | `None` |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `AZURE_OPENAI_API_KEY` environment variable will be used if available. | `None` |\n| `openai_client` | `AsyncAzureOpenAI | None` | An existing [`AsyncAzureOpenAI`](https://github.com/openai/openai-python#microsoft-azure-openai) client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/azure.py`\n```\ndef __init__(\n    self,\n    *,\n    azure_endpoint: str | None = None,\n    api_version: str | None = None,\n    api_key: str | None = None,\n    openai_client: AsyncAzureOpenAI | None = None,\n    http_client: httpx.AsyncClient | None = None,\n) -> None:\n    \"\"\"Create a new Azure provider.\n\n    Args:\n        azure_endpoint: The Azure endpoint to use for authentication, if not provided, the `AZURE_OPENAI_ENDPOINT`\n            environment variable will be used if available.\n        api_version: The API version to use for authentication, if not provided, the `OPENAI_API_VERSION`\n            environment variable will be used if available.\n        api_key: The API key to use for authentication, if not provided, the `AZURE_OPENAI_API_KEY` environment variable\n            will be used if available.\n        openai_client: An existing\n            [`AsyncAzureOpenAI`](https://github.com/openai/openai-python#microsoft-azure-openai)\n            client to use. If provided, `base_url`, `api_key`, and `http_client` must be `None`.\n        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n    \"\"\"\n    if openai_client is not None:\n        assert azure_endpoint is None, 'Cannot provide both `openai_client` and `azure_endpoint`'\n        assert http_client is None, 'Cannot provide both `openai_client` and `http_client`'\n        assert api_key is None, 'Cannot provide both `openai_client` and `api_key`'\n        self._base_url = str(openai_client.base_url)\n        self._client = openai_client\n    else:\n        azure_endpoint = azure_endpoint or os.getenv('AZURE_OPENAI_ENDPOINT')\n        if not azure_endpoint:  # pragma: no cover\n            raise UserError(\n                'Must provide one of the `azure_endpoint` argument or the `AZURE_OPENAI_ENDPOINT` environment variable'\n            )\n\n        if not api_key and 'AZURE_OPENAI_API_KEY' not in os.environ:  # pragma: no cover\n            raise UserError(\n                'Must provide one of the `api_key` argument or the `AZURE_OPENAI_API_KEY` environment variable'\n            )\n\n        if not api_version and 'OPENAI_API_VERSION' not in os.environ:  # pragma: no cover\n            raise UserError(\n                'Must provide one of the `api_version` argument or the `OPENAI_API_VERSION` environment variable'\n            )\n\n        http_client = http_client or cached_async_http_client(provider='azure')\n        self._client = AsyncAzureOpenAI(\n            azure_endpoint=azure_endpoint,\n            api_key=api_key,\n            api_version=api_version,\n            http_client=http_client,\n        )\n        self._base_url = str(self._client.base_url)\n\n```\n\n\n\n\n\n\n\n\n\n\n### CohereProvider\n\nBases: `Provider[AsyncClientV2]`\n\nProvider for Cohere API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/cohere.py`\n```\nclass CohereProvider(Provider[AsyncClientV2]):\n    \"\"\"Provider for Cohere API.\"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'cohere'\n\n    @property\n    def base_url(self) -> str:\n        client_wrapper = self.client._client_wrapper  # type: ignore\n        return str(client_wrapper.get_base_url())\n\n    @property\n    def client(self) -> AsyncClientV2:\n        return self._client\n\n    def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        cohere_client: AsyncClientV2 | None = None,\n        http_client: AsyncHTTPClient | None = None,\n    ) -> None:\n        \"\"\"Create a new Cohere provider.\n\n        Args:\n            api_key: The API key to use for authentication, if not provided, the `CO_API_KEY` environment variable\n                will be used if available.\n            co", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f235ce39161a5edb725814748db38df4", "__created_at__": 1744231651.420514, "content": "._client\n\n    def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        cohere_client: AsyncClientV2 | None = None,\n        http_client: AsyncHTTPClient | None = None,\n    ) -> None:\n        \"\"\"Create a new Cohere provider.\n\n        Args:\n            api_key: The API key to use for authentication, if not provided, the `CO_API_KEY` environment variable\n                will be used if available.\n            cohere_client: An existing\n                [AsyncClientV2](https://github.com/cohere-ai/cohere-python)\n                client to use. If provided, `api_key` and `http_client` must be `None`.\n            http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n        \"\"\"\n        if cohere_client is not None:\n            assert http_client is None, 'Cannot provide both `cohere_client` and `http_client`'\n            assert api_key is None, 'Cannot provide both `cohere_client` and `api_key`'\n            self._client = cohere_client\n        else:\n            api_key = api_key or os.environ.get('CO_API_KEY')\n            if not api_key:\n                raise UserError(\n                    'Set the `CO_API_KEY` environment variable or pass it via `CohereProvider(api_key=...)`'\n                    'to use the Cohere provider.'\n                )\n\n            base_url = os.environ.get('CO_BASE_URL')\n            if http_client is not None:\n                self._client = AsyncClientV2(api_key=api_key, httpx_client=http_client, base_url=base_url)\n            else:\n                http_client = cached_async_http_client(provider='cohere')\n                self._client = AsyncClientV2(api_key=api_key, httpx_client=http_client, base_url=base_url)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    api_key: str | None = None,\n    cohere_client: AsyncClientV2 | None = None,\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n\nCreate a new Cohere provider.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `CO_API_KEY` environment variable will be used if available. | `None` |\n| `cohere_client` | `AsyncClientV2 | None` | An existing [AsyncClientV2](https://github.com/cohere-ai/cohere-python) client to use. If provided, `api_key` and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing `httpx.AsyncClient` to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/cohere.py`\n```\ndef __init__(\n    self,\n    *,\n    api_key: str | None = None,\n    cohere_client: AsyncClientV2 | None = None,\n    http_client: AsyncHTTPClient | None = None,\n) -> None:\n    \"\"\"Create a new Cohere provider.\n\n    Args:\n        api_key: The API key to use for authentication, if not provided, the `CO_API_KEY` environment variable\n            will be used if available.\n        cohere_client: An existing\n            [AsyncClientV2](https://github.com/cohere-ai/cohere-python)\n            client to use. If provided, `api_key` and `http_client` must be `None`.\n        http_client: An existing `httpx.AsyncClient` to use for making HTTP requests.\n    \"\"\"\n    if cohere_client is not None:\n        assert http_client is None, 'Cannot provide both `cohere_client` and `http_client`'\n        assert api_key is None, 'Cannot provide both `cohere_client` and `api_key`'\n        self._client = cohere_client\n    else:\n        api_key = api_key or os.environ.get('CO_API_KEY')\n        if not api_key:\n            raise UserError(\n                'Set the `CO_API_KEY` environment variable or pass it via `CohereProvider(api_key=...)`'\n                'to use the Cohere provider.'\n            )\n\n        base_url = os.environ.get('CO_BASE_URL')\n        if http_client is not None:\n            self._client = AsyncClientV2(api_key=api_key, httpx_client=http_client, base_url=base_url)\n        else:\n            http_client = cached_async_http_client(provider='cohere')\n            self._client = AsyncClientV2(api_key=api_key, httpx_client=http_client, base_url=base_url)\n\n```\n\n\n\n\n\n\n\n\n\n\n### MistralProvider\n\nBases: `Provider[Mistral]`\n\nProvider for Mistral API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/mistral.py`\n```\nclass MistralProvider(Provider[Mistral]):\n    \"\"\"Provider for Mistral API.\"\"\"\n\n    @property\n    def name(self) -> str:\n        return 'mistral'\n\n    @property\n    def base_url(self) -> str:\n        return self.client.sdk_configuration.get_server_details()[0]\n\n    @property\n    def client(self) -> Mistral:\n        return self._client\n\n    @overload\n    def __init__(self, *, mistral_client: Mistral | None = None) -> None: ...\n\n    @overload\n    def __init__(self, *, api_key: str | None = None, http_client: AsyncHTTPClient | None = None", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-08a4d218da7ec53e693bd2773bdb87b2", "__created_at__": 1744231651.420514, "content": "base_url(self) -> str:\n        return self.client.sdk_configuration.get_server_details()[0]\n\n    @property\n    def client(self) -> Mistral:\n        return self._client\n\n    @overload\n    def __init__(self, *, mistral_client: Mistral | None = None) -> None: ...\n\n    @overload\n    def __init__(self, *, api_key: str | None = None, http_client: AsyncHTTPClient | None = None) -> None: ...\n\n    def __init__(\n        self,\n        *,\n        api_key: str | None = None,\n        mistral_client: Mistral | None = None,\n        http_client: AsyncHTTPClient | None = None,\n    ) -> None:\n        \"\"\"Create a new Mistral provider.\n\n        Args:\n            api_key: The API key to use for authentication, if not provided, the `MISTRAL_API_KEY` environment variable\n                will be used if available.\n            mistral_client: An existing `Mistral` client to use, if provided, `api_key` and `http_client` must be `None`.\n            http_client: An existing async client to use for making HTTP requests.\n        \"\"\"\n        if mistral_client is not None:\n            assert http_client is None, 'Cannot provide both `mistral_client` and `http_client`'\n            assert api_key is None, 'Cannot provide both `mistral_client` and `api_key`'\n            self._client = mistral_client\n        else:\n            api_key = api_key or os.environ.get('MISTRAL_API_KEY')\n\n            if not api_key:\n                raise UserError(\n                    'Set the `MISTRAL_API_KEY` environment variable or pass it via `MistralProvider(api_key=...)`'\n                    'to use the Mistral provider.'\n                )\n            elif http_client is not None:\n                self._client = Mistral(api_key=api_key, async_client=http_client)\n            else:\n                http_client = cached_async_http_client(provider='mistral')\n                self._client = Mistral(api_key=api_key, async_client=http_client)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(*, mistral_client: Mistral | None = None) -> None\n\n```\n```\n__init__(\n    *,\n    api_key: str | None = None,\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n \n```\n__init__(\n    *,\n    api_key: str | None = None,\n    mistral_client: Mistral | None = None,\n    http_client: AsyncClient | None = None\n) -> None\n\n```\n\nCreate a new Mistral provider.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `api_key` | `str | None` | The API key to use for authentication, if not provided, the `MISTRAL_API_KEY` environment variable will be used if available. | `None` |\n| `mistral_client` | `Mistral | None` | An existing `Mistral` client to use, if provided, `api_key` and `http_client` must be `None`. | `None` |\n| `http_client` | `AsyncClient | None` | An existing async client to use for making HTTP requests. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/providers/mistral.py`\n```\ndef __init__(\n    self,\n    *,\n    api_key: str | None = None,\n    mistral_client: Mistral | None = None,\n    http_client: AsyncHTTPClient | None = None,\n) -> None:\n    \"\"\"Create a new Mistral provider.\n\n    Args:\n        api_key: The API key to use for authentication, if not provided, the `MISTRAL_API_KEY` environment variable\n            will be used if available.\n        mistral_client: An existing `Mistral` client to use, if provided, `api_key` and `http_client` must be `None`.\n        http_client: An existing async client to use for making HTTP requests.\n    \"\"\"\n    if mistral_client is not None:\n        assert http_client is None, 'Cannot provide both `mistral_client` and `http_client`'\n        assert api_key is None, 'Cannot provide both `mistral_client` and `api_key`'\n        self._client = mistral_client\n    else:\n        api_key = api_key or os.environ.get('MISTRAL_API_KEY')\n\n        if not api_key:\n            raise UserError(\n                'Set the `MISTRAL_API_KEY` environment variable or pass it via `MistralProvider(api_key=...)`'\n                'to use the Mistral provider.'\n            )\n        elif http_client is not None:\n            self._client = Mistral(api_key=api_key, async_client=http_client)\n        else:\n            http_client = cached_async_http_client(provider='mistral')\n            self._client = Mistral(api_key=api_key, async_client=http_client)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.result`\n====================\n\n### ResultDataT `module-attribute`\n\n```\nResultDataT = TypeVar(\n    \"ResultDataT\", default=str, covariant=True\n)\n\n```\n\nCovariant type variable for the result data type of a run.\n\n\n\n### StreamedRunResult `dataclass`\n\nBases: `Generic[AgentDepsT, ResultDataT]`\n\nResult of a streamed run that returns structured data via a tool call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\n@dataclass", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-34aaffaa470a7a741f62a704e48832ea", "__created_at__": 1744231651.420514, "content": "-attribute`\n\n```\nResultDataT = TypeVar(\n    \"ResultDataT\", default=str, covariant=True\n)\n\n```\n\nCovariant type variable for the result data type of a run.\n\n\n\n### StreamedRunResult `dataclass`\n\nBases: `Generic[AgentDepsT, ResultDataT]`\n\nResult of a streamed run that returns structured data via a tool call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\n@dataclass\nclass StreamedRunResult(Generic[AgentDepsT, ResultDataT]):\n    \"\"\"Result of a streamed run that returns structured data via a tool call.\"\"\"\n\n    _all_messages: list[_messages.ModelMessage]\n    _new_message_index: int\n\n    _usage_limits: UsageLimits | None\n    _stream_response: models.StreamedResponse\n    _result_schema: _result.ResultSchema[ResultDataT] | None\n    _run_ctx: RunContext[AgentDepsT]\n    _result_validators: list[_result.ResultValidator[AgentDepsT, ResultDataT]]\n    _result_tool_name: str | None\n    _on_complete: Callable[[], Awaitable[None]]\n\n    _initial_run_ctx_usage: Usage = field(init=False)\n    is_complete: bool = field(default=False, init=False)\n    \"\"\"Whether the stream has all been received.\n\n    This is set to `True` when one of\n    [`stream`][pydantic_ai.result.StreamedRunResult.stream],\n    [`stream_text`][pydantic_ai.result.StreamedRunResult.stream_text],\n    [`stream_structured`][pydantic_ai.result.StreamedRunResult.stream_structured] or\n    [`get_data`][pydantic_ai.result.StreamedRunResult.get_data] completes.\n    \"\"\"\n\n    def __post_init__(self):\n        self._initial_run_ctx_usage = copy(self._run_ctx.usage)\n\n    def all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:\n        \"\"\"Return the history of _messages.\n\n        Args:\n            result_tool_return_content: The return content of the tool call to set in the last message.\n                This provides a convenient way to modify the content of the result tool call if you want to continue\n                the conversation and want to set the response to the result tool call. If `None`, the last message will\n                not be modified.\n\n        Returns:\n            List of messages.\n        \"\"\"\n        # this is a method to be consistent with the other methods\n        if result_tool_return_content is not None:\n            raise NotImplementedError('Setting result tool return content is not supported for this result type.')\n        return self._all_messages\n\n    def all_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n        \"\"\"Return all messages from [`all_messages`][pydantic_ai.result.StreamedRunResult.all_messages] as JSON bytes.\n\n        Args:\n            result_tool_return_content: The return content of the tool call to set in the last message.\n                This provides a convenient way to modify the content of the result tool call if you want to continue\n                the conversation and want to set the response to the result tool call. If `None`, the last message will\n                not be modified.\n\n        Returns:\n            JSON bytes representing the messages.\n        \"\"\"\n        return _messages.ModelMessagesTypeAdapter.dump_json(\n            self.all_messages(result_tool_return_content=result_tool_return_content)\n        )\n\n    def new_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:\n        \"\"\"Return new messages associated with this run.\n\n        Messages from older runs are excluded.\n\n        Args:\n            result_tool_return_content: The return content of the tool call to set in the last message.\n                This provides a convenient way to modify the content of the result tool call if you want to continue\n                the conversation and want to set the response to the result tool call. If `None`, the last message will\n                not be modified.\n\n        Returns:\n            List of new messages.\n        \"\"\"\n        return self.all_messages(result_tool_return_content=result_tool_return_content)[self._new_message_index :]\n\n    def new_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n        \"\"\"Return new messages from [`new_messages`][pydantic_ai.result.StreamedRunResult.new_messages] as JSON bytes.\n\n        Args:\n            result_tool_return_content: The return content of the tool call to set in the last message.\n                This provides a convenient way to modify the content of the result tool call if you want to continue\n                the conversation and want to set the response to the result tool call. If `None`, the last message will\n                not be modified.\n\n        Returns:\n            JSON bytes representing the new messages.\n        \"\"\"\n        return _messages.ModelMessagesTypeAdapter.dump_json(\n            self.new_messages(result_tool_return_content=result_tool_return_content)\n        )\n\n    async def stream(self, *, debounce_by: float | None = 0.1) -> AsyncIterator[ResultDataT]:\n        \"\"\"Stream the response as an async iterable.\n\n        The pydantic validator for structured data will be called in\n        [partial mode](https://docs.pydantic.dev/dev/concepts/experimental/#partial-validation)\n        on each iteration.\n\n        Args:\n            debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.\n                Debouncing is particularly important for long structured responses to reduce the overhead of\n                performing validation as each token is received.\n\n        Returns:\n            An async iterable of the response data.\n        \"\"\"\n        async for structured_message, is_last in self.stream_structured(debounce_by=debounce_by):\n            result = await", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5", "__created_at__": 1744231651.420514, "content": "on each iteration.\n\n        Args:\n            debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.\n                Debouncing is particularly important for long structured responses to reduce the overhead of\n                performing validation as each token is received.\n\n        Returns:\n            An async iterable of the response data.\n        \"\"\"\n        async for structured_message, is_last in self.stream_structured(debounce_by=debounce_by):\n            result = await self.validate_structured_result(structured_message, allow_partial=not is_last)\n            yield result\n\n    async def stream_text(self, *, delta: bool = False, debounce_by: float | None = 0.1) -> AsyncIterator[str]:\n        \"\"\"Stream the text result as an async iterable.\n\n        !!! note\n            Result validators will NOT be called on the text result if `delta=True`.\n\n        Args:\n            delta: if `True`, yield each chunk of text as it is received, if `False` (default), yield the full text\n                up to the current point.\n            debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.\n                Debouncing is particularly important for long structured responses to reduce the overhead of\n                performing validation as each token is received.\n        \"\"\"\n        if self._result_schema and not self._result_schema.allow_text_result:\n            raise exceptions.UserError('stream_text() can only be used with text responses')\n\n        if delta:\n            async for text in self._stream_response_text(delta=delta, debounce_by=debounce_by):\n                yield text\n        else:\n            async for text in self._stream_response_text(delta=delta, debounce_by=debounce_by):\n                combined_validated_text = await self._validate_text_result(text)\n                yield combined_validated_text\n        await self._marked_completed(self._stream_response.get())\n\n    async def stream_structured(\n        self, *, debounce_by: float | None = 0.1\n    ) -> AsyncIterator[tuple[_messages.ModelResponse, bool]]:\n        \"\"\"Stream the response as an async iterable of Structured LLM Messages.\n\n        Args:\n            debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.\n                Debouncing is particularly important for long structured responses to reduce the overhead of\n                performing validation as each token is received.\n\n        Returns:\n            An async iterable of the structured response message and whether that is the last message.\n        \"\"\"\n        # if the message currently has any parts with content, yield before streaming\n        msg = self._stream_response.get()\n        for part in msg.parts:\n            if part.has_content():\n                yield msg, False\n                break\n\n        async for msg in self._stream_response_structured(debounce_by=debounce_by):\n            yield msg, False\n\n        msg = self._stream_response.get()\n        yield msg, True\n\n        await self._marked_completed(msg)\n\n    async def get_data(self) -> ResultDataT:\n        \"\"\"Stream the whole response, validate and return it.\"\"\"\n        usage_checking_stream = _get_usage_checking_stream_response(\n            self._stream_response, self._usage_limits, self.usage\n        )\n\n        async for _ in usage_checking_stream:\n            pass\n        message = self._stream_response.get()\n        await self._marked_completed(message)\n        return await self.validate_structured_result(message)\n\n    def usage(self) -> Usage:\n        \"\"\"Return the usage of the whole run.\n\n        !!! note\n            This won't return the full usage until the stream is finished.\n        \"\"\"\n        return self._initial_run_ctx_usage + self._stream_response.usage()\n\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        return self._stream_response.timestamp\n\n    async def validate_structured_result(\n        self, message: _messages.ModelResponse, *, allow_partial: bool = False\n    ) -> ResultDataT:\n        \"\"\"Validate a structured result message.\"\"\"\n        if self._result_schema is not None and self._result_tool_name is not None:\n            match = self._result_schema.find_named_tool(message.parts, self._result_tool_name)\n            if match is None:\n                raise exceptions.UnexpectedModelBehavior(\n                    f'Invalid response, unable to find tool: {self._result_schema.tool_names()}'\n                )\n\n            call, result_tool = match\n            result_data = result_tool.validate(call, allow_partial=allow_partial, wrap_validation_errors=False)\n\n            for validator in self._result_validators:\n                result_data = await validator.validate(result_data, call, self._run_ctx)\n            return result_data\n        else:\n            text = '\\n\\n'.join(x.content for x in message.parts if isinstance(x, _messages.TextPart))\n            for validator in self._result_validators:\n                text = await validator.validate(\n                    text,\n                    None,\n                    self._run_ctx,\n                )\n            # Since there is no result tool, we can assume that str is compatible with ResultDataT\n            return cast(ResultDataT, text)\n\n    async def _validate_text_result(self, text: str) -> str:\n        for validator in self._result_validators:\n            text = await validator.validate(\n                text,\n                None,\n                self._run_ctx,\n            )\n        return text\n\n    async def _marked_completed(self, message: _messages.ModelResponse) -> None:\n        self.is_complete = True\n        self._all_messages.append(message)\n        await self._on_complete()\n\n    async def _stream_response_structured(\n        self, *, debounce_by: float | None = 0.1\n    ) -> AsyncIterator[_messages.ModelResponse]:\n        async with _utils.group_by_temporal(self._stream_response, debounce_by) as", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9b2399edbbf7b8123ba44d7166c35085", "__created_at__": 1744231651.420514, "content": ",\n            )\n        return text\n\n    async def _marked_completed(self, message: _messages.ModelResponse) -> None:\n        self.is_complete = True\n        self._all_messages.append(message)\n        await self._on_complete()\n\n    async def _stream_response_structured(\n        self, *, debounce_by: float | None = 0.1\n    ) -> AsyncIterator[_messages.ModelResponse]:\n        async with _utils.group_by_temporal(self._stream_response, debounce_by) as group_iter:\n            async for _items in group_iter:\n                yield self._stream_response.get()\n\n    async def _stream_response_text(\n        self, *, delta: bool = False, debounce_by: float | None = 0.1\n    ) -> AsyncIterator[str]:\n        \"\"\"Stream the response as an async iterable of text.\"\"\"\n\n        # Define a \"merged\" version of the iterator that will yield items that have already been retrieved\n        # and items that we receive while streaming. We define a dedicated async iterator for this so we can\n        # pass the combined stream to the group_by_temporal function within `_stream_text_deltas` below.\n        async def _stream_text_deltas_ungrouped() -> AsyncIterator[tuple[str, int]]:\n            # yields tuples of (text_content, part_index)\n            # we don't currently make use of the part_index, but in principle this may be useful\n            # so we retain it here for now to make possible future refactors simpler\n            msg = self._stream_response.get()\n            for i, part in enumerate(msg.parts):\n                if isinstance(part, _messages.TextPart) and part.content:\n                    yield part.content, i\n\n            async for event in self._stream_response:\n                if (\n                    isinstance(event, _messages.PartStartEvent)\n                    and isinstance(event.part, _messages.TextPart)\n                    and event.part.content\n                ):\n                    yield event.part.content, event.index\n                elif (\n                    isinstance(event, _messages.PartDeltaEvent)\n                    and isinstance(event.delta, _messages.TextPartDelta)\n                    and event.delta.content_delta\n                ):\n                    yield event.delta.content_delta, event.index\n\n        async def _stream_text_deltas() -> AsyncIterator[str]:\n            async with _utils.group_by_temporal(_stream_text_deltas_ungrouped(), debounce_by) as group_iter:\n                async for items in group_iter:\n                    # Note: we are currently just dropping the part index on the group here\n                    yield ''.join([content for content, _ in items])\n\n        if delta:\n            async for text in _stream_text_deltas():\n                yield text\n        else:\n            # a quick benchmark shows it's faster to build up a string with concat when we're\n            # yielding at each step\n            deltas: list[str] = []\n            async for text in _stream_text_deltas():\n                deltas.append(text)\n                yield ''.join(deltas)\n\n```\n\n\n#### is\\_complete `class-attribute` `instance-attribute`\n\n```\nis_complete: bool = field(default=False, init=False)\n\n```\n\nWhether the stream has all been received.\n\nThis is set to `True` when one of\n`stream`,\n`stream_text`,\n`stream_structured` or\n`get_data` completes.\n\n\n\n#### all\\_messages\n\n```\nall_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn the history of \\_messages.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[ModelMessage]` | List of messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\ndef all_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:\n    \"\"\"Return the history of _messages.\n\n    Args:\n        result_tool_return_content: The return content of the tool call to set in the last message.\n            This provides a convenient way to modify the content of the result tool call if you want to continue\n            the conversation and want to set the response to the result tool call. If `None`, the last message will\n            not be modified.\n\n    Returns:\n        List of messages.\n    \"\"\"\n    # this is a method to be consistent with the other methods\n    if result_tool_return_content is not None:\n        raise NotImplementedError('Setting result tool return content is not supported for this result type.')\n    return self._all_messages\n\n```\n\n\n\n\n#### all\\_messages\\_json\n\n```\nall_messages_json(\n    *, result_tool_return_content: str | None = None\n) -> bytes\n\n```\n\nReturn all messages from `all_messages` as JSON bytes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the messages. |\n\nSource code in `pydantic_ai_slim", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-848b83bfc3ae6c2755d4c3644cfef354", "__created_at__": 1744231651.420514, "content": "` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\ndef all_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n    \"\"\"Return all messages from [`all_messages`][pydantic_ai.result.StreamedRunResult.all_messages] as JSON bytes.\n\n    Args:\n        result_tool_return_content: The return content of the tool call to set in the last message.\n            This provides a convenient way to modify the content of the result tool call if you want to continue\n            the conversation and want to set the response to the result tool call. If `None`, the last message will\n            not be modified.\n\n    Returns:\n        JSON bytes representing the messages.\n    \"\"\"\n    return _messages.ModelMessagesTypeAdapter.dump_json(\n        self.all_messages(result_tool_return_content=result_tool_return_content)\n    )\n\n```\n\n\n\n\n#### new\\_messages\n\n```\nnew_messages(\n    *, result_tool_return_content: str | None = None\n) -> list[ModelMessage]\n\n```\n\nReturn new messages associated with this run.\n\nMessages from older runs are excluded.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `list[ModelMessage]` | List of new messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\ndef new_messages(self, *, result_tool_return_content: str | None = None) -> list[_messages.ModelMessage]:\n    \"\"\"Return new messages associated with this run.\n\n    Messages from older runs are excluded.\n\n    Args:\n        result_tool_return_content: The return content of the tool call to set in the last message.\n            This provides a convenient way to modify the content of the result tool call if you want to continue\n            the conversation and want to set the response to the result tool call. If `None`, the last message will\n            not be modified.\n\n    Returns:\n        List of new messages.\n    \"\"\"\n    return self.all_messages(result_tool_return_content=result_tool_return_content)[self._new_message_index :]\n\n```\n\n\n\n\n#### new\\_messages\\_json\n\n```\nnew_messages_json(\n    *, result_tool_return_content: str | None = None\n) -> bytes\n\n```\n\nReturn new messages from `new_messages` as JSON bytes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `result_tool_return_content` | `str | None` | The return content of the tool call to set in the last message. This provides a convenient way to modify the content of the result tool call if you want to continue the conversation and want to set the response to the result tool call. If `None`, the last message will not be modified. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | JSON bytes representing the new messages. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\ndef new_messages_json(self, *, result_tool_return_content: str | None = None) -> bytes:\n    \"\"\"Return new messages from [`new_messages`][pydantic_ai.result.StreamedRunResult.new_messages] as JSON bytes.\n\n    Args:\n        result_tool_return_content: The return content of the tool call to set in the last message.\n            This provides a convenient way to modify the content of the result tool call if you want to continue\n            the conversation and want to set the response to the result tool call. If `None`, the last message will\n            not be modified.\n\n    Returns:\n        JSON bytes representing the new messages.\n    \"\"\"\n    return _messages.ModelMessagesTypeAdapter.dump_json(\n        self.new_messages(result_tool_return_content=result_tool_return_content)\n    )\n\n```\n\n\n\n\n#### stream `async`\n\n```\nstream(\n    *, debounce_by: float | None = 0.1\n) -> AsyncIterator[ResultDataT]\n\n```\n\nStream the response as an async iterable.\n\nThe pydantic validator for structured data will be called in\n[partial mode](https://docs.pydantic.dev/dev/concepts/experimental/#partial-validation)\non each iteration.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `debounce_by` | `float | None` | by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing. Debouncing is particularly important for long structured responses to reduce the overhead of performing validation as each token is received. | `0.1` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AsyncIterator[ResultDataT]` | An async iterable of the response data. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\nasync def stream(self, *, debounce_by: float | None = 0.1) -> AsyncIterator[Result", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-bd6dfe5e98d926e7e4cb3f17a23e568c", "__created_at__": 1744231651.420514, "content": "particularly important for long structured responses to reduce the overhead of performing validation as each token is received. | `0.1` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AsyncIterator[ResultDataT]` | An async iterable of the response data. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\nasync def stream(self, *, debounce_by: float | None = 0.1) -> AsyncIterator[ResultDataT]:\n    \"\"\"Stream the response as an async iterable.\n\n    The pydantic validator for structured data will be called in\n    [partial mode](https://docs.pydantic.dev/dev/concepts/experimental/#partial-validation)\n    on each iteration.\n\n    Args:\n        debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.\n            Debouncing is particularly important for long structured responses to reduce the overhead of\n            performing validation as each token is received.\n\n    Returns:\n        An async iterable of the response data.\n    \"\"\"\n    async for structured_message, is_last in self.stream_structured(debounce_by=debounce_by):\n        result = await self.validate_structured_result(structured_message, allow_partial=not is_last)\n        yield result\n\n```\n\n\n\n\n#### stream\\_text `async`\n\n```\nstream_text(\n    *, delta: bool = False, debounce_by: float | None = 0.1\n) -> AsyncIterator[str]\n\n```\n\nStream the text result as an async iterable.\n\nNote\n\nResult validators will NOT be called on the text result if `delta=True`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `delta` | `bool` | if `True`, yield each chunk of text as it is received, if `False` (default), yield the full text up to the current point. | `False` |\n| `debounce_by` | `float | None` | by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing. Debouncing is particularly important for long structured responses to reduce the overhead of performing validation as each token is received. | `0.1` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\nasync def stream_text(self, *, delta: bool = False, debounce_by: float | None = 0.1) -> AsyncIterator[str]:\n    \"\"\"Stream the text result as an async iterable.\n\n    !!! note\n        Result validators will NOT be called on the text result if `delta=True`.\n\n    Args:\n        delta: if `True`, yield each chunk of text as it is received, if `False` (default), yield the full text\n            up to the current point.\n        debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.\n            Debouncing is particularly important for long structured responses to reduce the overhead of\n            performing validation as each token is received.\n    \"\"\"\n    if self._result_schema and not self._result_schema.allow_text_result:\n        raise exceptions.UserError('stream_text() can only be used with text responses')\n\n    if delta:\n        async for text in self._stream_response_text(delta=delta, debounce_by=debounce_by):\n            yield text\n    else:\n        async for text in self._stream_response_text(delta=delta, debounce_by=debounce_by):\n            combined_validated_text = await self._validate_text_result(text)\n            yield combined_validated_text\n    await self._marked_completed(self._stream_response.get())\n\n```\n\n\n\n\n#### stream\\_structured `async`\n\n```\nstream_structured(\n    *, debounce_by: float | None = 0.1\n) -> AsyncIterator[tuple[ModelResponse, bool]]\n\n```\n\nStream the response as an async iterable of Structured LLM Messages.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `debounce_by` | `float | None` | by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing. Debouncing is particularly important for long structured responses to reduce the overhead of performing validation as each token is received. | `0.1` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AsyncIterator[tuple[ModelResponse, bool]]` | An async iterable of the structured response message and whether that is the last message. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\nasync def stream_structured(\n    self, *, debounce_by: float | None = 0.1\n) -> AsyncIterator[tuple[_messages.ModelResponse, bool]]:\n    \"\"\"Stream the response as an async iterable of Structured LLM Messages.\n\n    Args:\n        debounce_by: by how much (if at all) to debounce/group the response chunks by. `None` means no debouncing.\n            Debouncing is particularly important for long structured responses to reduce the overhead of\n            performing validation as each token is received.\n\n    Returns:\n        An async iterable of the structured response message and whether that is the last message.\n    \"\"\"\n    # if the message currently has any parts with content, yield before streaming\n    msg = self._stream_response.get()\n    for part in msg.parts:\n        if part.has_content():\n            yield msg, False\n            break\n\n    async for msg in self._stream_response_structured(debounce_by=debounce_by):\n        yield msg, False\n\n    msg = self._stream_response.get()\n    yield msg, True\n\n    await self._marked_completed(msg)\n\n```\n\n\n\n\n#### get\\_data `async`\n\n``", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-2e95a42b1e44a831fcd0b7eb5810fc9e", "__created_at__": 1744231651.420514, "content": "has any parts with content, yield before streaming\n    msg = self._stream_response.get()\n    for part in msg.parts:\n        if part.has_content():\n            yield msg, False\n            break\n\n    async for msg in self._stream_response_structured(debounce_by=debounce_by):\n        yield msg, False\n\n    msg = self._stream_response.get()\n    yield msg, True\n\n    await self._marked_completed(msg)\n\n```\n\n\n\n\n#### get\\_data `async`\n\n```\nget_data() -> ResultDataT\n\n```\n\nStream the whole response, validate and return it.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\nasync def get_data(self) -> ResultDataT:\n    \"\"\"Stream the whole response, validate and return it.\"\"\"\n    usage_checking_stream = _get_usage_checking_stream_response(\n        self._stream_response, self._usage_limits, self.usage\n    )\n\n    async for _ in usage_checking_stream:\n        pass\n    message = self._stream_response.get()\n    await self._marked_completed(message)\n    return await self.validate_structured_result(message)\n\n```\n\n\n\n\n#### usage\n\n```\nusage() -> Usage\n\n```\n\nReturn the usage of the whole run.\n\nNote\n\nThis won't return the full usage until the stream is finished.\n\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\ndef usage(self) -> Usage:\n    \"\"\"Return the usage of the whole run.\n\n    !!! note\n        This won't return the full usage until the stream is finished.\n    \"\"\"\n    return self._initial_run_ctx_usage + self._stream_response.usage()\n\n```\n\n\n\n\n#### timestamp\n\n```\ntimestamp() -> datetime\n\n```\n\nGet the timestamp of the response.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\ndef timestamp(self) -> datetime:\n    \"\"\"Get the timestamp of the response.\"\"\"\n    return self._stream_response.timestamp\n\n```\n\n\n\n\n#### validate\\_structured\\_result `async`\n\n```\nvalidate_structured_result(\n    message: ModelResponse, *, allow_partial: bool = False\n) -> ResultDataT\n\n```\n\nValidate a structured result message.\n\nSource code in `pydantic_ai_slim/pydantic_ai/result.py`\n```\nasync def validate_structured_result(\n    self, message: _messages.ModelResponse, *, allow_partial: bool = False\n) -> ResultDataT:\n    \"\"\"Validate a structured result message.\"\"\"\n    if self._result_schema is not None and self._result_tool_name is not None:\n        match = self._result_schema.find_named_tool(message.parts, self._result_tool_name)\n        if match is None:\n            raise exceptions.UnexpectedModelBehavior(\n                f'Invalid response, unable to find tool: {self._result_schema.tool_names()}'\n            )\n\n        call, result_tool = match\n        result_data = result_tool.validate(call, allow_partial=allow_partial, wrap_validation_errors=False)\n\n        for validator in self._result_validators:\n            result_data = await validator.validate(result_data, call, self._run_ctx)\n        return result_data\n    else:\n        text = '\\n\\n'.join(x.content for x in message.parts if isinstance(x, _messages.TextPart))\n        for validator in self._result_validators:\n            text = await validator.validate(\n                text,\n                None,\n                self._run_ctx,\n            )\n        # Since there is no result tool, we can assume that str is compatible with ResultDataT\n        return cast(ResultDataT, text)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.settings`\n======================\n\n### ModelSettings\n\nBases: `TypedDict`\n\nSettings to configure an LLM.\n\nHere we include only settings which apply to multiple models / model providers,\nthough not all of these settings are supported by all models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/settings.py`\n```\nclass ModelSettings(TypedDict, total=False):\n    \"\"\"Settings to configure an LLM.\n\n    Here we include only settings which apply to multiple models / model providers,\n    though not all of these settings are supported by all models.\n    \"\"\"\n\n    max_tokens: int\n    \"\"\"The maximum number of tokens to generate before stopping.\n\n    Supported by:\n\n    * Gemini\n    * Anthropic\n    * OpenAI\n    * Groq\n    * Cohere\n    * Mistral\n    * Bedrock\n    \"\"\"\n\n    temperature: float\n    \"\"\"Amount of randomness injected into the response.\n\n    Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to a model's\n    maximum `temperature` for creative and generative tasks.\n\n    Note that even with `temperature` of `0.0`, the results will not be fully deterministic.\n\n    Supported by:\n\n    * Gemini\n    * Anthropic\n    * OpenAI\n    * Groq\n    * Cohere\n    * Mistral\n    * Bedrock\n    \"\"\"\n\n    top_p: float\n    \"\"\"An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.\n\n    So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\n    You should either alter `temperature` or `top_p`, but not both.\n\n    Supported by:\n\n    * Gemini\n    * Anthropic\n    * OpenAI\n    * Groq\n    * Cohere\n    * Mistral\n    * Bedrock\n    \"\"\"\n\n    timeout: float | Timeout\n    \"\"\"Override the client-level default timeout for a request, in seconds.\n\n    Supported by:\n\n    * Gemini\n    * Anthropic\n    * OpenAI\n    * Groq\n    * Mistral\n    \"\"\"\n\n    parallel_tool", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-62b30762bc4e6dc84db8c5fa1d88d2de", "__created_at__": 1744231651.420514, "content": "not both.\n\n    Supported by:\n\n    * Gemini\n    * Anthropic\n    * OpenAI\n    * Groq\n    * Cohere\n    * Mistral\n    * Bedrock\n    \"\"\"\n\n    timeout: float | Timeout\n    \"\"\"Override the client-level default timeout for a request, in seconds.\n\n    Supported by:\n\n    * Gemini\n    * Anthropic\n    * OpenAI\n    * Groq\n    * Mistral\n    \"\"\"\n\n    parallel_tool_calls: bool\n    \"\"\"Whether to allow parallel tool calls.\n\n    Supported by:\n\n    * OpenAI (some models, not o1)\n    * Groq\n    * Anthropic\n    \"\"\"\n\n    seed: int\n    \"\"\"The random seed to use for the model, theoretically allowing for deterministic results.\n\n    Supported by:\n\n    * OpenAI\n    * Groq\n    * Cohere\n    * Mistral\n    \"\"\"\n\n    presence_penalty: float\n    \"\"\"Penalize new tokens based on whether they have appeared in the text so far.\n\n    Supported by:\n\n    * OpenAI\n    * Groq\n    * Cohere\n    * Gemini\n    * Mistral\n    \"\"\"\n\n    frequency_penalty: float\n    \"\"\"Penalize new tokens based on their existing frequency in the text so far.\n\n    Supported by:\n\n    * OpenAI\n    * Groq\n    * Cohere\n    * Gemini\n    * Mistral\n    \"\"\"\n\n    logit_bias: dict[str, int]\n    \"\"\"Modify the likelihood of specified tokens appearing in the completion.\n\n    Supported by:\n\n    * OpenAI\n    * Groq\n    \"\"\"\n\n    stop_sequences: list[str]\n    \"\"\"Sequences that will cause the model to stop generating.\n\n    Supported by:\n\n    * OpenAI\n    * Anthropic\n    * Bedrock\n    * Mistral\n    * Groq\n    * Cohere\n    \"\"\"\n\n```\n\n\n#### max\\_tokens `instance-attribute`\n\n```\nmax_tokens: int\n\n```\n\nThe maximum number of tokens to generate before stopping.\n\nSupported by:\n\n* Gemini\n* Anthropic\n* OpenAI\n* Groq\n* Cohere\n* Mistral\n* Bedrock\n\n\n#### temperature `instance-attribute`\n\n```\ntemperature: float\n\n```\n\nAmount of randomness injected into the response.\n\nUse `temperature` closer to `0.0` for analytical / multiple choice, and closer to a model's\nmaximum `temperature` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.\n\nSupported by:\n\n* Gemini\n* Anthropic\n* OpenAI\n* Groq\n* Cohere\n* Mistral\n* Bedrock\n\n\n#### top\\_p `instance-attribute`\n\n```\ntop_p: float\n\n```\n\nAn alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top\\_p probability mass.\n\nSo 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nYou should either alter `temperature` or `top_p`, but not both.\n\nSupported by:\n\n* Gemini\n* Anthropic\n* OpenAI\n* Groq\n* Cohere\n* Mistral\n* Bedrock\n\n\n#### timeout `instance-attribute`\n\n```\ntimeout: float | Timeout\n\n```\n\nOverride the client-level default timeout for a request, in seconds.\n\nSupported by:\n\n* Gemini\n* Anthropic\n* OpenAI\n* Groq\n* Mistral\n\n\n#### parallel\\_tool\\_calls `instance-attribute`\n\n```\nparallel_tool_calls: bool\n\n```\n\nWhether to allow parallel tool calls.\n\nSupported by:\n\n* OpenAI (some models, not o1)\n* Groq\n* Anthropic\n\n\n#### seed `instance-attribute`\n\n```\nseed: int\n\n```\n\nThe random seed to use for the model, theoretically allowing for deterministic results.\n\nSupported by:\n\n* OpenAI\n* Groq\n* Cohere\n* Mistral\n\n\n#### presence\\_penalty `instance-attribute`\n\n```\npresence_penalty: float\n\n```\n\nPenalize new tokens based on whether they have appeared in the text so far.\n\nSupported by:\n\n* OpenAI\n* Groq\n* Cohere\n* Gemini\n* Mistral\n\n\n#### frequency\\_penalty `instance-attribute`\n\n```\nfrequency_penalty: float\n\n```\n\nPenalize new tokens based on their existing frequency in the text so far.\n\nSupported by:\n\n* OpenAI\n* Groq\n* Cohere\n* Gemini\n* Mistral\n\n\n#### logit\\_bias `instance-attribute`\n\n```\nlogit_bias: dict[str, int]\n\n```\n\nModify the likelihood of specified tokens appearing in the completion.\n\nSupported by:\n\n* OpenAI\n* Groq\n\n\n#### stop\\_sequences `instance-attribute`\n\n```\nstop_sequences: list[str]\n\n```\n\nSequences that will cause the model to stop generating.\n\nSupported by:\n\n* OpenAI\n* Anthropic\n* Bedrock\n* Mistral\n* Groq\n* Cohere\n\n\n\n\n\n\n\n\n\n`pydantic_ai.tools`\n===================\n\n### AgentDepsT `module-attribute`\n\n```\nAgentDepsT = TypeVar(\n    \"AgentDepsT\", default=None, contravariant=True\n)\n\n```\n\nType variable for agent dependencies.\n\n\n\n### RunContext `dataclass`\n\nBases: `Generic[AgentDepsT]`\n\nInformation about the current call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n```\n@dataclasses.dataclass\nclass RunContext(Generic[AgentDepsT]):\n    \"\"\"Information about the current call.\"\"\"\n\n    deps: AgentDepsT\n    \"\"\"Dependencies for the agent.\"\"\"\n    model: models.Model", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-0defe853a1fb0dadf514cce37cdbbd16", "__created_at__": 1744231651.420514, "content": "=None, contravariant=True\n)\n\n```\n\nType variable for agent dependencies.\n\n\n\n### RunContext `dataclass`\n\nBases: `Generic[AgentDepsT]`\n\nInformation about the current call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n```\n@dataclasses.dataclass\nclass RunContext(Generic[AgentDepsT]):\n    \"\"\"Information about the current call.\"\"\"\n\n    deps: AgentDepsT\n    \"\"\"Dependencies for the agent.\"\"\"\n    model: models.Model\n    \"\"\"The model used in this run.\"\"\"\n    usage: Usage\n    \"\"\"LLM usage associated with the run.\"\"\"\n    prompt: str | Sequence[_messages.UserContent] | None\n    \"\"\"The original user prompt passed to the run.\"\"\"\n    messages: list[_messages.ModelMessage] = field(default_factory=list)\n    \"\"\"Messages exchanged in the conversation so far.\"\"\"\n    tool_call_id: str | None = None\n    \"\"\"The ID of the tool call.\"\"\"\n    tool_name: str | None = None\n    \"\"\"Name of the tool being called.\"\"\"\n    retry: int = 0\n    \"\"\"Number of retries so far.\"\"\"\n    run_step: int = 0\n    \"\"\"The current step in the run.\"\"\"\n\n    def replace_with(\n        self, retry: int | None = None, tool_name: str | None | _utils.Unset = _utils.UNSET\n    ) -> RunContext[AgentDepsT]:\n        # Create a new `RunContext` a new `retry` value and `tool_name`.\n        kwargs = {}\n        if retry is not None:\n            kwargs['retry'] = retry\n        if tool_name is not _utils.UNSET:\n            kwargs['tool_name'] = tool_name\n        return dataclasses.replace(self, **kwargs)\n\n```\n\n\n#### deps `instance-attribute`\n\n```\ndeps: AgentDepsT\n\n```\n\nDependencies for the agent.\n\n\n\n#### model `instance-attribute`\n\n```\nmodel: Model\n\n```\n\nThe model used in this run.\n\n\n\n#### usage `instance-attribute`\n\n```\nusage: Usage\n\n```\n\nLLM usage associated with the run.\n\n\n\n#### prompt `instance-attribute`\n\n```\nprompt: str | Sequence[UserContent] | None\n\n```\n\nThe original user prompt passed to the run.\n\n\n\n#### messages `class-attribute` `instance-attribute`\n\n```\nmessages: list[ModelMessage] = field(default_factory=list)\n\n```\n\nMessages exchanged in the conversation so far.\n\n\n\n#### tool\\_call\\_id `class-attribute` `instance-attribute`\n\n```\ntool_call_id: str | None = None\n\n```\n\nThe ID of the tool call.\n\n\n\n#### tool\\_name `class-attribute` `instance-attribute`\n\n```\ntool_name: str | None = None\n\n```\n\nName of the tool being called.\n\n\n\n#### retry `class-attribute` `instance-attribute`\n\n```\nretry: int = 0\n\n```\n\nNumber of retries so far.\n\n\n\n#### run\\_step `class-attribute` `instance-attribute`\n\n```\nrun_step: int = 0\n\n```\n\nThe current step in the run.\n\n\n\n\n\n\n### ToolParams `module-attribute`\n\n```\nToolParams = ParamSpec('ToolParams', default=...)\n\n```\n\nRetrieval function param spec.\n\n\n\n### SystemPromptFunc `module-attribute`\n\n```\nSystemPromptFunc = Union[\n    Callable[[RunContext[AgentDepsT]], str],\n    Callable[[RunContext[AgentDepsT]], Awaitable[str]],\n    Callable[[], str],\n    Callable[[], Awaitable[str]],\n]\n\n```\n\nA function that may or maybe not take `RunContext` as an argument, and may or may not be async.\n\nUsage `SystemPromptFunc[AgentDepsT]`.\n\n\n\n### ToolFuncContext `module-attribute`\n\n```\nToolFuncContext = Callable[\n    Concatenate[RunContext[AgentDepsT], ToolParams], Any\n]\n\n```\n\nA tool function that takes `RunContext` as the first argument.\n\nUsage `ToolContextFunc[AgentDepsT, ToolParams]`.\n\n\n\n### ToolFuncPlain `module-attribute`\n\n```\nToolFuncPlain = Callable[ToolParams, Any]\n\n```\n\nA tool function that does not take `RunContext` as the first argument.\n\nUsage `ToolPlainFunc[ToolParams]`.\n\n\n\n### ToolFuncEither `module-attribute`\n\n```\nToolFuncEither = Union[\n    ToolFuncContext[AgentDepsT, ToolParams],\n    ToolFuncPlain[ToolParams],\n]\n\n```\n\nEither kind of tool function.\n\nThis is just a union of `ToolFuncContext` and\n`ToolFuncPlain`.\n\nUsage `ToolFuncEither[AgentDepsT, ToolParams]`.\n\n\n\n### ToolPrepareFunc `module-attribute`\n\n```\nToolPrepareFunc: TypeAlias = (\n    \"Callable[[RunContext[AgentDepsT], ToolDefinition], Awaitable[ToolDefinition | None]]\"\n)\n\n```\n\nDefinition of a function that can prepare a tool definition at call time.\n\nSee [tool docs](../../tools/#tool-prepare) for more information.\n\nExample — here `only_if_42` is valid as a `ToolPrepareFunc`:\n\n```\nfrom typing import Union\n\nfrom pydantic_ai import RunContext, Tool\nfrom pydantic_ai.tools import ToolDefinition\n\nasync def only_if_42(\n    ctx: RunContext[int], tool_def: ToolDefinition\n) -> Union[ToolDefinition, None]:\n    if ctx.deps == 42:\n        return tool_def\n\ndef hitchhiker(ctx: RunContext[int], answer: str) -> str:\n    return f'{ctx.deps} {answer}'\n\nhitchhiker = Tool(hitchhiker, prepare=only_if_42)\n\n```\n\nUsage `ToolPrepareFunc[AgentDepsT]`.\n\n\n\n### DocstringFormat `module-attribute`\n\n```\nDocstringFormat = Literal[", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3fdc59f27ef4b954d5ce497baa940c0b", "__created_at__": 1744231651.420514, "content": "-> Union[ToolDefinition, None]:\n    if ctx.deps == 42:\n        return tool_def\n\ndef hitchhiker(ctx: RunContext[int], answer: str) -> str:\n    return f'{ctx.deps} {answer}'\n\nhitchhiker = Tool(hitchhiker, prepare=only_if_42)\n\n```\n\nUsage `ToolPrepareFunc[AgentDepsT]`.\n\n\n\n### DocstringFormat `module-attribute`\n\n```\nDocstringFormat = Literal[\n    \"google\", \"numpy\", \"sphinx\", \"auto\"\n]\n\n```\n\nSupported docstring formats.\n\n* `'google'` — [Google-style](https://google.github.io/styleguide/pyguide.html#381-docstrings) docstrings.\n* `'numpy'` — [Numpy-style](https://numpydoc.readthedocs.io/en/latest/format.html) docstrings.\n* `'sphinx'` — [Sphinx-style](https://sphinx-rtd-tutorial.readthedocs.io/en/latest/docstrings.html#the-sphinx-docstring-format) docstrings.\n* `'auto'` — Automatically infer the format based on the structure of the docstring.\n\n\n### Tool `dataclass`\n\nBases: `Generic[AgentDepsT]`\n\nA tool function for an agent.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n```\n@dataclass(init=False)\nclass Tool(Generic[AgentDepsT]):\n    \"\"\"A tool function for an agent.\"\"\"\n\n    function: ToolFuncEither[AgentDepsT]\n    takes_ctx: bool\n    max_retries: int | None\n    name: str\n    description: str\n    prepare: ToolPrepareFunc[AgentDepsT] | None\n    docstring_format: DocstringFormat\n    require_parameter_descriptions: bool\n    strict: bool | None\n    _is_async: bool = field(init=False)\n    _single_arg_name: str | None = field(init=False)\n    _positional_fields: list[str] = field(init=False)\n    _var_positional_field: str | None = field(init=False)\n    _validator: SchemaValidator = field(init=False, repr=False)\n    _base_parameters_json_schema: ObjectJsonSchema = field(init=False)\n    \"\"\"\n    The base JSON schema for the tool's parameters.\n\n    This schema may be modified by the `prepare` function or by the Model class prior to including it in an API request.\n    \"\"\"\n\n    # TODO: Move this state off the Tool class, which is otherwise stateless.\n    #   This should be tracked inside a specific agent run, not the tool.\n    current_retry: int = field(default=0, init=False)\n\n    def __init__(\n        self,\n        function: ToolFuncEither[AgentDepsT],\n        *,\n        takes_ctx: bool | None = None,\n        max_retries: int | None = None,\n        name: str | None = None,\n        description: str | None = None,\n        prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n        docstring_format: DocstringFormat = 'auto',\n        require_parameter_descriptions: bool = False,\n        schema_generator: type[GenerateJsonSchema] = GenerateToolJsonSchema,\n        strict: bool | None = None,\n    ):\n        \"\"\"Create a new tool instance.\n\n        Example usage:\n\n        ```python {noqa=\"I001\"}\n        from pydantic_ai import Agent, RunContext, Tool\n\n        async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n            return f'{ctx.deps} {x} {y}'\n\n        agent = Agent('test', tools=[Tool(my_tool)])\n        ```\n\n        or with a custom prepare method:\n\n        ```python {noqa=\"I001\"}\n        from typing import Union\n\n        from pydantic_ai import Agent, RunContext, Tool\n        from pydantic_ai.tools import ToolDefinition\n\n        async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n            return f'{ctx.deps} {x} {y}'\n\n        async def prep_my_tool(\n            ctx: RunContext[int], tool_def: ToolDefinition\n        ) -> Union[ToolDefinition, None]:\n            # only register the tool if `deps == 42`\n            if ctx.deps == 42:\n                return tool_def\n\n        agent = Agent('test', tools=[Tool(my_tool, prepare=prep_my_tool)])\n        ```\n\n\n        Args:\n            function: The Python function to call as the tool.\n            takes_ctx: Whether the function takes a [`RunContext`][pydantic_ai.tools.RunContext] first argument,\n                this is inferred if unset.\n            max_retries: Maximum number of retries allowed for this tool, set to the agent default if `None`.\n            name: Name of the tool, inferred from the function if `None`.\n            description: Description of the tool, inferred from the function if `None`.\n            prepare: custom method to prepare the tool definition for each step, return `None` to omit this\n                tool from a given step. This is useful if you want to customise a tool at call time,\n                or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].\n            docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].\n                Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n            require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.\n            schema_generator: The JSON schema generator class to use. Defaults to `GenerateToolJsonSchema`.\n            strict: Whether to enforce", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-6c55dffdff9c514f2f88b60d9ec9f6c4", "__created_at__": 1744231651.420514, "content": "Func].\n            docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].\n                Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n            require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.\n            schema_generator: The JSON schema generator class to use. Defaults to `GenerateToolJsonSchema`.\n            strict: Whether to enforce JSON schema compliance (only affects OpenAI).\n                See [`ToolDefinition`][pydantic_ai.tools.ToolDefinition] for more info.\n        \"\"\"\n        if takes_ctx is None:\n            takes_ctx = _pydantic.takes_ctx(function)\n\n        f = _pydantic.function_schema(\n            function, takes_ctx, docstring_format, require_parameter_descriptions, schema_generator\n        )\n        self.function = function\n        self.takes_ctx = takes_ctx\n        self.max_retries = max_retries\n        self.name = name or function.__name__\n        self.description = description or f['description']\n        self.prepare = prepare\n        self.docstring_format = docstring_format\n        self.require_parameter_descriptions = require_parameter_descriptions\n        self.strict = strict\n        self._is_async = inspect.iscoroutinefunction(self.function)\n        self._single_arg_name = f['single_arg_name']\n        self._positional_fields = f['positional_fields']\n        self._var_positional_field = f['var_positional_field']\n        self._validator = f['validator']\n        self._base_parameters_json_schema = f['json_schema']\n\n    async def prepare_tool_def(self, ctx: RunContext[AgentDepsT]) -> ToolDefinition | None:\n        \"\"\"Get the tool definition.\n\n        By default, this method creates a tool definition, then either returns it, or calls `self.prepare`\n        if it's set.\n\n        Returns:\n            return a `ToolDefinition` or `None` if the tools should not be registered for this run.\n        \"\"\"\n        tool_def = ToolDefinition(\n            name=self.name,\n            description=self.description,\n            parameters_json_schema=self._base_parameters_json_schema,\n            strict=self.strict,\n        )\n        if self.prepare is not None:\n            return await self.prepare(ctx, tool_def)\n        else:\n            return tool_def\n\n    async def run(\n        self, message: _messages.ToolCallPart, run_context: RunContext[AgentDepsT], tracer: Tracer\n    ) -> _messages.ToolReturnPart | _messages.RetryPromptPart:\n        \"\"\"Run the tool function asynchronously.\n\n        This method wraps `_run` in an OpenTelemetry span.\n\n        See .\n        \"\"\"\n        span_attributes = {\n            'gen_ai.tool.name': self.name,\n            # NOTE: this means `gen_ai.tool.call.id` will be included even if it was generated by pydantic-ai\n            'gen_ai.tool.call.id': message.tool_call_id,\n            'tool_arguments': message.args_as_json_str(),\n            'logfire.msg': f'running tool: {self.name}',\n            # add the JSON schema so these attributes are formatted nicely in Logfire\n            'logfire.json_schema': json.dumps(\n                {\n                    'type': 'object',\n                    'properties': {\n                        'tool_arguments': {'type': 'object'},\n                        'gen_ai.tool.name': {},\n                        'gen_ai.tool.call.id': {},\n                    },\n                }\n            ),\n        }\n        with tracer.start_as_current_span('running tool', attributes=span_attributes):\n            return await self._run(message, run_context)\n\n    async def _run(\n        self, message: _messages.ToolCallPart, run_context: RunContext[AgentDepsT]\n    ) -> _messages.ToolReturnPart | _messages.RetryPromptPart:\n        try:\n            if isinstance(message.args, str):\n                args_dict = self._validator.validate_json(message.args)\n            else:\n                args_dict = self._validator.validate_python(message.args)\n        except ValidationError as e:\n            return self._on_error(e, message)\n\n        args, kwargs = self._call_args(args_dict, message, run_context)\n        try:\n            if self._is_async:\n                function = cast(Callable[[Any], Awaitable[str]], self.function)\n                response_content = await function(*args, **kwargs)\n            else:\n                function = cast(Callable[[Any], str], self.function)\n                response_content = await _utils.run_in_executor(function, *args, **kwargs)\n        except ModelRetry as e:\n            return self._on_error(e, message)\n\n        self.current_retry = 0\n        return _messages.ToolReturnPart(\n            tool_name=message.tool_name,\n            content=response_content,\n            tool_call_id=message.tool_call_id,\n        )\n\n    def _call_args(\n        self,\n        args_dict: dict[str, Any],\n        message: _messages.ToolCallPart,\n        run_context: RunContext[AgentDepsT],\n    ) -> tuple[list[Any], dict[str, Any]]:\n        if self._single_arg_name:\n            args_dict = {self._single_arg_name: args_dict}\n\n        ctx = dataclasses.replace(\n            run_context,\n            retry=self.current_retry,\n            tool_name=message.tool_name,\n            tool_call_id=message.tool_call_id,\n        )\n        args = [ctx] if self.takes_ctx else []\n        for positional_field in self._positional_fields:\n            args.append(args_dict.pop(positional_field))\n        if self._var_positional_field:\n            args.extend(args_dict.pop(self._var_positional_field))\n\n        return args, args_dict\n\n    def _on_error(\n        self, exc: ValidationError | ModelRetry, call_message: _messages.ToolCallPart\n    ) -> _messages.RetryPromptPart:\n        self.current_retry += 1", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3c16ab7b122ed13c1236f5062ceed453", "__created_at__": 1744231651.420514, "content": "self.takes_ctx else []\n        for positional_field in self._positional_fields:\n            args.append(args_dict.pop(positional_field))\n        if self._var_positional_field:\n            args.extend(args_dict.pop(self._var_positional_field))\n\n        return args, args_dict\n\n    def _on_error(\n        self, exc: ValidationError | ModelRetry, call_message: _messages.ToolCallPart\n    ) -> _messages.RetryPromptPart:\n        self.current_retry += 1\n        if self.max_retries is None or self.current_retry > self.max_retries:\n            raise UnexpectedModelBehavior(f'Tool exceeded max retries count of {self.max_retries}') from exc\n        else:\n            if isinstance(exc, ValidationError):\n                content = exc.errors(include_url=False)\n            else:\n                content = exc.message\n            return _messages.RetryPromptPart(\n                tool_name=call_message.tool_name,\n                content=content,\n                tool_call_id=call_message.tool_call_id,\n            )\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    function: ToolFuncEither[AgentDepsT],\n    *,\n    takes_ctx: bool | None = None,\n    max_retries: int | None = None,\n    name: str | None = None,\n    description: str | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = \"auto\",\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[\n        GenerateJsonSchema\n    ] = GenerateToolJsonSchema,\n    strict: bool | None = None\n)\n\n```\n\nCreate a new tool instance.\n\nExample usage:\n\n```\nfrom pydantic_ai import Agent, RunContext, Tool\n\nasync def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n    return f'{ctx.deps} {x} {y}'\n\nagent = Agent('test', tools=[Tool(my_tool)])\n\n```\n\nor with a custom prepare method:\n\n```\nfrom typing import Union\n\nfrom pydantic_ai import Agent, RunContext, Tool\nfrom pydantic_ai.tools import ToolDefinition\n\nasync def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n    return f'{ctx.deps} {x} {y}'\n\nasync def prep_my_tool(\n    ctx: RunContext[int], tool_def: ToolDefinition\n) -> Union[ToolDefinition, None]:\n    # only register the tool if `deps == 42`\n    if ctx.deps == 42:\n        return tool_def\n\nagent = Agent('test', tools=[Tool(my_tool, prepare=prep_my_tool)])\n\n```\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `function` | `ToolFuncEither[AgentDepsT]` | The Python function to call as the tool. | *required* |\n| `takes_ctx` | `bool | None` | Whether the function takes a `RunContext` first argument, this is inferred if unset. | `None` |\n| `max_retries` | `int | None` | Maximum number of retries allowed for this tool, set to the agent default if `None`. | `None` |\n| `name` | `str | None` | Name of the tool, inferred from the function if `None`. | `None` |\n| `description` | `str | None` | Description of the tool, inferred from the function if `None`. | `None` |\n| `prepare` | `ToolPrepareFunc[AgentDepsT] | None` | custom method to prepare the tool definition for each step, return `None` to omit this tool from a given step. This is useful if you want to customise a tool at call time, or omit it completely from a step. See `ToolPrepareFunc`. | `None` |\n| `docstring_format` | `DocstringFormat` | The format of the docstring, see `DocstringFormat`. Defaults to `'auto'`, such that the format is inferred from the structure of the docstring. | `'auto'` |\n| `require_parameter_descriptions` | `bool` | If True, raise an error if a parameter description is missing. Defaults to False. | `False` |\n| `schema_generator` | `type[GenerateJsonSchema]` | The JSON schema generator class to use. Defaults to `GenerateToolJsonSchema`. | `GenerateToolJsonSchema` |\n| `strict` | `bool | None` | Whether to enforce JSON schema compliance (only affects OpenAI). See `ToolDefinition` for more info. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n```\ndef __init__(\n    self,\n    function: ToolFuncEither[AgentDepsT],\n    *,\n    takes_ctx: bool | None = None,\n    max_retries: int | None = None,\n    name: str | None = None,\n    description: str | None = None,\n    prepare: ToolPrepareFunc[AgentDepsT] | None = None,\n    docstring_format: DocstringFormat = 'auto',\n    require_parameter_descriptions: bool = False,\n    schema_generator: type[GenerateJsonSchema] = GenerateToolJsonSchema,\n    strict: bool | None = None,\n):\n    \"\"\"Create a new tool instance.\n\n    Example usage:\n\n    ```python {noqa=\"I001\"}\n    from pydantic_ai import Agent, RunContext, Tool\n\n    async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n        return f'{ctx.deps} {x} {y}'\n\n    agent = Agent('test", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-8dbbf042d22f24ab47fdb61c76c368c8", "__created_at__": 1744231651.420514, "content": "[GenerateJsonSchema] = GenerateToolJsonSchema,\n    strict: bool | None = None,\n):\n    \"\"\"Create a new tool instance.\n\n    Example usage:\n\n    ```python {noqa=\"I001\"}\n    from pydantic_ai import Agent, RunContext, Tool\n\n    async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n        return f'{ctx.deps} {x} {y}'\n\n    agent = Agent('test', tools=[Tool(my_tool)])\n    ```\n\n    or with a custom prepare method:\n\n    ```python {noqa=\"I001\"}\n    from typing import Union\n\n    from pydantic_ai import Agent, RunContext, Tool\n    from pydantic_ai.tools import ToolDefinition\n\n    async def my_tool(ctx: RunContext[int], x: int, y: int) -> str:\n        return f'{ctx.deps} {x} {y}'\n\n    async def prep_my_tool(\n        ctx: RunContext[int], tool_def: ToolDefinition\n    ) -> Union[ToolDefinition, None]:\n        # only register the tool if `deps == 42`\n        if ctx.deps == 42:\n            return tool_def\n\n    agent = Agent('test', tools=[Tool(my_tool, prepare=prep_my_tool)])\n    ```\n\n\n    Args:\n        function: The Python function to call as the tool.\n        takes_ctx: Whether the function takes a [`RunContext`][pydantic_ai.tools.RunContext] first argument,\n            this is inferred if unset.\n        max_retries: Maximum number of retries allowed for this tool, set to the agent default if `None`.\n        name: Name of the tool, inferred from the function if `None`.\n        description: Description of the tool, inferred from the function if `None`.\n        prepare: custom method to prepare the tool definition for each step, return `None` to omit this\n            tool from a given step. This is useful if you want to customise a tool at call time,\n            or omit it completely from a step. See [`ToolPrepareFunc`][pydantic_ai.tools.ToolPrepareFunc].\n        docstring_format: The format of the docstring, see [`DocstringFormat`][pydantic_ai.tools.DocstringFormat].\n            Defaults to `'auto'`, such that the format is inferred from the structure of the docstring.\n        require_parameter_descriptions: If True, raise an error if a parameter description is missing. Defaults to False.\n        schema_generator: The JSON schema generator class to use. Defaults to `GenerateToolJsonSchema`.\n        strict: Whether to enforce JSON schema compliance (only affects OpenAI).\n            See [`ToolDefinition`][pydantic_ai.tools.ToolDefinition] for more info.\n    \"\"\"\n    if takes_ctx is None:\n        takes_ctx = _pydantic.takes_ctx(function)\n\n    f = _pydantic.function_schema(\n        function, takes_ctx, docstring_format, require_parameter_descriptions, schema_generator\n    )\n    self.function = function\n    self.takes_ctx = takes_ctx\n    self.max_retries = max_retries\n    self.name = name or function.__name__\n    self.description = description or f['description']\n    self.prepare = prepare\n    self.docstring_format = docstring_format\n    self.require_parameter_descriptions = require_parameter_descriptions\n    self.strict = strict\n    self._is_async = inspect.iscoroutinefunction(self.function)\n    self._single_arg_name = f['single_arg_name']\n    self._positional_fields = f['positional_fields']\n    self._var_positional_field = f['var_positional_field']\n    self._validator = f['validator']\n    self._base_parameters_json_schema = f['json_schema']\n\n```\n\n\n\n\n#### prepare\\_tool\\_def `async`\n\n```\nprepare_tool_def(\n    ctx: RunContext[AgentDepsT],\n) -> ToolDefinition | None\n\n```\n\nGet the tool definition.\n\nBy default, this method creates a tool definition, then either returns it, or calls `self.prepare`\nif it's set.\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `ToolDefinition | None` | return a `ToolDefinition` or `None` if the tools should not be registered for this run. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n```\nasync def prepare_tool_def(self, ctx: RunContext[AgentDepsT]) -> ToolDefinition | None:\n    \"\"\"Get the tool definition.\n\n    By default, this method creates a tool definition, then either returns it, or calls `self.prepare`\n    if it's set.\n\n    Returns:\n        return a `ToolDefinition` or `None` if the tools should not be registered for this run.\n    \"\"\"\n    tool_def = ToolDefinition(\n        name=self.name,\n        description=self.description,\n        parameters_json_schema=self._base_parameters_json_schema,\n        strict=self.strict,\n    )\n    if self.prepare is not None:\n        return await self.prepare(ctx, tool_def)\n    else:\n        return tool_def\n\n```\n\n\n\n\n#### run `async`\n\n```\nrun(\n    message: ToolCallPart,\n    run_context: RunContext[AgentDepsT],\n    tracer: Tracer,\n) -> ToolReturnPart | RetryPromptPart\n\n```\n\nRun the tool function asynchronously.\n\nThis method wraps `_run` in an OpenTelemetry span.\n\nSee <https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/#execute-tool-span>.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n```\nasync def run(\n    self, message: _messages.ToolCallPart, run_context: RunContext[AgentDepsT], tracer: Tracer\n) -> _messages.ToolReturnPart", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-8735fb00fad88f2638717e0e585c3210", "__created_at__": 1744231651.420514, "content": "the tool function asynchronously.\n\nThis method wraps `_run` in an OpenTelemetry span.\n\nSee <https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/#execute-tool-span>.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n```\nasync def run(\n    self, message: _messages.ToolCallPart, run_context: RunContext[AgentDepsT], tracer: Tracer\n) -> _messages.ToolReturnPart | _messages.RetryPromptPart:\n    \"\"\"Run the tool function asynchronously.\n\n    This method wraps `_run` in an OpenTelemetry span.\n\n    See .\n    \"\"\"\n    span_attributes = {\n        'gen_ai.tool.name': self.name,\n        # NOTE: this means `gen_ai.tool.call.id` will be included even if it was generated by pydantic-ai\n        'gen_ai.tool.call.id': message.tool_call_id,\n        'tool_arguments': message.args_as_json_str(),\n        'logfire.msg': f'running tool: {self.name}',\n        # add the JSON schema so these attributes are formatted nicely in Logfire\n        'logfire.json_schema': json.dumps(\n            {\n                'type': 'object',\n                'properties': {\n                    'tool_arguments': {'type': 'object'},\n                    'gen_ai.tool.name': {},\n                    'gen_ai.tool.call.id': {},\n                },\n            }\n        ),\n    }\n    with tracer.start_as_current_span('running tool', attributes=span_attributes):\n        return await self._run(message, run_context)\n\n```\n\n\n\n\n\n\n\n### ObjectJsonSchema `module-attribute`\n\n```\nObjectJsonSchema: TypeAlias = dict[str, Any]\n\n```\n\nType representing JSON schema of an object, e.g. where `\"type\": \"object\"`.\n\nThis type is used to define tools parameters (aka arguments) in ToolDefinition.\n\nWith PEP-728 this should be a TypedDict with `type: Literal['object']`, and `extra_parts=Any`\n\n\n\n### ToolDefinition `dataclass`\n\nDefinition of a tool passed to a model.\n\nThis is used for both function tools and result tools.\n\nSource code in `pydantic_ai_slim/pydantic_ai/tools.py`\n```\n@dataclass\nclass ToolDefinition:\n    \"\"\"Definition of a tool passed to a model.\n\n    This is used for both function tools and result tools.\n    \"\"\"\n\n    name: str\n    \"\"\"The name of the tool.\"\"\"\n\n    description: str\n    \"\"\"The description of the tool.\"\"\"\n\n    parameters_json_schema: ObjectJsonSchema\n    \"\"\"The JSON schema for the tool's parameters.\"\"\"\n\n    outer_typed_dict_key: str | None = None\n    \"\"\"The key in the outer [TypedDict] that wraps a result tool.\n\n    This will only be set for result tools which don't have an `object` JSON schema.\n    \"\"\"\n\n    strict: bool | None = None\n    \"\"\"Whether to enforce (vendor-specific) strict JSON schema validation for tool calls.\n\n    Setting this to `True` while using a supported model generally imposes some restrictions on the tool's JSON schema\n    in exchange for guaranteeing the API responses strictly match that schema.\n\n    When `False`, the model may be free to generate other properties or types (depending on the vendor).\n    When `None` (the default), the value will be inferred based on the compatibility of the parameters_json_schema.\n\n    Note: this is currently only supported by OpenAI models.\n    \"\"\"\n\n```\n\n\n#### name `instance-attribute`\n\n```\nname: str\n\n```\n\nThe name of the tool.\n\n\n\n#### description `instance-attribute`\n\n```\ndescription: str\n\n```\n\nThe description of the tool.\n\n\n\n#### parameters\\_json\\_schema `instance-attribute`\n\n```\nparameters_json_schema: ObjectJsonSchema\n\n```\n\nThe JSON schema for the tool's parameters.\n\n\n\n#### outer\\_typed\\_dict\\_key `class-attribute` `instance-attribute`\n\n```\nouter_typed_dict_key: str | None = None\n\n```\n\nThe key in the outer [TypedDict] that wraps a result tool.\n\nThis will only be set for result tools which don't have an `object` JSON schema.\n\n\n\n#### strict `class-attribute` `instance-attribute`\n\n```\nstrict: bool | None = None\n\n```\n\nWhether to enforce (vendor-specific) strict JSON schema validation for tool calls.\n\nSetting this to `True` while using a supported model generally imposes some restrictions on the tool's JSON schema\nin exchange for guaranteeing the API responses strictly match that schema.\n\nWhen `False`, the model may be free to generate other properties or types (depending on the vendor).\nWhen `None` (the default), the value will be inferred based on the compatibility of the parameters\\_json\\_schema.\n\nNote: this is currently only supported by OpenAI models.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.usage`\n===================\n\n### Usage `dataclass`\n\nLLM usage associated with a request or run.\n\nResponsibility for calculating usage is on the model; PydanticAI simply sums the usage information across requests.\n\nYou'll need to look up the documentation of the model you're using to convert usage to monetary costs.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\n@dataclass\nclass Usage:\n    \"\"\"LLM usage associated with a request or run.\n\n    Responsibility for calculating usage is on the model; PydanticAI simply sums the usage information across requests.\n\n    You'll need to look up the documentation of the model you're using to convert usage to monetary costs.\n    \"\"\"\n\n    requests: int = 0\n    \"\"\"Number of requests made to the LLM API.\"\"\"\n    request_tokens: int | None = None\n    \"\"\"Tokens used in processing requests.\"\"\"\n    response_tokens: int | None = None\n    \"\"\"Tokens used in generating responses.\"\"\"\n    total_tokens:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-5f42fa22c7c2c65ec3a39c77ddb963a0", "__created_at__": 1744231651.420514, "content": "usage is on the model; PydanticAI simply sums the usage information across requests.\n\n    You'll need to look up the documentation of the model you're using to convert usage to monetary costs.\n    \"\"\"\n\n    requests: int = 0\n    \"\"\"Number of requests made to the LLM API.\"\"\"\n    request_tokens: int | None = None\n    \"\"\"Tokens used in processing requests.\"\"\"\n    response_tokens: int | None = None\n    \"\"\"Tokens used in generating responses.\"\"\"\n    total_tokens: int | None = None\n    \"\"\"Total tokens used in the whole run, should generally be equal to `request_tokens + response_tokens`.\"\"\"\n    details: dict[str, int] | None = None\n    \"\"\"Any extra details returned by the model.\"\"\"\n\n    def incr(self, incr_usage: Usage, *, requests: int = 0) -> None:\n        \"\"\"Increment the usage in place.\n\n        Args:\n            incr_usage: The usage to increment by.\n            requests: The number of requests to increment by in addition to `incr_usage.requests`.\n        \"\"\"\n        self.requests += requests\n        for f in 'requests', 'request_tokens', 'response_tokens', 'total_tokens':\n            self_value = getattr(self, f)\n            other_value = getattr(incr_usage, f)\n            if self_value is not None or other_value is not None:\n                setattr(self, f, (self_value or 0) + (other_value or 0))\n\n        if incr_usage.details:\n            self.details = self.details or {}\n            for key, value in incr_usage.details.items():\n                self.details[key] = self.details.get(key, 0) + value\n\n    def __add__(self, other: Usage) -> Usage:\n        \"\"\"Add two Usages together.\n\n        This is provided so it's trivial to sum usage information from multiple requests and runs.\n        \"\"\"\n        new_usage = copy(self)\n        new_usage.incr(other)\n        return new_usage\n\n    def opentelemetry_attributes(self) -> dict[str, int]:\n        \"\"\"Get the token limits as OpenTelemetry attributes.\"\"\"\n        result = {\n            'gen_ai.usage.input_tokens': self.request_tokens,\n            'gen_ai.usage.output_tokens': self.response_tokens,\n        }\n        for key, value in (self.details or {}).items():\n            result[f'gen_ai.usage.details.{key}'] = value\n        return {k: v for k, v in result.items() if v}\n\n```\n\n\n#### requests `class-attribute` `instance-attribute`\n\n```\nrequests: int = 0\n\n```\n\nNumber of requests made to the LLM API.\n\n\n\n#### request\\_tokens `class-attribute` `instance-attribute`\n\n```\nrequest_tokens: int | None = None\n\n```\n\nTokens used in processing requests.\n\n\n\n#### response\\_tokens `class-attribute` `instance-attribute`\n\n```\nresponse_tokens: int | None = None\n\n```\n\nTokens used in generating responses.\n\n\n\n#### total\\_tokens `class-attribute` `instance-attribute`\n\n```\ntotal_tokens: int | None = None\n\n```\n\nTotal tokens used in the whole run, should generally be equal to `request_tokens + response_tokens`.\n\n\n\n#### details `class-attribute` `instance-attribute`\n\n```\ndetails: dict[str, int] | None = None\n\n```\n\nAny extra details returned by the model.\n\n\n\n#### incr\n\n```\nincr(incr_usage: Usage, *, requests: int = 0) -> None\n\n```\n\nIncrement the usage in place.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `incr_usage` | `Usage` | The usage to increment by. | *required* |\n| `requests` | `int` | The number of requests to increment by in addition to `incr_usage.requests`. | `0` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\ndef incr(self, incr_usage: Usage, *, requests: int = 0) -> None:\n    \"\"\"Increment the usage in place.\n\n    Args:\n        incr_usage: The usage to increment by.\n        requests: The number of requests to increment by in addition to `incr_usage.requests`.\n    \"\"\"\n    self.requests += requests\n    for f in 'requests', 'request_tokens', 'response_tokens', 'total_tokens':\n        self_value = getattr(self, f)\n        other_value = getattr(incr_usage, f)\n        if self_value is not None or other_value is not None:\n            setattr(self, f, (self_value or 0) + (other_value or 0))\n\n    if incr_usage.details:\n        self.details = self.details or {}\n        for key, value in incr_usage.details.items():\n            self.details[key] = self.details.get(key, 0) + value\n\n```\n\n\n\n\n#### \\_\\_add\\_\\_\n\n```\n__add__(other: Usage) -> Usage\n\n```\n\nAdd two Usages together.\n\nThis is provided so it's trivial to sum usage information from multiple requests and runs.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\ndef __add__(self, other: Usage) -> Usage:\n    \"\"\"Add two Usages together.\n\n    This is provided so it's trivial to sum usage information from multiple requests and runs.\n    \"\"\"\n    new_usage = copy(self)\n    new_usage.incr(other)\n    return new_usage\n\n```\n\n\n\n\n#### opentelemetry\\_attributes\n\n```\nopentelemetry_attributes() -> dict[str, int]\n\n```\n\nGet the token limits as OpenTelemetry attributes.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\ndef opentelemetry_attributes(self) -> dict[str, int]:\n    \"\"\"Get the token limits as Open", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-283bc165fd3b54e2f1d7d98b00bc1b16", "__created_at__": 1744231651.420514, "content": ".\n    \"\"\"\n    new_usage = copy(self)\n    new_usage.incr(other)\n    return new_usage\n\n```\n\n\n\n\n#### opentelemetry\\_attributes\n\n```\nopentelemetry_attributes() -> dict[str, int]\n\n```\n\nGet the token limits as OpenTelemetry attributes.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\ndef opentelemetry_attributes(self) -> dict[str, int]:\n    \"\"\"Get the token limits as OpenTelemetry attributes.\"\"\"\n    result = {\n        'gen_ai.usage.input_tokens': self.request_tokens,\n        'gen_ai.usage.output_tokens': self.response_tokens,\n    }\n    for key, value in (self.details or {}).items():\n        result[f'gen_ai.usage.details.{key}'] = value\n    return {k: v for k, v in result.items() if v}\n\n```\n\n\n\n\n\n\n\n### UsageLimits `dataclass`\n\nLimits on model usage.\n\nThe request count is tracked by pydantic\\_ai, and the request limit is checked before each request to the model.\nToken counts are provided in responses from the model, and the token limits are checked after each response.\n\nEach of the limits can be set to `None` to disable that limit.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\n@dataclass\nclass UsageLimits:\n    \"\"\"Limits on model usage.\n\n    The request count is tracked by pydantic_ai, and the request limit is checked before each request to the model.\n    Token counts are provided in responses from the model, and the token limits are checked after each response.\n\n    Each of the limits can be set to `None` to disable that limit.\n    \"\"\"\n\n    request_limit: int | None = 50\n    \"\"\"The maximum number of requests allowed to the model.\"\"\"\n    request_tokens_limit: int | None = None\n    \"\"\"The maximum number of tokens allowed in requests to the model.\"\"\"\n    response_tokens_limit: int | None = None\n    \"\"\"The maximum number of tokens allowed in responses from the model.\"\"\"\n    total_tokens_limit: int | None = None\n    \"\"\"The maximum number of tokens allowed in requests and responses combined.\"\"\"\n\n    def has_token_limits(self) -> bool:\n        \"\"\"Returns `True` if this instance places any limits on token counts.\n\n        If this returns `False`, the `check_tokens` method will never raise an error.\n\n        This is useful because if we have token limits, we need to check them after receiving each streamed message.\n        If there are no limits, we can skip that processing in the streaming response iterator.\n        \"\"\"\n        return any(\n            limit is not None\n            for limit in (self.request_tokens_limit, self.response_tokens_limit, self.total_tokens_limit)\n        )\n\n    def check_before_request(self, usage: Usage) -> None:\n        \"\"\"Raises a `UsageLimitExceeded` exception if the next request would exceed the request_limit.\"\"\"\n        request_limit = self.request_limit\n        if request_limit is not None and usage.requests >= request_limit:\n            raise UsageLimitExceeded(f'The next request would exceed the request_limit of {request_limit}')\n\n    def check_tokens(self, usage: Usage) -> None:\n        \"\"\"Raises a `UsageLimitExceeded` exception if the usage exceeds any of the token limits.\"\"\"\n        request_tokens = usage.request_tokens or 0\n        if self.request_tokens_limit is not None and request_tokens > self.request_tokens_limit:\n            raise UsageLimitExceeded(\n                f'Exceeded the request_tokens_limit of {self.request_tokens_limit} ({request_tokens=})'\n            )\n\n        response_tokens = usage.response_tokens or 0\n        if self.response_tokens_limit is not None and response_tokens > self.response_tokens_limit:\n            raise UsageLimitExceeded(\n                f'Exceeded the response_tokens_limit of {self.response_tokens_limit} ({response_tokens=})'\n            )\n\n        total_tokens = usage.total_tokens or 0\n        if self.total_tokens_limit is not None and total_tokens > self.total_tokens_limit:\n            raise UsageLimitExceeded(f'Exceeded the total_tokens_limit of {self.total_tokens_limit} ({total_tokens=})')\n\n```\n\n\n#### request\\_limit `class-attribute` `instance-attribute`\n\n```\nrequest_limit: int | None = 50\n\n```\n\nThe maximum number of requests allowed to the model.\n\n\n\n#### request\\_tokens\\_limit `class-attribute` `instance-attribute`\n\n```\nrequest_tokens_limit: int | None = None\n\n```\n\nThe maximum number of tokens allowed in requests to the model.\n\n\n\n#### response\\_tokens\\_limit `class-attribute` `instance-attribute`\n\n```\nresponse_tokens_limit: int | None = None\n\n```\n\nThe maximum number of tokens allowed in responses from the model.\n\n\n\n#### total\\_tokens\\_limit `class-attribute` `instance-attribute`\n\n```\ntotal_tokens_limit: int | None = None\n\n```\n\nThe maximum number of tokens allowed in requests and responses combined.\n\n\n\n#### has\\_token\\_limits\n\n```\nhas_token_limits() -> bool\n\n```\n\nReturns `True` if this instance places any limits on token counts.\n\nIf this returns `False`, the `check_tokens` method will never raise an error.\n\nThis is useful because if we have token limits, we need to check them after receiving each streamed message.\nIf there are no limits, we can skip that processing in the streaming response iterator.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\ndef has_token_limits(self) -> bool:\n    \"\"\"Returns `True` if this instance places any limits on token counts.\n\n    If this returns `False`, the `check_tokens` method will never raise an error.\n\n    This is useful because if we have token limits, we need to check them after receiving each streamed message", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc", "__created_at__": 1744231651.420514, "content": "are no limits, we can skip that processing in the streaming response iterator.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\ndef has_token_limits(self) -> bool:\n    \"\"\"Returns `True` if this instance places any limits on token counts.\n\n    If this returns `False`, the `check_tokens` method will never raise an error.\n\n    This is useful because if we have token limits, we need to check them after receiving each streamed message.\n    If there are no limits, we can skip that processing in the streaming response iterator.\n    \"\"\"\n    return any(\n        limit is not None\n        for limit in (self.request_tokens_limit, self.response_tokens_limit, self.total_tokens_limit)\n    )\n\n```\n\n\n\n\n#### check\\_before\\_request\n\n```\ncheck_before_request(usage: Usage) -> None\n\n```\n\nRaises a `UsageLimitExceeded` exception if the next request would exceed the request\\_limit.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\ndef check_before_request(self, usage: Usage) -> None:\n    \"\"\"Raises a `UsageLimitExceeded` exception if the next request would exceed the request_limit.\"\"\"\n    request_limit = self.request_limit\n    if request_limit is not None and usage.requests >= request_limit:\n        raise UsageLimitExceeded(f'The next request would exceed the request_limit of {request_limit}')\n\n```\n\n\n\n\n#### check\\_tokens\n\n```\ncheck_tokens(usage: Usage) -> None\n\n```\n\nRaises a `UsageLimitExceeded` exception if the usage exceeds any of the token limits.\n\nSource code in `pydantic_ai_slim/pydantic_ai/usage.py`\n```\ndef check_tokens(self, usage: Usage) -> None:\n    \"\"\"Raises a `UsageLimitExceeded` exception if the usage exceeds any of the token limits.\"\"\"\n    request_tokens = usage.request_tokens or 0\n    if self.request_tokens_limit is not None and request_tokens > self.request_tokens_limit:\n        raise UsageLimitExceeded(\n            f'Exceeded the request_tokens_limit of {self.request_tokens_limit} ({request_tokens=})'\n        )\n\n    response_tokens = usage.response_tokens or 0\n    if self.response_tokens_limit is not None and response_tokens > self.response_tokens_limit:\n        raise UsageLimitExceeded(\n            f'Exceeded the response_tokens_limit of {self.response_tokens_limit} ({response_tokens=})'\n        )\n\n    total_tokens = usage.total_tokens or 0\n    if self.total_tokens_limit is not None and total_tokens > self.total_tokens_limit:\n        raise UsageLimitExceeded(f'Exceeded the total_tokens_limit of {self.total_tokens_limit} ({total_tokens=})')\n\n```\n\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.anthropic`\n==============================\n\nSetup\n-----\n\nFor details on how to set up authentication with this model, see [model configuration for Anthropic](../../../models/#anthropic).\n\n### LatestAnthropicModelNames `module-attribute`\n\n```\nLatestAnthropicModelNames = Literal[\n    \"claude-3-7-sonnet-latest\",\n    \"claude-3-5-haiku-latest\",\n    \"claude-3-5-sonnet-latest\",\n    \"claude-3-opus-latest\",\n]\n\n```\n\nLatest Anthropic models.\n\n\n\n### AnthropicModelName `module-attribute`\n\n```\nAnthropicModelName = Union[str, LatestAnthropicModelNames]\n\n```\n\nPossible Anthropic model names.\n\nSince Anthropic supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [the Anthropic docs](https://docs.anthropic.com/en/docs/about-claude/models) for a full list.\n\n\n\n### AnthropicModelSettings\n\nBases: `ModelSettings`\n\nSettings used for an Anthropic model request.\n\nALL FIELDS MUST BE `anthropic_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n```\nclass AnthropicModelSettings(ModelSettings):\n    \"\"\"Settings used for an Anthropic model request.\n\n    ALL FIELDS MUST BE `anthropic_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n    \"\"\"\n\n    anthropic_metadata: MetadataParam\n    \"\"\"An object describing metadata about the request.\n\n    Contains `user_id`, an external identifier for the user who is associated with the request.\"\"\"\n\n```\n\n\n#### anthropic\\_metadata `instance-attribute`\n\n```\nanthropic_metadata: MetadataParam\n\n```\n\nAn object describing metadata about the request.\n\nContains `user_id`, an external identifier for the user who is associated with the request.\n\n\n\n\n\n\n### AnthropicModel `dataclass`\n\nBases: `Model`\n\nA model that uses the Anthropic API.\n\nInternally, this uses the [Anthropic Python client](https://github.com/anthropics/anthropic-sdk-python) to interact with the API.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nNote\n\nThe `AnthropicModel` class does not yet support streaming responses.\nWe anticipate adding support for streaming responses in a near-term future release.\n\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n```\n@dataclass(init=False)\nclass AnthropicModel(Model):\n    \"\"\"A model that uses the Anthropic API.\n\n    Internally, this uses the [Anthropic Python client](https://github.com/anthropics/anthropic-sdk-python) to interact with the API.\n\n    Apart from `__init__`, all methods are private or match those of the base class.\n\n    !!! note\n        The `AnthropicModel` class does not yet support streaming responses.\n        We anticipate adding support for streaming responses in a near-term future", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9655d08afefd464282f89b643272e0b6", "__created_at__": 1744231651.420514, "content": "ropicModel(Model):\n    \"\"\"A model that uses the Anthropic API.\n\n    Internally, this uses the [Anthropic Python client](https://github.com/anthropics/anthropic-sdk-python) to interact with the API.\n\n    Apart from `__init__`, all methods are private or match those of the base class.\n\n    !!! note\n        The `AnthropicModel` class does not yet support streaming responses.\n        We anticipate adding support for streaming responses in a near-term future release.\n    \"\"\"\n\n    client: AsyncAnthropic = field(repr=False)\n\n    _model_name: AnthropicModelName = field(repr=False)\n    _system: str = field(default='anthropic', repr=False)\n\n    def __init__(\n        self,\n        model_name: AnthropicModelName,\n        *,\n        provider: Literal['anthropic'] | Provider[AsyncAnthropic] = 'anthropic',\n    ):\n        \"\"\"Initialize an Anthropic model.\n\n        Args:\n            model_name: The name of the Anthropic model to use. List of model names available\n                [here](https://docs.anthropic.com/en/docs/about-claude/models).\n            provider: The provider to use for the Anthropic API. Can be either the string 'anthropic' or an\n                instance of `Provider[AsyncAnthropic]`. If not provided, the other parameters will be used.\n        \"\"\"\n        self._model_name = model_name\n\n        if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self.client = provider.client\n\n    @property\n    def base_url(self) -> str:\n        return str(self.client.base_url)\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, usage.Usage]:\n        check_allow_model_requests()\n        response = await self._messages_create(\n            messages, False, cast(AnthropicModelSettings, model_settings or {}), model_request_parameters\n        )\n        return self._process_response(response), _map_usage(response)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        check_allow_model_requests()\n        response = await self._messages_create(\n            messages, True, cast(AnthropicModelSettings, model_settings or {}), model_request_parameters\n        )\n        async with response:\n            yield await self._process_streamed_response(response)\n\n    @property\n    def model_name(self) -> AnthropicModelName:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n    @overload\n    async def _messages_create(\n        self,\n        messages: list[ModelMessage],\n        stream: Literal[True],\n        model_settings: AnthropicModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncStream[RawMessageStreamEvent]:\n        pass\n\n    @overload\n    async def _messages_create(\n        self,\n        messages: list[ModelMessage],\n        stream: Literal[False],\n        model_settings: AnthropicModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AnthropicMessage:\n        pass\n\n    async def _messages_create(\n        self,\n        messages: list[ModelMessage],\n        stream: bool,\n        model_settings: AnthropicModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AnthropicMessage | AsyncStream[RawMessageStreamEvent]:\n        # standalone function to make it easier to override\n        tools = self._get_tools(model_request_parameters)\n        tool_choice: ToolChoiceParam | None\n\n        if not tools:\n            tool_choice = None\n        else:\n            if not model_request_parameters.allow_text_result:\n                tool_choice = {'type': 'any'}\n            else:\n                tool_choice = {'type': 'auto'}\n\n            if (allow_parallel_tool_calls := model_settings.get('parallel_tool_calls')) is not None:\n                tool_choice['disable_parallel_tool_use'] = not allow_parallel_tool_calls\n\n        system_prompt, anthropic_messages = await self._map_message(messages)\n\n        try:\n            return await self.client.messages.create(\n                max_tokens=model_settings.get('max_tokens', 1024),\n                system=system_prompt or NOT_GIVEN,\n                messages=anthropic_messages,\n                model=self._model_name,\n                tools=tools or NOT_GIVEN,\n                tool_choice=tool_choice or NOT_GIVEN,\n                stream=stream,\n                stop_sequences=model_settings.get('stop_sequences', NOT_GIVEN),\n                temperature=model_settings.get('temperature', NOT_GIVEN),\n                top_p=model_settings.get('top_p', NOT_GIVEN),\n                timeout=model_settings.get('timeout', NOT_GIVEN),\n                metadata=model_settings.get('anthropic_metadata', NOT_GIVEN),\n                extra_headers={'User-Agent': get_user_agent()},\n            )\n        except APIStatusError as e:\n            if (status_code := e.status_code) >= 400:\n                raise ModelHTTPError(status_code=status_code, model_name=self.model_name, body=e.body) from e\n            raise\n\n    def _process_response(self, response: AnthropicMessage) -> ModelResponse:\n        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"\n        items: list[ModelResponsePart] = []\n        for item in response.content:\n            if isinstance(item, TextBlock):\n                items.append(TextPart(content=item.text))\n            else:\n                assert isinstance(item, ToolUseBlock), 'unexpected item type'\n                items.append(\n                    ToolCallPart(\n                        tool_name=item.name", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-06cf04d118cac634438fc98127ca6670", "__created_at__": 1744231651.420514, "content": "def _process_response(self, response: AnthropicMessage) -> ModelResponse:\n        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"\n        items: list[ModelResponsePart] = []\n        for item in response.content:\n            if isinstance(item, TextBlock):\n                items.append(TextPart(content=item.text))\n            else:\n                assert isinstance(item, ToolUseBlock), 'unexpected item type'\n                items.append(\n                    ToolCallPart(\n                        tool_name=item.name,\n                        args=cast(dict[str, Any], item.input),\n                        tool_call_id=item.id,\n                    )\n                )\n\n        return ModelResponse(items, model_name=response.model)\n\n    async def _process_streamed_response(self, response: AsyncStream[RawMessageStreamEvent]) -> StreamedResponse:\n        peekable_response = _utils.PeekableAsyncStream(response)\n        first_chunk = await peekable_response.peek()\n        if isinstance(first_chunk, _utils.Unset):\n            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')\n\n        # Since Anthropic doesn't provide a timestamp in the message, we'll use the current time\n        timestamp = datetime.now(tz=timezone.utc)\n        return AnthropicStreamedResponse(\n            _model_name=self._model_name, _response=peekable_response, _timestamp=timestamp\n        )\n\n    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[ToolParam]:\n        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]\n        if model_request_parameters.result_tools:\n            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]\n        return tools\n\n    async def _map_message(self, messages: list[ModelMessage]) -> tuple[str, list[MessageParam]]:\n        \"\"\"Just maps a `pydantic_ai.Message` to a `anthropic.types.MessageParam`.\"\"\"\n        system_prompt: str = ''\n        anthropic_messages: list[MessageParam] = []\n        for m in messages:\n            if isinstance(m, ModelRequest):\n                user_content_params: list[\n                    ToolResultBlockParam | TextBlockParam | ImageBlockParam | DocumentBlockParam\n                ] = []\n                for request_part in m.parts:\n                    if isinstance(request_part, SystemPromptPart):\n                        system_prompt += request_part.content\n                    elif isinstance(request_part, UserPromptPart):\n                        async for content in self._map_user_prompt(request_part):\n                            user_content_params.append(content)\n                    elif isinstance(request_part, ToolReturnPart):\n                        tool_result_block_param = ToolResultBlockParam(\n                            tool_use_id=_guard_tool_call_id(t=request_part),\n                            type='tool_result',\n                            content=request_part.model_response_str(),\n                            is_error=False,\n                        )\n                        user_content_params.append(tool_result_block_param)\n                    elif isinstance(request_part, RetryPromptPart):\n                        if request_part.tool_name is None:\n                            retry_param = TextBlockParam(type='text', text=request_part.model_response())\n                        else:\n                            retry_param = ToolResultBlockParam(\n                                tool_use_id=_guard_tool_call_id(t=request_part),\n                                type='tool_result',\n                                content=request_part.model_response(),\n                                is_error=True,\n                            )\n                        user_content_params.append(retry_param)\n                anthropic_messages.append(MessageParam(role='user', content=user_content_params))\n            elif isinstance(m, ModelResponse):\n                assistant_content_params: list[TextBlockParam | ToolUseBlockParam] = []\n                for response_part in m.parts:\n                    if isinstance(response_part, TextPart):\n                        assistant_content_params.append(TextBlockParam(text=response_part.content, type='text'))\n                    else:\n                        tool_use_block_param = ToolUseBlockParam(\n                            id=_guard_tool_call_id(t=response_part),\n                            type='tool_use',\n                            name=response_part.tool_name,\n                            input=response_part.args_as_dict(),\n                        )\n                        assistant_content_params.append(tool_use_block_param)\n                anthropic_messages.append(MessageParam(role='assistant', content=assistant_content_params))\n            else:\n                assert_never(m)\n        return system_prompt, anthropic_messages\n\n    @staticmethod\n    async def _map_user_prompt(\n        part: UserPromptPart,\n    ) -> AsyncGenerator[ImageBlockParam | TextBlockParam | DocumentBlockParam]:\n        if isinstance(part.content, str):\n            yield TextBlockParam(text=part.content, type='text')\n        else:\n            for item in part.content:\n                if isinstance(item, str):\n                    yield TextBlockParam(text=item, type='text')\n                elif isinstance(item, BinaryContent):\n                    if item.is_image:\n                        yield ImageBlockParam(\n                            source={'data': io.BytesIO(item.data), 'media_type': item.media_type, 'type': 'base64'},  # type: ignore\n                            type='image',\n                        )\n                    elif item.media_type == 'application/pdf':\n                        yield DocumentBlockParam(\n                            source=Base64PDFSourceParam(\n                                data=io.BytesIO(item.data),\n                                media_type='application/pdf',\n                                type='base64',\n                            ),\n                            type='document',\n                        )\n                    else:\n                        raise RuntimeError('Only images and PDFs are supported for binary content')\n                elif isinstance(item, ImageUrl):\n                    yield ImageBlockParam(source={'type': 'url', 'url': item.url}, type='image')\n                elif isinstance(item, DocumentUrl):\n                    if item.media_type == 'application/pdf':\n                        yield DocumentBlockParam(source={'url': item.url, 'type': 'url'}, type='document')\n                    elif item.media_type == 'text/plain':\n                        response = await cached_async_http_client().get(item.url)\n                        response.raise_for_status()\n                        yield DocumentBlockParam(\n                            source=PlainTextSourceParam(data=response.text, media_type=item.media_type, type='text'),\n                            type='document',\n                        )\n                    else:  # pragma: no cover\n                        raise Runtime", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-4a4ce9bc8714c4dfcb4875dd52609356", "__created_at__": 1744231651.420514, "content": "/pdf':\n                        yield DocumentBlockParam(source={'url': item.url, 'type': 'url'}, type='document')\n                    elif item.media_type == 'text/plain':\n                        response = await cached_async_http_client().get(item.url)\n                        response.raise_for_status()\n                        yield DocumentBlockParam(\n                            source=PlainTextSourceParam(data=response.text, media_type=item.media_type, type='text'),\n                            type='document',\n                        )\n                    else:  # pragma: no cover\n                        raise RuntimeError(f'Unsupported media type: {item.media_type}')\n                else:\n                    raise RuntimeError(f'Unsupported content type: {type(item)}')\n\n    @staticmethod\n    def _map_tool_definition(f: ToolDefinition) -> ToolParam:\n        return {\n            'name': f.name,\n            'description': f.description,\n            'input_schema': f.parameters_json_schema,\n        }\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: AnthropicModelName,\n    *,\n    provider: (\n        Literal[\"anthropic\"] | Provider[AsyncAnthropic]\n    ) = \"anthropic\"\n)\n\n```\n\nInitialize an Anthropic model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `AnthropicModelName` | The name of the Anthropic model to use. List of model names available [here](https://docs.anthropic.com/en/docs/about-claude/models). | *required* |\n| `provider` | `Literal['anthropic'] | Provider[AsyncAnthropic]` | The provider to use for the Anthropic API. Can be either the string 'anthropic' or an instance of `Provider[AsyncAnthropic]`. If not provided, the other parameters will be used. | `'anthropic'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n```\ndef __init__(\n    self,\n    model_name: AnthropicModelName,\n    *,\n    provider: Literal['anthropic'] | Provider[AsyncAnthropic] = 'anthropic',\n):\n    \"\"\"Initialize an Anthropic model.\n\n    Args:\n        model_name: The name of the Anthropic model to use. List of model names available\n            [here](https://docs.anthropic.com/en/docs/about-claude/models).\n        provider: The provider to use for the Anthropic API. Can be either the string 'anthropic' or an\n            instance of `Provider[AsyncAnthropic]`. If not provided, the other parameters will be used.\n    \"\"\"\n    self._model_name = model_name\n\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self.client = provider.client\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: AnthropicModelName\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n### AnthropicStreamedResponse `dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for Anthropic models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/anthropic.py`\n```\n@dataclass\nclass AnthropicStreamedResponse(StreamedResponse):\n    \"\"\"Implementation of `StreamedResponse` for Anthropic models.\"\"\"\n\n    _model_name: AnthropicModelName\n    _response: AsyncIterable[RawMessageStreamEvent]\n    _timestamp: datetime\n\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        current_block: ContentBlock | None = None\n        current_json: str = ''\n\n        async for event in self._response:\n            self._usage += _map_usage(event)\n\n            if isinstance(event, RawContentBlockStartEvent):\n                current_block = event.content_block\n                if isinstance(current_block, TextBlock) and current_block.text:\n                    yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=current_block.text)\n                elif isinstance(current_block, ToolUseBlock):\n                    maybe_event = self._parts_manager.handle_tool_call_delta(\n                        vendor_part_id=current_block.id,\n                        tool_name=current_block.name,\n                        args=cast(dict[str, Any], current_block.input),\n                        tool_call_id=current_block.id,\n                    )\n                    if maybe_event is not None:\n                        yield maybe_event\n\n            elif isinstance(event, RawContentBlockDeltaEvent):\n                if isinstance(event.delta, TextDelta):\n                    yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=event.delta.text)\n                elif (\n                    current_block and event.delta.type == 'input_json_delta' and isinstance(current_block, ToolUseBlock)\n                ):\n                    # Try to parse the JSON immediately, otherwise cache the value for later. This handles\n                    # cases where the JSON is not currently valid but will be valid once we stream more tokens.\n                    try:\n                        parsed_args = json_loads(current_json + event.delta.partial_json)\n                        current_json = ''\n                    except JSONDecodeError:\n                        current_json += event.delta.partial_json\n                        continue\n\n                    # For tool calls, we need to handle partial JSON updates\n                    maybe_event = self._parts_manager.handle_tool_call_delta(\n                        vendor_part_id=current_block.id,\n                        tool_name='',\n                        args=parsed_args,\n                        tool_call_id=current_block.id,\n                    )\n                    if maybe_event is not None:\n                        yield maybe_event\n\n            elif isinstance(event, (RawContentBlockStopEvent, RawMessageStopEvent)):\n                current_block = None\n\n    @property\n    def model_name(self) -> AnthropicModelName:\n        \"\"\"Get the model name of the response.\"\"\"\n        return self._model_name\n\n    @property\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        return self", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a9de914755fc3f23e749c15911fa6734", "__created_at__": 1744231651.420514, "content": "_id=current_block.id,\n                    )\n                    if maybe_event is not None:\n                        yield maybe_event\n\n            elif isinstance(event, (RawContentBlockStopEvent, RawMessageStopEvent)):\n                current_block = None\n\n    @property\n    def model_name(self) -> AnthropicModelName:\n        \"\"\"Get the model name of the response.\"\"\"\n        return self._model_name\n\n    @property\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        return self._timestamp\n\n```\n\n\n#### model\\_name `property`\n\n```\nmodel_name: AnthropicModelName\n\n```\n\nGet the model name of the response.\n\n\n\n#### timestamp `property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models`\n====================\n\nLogic related to making requests to an LLM.\n\nThe aim here is to make a common interface for different LLMs, so that the rest of the code can be agnostic to the\nspecific LLM being used.\n\n### KnownModelName `module-attribute`\n\n```\nKnownModelName = TypeAliasType(\n    \"KnownModelName\",\n    Literal[\n        \"anthropic:claude-3-7-sonnet-latest\",\n        \"anthropic:claude-3-5-haiku-latest\",\n        \"anthropic:claude-3-5-sonnet-latest\",\n        \"anthropic:claude-3-opus-latest\",\n        \"claude-3-7-sonnet-latest\",\n        \"claude-3-5-haiku-latest\",\n        \"bedrock:amazon.titan-tg1-large\",\n        \"bedrock:amazon.titan-text-lite-v1\",\n        \"bedrock:amazon.titan-text-express-v1\",\n        \"bedrock:us.amazon.nova-pro-v1:0\",\n        \"bedrock:us.amazon.nova-lite-v1:0\",\n        \"bedrock:us.amazon.nova-micro-v1:0\",\n        \"bedrock:anthropic.claude-3-5-sonnet-20241022-v2:0\",\n        \"bedrock:us.anthropic.claude-3-5-sonnet-20241022-v2:0\",\n        \"bedrock:anthropic.claude-3-5-haiku-20241022-v1:0\",\n        \"bedrock:us.anthropic.claude-3-5-haiku-20241022-v1:0\",\n        \"bedrock:anthropic.claude-instant-v1\",\n        \"bedrock:anthropic.claude-v2:1\",\n        \"bedrock:anthropic.claude-v2\",\n        \"bedrock:anthropic.claude-3-sonnet-20240229-v1:0\",\n        \"bedrock:us.anthropic.claude-3-sonnet-20240229-v1:0\",\n        \"bedrock:anthropic.claude-3-haiku-20240307-v1:0\",\n        \"bedrock:us.anthropic.claude-3-haiku-20240307-v1:0\",\n        \"bedrock:anthropic.claude-3-opus-20240229-v1:0\",\n        \"bedrock:us.anthropic.claude-3-opus-20240229-v1:0\",\n        \"bedrock:anthropic.claude-3-5-sonnet-20240620-v1:0\",\n        \"bedrock:us.anthropic.claude-3-5-sonnet-20240620-v1:0\",\n        \"bedrock:anthropic.claude-3-7-sonnet-20250219-v1:0\",\n        \"bedrock:us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n        \"bedrock:cohere.command-text-v14\",\n        \"bedrock:cohere.command-r-v1:0\",\n        \"bedrock:cohere.command-r-plus-v1:0\",\n        \"bedrock:cohere.command-light-text-v14\",\n        \"bedrock:meta.llama3-8b-instruct-v1:0\",\n        \"bedrock:meta.llama3-70b-instruct-v1:0\",\n        \"bedrock:meta.llama3-1-8b-instruct-v1:0\",\n        \"bedrock:us.meta.llama3-1-8b-instruct-v1:0\",\n        \"bedrock:meta.llama3-1-70b-instruct-v1:0\",\n        \"bedrock:us.meta.llama3-1-70b-instruct-v1:0\",\n        \"bedrock:meta.llama3-1-405b-instruct-v1:0\",\n        \"bedrock:us.meta.llama3-2-11b-instruct-v1:0\",\n        \"bedrock:us.meta.llama3-2-90b-instruct-v1:0\",\n        \"bedrock:us.meta.llama3-2-1b-instruct-v1:0\",\n        \"bedrock:us.meta.llama3-2-3b-instruct-v1:0\",\n        \"bedrock:us.meta.llama3-3-70b-instruct-v1:0\",\n        \"bedrock:mistral.mistral-7b-instruct-v0:2\",\n        \"bedrock:mistral.mixtral-8x7b-instruct-v0:1\",\n        \"bedrock:mistral.mistral-large-2402-v1:0\",\n        \"bedrock:mistral.mistral-large-2407-v1:0\",\n        \"claude-3", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-bc066e01894e9a879be8e969281bd347", "__created_at__": 1744231651.420514, "content": ".llama3-3-70b-instruct-v1:0\",\n        \"bedrock:mistral.mistral-7b-instruct-v0:2\",\n        \"bedrock:mistral.mixtral-8x7b-instruct-v0:1\",\n        \"bedrock:mistral.mistral-large-2402-v1:0\",\n        \"bedrock:mistral.mistral-large-2407-v1:0\",\n        \"claude-3-5-sonnet-latest\",\n        \"claude-3-opus-latest\",\n        \"cohere:c4ai-aya-expanse-32b\",\n        \"cohere:c4ai-aya-expanse-8b\",\n        \"cohere:command\",\n        \"cohere:command-light\",\n        \"cohere:command-light-nightly\",\n        \"cohere:command-nightly\",\n        \"cohere:command-r\",\n        \"cohere:command-r-03-2024\",\n        \"cohere:command-r-08-2024\",\n        \"cohere:command-r-plus\",\n        \"cohere:command-r-plus-04-2024\",\n        \"cohere:command-r-plus-08-2024\",\n        \"cohere:command-r7b-12-2024\",\n        \"deepseek:deepseek-chat\",\n        \"deepseek:deepseek-reasoner\",\n        \"google-gla:gemini-1.0-pro\",\n        \"google-gla:gemini-1.5-flash\",\n        \"google-gla:gemini-1.5-flash-8b\",\n        \"google-gla:gemini-1.5-pro\",\n        \"google-gla:gemini-2.0-flash-exp\",\n        \"google-gla:gemini-2.0-flash-thinking-exp-01-21\",\n        \"google-gla:gemini-exp-1206\",\n        \"google-gla:gemini-2.0-flash\",\n        \"google-gla:gemini-2.0-flash-lite-preview-02-05\",\n        \"google-gla:gemini-2.0-pro-exp-02-05\",\n        \"google-gla:gemini-2.5-pro-exp-03-25\",\n        \"google-vertex:gemini-1.0-pro\",\n        \"google-vertex:gemini-1.5-flash\",\n        \"google-vertex:gemini-1.5-flash-8b\",\n        \"google-vertex:gemini-1.5-pro\",\n        \"google-vertex:gemini-2.0-flash-exp\",\n        \"google-vertex:gemini-2.0-flash-thinking-exp-01-21\",\n        \"google-vertex:gemini-exp-1206\",\n        \"google-vertex:gemini-2.0-flash\",\n        \"google-vertex:gemini-2.0-flash-lite-preview-02-05\",\n        \"google-vertex:gemini-2.0-pro-exp-02-05\",\n        \"google-vertex:gemini-2.5-pro-exp-03-25\",\n        \"gpt-3.5-turbo\",\n        \"gpt-3.5-turbo-0125\",\n        \"gpt-3.5-turbo-0301\",\n        \"gpt-3.5-turbo-0613\",\n        \"gpt-3.5-turbo-1106\",\n        \"gpt-3.5-turbo-16k\",\n        \"gpt-3.5-turbo-16k-0613\",\n        \"gpt-4\",\n        \"gpt-4-0125-preview\",\n        \"gpt-4-0314\",\n        \"gpt-4-0613\",\n        \"gpt-4-1106-preview\",\n        \"gpt-4-32k\",\n        \"gpt-4-32k-0314\",\n        \"gpt-4-32k-0613\",\n        \"gpt-4-turbo\",\n        \"gpt-4-turbo-2024-04-09\",\n        \"gpt-4-turbo-preview\",\n        \"gpt-4-vision-preview\",\n        \"gpt-4o\",\n        \"gpt-4o-2024-05-13\",\n        \"gpt-4o-2024-08-06\",\n        \"gpt-4o-2024-11-20\",\n        \"gpt-4o-audio-preview\",\n        \"gpt-4o-audio-preview-2024-10-01\",\n        \"gpt-4o-audio-preview-2024-12-17\",\n        \"gpt-4o-mini\",\n        \"gpt-4o-mini-2024-07-18\",\n        \"gpt-4o-mini-audio-preview\",\n        \"gpt-4o-mini-audio-preview-2024-12-17\",\n        \"gpt-4o-mini-search-preview\",\n        \"gpt-4o-mini-search-preview-2025-03-11\",\n        \"gpt-4o-search-preview\",\n        \"gpt-4o-search-preview-2025-03-11\",\n        \"groq:distil-whisper-large-v3-en\",\n        \"groq:gemma2-9b-it\",\n        \"groq:llama-3.3-70b-versatile\",\n        \"groq:llama-3.1-8b-instant\",\n        \"groq:llama-guard-3-8b\",\n        \"groq:llama3-70b-8192\",\n        \"groq:llama3-8b", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-2efde2e0cd716841d8bf6ac6a64c342c", "__created_at__": 1744231651.420514, "content": "groq:distil-whisper-large-v3-en\",\n        \"groq:gemma2-9b-it\",\n        \"groq:llama-3.3-70b-versatile\",\n        \"groq:llama-3.1-8b-instant\",\n        \"groq:llama-guard-3-8b\",\n        \"groq:llama3-70b-8192\",\n        \"groq:llama3-8b-8192\",\n        \"groq:whisper-large-v3\",\n        \"groq:whisper-large-v3-turbo\",\n        \"groq:playai-tts\",\n        \"groq:playai-tts-arabic\",\n        \"groq:qwen-qwq-32b\",\n        \"groq:mistral-saba-24b\",\n        \"groq:qwen-2.5-coder-32b\",\n        \"groq:qwen-2.5-32b\",\n        \"groq:deepseek-r1-distill-qwen-32b\",\n        \"groq:deepseek-r1-distill-llama-70b\",\n        \"groq:llama-3.3-70b-specdec\",\n        \"groq:llama-3.2-1b-preview\",\n        \"groq:llama-3.2-3b-preview\",\n        \"groq:llama-3.2-11b-vision-preview\",\n        \"groq:llama-3.2-90b-vision-preview\",\n        \"mistral:codestral-latest\",\n        \"mistral:mistral-large-latest\",\n        \"mistral:mistral-moderation-latest\",\n        \"mistral:mistral-small-latest\",\n        \"o1\",\n        \"o1-2024-12-17\",\n        \"o1-mini\",\n        \"o1-mini-2024-09-12\",\n        \"o1-preview\",\n        \"o1-preview-2024-09-12\",\n        \"o3-mini\",\n        \"o3-mini-2025-01-31\",\n        \"openai:chatgpt-4o-latest\",\n        \"openai:gpt-3.5-turbo\",\n        \"openai:gpt-3.5-turbo-0125\",\n        \"openai:gpt-3.5-turbo-0301\",\n        \"openai:gpt-3.5-turbo-0613\",\n        \"openai:gpt-3.5-turbo-1106\",\n        \"openai:gpt-3.5-turbo-16k\",\n        \"openai:gpt-3.5-turbo-16k-0613\",\n        \"openai:gpt-4\",\n        \"openai:gpt-4-0125-preview\",\n        \"openai:gpt-4-0314\",\n        \"openai:gpt-4-0613\",\n        \"openai:gpt-4-1106-preview\",\n        \"openai:gpt-4-32k\",\n        \"openai:gpt-4-32k-0314\",\n        \"openai:gpt-4-32k-0613\",\n        \"openai:gpt-4-turbo\",\n        \"openai:gpt-4-turbo-2024-04-09\",\n        \"openai:gpt-4-turbo-preview\",\n        \"openai:gpt-4-vision-preview\",\n        \"openai:gpt-4o\",\n        \"openai:gpt-4o-2024-05-13\",\n        \"openai:gpt-4o-2024-08-06\",\n        \"openai:gpt-4o-2024-11-20\",\n        \"openai:gpt-4o-audio-preview\",\n        \"openai:gpt-4o-audio-preview-2024-10-01\",\n        \"openai:gpt-4o-audio-preview-2024-12-17\",\n        \"openai:gpt-4o-mini\",\n        \"openai:gpt-4o-mini-2024-07-18\",\n        \"openai:gpt-4o-mini-audio-preview\",\n        \"openai:gpt-4o-mini-audio-preview-2024-12-17\",\n        \"openai:gpt-4o-mini-search-preview\",\n        \"openai:gpt-4o-mini-search-preview-2025-03-11\",\n        \"openai:gpt-4o-search-preview\",\n        \"openai:gpt-4o-search-preview-2025-03-11\",\n        \"openai:o1\",\n        \"openai:o1-2024-12-17\",\n        \"openai:o1-mini\",\n        \"openai:o1-mini-2024-09-12\",\n        \"openai:o1-preview\",\n        \"openai:o1-preview-2024-09-12\",\n        \"openai:o3-mini\",\n        \"openai:o3-mini-2025-01-31\",\n        \"test\",\n    ],\n)\n\n```\n\nKnown model names that can be used with the `model` parameter of `Agent`.\n\n`KnownModelName` is provided as a concise way to specify a model.\n\n\n\n### ModelRequestParameters `dataclass`\n\nConfiguration for an agent's request to a model, specifically related to tools and result handling.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\n@dataclass\nclass ModelRequestParameters:\n    \"\"\"Configuration for an agent's request to a model, specifically related to tools and result handling.\"\"\"\n\n    function_tools: list[ToolDefinition]\n    allow_text_result: bool\n    result_tools:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-b769b4aed2676da2f16bf28894246048", "__created_at__": 1744231651.420514, "content": "specify a model.\n\n\n\n### ModelRequestParameters `dataclass`\n\nConfiguration for an agent's request to a model, specifically related to tools and result handling.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\n@dataclass\nclass ModelRequestParameters:\n    \"\"\"Configuration for an agent's request to a model, specifically related to tools and result handling.\"\"\"\n\n    function_tools: list[ToolDefinition]\n    allow_text_result: bool\n    result_tools: list[ToolDefinition]\n\n```\n\n\n\n\n\n### Model\n\nBases: `ABC`\n\nAbstract class for a model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\nclass Model(ABC):\n    \"\"\"Abstract class for a model.\"\"\"\n\n    @abstractmethod\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, Usage]:\n        \"\"\"Make a request to the model.\"\"\"\n        raise NotImplementedError()\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        \"\"\"Make a request to the model and return a streaming response.\"\"\"\n        # This method is not required, but you need to implement it if you want to support streamed responses\n        raise NotImplementedError(f'Streamed requests not supported by this {self.__class__.__name__}')\n        # yield is required to make this a generator for type checking\n        # noinspection PyUnreachableCode\n        yield  # pragma: no cover\n\n    def customize_request_parameters(self, model_request_parameters: ModelRequestParameters) -> ModelRequestParameters:\n        \"\"\"Customize the request parameters for the model.\n\n        This method can be overridden by subclasses to modify the request parameters before sending them to the model.\n        In particular, this method can be used to make modifications to the generated tool JSON schemas if necessary\n        for vendor/model-specific reasons.\n        \"\"\"\n        return model_request_parameters\n\n    @property\n    @abstractmethod\n    def model_name(self) -> str:\n        \"\"\"The model name.\"\"\"\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def system(self) -> str:\n        \"\"\"The system / model provider, ex: openai.\n\n        Use to populate the `gen_ai.system` OpenTelemetry semantic convention attribute,\n        so should use well-known values listed in\n        https://opentelemetry.io/docs/specs/semconv/attributes-registry/gen-ai/#gen-ai-system\n        when applicable.\n        \"\"\"\n        raise NotImplementedError()\n\n    @property\n    def base_url(self) -> str | None:\n        \"\"\"The base URL for the provider API, if available.\"\"\"\n        return None\n\n```\n\n\n#### request `abstractmethod` `async`\n\n```\nrequest(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]\n\n```\n\nMake a request to the model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\n@abstractmethod\nasync def request(\n    self,\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]:\n    \"\"\"Make a request to the model.\"\"\"\n    raise NotImplementedError()\n\n```\n\n\n\n\n#### request\\_stream `async`\n\n```\nrequest_stream(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> AsyncIterator[StreamedResponse]\n\n```\n\nMake a request to the model and return a streaming response.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\n@asynccontextmanager\nasync def request_stream(\n    self,\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> AsyncIterator[StreamedResponse]:\n    \"\"\"Make a request to the model and return a streaming response.\"\"\"\n    # This method is not required, but you need to implement it if you want to support streamed responses\n    raise NotImplementedError(f'Streamed requests not supported by this {self.__class__.__name__}')\n    # yield is required to make this a generator for type checking\n    # noinspection PyUnreachableCode\n    yield  # pragma: no cover\n\n```\n\n\n\n\n#### customize\\_request\\_parameters\n\n```\ncustomize_request_parameters(\n    model_request_parameters: ModelRequestParameters,\n) -> ModelRequestParameters\n\n```\n\nCustomize the request parameters for the model.\n\nThis method can be overridden by subclasses to modify the request parameters before sending them to the model.\nIn particular, this method can be used to make modifications to the generated tool JSON schemas if necessary\nfor vendor/model-specific reasons.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\ndef customize_request_parameters(self, model_request_parameters: ModelRequestParameters) -> ModelRequestParameters:\n    \"\"\"Customize the request parameters for the model.\n\n    This method can be overridden by subclasses to modify the request parameters before sending them to the model.\n    In particular, this method can be used to make modifications to the generated tool JSON schemas if necessary\n    for vendor/model-specific reasons.\n    \"\"\"\n    return model_request_parameters\n\n```\n\n\n\n\n#### model\\_name `abstractmethod` `property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n\n\n#### system `abstractmethod` `property", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-dd9a98f0dbfe0b13eb759308b4347720", "__created_at__": 1744231651.420514, "content": "\"\"\"Customize the request parameters for the model.\n\n    This method can be overridden by subclasses to modify the request parameters before sending them to the model.\n    In particular, this method can be used to make modifications to the generated tool JSON schemas if necessary\n    for vendor/model-specific reasons.\n    \"\"\"\n    return model_request_parameters\n\n```\n\n\n\n\n#### model\\_name `abstractmethod` `property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n\n\n#### system `abstractmethod` `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider, ex: openai.\n\nUse to populate the `gen_ai.system` OpenTelemetry semantic convention attribute,\nso should use well-known values listed in\nhttps://opentelemetry.io/docs/specs/semconv/attributes-registry/gen-ai/#gen-ai-system\nwhen applicable.\n\n\n\n#### base\\_url `property`\n\n```\nbase_url: str | None\n\n```\n\nThe base URL for the provider API, if available.\n\n\n\n\n\n\n### StreamedResponse `dataclass`\n\nBases: `ABC`\n\nStreamed response from an LLM when calling a tool.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\n@dataclass\nclass StreamedResponse(ABC):\n    \"\"\"Streamed response from an LLM when calling a tool.\"\"\"\n\n    _parts_manager: ModelResponsePartsManager = field(default_factory=ModelResponsePartsManager, init=False)\n    _event_iterator: AsyncIterator[ModelResponseStreamEvent] | None = field(default=None, init=False)\n    _usage: Usage = field(default_factory=Usage, init=False)\n\n    def __aiter__(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        \"\"\"Stream the response as an async iterable of [`ModelResponseStreamEvent`][pydantic_ai.messages.ModelResponseStreamEvent]s.\"\"\"\n        if self._event_iterator is None:\n            self._event_iterator = self._get_event_iterator()\n        return self._event_iterator\n\n    @abstractmethod\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        \"\"\"Return an async iterator of [`ModelResponseStreamEvent`][pydantic_ai.messages.ModelResponseStreamEvent]s.\n\n        This method should be implemented by subclasses to translate the vendor-specific stream of events into\n        pydantic_ai-format events.\n\n        It should use the `_parts_manager` to handle deltas, and should update the `_usage` attributes as it goes.\n        \"\"\"\n        raise NotImplementedError()\n        # noinspection PyUnreachableCode\n        yield\n\n    def get(self) -> ModelResponse:\n        \"\"\"Build a [`ModelResponse`][pydantic_ai.messages.ModelResponse] from the data received from the stream so far.\"\"\"\n        return ModelResponse(\n            parts=self._parts_manager.get_parts(), model_name=self.model_name, timestamp=self.timestamp\n        )\n\n    def usage(self) -> Usage:\n        \"\"\"Get the usage of the response so far. This will not be the final usage until the stream is exhausted.\"\"\"\n        return self._usage\n\n    @property\n    @abstractmethod\n    def model_name(self) -> str:\n        \"\"\"Get the model name of the response.\"\"\"\n        raise NotImplementedError()\n\n    @property\n    @abstractmethod\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        raise NotImplementedError()\n\n```\n\n\n#### \\_\\_aiter\\_\\_\n\n```\n__aiter__() -> AsyncIterator[ModelResponseStreamEvent]\n\n```\n\nStream the response as an async iterable of `ModelResponseStreamEvent`s.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\ndef __aiter__(self) -> AsyncIterator[ModelResponseStreamEvent]:\n    \"\"\"Stream the response as an async iterable of [`ModelResponseStreamEvent`][pydantic_ai.messages.ModelResponseStreamEvent]s.\"\"\"\n    if self._event_iterator is None:\n        self._event_iterator = self._get_event_iterator()\n    return self._event_iterator\n\n```\n\n\n\n\n#### get\n\n```\nget() -> ModelResponse\n\n```\n\nBuild a `ModelResponse` from the data received from the stream so far.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\ndef get(self) -> ModelResponse:\n    \"\"\"Build a [`ModelResponse`][pydantic_ai.messages.ModelResponse] from the data received from the stream so far.\"\"\"\n    return ModelResponse(\n        parts=self._parts_manager.get_parts(), model_name=self.model_name, timestamp=self.timestamp\n    )\n\n```\n\n\n\n\n#### usage\n\n```\nusage() -> Usage\n\n```\n\nGet the usage of the response so far. This will not be the final usage until the stream is exhausted.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\ndef usage(self) -> Usage:\n    \"\"\"Get the usage of the response so far. This will not be the final usage until the stream is exhausted.\"\"\"\n    return self._usage\n\n```\n\n\n\n\n#### model\\_name `abstractmethod` `property`\n\n```\nmodel_name: str\n\n```\n\nGet the model name of the response.\n\n\n\n#### timestamp `abstractmethod` `property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n\n\n\n\n\n### ALLOW\\_MODEL\\_REQUESTS `module-attribute`\n\n```\nALLOW_MODEL_REQUESTS = True\n\n```\n\nWhether to allow requests to models.\n\nThis global setting allows you to disable request to most models, e.g. to make sure you don't accidentally\nmake costly requests to a model during tests.\n\nThe testing models `TestModel` and\n`FunctionModel` are no affected by this setting.\n\n\n\n### check\\_allow\\_model\\_requests\n\n```\ncheck_allow_model_requests", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-aeb5e3495054b417710f8e52ebcb151a", "__created_at__": 1744231651.420514, "content": "LOW\\_MODEL\\_REQUESTS `module-attribute`\n\n```\nALLOW_MODEL_REQUESTS = True\n\n```\n\nWhether to allow requests to models.\n\nThis global setting allows you to disable request to most models, e.g. to make sure you don't accidentally\nmake costly requests to a model during tests.\n\nThe testing models `TestModel` and\n`FunctionModel` are no affected by this setting.\n\n\n\n### check\\_allow\\_model\\_requests\n\n```\ncheck_allow_model_requests() -> None\n\n```\n\nCheck if model requests are allowed.\n\nIf you're defining your own models that have costs or latency associated with their use, you should call this in\n`Model.request` and `Model.request_stream`.\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `RuntimeError` | If model requests are not allowed. |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\ndef check_allow_model_requests() -> None:\n    \"\"\"Check if model requests are allowed.\n\n    If you're defining your own models that have costs or latency associated with their use, you should call this in\n    [`Model.request`][pydantic_ai.models.Model.request] and [`Model.request_stream`][pydantic_ai.models.Model.request_stream].\n\n    Raises:\n        RuntimeError: If model requests are not allowed.\n    \"\"\"\n    if not ALLOW_MODEL_REQUESTS:\n        raise RuntimeError('Model requests are not allowed, since ALLOW_MODEL_REQUESTS is False')\n\n```\n\n\n\n\n### override\\_allow\\_model\\_requests\n\n```\noverride_allow_model_requests(\n    allow_model_requests: bool,\n) -> Iterator[None]\n\n```\n\nContext manager to temporarily override `ALLOW_MODEL_REQUESTS`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `allow_model_requests` | `bool` | Whether to allow model requests within the context. | *required* |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/__init__.py`\n```\n@contextmanager\ndef override_allow_model_requests(allow_model_requests: bool) -> Iterator[None]:\n    \"\"\"Context manager to temporarily override [`ALLOW_MODEL_REQUESTS`][pydantic_ai.models.ALLOW_MODEL_REQUESTS].\n\n    Args:\n        allow_model_requests: Whether to allow model requests within the context.\n    \"\"\"\n    global ALLOW_MODEL_REQUESTS\n    old_value = ALLOW_MODEL_REQUESTS\n    ALLOW_MODEL_REQUESTS = allow_model_requests  # pyright: ignore[reportConstantRedefinition]\n    try:\n        yield\n    finally:\n        ALLOW_MODEL_REQUESTS = old_value  # pyright: ignore[reportConstantRedefinition]\n\n```\n\n\n\n\n\n\n\n\n`pydantic_ai.models.bedrock`\n============================\n\nSetup\n-----\n\nFor details on how to set up authentication with this model, see [model configuration for Bedrock](../../../models/#bedrock).\n\n### LatestBedrockModelNames `module-attribute`\n\n```\nLatestBedrockModelNames = Literal[\n    \"amazon.titan-tg1-large\",\n    \"amazon.titan-text-lite-v1\",\n    \"amazon.titan-text-express-v1\",\n    \"us.amazon.nova-pro-v1:0\",\n    \"us.amazon.nova-lite-v1:0\",\n    \"us.amazon.nova-micro-v1:0\",\n    \"anthropic.claude-3-5-sonnet-20241022-v2:0\",\n    \"us.anthropic.claude-3-5-sonnet-20241022-v2:0\",\n    \"anthropic.claude-3-5-haiku-20241022-v1:0\",\n    \"us.anthropic.claude-3-5-haiku-20241022-v1:0\",\n    \"anthropic.claude-instant-v1\",\n    \"anthropic.claude-v2:1\",\n    \"anthropic.claude-v2\",\n    \"anthropic.claude-3-sonnet-20240229-v1:0\",\n    \"us.anthropic.claude-3-sonnet-20240229-v1:0\",\n    \"anthropic.claude-3-haiku-20240307-v1:0\",\n    \"us.anthropic.claude-3-haiku-20240307-v1:0\",\n    \"anthropic.claude-3-opus-20240229-v1:0\",\n    \"us.anthropic.claude-3-opus-20240229-v1:0\",\n    \"anthropic.claude-3-5-sonnet-20240620-v1:0\",\n    \"us.anthropic.claude-3-5-sonnet-20240620-v1:0\",\n    \"anthropic.claude-3-7-sonnet-20250219-v1:0\",\n    \"us.anthropic.claude-3-7-sonnet-20250219-v1:0\",\n    \"cohere.command-text-v14\",\n    \"cohere.command-r-v1:0\",\n    \"cohere.command-r-plus-v1:0\",\n    \"cohere.command-light-text-v14\",\n    \"meta.llama3-8b-instruct-v1:0\",\n    \"meta.llama3-70b-instruct-v1:0\",\n    \"meta.llama3-1-8b-instruct-v1:0\",\n    \"us.meta.llama3-1-8b-instruct-v1:0\",\n    \"meta.llama3-1-70b-instruct-v1:0\",\n    \"us.meta.llama3-1-70b-instruct-v1:0\",\n    \"meta.llama3-1-405b-instruct-v1", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-280e2293efebc370222ffe9ce64e03c2", "__created_at__": 1744231651.420514, "content": "3-70b-instruct-v1:0\",\n    \"meta.llama3-1-8b-instruct-v1:0\",\n    \"us.meta.llama3-1-8b-instruct-v1:0\",\n    \"meta.llama3-1-70b-instruct-v1:0\",\n    \"us.meta.llama3-1-70b-instruct-v1:0\",\n    \"meta.llama3-1-405b-instruct-v1:0\",\n    \"us.meta.llama3-2-11b-instruct-v1:0\",\n    \"us.meta.llama3-2-90b-instruct-v1:0\",\n    \"us.meta.llama3-2-1b-instruct-v1:0\",\n    \"us.meta.llama3-2-3b-instruct-v1:0\",\n    \"us.meta.llama3-3-70b-instruct-v1:0\",\n    \"mistral.mistral-7b-instruct-v0:2\",\n    \"mistral.mixtral-8x7b-instruct-v0:1\",\n    \"mistral.mistral-large-2402-v1:0\",\n    \"mistral.mistral-large-2407-v1:0\",\n]\n\n```\n\nLatest Bedrock models.\n\n\n\n### BedrockModelName `module-attribute`\n\n```\nBedrockModelName = Union[str, LatestBedrockModelNames]\n\n```\n\nPossible Bedrock model names.\n\nSince Bedrock supports a variety of date-stamped models, we explicitly list the latest models but allow any name in the type hints.\nSee [the Bedrock docs](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html) for a full list.\n\n\n\n### BedrockModelSettings\n\nBases: `ModelSettings`\n\nSettings for Bedrock models.\n\nALL FIELDS MUST BE `bedrock_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`\n```\nclass BedrockModelSettings(ModelSettings):\n    \"\"\"Settings for Bedrock models.\n\n    ALL FIELDS MUST BE `bedrock_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n    \"\"\"\n\n```\n\n\n\n\n\n### BedrockConverseModel `dataclass`\n\nBases: `Model`\n\nA model that uses the Bedrock Converse API.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`\n```\n@dataclass(init=False)\nclass BedrockConverseModel(Model):\n    \"\"\"A model that uses the Bedrock Converse API.\"\"\"\n\n    client: BedrockRuntimeClient\n\n    _model_name: BedrockModelName = field(repr=False)\n    _system: str = field(default='bedrock', repr=False)\n\n    @property\n    def model_name(self) -> str:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider, ex: openai.\"\"\"\n        return self._system\n\n    def __init__(\n        self,\n        model_name: BedrockModelName,\n        *,\n        provider: Literal['bedrock'] | Provider[BaseClient] = 'bedrock',\n    ):\n        \"\"\"Initialize a Bedrock model.\n\n        Args:\n            model_name: The name of the model to use.\n            model_name: The name of the Bedrock model to use. List of model names available\n                [here](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html).\n            provider: The provider to use for authentication and API access. Can be either the string\n                'bedrock' or an instance of `Provider[BaseClient]`. If not provided, a new provider will be\n                created using the other parameters.\n        \"\"\"\n        self._model_name = model_name\n\n        if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self.client = cast('BedrockRuntimeClient', provider.client)\n\n    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[ToolTypeDef]:\n        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]\n        if model_request_parameters.result_tools:\n            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]\n        return tools\n\n    @staticmethod\n    def _map_tool_definition(f: ToolDefinition) -> ToolTypeDef:\n        return {\n            'toolSpec': {\n                'name': f.name,\n                'description': f.description,\n                'inputSchema': {'json': f.parameters_json_schema},\n            }\n        }\n\n    @property\n    def base_url(self) -> str:\n        return str(self.client.meta.endpoint_url)\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, result.Usage]:\n        response = await self._messages_create(messages, False, model_settings, model_request_parameters)\n        return await self._process_response(response)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        response = await self._messages_create(messages, True, model_settings, model_request_parameters)\n        yield BedrockStreamedResponse(_model_name=self.model_name, _event_stream=response)\n\n    async def _process_response(self, response: ConverseResponseTypeDef) -> tuple[ModelResponse, result.Usage]:\n        items: list[ModelResponsePart] = []\n        if message := response['output'].get('message", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-bd2bc160d25374fdd8c399ea89d82b1d", "__created_at__": 1744231651.420514, "content": ": ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        response = await self._messages_create(messages, True, model_settings, model_request_parameters)\n        yield BedrockStreamedResponse(_model_name=self.model_name, _event_stream=response)\n\n    async def _process_response(self, response: ConverseResponseTypeDef) -> tuple[ModelResponse, result.Usage]:\n        items: list[ModelResponsePart] = []\n        if message := response['output'].get('message'):\n            for item in message['content']:\n                if text := item.get('text'):\n                    items.append(TextPart(content=text))\n                else:\n                    tool_use = item.get('toolUse')\n                    assert tool_use is not None, f'Found a content that is not a text or tool use: {item}'\n                    items.append(\n                        ToolCallPart(\n                            tool_name=tool_use['name'],\n                            args=tool_use['input'],\n                            tool_call_id=tool_use['toolUseId'],\n                        ),\n                    )\n        usage = result.Usage(\n            request_tokens=response['usage']['inputTokens'],\n            response_tokens=response['usage']['outputTokens'],\n            total_tokens=response['usage']['totalTokens'],\n        )\n        return ModelResponse(items, model_name=self.model_name), usage\n\n    @overload\n    async def _messages_create(\n        self,\n        messages: list[ModelMessage],\n        stream: Literal[True],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> EventStream[ConverseStreamOutputTypeDef]:\n        pass\n\n    @overload\n    async def _messages_create(\n        self,\n        messages: list[ModelMessage],\n        stream: Literal[False],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> ConverseResponseTypeDef:\n        pass\n\n    async def _messages_create(\n        self,\n        messages: list[ModelMessage],\n        stream: bool,\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> ConverseResponseTypeDef | EventStream[ConverseStreamOutputTypeDef]:\n        tools = self._get_tools(model_request_parameters)\n        support_tools_choice = self.model_name.startswith(('anthropic', 'us.anthropic'))\n        if not tools or not support_tools_choice:\n            tool_choice: ToolChoiceTypeDef = {}\n        elif not model_request_parameters.allow_text_result:\n            tool_choice = {'any': {}}\n        else:\n            tool_choice = {'auto': {}}\n\n        system_prompt, bedrock_messages = await self._map_messages(messages)\n        inference_config = self._map_inference_config(model_settings)\n\n        params: ConverseRequestTypeDef = {\n            'modelId': self.model_name,\n            'messages': bedrock_messages,\n            'system': system_prompt,\n            'inferenceConfig': inference_config,\n        }\n        if tools:\n            params['toolConfig'] = {'tools': tools}\n            if tool_choice:\n                params['toolConfig']['toolChoice'] = tool_choice\n\n        if stream:\n            model_response = await anyio.to_thread.run_sync(functools.partial(self.client.converse_stream, **params))\n            model_response = model_response['stream']\n        else:\n            model_response = await anyio.to_thread.run_sync(functools.partial(self.client.converse, **params))\n        return model_response\n\n    @staticmethod\n    def _map_inference_config(\n        model_settings: ModelSettings | None,\n    ) -> InferenceConfigurationTypeDef:\n        model_settings = model_settings or {}\n        inference_config: InferenceConfigurationTypeDef = {}\n\n        if max_tokens := model_settings.get('max_tokens'):\n            inference_config['maxTokens'] = max_tokens\n        if temperature := model_settings.get('temperature'):\n            inference_config['temperature'] = temperature\n        if top_p := model_settings.get('top_p'):\n            inference_config['topP'] = top_p\n        if stop_sequences := model_settings.get('stop_sequences'):\n            inference_config['stopSequences'] = stop_sequences\n\n        return inference_config\n\n    async def _map_messages(\n        self, messages: list[ModelMessage]\n    ) -> tuple[list[SystemContentBlockTypeDef], list[MessageUnionTypeDef]]:\n        \"\"\"Just maps a `pydantic_ai.Message` to the Bedrock `MessageUnionTypeDef`.\"\"\"\n        system_prompt: list[SystemContentBlockTypeDef] = []\n        bedrock_messages: list[MessageUnionTypeDef] = []\n        for m in messages:\n            if isinstance(m, ModelRequest):\n                for part in m.parts:\n                    if isinstance(part, SystemPromptPart):\n                        system_prompt.append({'text': part.content})\n                    elif isinstance(part, UserPromptPart):\n                        bedrock_messages.extend(await self._map_user_prompt(part))\n                    elif isinstance(part, ToolReturnPart):\n                        assert part.tool_call_id is not None\n                        bedrock_messages.append(\n                            {\n                                'role': 'user',\n                                'content': [\n                                    {\n                                        'toolResult': {\n                                            'toolUseId': part.tool_call_id,\n                                            'content': [{'text': part.model_response_str()}],\n                                            'status': 'success',\n                                        }\n                                    }\n                                ],\n                            }\n                        )\n                    elif isinstance(part, RetryPromptPart):\n                        # TODO(Marcelo): We need to add a test here.\n                        if part.tool_name is None:  # pragma: no cover\n                            bedrock_messages.append({'role': 'user', 'content': [{'text': part.model_response()}]})\n                        else:\n                            assert part.tool_call_id is not None\n                            bedrock_messages.append(\n                                {\n                                    'role': 'user',\n                                    'content': [\n                                        {\n                                            'toolResult': {\n                                                'toolUseId': part.tool_call_id,\n                                                'content': [{'text': part.model_response()}", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-6336acb66b05c1fcfd268f8297c6bf9f", "__created_at__": 1744231651.420514, "content": "if part.tool_name is None:  # pragma: no cover\n                            bedrock_messages.append({'role': 'user', 'content': [{'text': part.model_response()}]})\n                        else:\n                            assert part.tool_call_id is not None\n                            bedrock_messages.append(\n                                {\n                                    'role': 'user',\n                                    'content': [\n                                        {\n                                            'toolResult': {\n                                                'toolUseId': part.tool_call_id,\n                                                'content': [{'text': part.model_response()}],\n                                                'status': 'error',\n                                            }\n                                        }\n                                    ],\n                                }\n                            )\n            elif isinstance(m, ModelResponse):\n                content: list[ContentBlockOutputTypeDef] = []\n                for item in m.parts:\n                    if isinstance(item, TextPart):\n                        content.append({'text': item.content})\n                    else:\n                        assert isinstance(item, ToolCallPart)\n                        content.append(self._map_tool_call(item))\n                bedrock_messages.append({'role': 'assistant', 'content': content})\n            else:\n                assert_never(m)\n        return system_prompt, bedrock_messages\n\n    @staticmethod\n    async def _map_user_prompt(part: UserPromptPart) -> list[MessageUnionTypeDef]:\n        content: list[ContentBlockUnionTypeDef] = []\n        if isinstance(part.content, str):\n            content.append({'text': part.content})\n        else:\n            document_count = 0\n            for item in part.content:\n                if isinstance(item, str):\n                    content.append({'text': item})\n                elif isinstance(item, BinaryContent):\n                    format = item.format\n                    if item.is_document:\n                        document_count += 1\n                        name = f'Document {document_count}'\n                        assert format in ('pdf', 'txt', 'csv', 'doc', 'docx', 'xls', 'xlsx', 'html', 'md')\n                        content.append({'document': {'name': name, 'format': format, 'source': {'bytes': item.data}}})\n                    elif item.is_image:\n                        assert format in ('jpeg', 'png', 'gif', 'webp')\n                        content.append({'image': {'format': format, 'source': {'bytes': item.data}}})\n                    else:\n                        raise NotImplementedError('Binary content is not supported yet.')\n                elif isinstance(item, (ImageUrl, DocumentUrl)):\n                    response = await cached_async_http_client().get(item.url)\n                    response.raise_for_status()\n                    if item.kind == 'image-url':\n                        format = item.media_type.split('/')[1]\n                        assert format in ('jpeg', 'png', 'gif', 'webp'), f'Unsupported image format: {format}'\n                        image: ImageBlockTypeDef = {'format': format, 'source': {'bytes': response.content}}\n                        content.append({'image': image})\n                    elif item.kind == 'document-url':\n                        document_count += 1\n                        name = f'Document {document_count}'\n                        data = response.content\n                        content.append({'document': {'name': name, 'format': item.format, 'source': {'bytes': data}}})\n                elif isinstance(item, AudioUrl):  # pragma: no cover\n                    raise NotImplementedError('Audio is not supported yet.')\n                else:\n                    assert_never(item)\n        return [{'role': 'user', 'content': content}]\n\n    @staticmethod\n    def _map_tool_call(t: ToolCallPart) -> ContentBlockOutputTypeDef:\n        return {\n            'toolUse': {'toolUseId': _utils.guard_tool_call_id(t=t), 'name': t.tool_name, 'input': t.args_as_dict()}\n        }\n\n```\n\n\n#### model\\_name `property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider, ex: openai.\n\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: BedrockModelName,\n    *,\n    provider: (\n        Literal[\"bedrock\"] | Provider[BaseClient]\n    ) = \"bedrock\"\n)\n\n```\n\nInitialize a Bedrock model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `BedrockModelName` | The name of the model to use. | *required* |\n| `model_name` | `BedrockModelName` | The name of the Bedrock model to use. List of model names available [here](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html). | *required* |\n| `provider` | `Literal['bedrock'] | Provider[BaseClient]` | The provider to use for authentication and API access. Can be either the string 'bedrock' or an instance of `Provider[BaseClient]`. If not provided, a new provider will be created using the other parameters. | `'bedrock'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`\n```\ndef __init__(\n    self,\n    model_name: BedrockModelName,\n    *,\n    provider: Literal['bedrock'] | Provider[BaseClient] = 'bedrock',\n):\n    \"\"\"Initialize a Bedrock model.\n\n    Args:\n        model_name: The name of the model to use.\n        model_name: The name of the Bedrock model to use. List of model names available\n            [here](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html).\n        provider: The provider to use for authentication and API access. Can be either the string\n            'bedrock' or an instance of `Provider[BaseClient]`. If not provided, a new provider will be\n            created using the other parameters.\n    \"\"\"\n    self._model_name = model_name\n\n    if isinstance(provider", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3fe1c986ef649646858753879674bde7", "__created_at__": 1744231651.420514, "content": "the Bedrock model to use. List of model names available\n            [here](https://docs.aws.amazon.com/bedrock/latest/userguide/models-supported.html).\n        provider: The provider to use for authentication and API access. Can be either the string\n            'bedrock' or an instance of `Provider[BaseClient]`. If not provided, a new provider will be\n            created using the other parameters.\n    \"\"\"\n    self._model_name = model_name\n\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self.client = cast('BedrockRuntimeClient', provider.client)\n\n```\n\n\n\n\n\n\n\n### BedrockStreamedResponse `dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for Bedrock models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/bedrock.py`\n```\n@dataclass\nclass BedrockStreamedResponse(StreamedResponse):\n    \"\"\"Implementation of `StreamedResponse` for Bedrock models.\"\"\"\n\n    _model_name: BedrockModelName\n    _event_stream: EventStream[ConverseStreamOutputTypeDef]\n    _timestamp: datetime = field(default_factory=_utils.now_utc)\n\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        \"\"\"Return an async iterator of [`ModelResponseStreamEvent`][pydantic_ai.messages.ModelResponseStreamEvent]s.\n\n        This method should be implemented by subclasses to translate the vendor-specific stream of events into\n        pydantic_ai-format events.\n        \"\"\"\n        chunk: ConverseStreamOutputTypeDef\n        tool_id: str | None = None\n        async for chunk in _AsyncIteratorWrapper(self._event_stream):\n            # TODO(Marcelo): Switch this to `match` when we drop Python 3.9 support.\n            if 'messageStart' in chunk:\n                continue\n            if 'messageStop' in chunk:\n                continue\n            if 'metadata' in chunk:\n                if 'usage' in chunk['metadata']:\n                    self._usage += self._map_usage(chunk['metadata'])\n                continue\n            if 'contentBlockStart' in chunk:\n                index = chunk['contentBlockStart']['contentBlockIndex']\n                start = chunk['contentBlockStart']['start']\n                if 'toolUse' in start:\n                    tool_use_start = start['toolUse']\n                    tool_id = tool_use_start['toolUseId']\n                    tool_name = tool_use_start['name']\n                    maybe_event = self._parts_manager.handle_tool_call_delta(\n                        vendor_part_id=index,\n                        tool_name=tool_name,\n                        args=None,\n                        tool_call_id=tool_id,\n                    )\n                    if maybe_event:\n                        yield maybe_event\n            if 'contentBlockDelta' in chunk:\n                index = chunk['contentBlockDelta']['contentBlockIndex']\n                delta = chunk['contentBlockDelta']['delta']\n                if 'text' in delta:\n                    yield self._parts_manager.handle_text_delta(vendor_part_id=index, content=delta['text'])\n                if 'toolUse' in delta:\n                    tool_use = delta['toolUse']\n                    maybe_event = self._parts_manager.handle_tool_call_delta(\n                        vendor_part_id=index,\n                        tool_name=tool_use.get('name'),\n                        args=tool_use.get('input'),\n                        tool_call_id=tool_id,\n                    )\n                    if maybe_event:\n                        yield maybe_event\n\n    @property\n    def timestamp(self) -> datetime:\n        return self._timestamp\n\n    @property\n    def model_name(self) -> str:\n        \"\"\"Get the model name of the response.\"\"\"\n        return self._model_name\n\n    def _map_usage(self, metadata: ConverseStreamMetadataEventTypeDef) -> result.Usage:\n        return result.Usage(\n            request_tokens=metadata['usage']['inputTokens'],\n            response_tokens=metadata['usage']['outputTokens'],\n            total_tokens=metadata['usage']['totalTokens'],\n        )\n\n```\n\n\n#### model\\_name `property`\n\n```\nmodel_name: str\n\n```\n\nGet the model name of the response.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.cohere`\n===========================\n\nSetup\n-----\n\nFor details on how to set up authentication with this model, see [model configuration for Cohere](../../../models/#cohere).\n\n### LatestCohereModelNames `module-attribute`\n\n```\nLatestCohereModelNames = Literal[\n    \"c4ai-aya-expanse-32b\",\n    \"c4ai-aya-expanse-8b\",\n    \"command\",\n    \"command-light\",\n    \"command-light-nightly\",\n    \"command-nightly\",\n    \"command-r\",\n    \"command-r-03-2024\",\n    \"command-r-08-2024\",\n    \"command-r-plus\",\n    \"command-r-plus-04-2024\",\n    \"command-r-plus-08-2024\",\n    \"command-r7b-12-2024\",\n]\n\n```\n\nLatest Cohere models.\n\n\n\n### CohereModelName `module-attribute`\n\n```\nCohereModelName = Union[str, LatestCohereModelNames]\n\n```\n\nPossible Cohere model names.\n\nSince Cohere supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [Cohere's docs](https://docs.cohere.com/v2/docs/models) for a list of all available models.\n\n\n\n### CohereModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Cohere model request.\n\nALL FIELDS MUST BE `cohere_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/cohere.py`\n```\nclass CohereModelSettings(ModelSettings):\n    \"\"\"Settings used for a Cohere model request.\n\n    ALL FIELDS MUST BE", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-43f708cf2c1ed088f9752946682da243", "__created_at__": 1744231651.420514, "content": "/models) for a list of all available models.\n\n\n\n### CohereModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Cohere model request.\n\nALL FIELDS MUST BE `cohere_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/cohere.py`\n```\nclass CohereModelSettings(ModelSettings):\n    \"\"\"Settings used for a Cohere model request.\n\n    ALL FIELDS MUST BE `cohere_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n    \"\"\"\n\n```\n\n\n\n\n\n### CohereModel `dataclass`\n\nBases: `Model`\n\nA model that uses the Cohere API.\n\nInternally, this uses the [Cohere Python client](https://github.com/cohere-ai/cohere-python) to interact with the API.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/cohere.py`\n```\n@dataclass(init=False)\nclass CohereModel(Model):\n    \"\"\"A model that uses the Cohere API.\n\n    Internally, this uses the [Cohere Python client](\n    https://github.com/cohere-ai/cohere-python) to interact with the API.\n\n    Apart from `__init__`, all methods are private or match those of the base class.\n    \"\"\"\n\n    client: AsyncClientV2 = field(repr=False)\n\n    _model_name: CohereModelName = field(repr=False)\n    _system: str = field(default='cohere', repr=False)\n\n    def __init__(\n        self,\n        model_name: CohereModelName,\n        *,\n        provider: Literal['cohere'] | Provider[AsyncClientV2] = 'cohere',\n    ):\n        \"\"\"Initialize an Cohere model.\n\n        Args:\n            model_name: The name of the Cohere model to use. List of model names\n                available [here](https://docs.cohere.com/docs/models#command).\n            provider: The provider to use for authentication and API access. Can be either the string\n                'cohere' or an instance of `Provider[AsyncClientV2]`. If not provided, a new provider will be\n                created using the other parameters.\n        \"\"\"\n        self._model_name = model_name\n\n        if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self.client = provider.client\n\n    @property\n    def base_url(self) -> str:\n        client_wrapper = self.client._client_wrapper  # type: ignore\n        return str(client_wrapper.get_base_url())\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, result.Usage]:\n        check_allow_model_requests()\n        response = await self._chat(messages, cast(CohereModelSettings, model_settings or {}), model_request_parameters)\n        return self._process_response(response), _map_usage(response)\n\n    @property\n    def model_name(self) -> CohereModelName:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n    async def _chat(\n        self,\n        messages: list[ModelMessage],\n        model_settings: CohereModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> ChatResponse:\n        tools = self._get_tools(model_request_parameters)\n        cohere_messages = list(chain(*(self._map_message(m) for m in messages)))\n        try:\n            return await self.client.chat(\n                model=self._model_name,\n                messages=cohere_messages,\n                tools=tools or OMIT,\n                max_tokens=model_settings.get('max_tokens', OMIT),\n                stop_sequences=model_settings.get('stop_sequences', OMIT),\n                temperature=model_settings.get('temperature', OMIT),\n                p=model_settings.get('top_p', OMIT),\n                seed=model_settings.get('seed', OMIT),\n                presence_penalty=model_settings.get('presence_penalty', OMIT),\n                frequency_penalty=model_settings.get('frequency_penalty', OMIT),\n            )\n        except ApiError as e:\n            if (status_code := e.status_code) and status_code >= 400:\n                raise ModelHTTPError(status_code=status_code, model_name=self.model_name, body=e.body) from e\n            raise\n\n    def _process_response(self, response: ChatResponse) -> ModelResponse:\n        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"\n        parts: list[ModelResponsePart] = []\n        if response.message.content is not None and len(response.message.content) > 0:\n            # While Cohere's API returns a list, it only does that for future proofing\n            # and currently only one item is being returned.\n            choice = response.message.content[0]\n            parts.append(TextPart(choice.text))\n        for c in response.message.tool_calls or []:\n            if c.function and c.function.name and c.function.arguments:\n                parts.append(\n                    ToolCallPart(\n                        tool_name=c.function.name,\n                        args=c.function.arguments,\n                        tool_call_id=c.id or _generate_tool_call_id(),\n                    )\n                )\n        return ModelResponse(parts=parts, model_name=self._model_name)\n\n    def _map_message(self, message: ModelMessage) -> Iterable[ChatMessageV2]:\n        \"\"\"Just maps a `pydantic_ai.Message` to a `cohere.ChatMessageV2`.\"\"\"\n        if isinstance(message, ModelRequest):\n            yield from self._map_user_message(message)\n        elif isinstance(message, ModelResponse):\n            texts: list[str] = []\n            tool_calls: list[ToolCall", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ded0fb4dcc42ebf68653cf3dbd584607", "__created_at__": 1744231651.420514, "content": "return ModelResponse(parts=parts, model_name=self._model_name)\n\n    def _map_message(self, message: ModelMessage) -> Iterable[ChatMessageV2]:\n        \"\"\"Just maps a `pydantic_ai.Message` to a `cohere.ChatMessageV2`.\"\"\"\n        if isinstance(message, ModelRequest):\n            yield from self._map_user_message(message)\n        elif isinstance(message, ModelResponse):\n            texts: list[str] = []\n            tool_calls: list[ToolCallV2] = []\n            for item in message.parts:\n                if isinstance(item, TextPart):\n                    texts.append(item.content)\n                elif isinstance(item, ToolCallPart):\n                    tool_calls.append(self._map_tool_call(item))\n                else:\n                    assert_never(item)\n            message_param = AssistantChatMessageV2(role='assistant')\n            if texts:\n                message_param.content = [TextAssistantMessageContentItem(text='\\n\\n'.join(texts))]\n            if tool_calls:\n                message_param.tool_calls = tool_calls\n            yield message_param\n        else:\n            assert_never(message)\n\n    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[ToolV2]:\n        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]\n        if model_request_parameters.result_tools:\n            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]\n        return tools\n\n    @staticmethod\n    def _map_tool_call(t: ToolCallPart) -> ToolCallV2:\n        return ToolCallV2(\n            id=_guard_tool_call_id(t=t),\n            type='function',\n            function=ToolCallV2Function(\n                name=t.tool_name,\n                arguments=t.args_as_json_str(),\n            ),\n        )\n\n    @staticmethod\n    def _map_tool_definition(f: ToolDefinition) -> ToolV2:\n        return ToolV2(\n            type='function',\n            function=ToolV2Function(\n                name=f.name,\n                description=f.description,\n                parameters=f.parameters_json_schema,\n            ),\n        )\n\n    @classmethod\n    def _map_user_message(cls, message: ModelRequest) -> Iterable[ChatMessageV2]:\n        for part in message.parts:\n            if isinstance(part, SystemPromptPart):\n                yield SystemChatMessageV2(role='system', content=part.content)\n            elif isinstance(part, UserPromptPart):\n                if isinstance(part.content, str):\n                    yield UserChatMessageV2(role='user', content=part.content)\n                else:\n                    raise RuntimeError('Cohere does not yet support multi-modal inputs.')\n            elif isinstance(part, ToolReturnPart):\n                yield ToolChatMessageV2(\n                    role='tool',\n                    tool_call_id=_guard_tool_call_id(t=part),\n                    content=part.model_response_str(),\n                )\n            elif isinstance(part, RetryPromptPart):\n                if part.tool_name is None:\n                    yield UserChatMessageV2(role='user', content=part.model_response())\n                else:\n                    yield ToolChatMessageV2(\n                        role='tool',\n                        tool_call_id=_guard_tool_call_id(t=part),\n                        content=part.model_response(),\n                    )\n            else:\n                assert_never(part)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: CohereModelName,\n    *,\n    provider: (\n        Literal[\"cohere\"] | Provider[AsyncClientV2]\n    ) = \"cohere\"\n)\n\n```\n\nInitialize an Cohere model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `CohereModelName` | The name of the Cohere model to use. List of model names available [here](https://docs.cohere.com/docs/models#command). | *required* |\n| `provider` | `Literal['cohere'] | Provider[AsyncClientV2]` | The provider to use for authentication and API access. Can be either the string 'cohere' or an instance of `Provider[AsyncClientV2]`. If not provided, a new provider will be created using the other parameters. | `'cohere'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/cohere.py`\n```\ndef __init__(\n    self,\n    model_name: CohereModelName,\n    *,\n    provider: Literal['cohere'] | Provider[AsyncClientV2] = 'cohere',\n):\n    \"\"\"Initialize an Cohere model.\n\n    Args:\n        model_name: The name of the Cohere model to use. List of model names\n            available [here](https://docs.cohere.com/docs/models#command).\n        provider: The provider to use for authentication and API access. Can be either the string\n            'cohere' or an instance of `Provider[AsyncClientV2]`. If not provided, a new provider will be\n            created using the other parameters.\n    \"\"\"\n    self._model_name = model_name\n\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self.client = provider.client\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: CohereModelName\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n\n\n\n\npydantic\\_ai.models.fallback\n============================\n\n### FallbackModel `dataclass`\n\nBases: `Model`\n\nA model that uses one or more fallback models upon failure.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/fallback.py`\n```\n@dataclass(init=False)\nclass FallbackModel(Model):\n    \"\"\"A model that uses one", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-e95f82f1dc6d0df2bb46eb35754fc325", "__created_at__": 1744231651.420514, "content": "model provider.\n\n\n\n\n\n\n\n\n\n\npydantic\\_ai.models.fallback\n============================\n\n### FallbackModel `dataclass`\n\nBases: `Model`\n\nA model that uses one or more fallback models upon failure.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/fallback.py`\n```\n@dataclass(init=False)\nclass FallbackModel(Model):\n    \"\"\"A model that uses one or more fallback models upon failure.\n\n    Apart from `__init__`, all methods are private or match those of the base class.\n    \"\"\"\n\n    models: list[Model]\n\n    _model_name: str = field(repr=False)\n    _fallback_on: Callable[[Exception], bool]\n\n    def __init__(\n        self,\n        default_model: Model | KnownModelName,\n        *fallback_models: Model | KnownModelName,\n        fallback_on: Callable[[Exception], bool] | tuple[type[Exception], ...] = (ModelHTTPError,),\n    ):\n        \"\"\"Initialize a fallback model instance.\n\n        Args:\n            default_model: The name or instance of the default model to use.\n            fallback_models: The names or instances of the fallback models to use upon failure.\n            fallback_on: A callable or tuple of exceptions that should trigger a fallback.\n        \"\"\"\n        self.models = [infer_model(default_model), *[infer_model(m) for m in fallback_models]]\n\n        if isinstance(fallback_on, tuple):\n            self._fallback_on = _default_fallback_condition_factory(fallback_on)\n        else:\n            self._fallback_on = fallback_on\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, Usage]:\n        \"\"\"Try each model in sequence until one succeeds.\n\n        In case of failure, raise a FallbackExceptionGroup with all exceptions.\n        \"\"\"\n        exceptions: list[Exception] = []\n\n        for model in self.models:\n            try:\n                response, usage = await model.request(messages, model_settings, model_request_parameters)\n            except Exception as exc:\n                if self._fallback_on(exc):\n                    exceptions.append(exc)\n                    continue\n                raise exc\n\n            self._set_span_attributes(model)\n            return response, usage\n\n        raise FallbackExceptionGroup('All models from FallbackModel failed', exceptions)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        \"\"\"Try each model in sequence until one succeeds.\"\"\"\n        exceptions: list[Exception] = []\n\n        for model in self.models:\n            async with AsyncExitStack() as stack:\n                try:\n                    response = await stack.enter_async_context(\n                        model.request_stream(messages, model_settings, model_request_parameters)\n                    )\n                except Exception as exc:\n                    if self._fallback_on(exc):\n                        exceptions.append(exc)\n                        continue\n                    raise exc\n\n                self._set_span_attributes(model)\n                yield response\n                return\n\n        raise FallbackExceptionGroup('All models from FallbackModel failed', exceptions)\n\n    def _set_span_attributes(self, model: Model):\n        with suppress(Exception):\n            span = get_current_span()\n            if span.is_recording():\n                attributes = getattr(span, 'attributes', {})\n                if attributes.get('gen_ai.request.model') == self.model_name:\n                    span.set_attributes(InstrumentedModel.model_attributes(model))\n\n    @property\n    def model_name(self) -> str:\n        \"\"\"The model name.\"\"\"\n        return f'fallback:{\",\".join(model.model_name for model in self.models)}'\n\n    @property\n    def system(self) -> str:\n        return f'fallback:{\",\".join(model.system for model in self.models)}'\n\n    @property\n    def base_url(self) -> str | None:\n        return self.models[0].base_url\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    default_model: Model | KnownModelName,\n    *fallback_models: Model | KnownModelName,\n    fallback_on: (\n        Callable[[Exception], bool]\n        | tuple[type[Exception], ...]\n    ) = (ModelHTTPError,)\n)\n\n```\n\nInitialize a fallback model instance.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `default_model` | `Model | KnownModelName` | The name or instance of the default model to use. | *required* |\n| `fallback_models` | `Model | KnownModelName` | The names or instances of the fallback models to use upon failure. | `()` |\n| `fallback_on` | `Callable[[Exception], bool] | tuple[type[Exception], ...]` | A callable or tuple of exceptions that should trigger a fallback. | `(ModelHTTPError,)` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/fallback.py`\n```\ndef __init__(\n    self,\n    default_model: Model | KnownModelName,\n    *fallback_models: Model | KnownModelName,\n    fallback_on: Callable[[Exception], bool] | tuple[type[Exception], ...] = (ModelHTTPError,),\n):\n    \"\"\"Initialize a fallback model instance.\n\n    Args:\n        default_model: The name or instance of the default model to use.\n        fallback_models: The names or instances of the fallback models to use upon failure.\n        fallback_on: A callable or tuple of exceptions that should trigger a fallback.\n    \"\"\"\n    self.models = [infer_model(default_model), *[infer_model(m) for m in fallback_models]]\n\n    if isinstance(fallback_on, tuple):\n        self._fallback", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-2d8c6efbbbb322a6351adb42685ded77", "__created_at__": 1744231651.420514, "content": "HTTPError,),\n):\n    \"\"\"Initialize a fallback model instance.\n\n    Args:\n        default_model: The name or instance of the default model to use.\n        fallback_models: The names or instances of the fallback models to use upon failure.\n        fallback_on: A callable or tuple of exceptions that should trigger a fallback.\n    \"\"\"\n    self.models = [infer_model(default_model), *[infer_model(m) for m in fallback_models]]\n\n    if isinstance(fallback_on, tuple):\n        self._fallback_on = _default_fallback_condition_factory(fallback_on)\n    else:\n        self._fallback_on = fallback_on\n\n```\n\n\n\n\n#### request `async`\n\n```\nrequest(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]\n\n```\n\nTry each model in sequence until one succeeds.\n\nIn case of failure, raise a FallbackExceptionGroup with all exceptions.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/fallback.py`\n```\nasync def request(\n    self,\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]:\n    \"\"\"Try each model in sequence until one succeeds.\n\n    In case of failure, raise a FallbackExceptionGroup with all exceptions.\n    \"\"\"\n    exceptions: list[Exception] = []\n\n    for model in self.models:\n        try:\n            response, usage = await model.request(messages, model_settings, model_request_parameters)\n        except Exception as exc:\n            if self._fallback_on(exc):\n                exceptions.append(exc)\n                continue\n            raise exc\n\n        self._set_span_attributes(model)\n        return response, usage\n\n    raise FallbackExceptionGroup('All models from FallbackModel failed', exceptions)\n\n```\n\n\n\n\n#### request\\_stream `async`\n\n```\nrequest_stream(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> AsyncIterator[StreamedResponse]\n\n```\n\nTry each model in sequence until one succeeds.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/fallback.py`\n```\n@asynccontextmanager\nasync def request_stream(\n    self,\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> AsyncIterator[StreamedResponse]:\n    \"\"\"Try each model in sequence until one succeeds.\"\"\"\n    exceptions: list[Exception] = []\n\n    for model in self.models:\n        async with AsyncExitStack() as stack:\n            try:\n                response = await stack.enter_async_context(\n                    model.request_stream(messages, model_settings, model_request_parameters)\n                )\n            except Exception as exc:\n                if self._fallback_on(exc):\n                    exceptions.append(exc)\n                    continue\n                raise exc\n\n            self._set_span_attributes(model)\n            yield response\n            return\n\n    raise FallbackExceptionGroup('All models from FallbackModel failed', exceptions)\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.function`\n=============================\n\nA model controlled by a local function.\n\n`FunctionModel` is similar to [`TestModel`](../test/),\nbut allows greater control over the model's behavior.\n\nIts primary use case is for more advanced unit testing than is possible with `TestModel`.\n\nHere's a minimal example:\n\nfunction\\_model\\_usage.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.messages import ModelMessage, ModelResponse, TextPart\nfrom pydantic_ai.models.function import FunctionModel, AgentInfo\n\nmy_agent = Agent('openai:gpt-4o')\n\n\nasync def model_function(\n    messages: list[ModelMessage], info: AgentInfo\n) -> ModelResponse:\n    print(messages)\n    \"\"\"\n    [\n        ModelRequest(\n            parts=[\n                UserPromptPart(\n                    content='Testing my agent...',\n                    timestamp=datetime.datetime(...),\n                    part_kind='user-prompt',\n                )\n            ],\n            kind='request',\n        )\n    ]\n    \"\"\"\n    print(info)\n    \"\"\"\n    AgentInfo(\n        function_tools=[], allow_text_result=True, result_tools=[], model_settings=None\n    )\n    \"\"\"\n    return ModelResponse(parts=[TextPart('hello world')])\n\n\nasync def test_my_agent():\n    \"\"\"Unit test for my_agent, to be run by pytest.\"\"\"\n    with my_agent.override(model=FunctionModel(model_function)):\n        result = await my_agent.run('Testing my agent...')\n        assert result.data == 'hello world'\n\n```\n\nSee [Unit testing with `FunctionModel`](../../../testing/#unit-testing-with-functionmodel) for detailed documentation.\n\n### FunctionModel `dataclass`\n\nBases: `Model`\n\nA model controlled by a local function.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n```\n@dataclass(init=False)\nclass FunctionModel(Model):\n    \"\"\"A model controlled by a local function.\n\n    Apart from `__init__`, all methods are private or match those of the base class.\n    \"\"\"\n\n    function: FunctionDef | None = None\n    stream_function: StreamFunctionDef | None = None\n\n    _model_name: str = field(repr=False)\n    _system: str = field(default='function', repr=False)\n\n    @overload\n    def __init__(self, function: FunctionDef, *, model_name: str | None = None) -> None: ...\n\n    @overload\n    def __init__(self, *, stream_function: StreamFunctionDef, model_name: str | None = None) -> None: ...\n\n    @", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-595efca0298903c32af81a505cfa2209", "__created_at__": 1744231651.420514, "content": "StreamFunctionDef | None = None\n\n    _model_name: str = field(repr=False)\n    _system: str = field(default='function', repr=False)\n\n    @overload\n    def __init__(self, function: FunctionDef, *, model_name: str | None = None) -> None: ...\n\n    @overload\n    def __init__(self, *, stream_function: StreamFunctionDef, model_name: str | None = None) -> None: ...\n\n    @overload\n    def __init__(\n        self, function: FunctionDef, *, stream_function: StreamFunctionDef, model_name: str | None = None\n    ) -> None: ...\n\n    def __init__(\n        self,\n        function: FunctionDef | None = None,\n        *,\n        stream_function: StreamFunctionDef | None = None,\n        model_name: str | None = None,\n    ):\n        \"\"\"Initialize a `FunctionModel`.\n\n        Either `function` or `stream_function` must be provided, providing both is allowed.\n\n        Args:\n            function: The function to call for non-streamed requests.\n            stream_function: The function to call for streamed requests.\n            model_name: The name of the model. If not provided, a name is generated from the function names.\n        \"\"\"\n        if function is None and stream_function is None:\n            raise TypeError('Either `function` or `stream_function` must be provided')\n        self.function = function\n        self.stream_function = stream_function\n\n        function_name = self.function.__name__ if self.function is not None else ''\n        stream_function_name = self.stream_function.__name__ if self.stream_function is not None else ''\n        self._model_name = model_name or f'function:{function_name}:{stream_function_name}'\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, usage.Usage]:\n        agent_info = AgentInfo(\n            model_request_parameters.function_tools,\n            model_request_parameters.allow_text_result,\n            model_request_parameters.result_tools,\n            model_settings,\n        )\n\n        assert self.function is not None, 'FunctionModel must receive a `function` to support non-streamed requests'\n\n        if inspect.iscoroutinefunction(self.function):\n            response = await self.function(messages, agent_info)\n        else:\n            response_ = await _utils.run_in_executor(self.function, messages, agent_info)\n            assert isinstance(response_, ModelResponse), response_\n            response = response_\n        response.model_name = self._model_name\n        # TODO is `messages` right here? Should it just be new messages?\n        return response, _estimate_usage(chain(messages, [response]))\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        agent_info = AgentInfo(\n            model_request_parameters.function_tools,\n            model_request_parameters.allow_text_result,\n            model_request_parameters.result_tools,\n            model_settings,\n        )\n\n        assert self.stream_function is not None, (\n            'FunctionModel must receive a `stream_function` to support streamed requests'\n        )\n\n        response_stream = PeekableAsyncStream(self.stream_function(messages, agent_info))\n\n        first = await response_stream.peek()\n        if isinstance(first, _utils.Unset):\n            raise ValueError('Stream function must return at least one item')\n\n        yield FunctionStreamedResponse(_model_name=self._model_name, _iter=response_stream)\n\n    @property\n    def model_name(self) -> str:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    function: FunctionDef, *, model_name: str | None = None\n) -> None\n\n```\n```\n__init__(\n    *,\n    stream_function: StreamFunctionDef,\n    model_name: str | None = None\n) -> None\n\n```\n```\n__init__(\n    function: FunctionDef,\n    *,\n    stream_function: StreamFunctionDef,\n    model_name: str | None = None\n) -> None\n\n```\n \n```\n__init__(\n    function: FunctionDef | None = None,\n    *,\n    stream_function: StreamFunctionDef | None = None,\n    model_name: str | None = None\n)\n\n```\n\nInitialize a `FunctionModel`.\n\nEither `function` or `stream_function` must be provided, providing both is allowed.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `function` | `FunctionDef | None` | The function to call for non-streamed requests. | `None` |\n| `stream_function` | `StreamFunctionDef | None` | The function to call for streamed requests. | `None` |\n| `model_name` | `str | None` | The name of the model. If not provided, a name is generated from the function names. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n```\ndef __init__(\n    self,\n    function: FunctionDef | None = None,\n    *,\n    stream_function: StreamFunctionDef | None = None,\n    model_name: str | None = None,\n):\n    \"\"\"Initialize a `FunctionModel`.\n\n    Either `function` or `stream_function` must be provided, providing both is allowed.\n\n    Args:\n        function: The function to call for non-streamed requests.\n        stream_function: The function to call for streamed requests.\n        model", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-67e1fb7008dc73bb2467aed7bf1ae385", "__created_at__": 1744231651.420514, "content": "`\ndef __init__(\n    self,\n    function: FunctionDef | None = None,\n    *,\n    stream_function: StreamFunctionDef | None = None,\n    model_name: str | None = None,\n):\n    \"\"\"Initialize a `FunctionModel`.\n\n    Either `function` or `stream_function` must be provided, providing both is allowed.\n\n    Args:\n        function: The function to call for non-streamed requests.\n        stream_function: The function to call for streamed requests.\n        model_name: The name of the model. If not provided, a name is generated from the function names.\n    \"\"\"\n    if function is None and stream_function is None:\n        raise TypeError('Either `function` or `stream_function` must be provided')\n    self.function = function\n    self.stream_function = stream_function\n\n    function_name = self.function.__name__ if self.function is not None else ''\n    stream_function_name = self.stream_function.__name__ if self.stream_function is not None else ''\n    self._model_name = model_name or f'function:{function_name}:{stream_function_name}'\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n### AgentInfo `dataclass`\n\nInformation about an agent.\n\nThis is passed as the second to functions used within `FunctionModel`.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n```\n@dataclass(frozen=True)\nclass AgentInfo:\n    \"\"\"Information about an agent.\n\n    This is passed as the second to functions used within [`FunctionModel`][pydantic_ai.models.function.FunctionModel].\n    \"\"\"\n\n    function_tools: list[ToolDefinition]\n    \"\"\"The function tools available on this agent.\n\n    These are the tools registered via the [`tool`][pydantic_ai.Agent.tool] and\n    [`tool_plain`][pydantic_ai.Agent.tool_plain] decorators.\n    \"\"\"\n    allow_text_result: bool\n    \"\"\"Whether a plain text result is allowed.\"\"\"\n    result_tools: list[ToolDefinition]\n    \"\"\"The tools that can called as the final result of the run.\"\"\"\n    model_settings: ModelSettings | None\n    \"\"\"The model settings passed to the run call.\"\"\"\n\n```\n\n\n#### function\\_tools `instance-attribute`\n\n```\nfunction_tools: list[ToolDefinition]\n\n```\n\nThe function tools available on this agent.\n\nThese are the tools registered via the `tool` and\n`tool_plain` decorators.\n\n\n\n#### allow\\_text\\_result `instance-attribute`\n\n```\nallow_text_result: bool\n\n```\n\nWhether a plain text result is allowed.\n\n\n\n#### result\\_tools `instance-attribute`\n\n```\nresult_tools: list[ToolDefinition]\n\n```\n\nThe tools that can called as the final result of the run.\n\n\n\n#### model\\_settings `instance-attribute`\n\n```\nmodel_settings: ModelSettings | None\n\n```\n\nThe model settings passed to the run call.\n\n\n\n\n\n\n### DeltaToolCall `dataclass`\n\nIncremental change to a tool call.\n\nUsed to describe a chunk when streaming structured responses.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n```\n@dataclass\nclass DeltaToolCall:\n    \"\"\"Incremental change to a tool call.\n\n    Used to describe a chunk when streaming structured responses.\n    \"\"\"\n\n    name: str | None = None\n    \"\"\"Incremental change to the name of the tool.\"\"\"\n    json_args: str | None = None\n    \"\"\"Incremental change to the arguments as JSON\"\"\"\n    tool_call_id: str | None = None\n    \"\"\"Incremental change to the tool call ID.\"\"\"\n\n```\n\n\n#### name `class-attribute` `instance-attribute`\n\n```\nname: str | None = None\n\n```\n\nIncremental change to the name of the tool.\n\n\n\n#### json\\_args `class-attribute` `instance-attribute`\n\n```\njson_args: str | None = None\n\n```\n\nIncremental change to the arguments as JSON\n\n\n\n#### tool\\_call\\_id `class-attribute` `instance-attribute`\n\n```\ntool_call_id: str | None = None\n\n```\n\nIncremental change to the tool call ID.\n\n\n\n\n\n\n### DeltaToolCalls `module-attribute`\n\n```\nDeltaToolCalls: TypeAlias = dict[int, DeltaToolCall]\n\n```\n\nA mapping of tool call IDs to incremental changes.\n\n\n\n### FunctionDef `module-attribute`\n\n```\nFunctionDef: TypeAlias = Callable[\n    [list[ModelMessage], AgentInfo],\n    Union[ModelResponse, Awaitable[ModelResponse]],\n]\n\n```\n\nA function used to generate a non-streamed response.\n\n\n\n### StreamFunctionDef `module-attribute`\n\n```\nStreamFunctionDef: TypeAlias = Callable[\n    [list[ModelMessage], AgentInfo],\n    AsyncIterator[Union[str, DeltaToolCalls]],\n]\n\n```\n\nA function used to generate a streamed response.\n\nWhile this is defined as having return type of `AsyncIterator[Union[str, DeltaToolCalls]]`, it should\nreally be considered as `Union[AsyncIterator[str], AsyncIterator[DeltaToolCalls]`,\n\nE.g. you need to yield all text or all `DeltaToolCalls`, not mix them.\n\n\n\n### FunctionStreamedResponse `dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for FunctionModel.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n```\n@dataclass\nclass FunctionStreamedResponse(StreamedResponse):\n    \"\"\"Implementation of `StreamedResponse` for [FunctionModel][pydantic_ai.models.function.FunctionModel].\"\"\"\n\n    _model_name: str\n    _iter: AsyncIterator[str | DeltaToolCalls]\n    _timestamp: datetime = field(default_factory=_", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-1d2c13afaff5bbc08c268a958dff4edb", "__created_at__": 1744231651.420514, "content": "StreamedResponse`\n\nImplementation of `StreamedResponse` for FunctionModel.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/function.py`\n```\n@dataclass\nclass FunctionStreamedResponse(StreamedResponse):\n    \"\"\"Implementation of `StreamedResponse` for [FunctionModel][pydantic_ai.models.function.FunctionModel].\"\"\"\n\n    _model_name: str\n    _iter: AsyncIterator[str | DeltaToolCalls]\n    _timestamp: datetime = field(default_factory=_utils.now_utc)\n\n    def __post_init__(self):\n        self._usage += _estimate_usage([])\n\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        async for item in self._iter:\n            if isinstance(item, str):\n                response_tokens = _estimate_string_tokens(item)\n                self._usage += usage.Usage(response_tokens=response_tokens, total_tokens=response_tokens)\n                yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=item)\n            else:\n                delta_tool_calls = item\n                for dtc_index, delta_tool_call in delta_tool_calls.items():\n                    if delta_tool_call.json_args:\n                        response_tokens = _estimate_string_tokens(delta_tool_call.json_args)\n                        self._usage += usage.Usage(response_tokens=response_tokens, total_tokens=response_tokens)\n                    maybe_event = self._parts_manager.handle_tool_call_delta(\n                        vendor_part_id=dtc_index,\n                        tool_name=delta_tool_call.name,\n                        args=delta_tool_call.json_args,\n                        tool_call_id=delta_tool_call.tool_call_id,\n                    )\n                    if maybe_event is not None:\n                        yield maybe_event\n\n    @property\n    def model_name(self) -> str:\n        \"\"\"Get the model name of the response.\"\"\"\n        return self._model_name\n\n    @property\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        return self._timestamp\n\n```\n\n\n#### model\\_name `property`\n\n```\nmodel_name: str\n\n```\n\nGet the model name of the response.\n\n\n\n#### timestamp `property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.gemini`\n===========================\n\nCustom interface to the `generativelanguage.googleapis.com` API using\n[HTTPX](https://www.python-httpx.org/) and [Pydantic](https://docs.pydantic.dev/latest/).\n\nThe Google SDK for interacting with the `generativelanguage.googleapis.com` API\n[`google-generativeai`](https://ai.google.dev/gemini-api/docs/quickstart?lang=python) reads like it was written by a\nJava developer who thought they knew everything about OOP, spent 30 minutes trying to learn Python,\ngave up and decided to build the library to prove how horrible Python is. It also doesn't use httpx for HTTP requests,\nand tries to implement tool calling itself, but doesn't use Pydantic or equivalent for validation.\n\nWe therefore implement support for the API directly.\n\nDespite these shortcomings, the Gemini model is actually quite powerful and very fast.\n\nSetup\n-----\n\nFor details on how to set up authentication with this model, see [model configuration for Gemini](../../../models/#gemini).\n\n### LatestGeminiModelNames `module-attribute`\n\n```\nLatestGeminiModelNames = Literal[\n    \"gemini-1.5-flash\",\n    \"gemini-1.5-flash-8b\",\n    \"gemini-1.5-pro\",\n    \"gemini-1.0-pro\",\n    \"gemini-2.0-flash-exp\",\n    \"gemini-2.0-flash-thinking-exp-01-21\",\n    \"gemini-exp-1206\",\n    \"gemini-2.0-flash\",\n    \"gemini-2.0-flash-lite-preview-02-05\",\n    \"gemini-2.0-pro-exp-02-05\",\n    \"gemini-2.5-pro-exp-03-25\",\n]\n\n```\n\nLatest Gemini models.\n\n\n\n### GeminiModelName `module-attribute`\n\n```\nGeminiModelName = Union[str, LatestGeminiModelNames]\n\n```\n\nPossible Gemini model names.\n\nSince Gemini supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [the Gemini API docs](https://ai.google.dev/gemini-api/docs/models/gemini#model-variations) for a full list.\n\n\n\n### GeminiModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Gemini model request.\n\nALL FIELDS MUST BE `gemini_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n```\nclass GeminiModelSettings(ModelSettings):\n    \"\"\"Settings used for a Gemini model request.\n\n    ALL FIELDS MUST BE `gemini_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n    \"\"\"\n\n    gemini_safety_settings: list[GeminiSafetySettings]\n\n```\n\n\n\n\n\n### GeminiModel `dataclass`\n\nBases: `Model`\n\nA model that uses Gemini via `generativelanguage.googleapis.com` API.\n\nThis is implemented from scratch rather than using a dedicated SDK, good API documentation is\navailable [here](https://ai.google.dev/api).\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n```\n@dataclass(init=False)\nclass GeminiModel(Model):\n    \"\"\"A model that uses Gemini via `generativelanguage.googleapis.com` API.\n\n    This is implemented from scratch rather than using a dedicated SDK, good API documentation is\n    available [here](https://ai.google.dev/api).", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c85826bcf2c124ee6da90aa381dfff25", "__created_at__": 1744231651.420514, "content": ").\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n```\n@dataclass(init=False)\nclass GeminiModel(Model):\n    \"\"\"A model that uses Gemini via `generativelanguage.googleapis.com` API.\n\n    This is implemented from scratch rather than using a dedicated SDK, good API documentation is\n    available [here](https://ai.google.dev/api).\n\n    Apart from `__init__`, all methods are private or match those of the base class.\n    \"\"\"\n\n    client: httpx.AsyncClient = field(repr=False)\n\n    _model_name: GeminiModelName = field(repr=False)\n    _provider: Literal['google-gla', 'google-vertex'] | Provider[httpx.AsyncClient] | None = field(repr=False)\n    _auth: AuthProtocol | None = field(repr=False)\n    _url: str | None = field(repr=False)\n    _system: str = field(default='gemini', repr=False)\n\n    def __init__(\n        self,\n        model_name: GeminiModelName,\n        *,\n        provider: Literal['google-gla', 'google-vertex'] | Provider[httpx.AsyncClient] = 'google-gla',\n    ):\n        \"\"\"Initialize a Gemini model.\n\n        Args:\n            model_name: The name of the model to use.\n            provider: The provider to use for authentication and API access. Can be either the string\n                'google-gla' or 'google-vertex' or an instance of `Provider[httpx.AsyncClient]`.\n                If not provided, a new provider will be created using the other parameters.\n        \"\"\"\n        self._model_name = model_name\n        self._provider = provider\n\n        if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self._system = provider.name\n        self.client = provider.client\n        self._url = str(self.client.base_url)\n\n    @property\n    def base_url(self) -> str:\n        assert self._url is not None, 'URL not initialized'\n        return self._url\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, usage.Usage]:\n        check_allow_model_requests()\n        async with self._make_request(\n            messages, False, cast(GeminiModelSettings, model_settings or {}), model_request_parameters\n        ) as http_response:\n            data = await http_response.aread()\n            response = _gemini_response_ta.validate_json(data)\n        return self._process_response(response), _metadata_as_usage(response)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        check_allow_model_requests()\n        async with self._make_request(\n            messages, True, cast(GeminiModelSettings, model_settings or {}), model_request_parameters\n        ) as http_response:\n            yield await self._process_streamed_response(http_response)\n\n    def customize_request_parameters(self, model_request_parameters: ModelRequestParameters) -> ModelRequestParameters:\n        def _customize_tool_def(t: ToolDefinition):\n            return replace(t, parameters_json_schema=_GeminiJsonSchema(t.parameters_json_schema).simplify())\n\n        return ModelRequestParameters(\n            function_tools=[_customize_tool_def(tool) for tool in model_request_parameters.function_tools],\n            allow_text_result=model_request_parameters.allow_text_result,\n            result_tools=[_customize_tool_def(tool) for tool in model_request_parameters.result_tools],\n        )\n\n    @property\n    def model_name(self) -> GeminiModelName:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> _GeminiTools | None:\n        tools = [_function_from_abstract_tool(t) for t in model_request_parameters.function_tools]\n        if model_request_parameters.result_tools:\n            tools += [_function_from_abstract_tool(t) for t in model_request_parameters.result_tools]\n        return _GeminiTools(function_declarations=tools) if tools else None\n\n    def _get_tool_config(\n        self, model_request_parameters: ModelRequestParameters, tools: _GeminiTools | None\n    ) -> _GeminiToolConfig | None:\n        if model_request_parameters.allow_text_result:\n            return None\n        elif tools:\n            return _tool_config([t['name'] for t in tools['function_declarations']])\n        else:\n            return _tool_config([])\n\n    @asynccontextmanager\n    async def _make_request(\n        self,\n        messages: list[ModelMessage],\n        streamed: bool,\n        model_settings: GeminiModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[HTTPResponse]:\n        tools = self._get_tools(model_request_parameters)\n        tool_config = self._get_tool_config(model_request_parameters, tools)\n        sys_prompt_parts, contents = await self._message_to_gemini_content(messages)\n\n        request_data = _GeminiRequest(contents=contents)\n        if sys_prompt_parts:\n            request_data['system_instruction'] = _GeminiTextContent(role='user', parts=sys_prompt_parts)\n        if tools is not None:\n            request_data['tools'] = tools\n        if tool_config is not None:\n            request_data['tool_config'] = tool_config\n\n        generation_config: _GeminiGenerationConfig = {}\n        if model_settings:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-311a0249fe229b6715b937248d87772f", "__created_at__": 1744231651.420514, "content": "message_to_gemini_content(messages)\n\n        request_data = _GeminiRequest(contents=contents)\n        if sys_prompt_parts:\n            request_data['system_instruction'] = _GeminiTextContent(role='user', parts=sys_prompt_parts)\n        if tools is not None:\n            request_data['tools'] = tools\n        if tool_config is not None:\n            request_data['tool_config'] = tool_config\n\n        generation_config: _GeminiGenerationConfig = {}\n        if model_settings:\n            if (max_tokens := model_settings.get('max_tokens')) is not None:\n                generation_config['max_output_tokens'] = max_tokens\n            if (temperature := model_settings.get('temperature')) is not None:\n                generation_config['temperature'] = temperature\n            if (top_p := model_settings.get('top_p')) is not None:\n                generation_config['top_p'] = top_p\n            if (presence_penalty := model_settings.get('presence_penalty')) is not None:\n                generation_config['presence_penalty'] = presence_penalty\n            if (frequency_penalty := model_settings.get('frequency_penalty')) is not None:\n                generation_config['frequency_penalty'] = frequency_penalty\n            if (gemini_safety_settings := model_settings.get('gemini_safety_settings')) != []:\n                request_data['safety_settings'] = gemini_safety_settings\n        if generation_config:\n            request_data['generation_config'] = generation_config\n\n        headers = {'Content-Type': 'application/json', 'User-Agent': get_user_agent()}\n        url = f'/{self._model_name}:{\"streamGenerateContent\" if streamed else \"generateContent\"}'\n\n        request_json = _gemini_request_ta.dump_json(request_data, by_alias=True)\n        async with self.client.stream(\n            'POST',\n            url,\n            content=request_json,\n            headers=headers,\n            timeout=model_settings.get('timeout', USE_CLIENT_DEFAULT),\n        ) as r:\n            if (status_code := r.status_code) != 200:\n                await r.aread()\n                if status_code >= 400:\n                    raise ModelHTTPError(status_code=status_code, model_name=self.model_name, body=r.text)\n                raise UnexpectedModelBehavior(f'Unexpected response from gemini {status_code}', r.text)\n            yield r\n\n    def _process_response(self, response: _GeminiResponse) -> ModelResponse:\n        if len(response['candidates']) != 1:\n            raise UnexpectedModelBehavior('Expected exactly one candidate in Gemini response')\n        if 'content' not in response['candidates'][0]:\n            if response['candidates'][0].get('finish_reason') == 'SAFETY':\n                raise UnexpectedModelBehavior('Safety settings triggered', str(response))\n            else:\n                raise UnexpectedModelBehavior('Content field missing from Gemini response', str(response))\n        parts = response['candidates'][0]['content']['parts']\n        return _process_response_from_parts(parts, model_name=response.get('model_version', self._model_name))\n\n    async def _process_streamed_response(self, http_response: HTTPResponse) -> StreamedResponse:\n        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"\n        aiter_bytes = http_response.aiter_bytes()\n        start_response: _GeminiResponse | None = None\n        content = bytearray()\n\n        async for chunk in aiter_bytes:\n            content.extend(chunk)\n            responses = _gemini_streamed_response_ta.validate_json(\n                _ensure_decodeable(content),\n                experimental_allow_partial='trailing-strings',\n            )\n            if responses:\n                last = responses[-1]\n                if last['candidates'] and last['candidates'][0].get('content', {}).get('parts'):\n                    start_response = last\n                    break\n\n        if start_response is None:\n            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')\n\n        return GeminiStreamedResponse(_model_name=self._model_name, _content=content, _stream=aiter_bytes)\n\n    @classmethod\n    async def _message_to_gemini_content(\n        cls, messages: list[ModelMessage]\n    ) -> tuple[list[_GeminiTextPart], list[_GeminiContent]]:\n        sys_prompt_parts: list[_GeminiTextPart] = []\n        contents: list[_GeminiContent] = []\n        for m in messages:\n            if isinstance(m, ModelRequest):\n                message_parts: list[_GeminiPartUnion] = []\n\n                for part in m.parts:\n                    if isinstance(part, SystemPromptPart):\n                        sys_prompt_parts.append(_GeminiTextPart(text=part.content))\n                    elif isinstance(part, UserPromptPart):\n                        message_parts.extend(await cls._map_user_prompt(part))\n                    elif isinstance(part, ToolReturnPart):\n                        message_parts.append(_response_part_from_response(part.tool_name, part.model_response_object()))\n                    elif isinstance(part, RetryPromptPart):\n                        if part.tool_name is None:\n                            message_parts.append(_GeminiTextPart(text=part.model_response()))\n                        else:\n                            response = {'call_error': part.model_response()}\n                            message_parts.append(_response_part_from_response(part.tool_name, response))\n                    else:\n                        assert_never(part)\n\n                if message_parts:\n                    contents.append(_GeminiContent(role='user', parts=message_parts))\n            elif isinstance(m, ModelResponse):\n                contents.append(_content_model_response(m))\n            else:\n                assert_never(m)\n\n        return sys_prompt_parts, contents\n\n    @staticmethod\n    async def _map_user_prompt(part: UserPromptPart) -> list[_GeminiPartUnion]:\n        if isinstance(part.content, str):\n            return [{'text': part.content}]\n        else:\n            content: list[_GeminiPartUnion] = []\n            for item in part.content:\n                if isinstance(item, str):\n                    content.append({'text': item})", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf", "__created_at__": 1744231651.420514, "content": "_model_response(m))\n            else:\n                assert_never(m)\n\n        return sys_prompt_parts, contents\n\n    @staticmethod\n    async def _map_user_prompt(part: UserPromptPart) -> list[_GeminiPartUnion]:\n        if isinstance(part.content, str):\n            return [{'text': part.content}]\n        else:\n            content: list[_GeminiPartUnion] = []\n            for item in part.content:\n                if isinstance(item, str):\n                    content.append({'text': item})\n                elif isinstance(item, BinaryContent):\n                    base64_encoded = base64.b64encode(item.data).decode('utf-8')\n                    content.append(\n                        _GeminiInlineDataPart(inline_data={'data': base64_encoded, 'mime_type': item.media_type})\n                    )\n                elif isinstance(item, (AudioUrl, ImageUrl, DocumentUrl)):\n                    client = cached_async_http_client()\n                    response = await client.get(item.url, follow_redirects=True)\n                    response.raise_for_status()\n                    mime_type = response.headers['Content-Type'].split(';')[0]\n                    inline_data = _GeminiInlineDataPart(\n                        inline_data={'data': base64.b64encode(response.content).decode('utf-8'), 'mime_type': mime_type}\n                    )\n                    content.append(inline_data)\n                else:\n                    assert_never(item)\n        return content\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: GeminiModelName,\n    *,\n    provider: (\n        Literal[\"google-gla\", \"google-vertex\"]\n        | Provider[AsyncClient]\n    ) = \"google-gla\"\n)\n\n```\n\nInitialize a Gemini model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `GeminiModelName` | The name of the model to use. | *required* |\n| `provider` | `Literal['google-gla', 'google-vertex'] | Provider[AsyncClient]` | The provider to use for authentication and API access. Can be either the string 'google-gla' or 'google-vertex' or an instance of `Provider[httpx.AsyncClient]`. If not provided, a new provider will be created using the other parameters. | `'google-gla'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n```\ndef __init__(\n    self,\n    model_name: GeminiModelName,\n    *,\n    provider: Literal['google-gla', 'google-vertex'] | Provider[httpx.AsyncClient] = 'google-gla',\n):\n    \"\"\"Initialize a Gemini model.\n\n    Args:\n        model_name: The name of the model to use.\n        provider: The provider to use for authentication and API access. Can be either the string\n            'google-gla' or 'google-vertex' or an instance of `Provider[httpx.AsyncClient]`.\n            If not provided, a new provider will be created using the other parameters.\n    \"\"\"\n    self._model_name = model_name\n    self._provider = provider\n\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self._system = provider.name\n    self.client = provider.client\n    self._url = str(self.client.base_url)\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: GeminiModelName\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n### AuthProtocol\n\nBases: `Protocol`\n\nAbstract definition for Gemini authentication.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n```\nclass AuthProtocol(Protocol):\n    \"\"\"Abstract definition for Gemini authentication.\"\"\"\n\n    async def headers(self) -> dict[str, str]: ...\n\n```\n\n\n\n\n\n### ApiKeyAuth `dataclass`\n\nAuthentication using an API key for the `X-Goog-Api-Key` header.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n```\n@dataclass\nclass ApiKeyAuth:\n    \"\"\"Authentication using an API key for the `X-Goog-Api-Key` header.\"\"\"\n\n    api_key: str\n\n    async def headers(self) -> dict[str, str]:\n        # https://cloud.google.com/docs/authentication/api-keys-use#using-with-rest\n        return {'X-Goog-Api-Key': self.api_key}\n\n```\n\n\n\n\n\n### GeminiStreamedResponse `dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for the Gemini model.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n```\n@dataclass\nclass GeminiStreamedResponse(StreamedResponse):\n    \"\"\"Implementation of `StreamedResponse` for the Gemini model.\"\"\"\n\n    _model_name: GeminiModelName\n    _content: bytearray\n    _stream: AsyncIterator[bytes]\n    _timestamp: datetime = field(default_factory=_utils.now_utc, init=False)\n\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        async for gemini_response in self._get_gemini_responses():\n            candidate = gemini_response['candidates'][0]\n            if 'content' not in candidate:\n                raise UnexpectedModelBehavior('Streamed response has no content field')\n            gemini_part: _GeminiPartUnion\n            for gemini_part in candidate['content']['parts']:\n                if 'text' in gemini_part:\n                    # Using vendor_part_id=None means we can produce multiple text parts if their deltas are sprinkled\n                    # amongst the tool call deltas\n                    yield self._parts_manager.handle_text_delta(vendor_part_id=None, content=gemini_part['text'])\n\n                elif 'function_call' in gem", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-6dec771bf122777d549352881e0fea72", "__created_at__": 1744231651.420514, "content": "response has no content field')\n            gemini_part: _GeminiPartUnion\n            for gemini_part in candidate['content']['parts']:\n                if 'text' in gemini_part:\n                    # Using vendor_part_id=None means we can produce multiple text parts if their deltas are sprinkled\n                    # amongst the tool call deltas\n                    yield self._parts_manager.handle_text_delta(vendor_part_id=None, content=gemini_part['text'])\n\n                elif 'function_call' in gemini_part:\n                    # Here, we assume all function_call parts are complete and don't have deltas.\n                    # We do this by assigning a unique randomly generated \"vendor_part_id\".\n                    # We need to confirm whether this is actually true, but if it isn't, we can still handle it properly\n                    # it would just be a bit more complicated. And we'd need to confirm the intended semantics.\n                    maybe_event = self._parts_manager.handle_tool_call_delta(\n                        vendor_part_id=uuid4(),\n                        tool_name=gemini_part['function_call']['name'],\n                        args=gemini_part['function_call']['args'],\n                        tool_call_id=None,\n                    )\n                    if maybe_event is not None:\n                        yield maybe_event\n                else:\n                    assert 'function_response' in gemini_part, f'Unexpected part: {gemini_part}'\n\n    async def _get_gemini_responses(self) -> AsyncIterator[_GeminiResponse]:\n        # This method exists to ensure we only yield completed items, so we don't need to worry about\n        # partial gemini responses, which would make everything more complicated\n\n        gemini_responses: list[_GeminiResponse] = []\n        current_gemini_response_index = 0\n        # Right now, there are some circumstances where we will have information that could be yielded sooner than it is\n        # But changing that would make things a lot more complicated.\n        async for chunk in self._stream:\n            self._content.extend(chunk)\n\n            gemini_responses = _gemini_streamed_response_ta.validate_json(\n                _ensure_decodeable(self._content),\n                experimental_allow_partial='trailing-strings',\n            )\n\n            # The idea: yield only up to the latest response, which might still be partial.\n            # Note that if the latest response is complete, we could yield it immediately, but there's not a good\n            # allow_partial API to determine if the last item in the list is complete.\n            responses_to_yield = gemini_responses[:-1]\n            for r in responses_to_yield[current_gemini_response_index:]:\n                current_gemini_response_index += 1\n                self._usage += _metadata_as_usage(r)\n                yield r\n\n        # Now yield the final response, which should be complete\n        if gemini_responses:\n            r = gemini_responses[-1]\n            self._usage += _metadata_as_usage(r)\n            yield r\n\n    @property\n    def model_name(self) -> GeminiModelName:\n        \"\"\"Get the model name of the response.\"\"\"\n        return self._model_name\n\n    @property\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        return self._timestamp\n\n```\n\n\n#### model\\_name `property`\n\n```\nmodel_name: GeminiModelName\n\n```\n\nGet the model name of the response.\n\n\n\n#### timestamp `property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n\n\n\n\n\n### GeminiSafetySettings\n\nBases: `TypedDict`\n\nSafety settings options for Gemini model request.\n\nSee [Gemini API docs](https://ai.google.dev/gemini-api/docs/safety-settings) for safety category and threshold descriptions.\nFor an example on how to use `GeminiSafetySettings`, see [here](../../../agents/#model-specific-settings).\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/gemini.py`\n```\nclass GeminiSafetySettings(TypedDict):\n    \"\"\"Safety settings options for Gemini model request.\n\n    See [Gemini API docs](https://ai.google.dev/gemini-api/docs/safety-settings) for safety category and threshold descriptions.\n    For an example on how to use `GeminiSafetySettings`, see [here](../../agents.md#model-specific-settings).\n    \"\"\"\n\n    category: Literal[\n        'HARM_CATEGORY_UNSPECIFIED',\n        'HARM_CATEGORY_HARASSMENT',\n        'HARM_CATEGORY_HATE_SPEECH',\n        'HARM_CATEGORY_SEXUALLY_EXPLICIT',\n        'HARM_CATEGORY_DANGEROUS_CONTENT',\n        'HARM_CATEGORY_CIVIC_INTEGRITY',\n    ]\n    \"\"\"\n    Safety settings category.\n    \"\"\"\n\n    threshold: Literal[\n        'HARM_BLOCK_THRESHOLD_UNSPECIFIED',\n        'BLOCK_LOW_AND_ABOVE',\n        'BLOCK_MEDIUM_AND_ABOVE',\n        'BLOCK_ONLY_HIGH',\n        'BLOCK_NONE',\n        'OFF',\n    ]\n    \"\"\"\n    Safety settings threshold.\n    \"\"\"\n\n```\n\n\n#### category `instance-attribute`\n\n```\ncategory: Literal[\n    \"HARM_CATEGORY_UNSPECIFIED\",\n    \"HARM_CATEGORY_HARASSMENT\",\n    \"HARM_CATEGORY_HATE_SPEECH\",\n    \"HARM_CATEGORY_SEXUALLY_EXPLICIT\",\n    \"HARM_CATEGORY_DANGEROUS_CONTENT\",\n    \"HARM_CATEGORY_CIVIC_INTEGRITY\",\n]\n\n```\n\nSafety settings category.\n\n\n\n#### threshold `instance-attribute`\n\n```\nthreshold: Literal[\n    \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\",\n    \"OFF\",\n]\n\n```\n\nSafety settings threshold.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.groq`\n=========================\n\nSetup\n-----\n\nFor details on how to set up authentication with this model, see [model configuration for", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-15fdf584bfe078df410fd6c110374e1e", "__created_at__": 1744231651.420514, "content": "`\n\nSafety settings category.\n\n\n\n#### threshold `instance-attribute`\n\n```\nthreshold: Literal[\n    \"HARM_BLOCK_THRESHOLD_UNSPECIFIED\",\n    \"BLOCK_LOW_AND_ABOVE\",\n    \"BLOCK_MEDIUM_AND_ABOVE\",\n    \"BLOCK_ONLY_HIGH\",\n    \"BLOCK_NONE\",\n    \"OFF\",\n]\n\n```\n\nSafety settings threshold.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.groq`\n=========================\n\nSetup\n-----\n\nFor details on how to set up authentication with this model, see [model configuration for Groq](../../../models/#groq).\n\n### ProductionGroqModelNames `module-attribute`\n\n```\nProductionGroqModelNames = Literal[\n    \"distil-whisper-large-v3-en\",\n    \"gemma2-9b-it\",\n    \"llama-3.3-70b-versatile\",\n    \"llama-3.1-8b-instant\",\n    \"llama-guard-3-8b\",\n    \"llama3-70b-8192\",\n    \"llama3-8b-8192\",\n    \"whisper-large-v3\",\n    \"whisper-large-v3-turbo\",\n]\n\n```\n\nProduction Groq models from <https://console.groq.com/docs/models#production-models>.\n\n\n\n### PreviewGroqModelNames `module-attribute`\n\n```\nPreviewGroqModelNames = Literal[\n    \"playai-tts\",\n    \"playai-tts-arabic\",\n    \"qwen-qwq-32b\",\n    \"mistral-saba-24b\",\n    \"qwen-2.5-coder-32b\",\n    \"qwen-2.5-32b\",\n    \"deepseek-r1-distill-qwen-32b\",\n    \"deepseek-r1-distill-llama-70b\",\n    \"llama-3.3-70b-specdec\",\n    \"llama-3.2-1b-preview\",\n    \"llama-3.2-3b-preview\",\n    \"llama-3.2-11b-vision-preview\",\n    \"llama-3.2-90b-vision-preview\",\n]\n\n```\n\nPreview Groq models from <https://console.groq.com/docs/models#preview-models>.\n\n\n\n### GroqModelName `module-attribute`\n\n```\nGroqModelName = Union[\n    str, ProductionGroqModelNames, PreviewGroqModelNames\n]\n\n```\n\nPossible Groq model names.\n\nSince Groq supports a variety of models and the list changes frequencly, we explicitly list the named models as of 2025-03-31\nbut allow any name in the type hints.\n\nSee <https://console.groq.com/docs/models> for an up to date date list of models and more details.\n\n\n\n### GroqModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Groq model request.\n\nALL FIELDS MUST BE `groq_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n```\nclass GroqModelSettings(ModelSettings):\n    \"\"\"Settings used for a Groq model request.\n\n    ALL FIELDS MUST BE `groq_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n    \"\"\"\n\n```\n\n\n\n\n\n### GroqModel `dataclass`\n\nBases: `Model`\n\nA model that uses the Groq API.\n\nInternally, this uses the [Groq Python client](https://github.com/groq/groq-python) to interact with the API.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n```\n@dataclass(init=False)\nclass GroqModel(Model):\n    \"\"\"A model that uses the Groq API.\n\n    Internally, this uses the [Groq Python client](https://github.com/groq/groq-python) to interact with the API.\n\n    Apart from `__init__`, all methods are private or match those of the base class.\n    \"\"\"\n\n    client: AsyncGroq = field(repr=False)\n\n    _model_name: GroqModelName = field(repr=False)\n    _system: str = field(default='groq', repr=False)\n\n    def __init__(self, model_name: GroqModelName, *, provider: Literal['groq'] | Provider[AsyncGroq] = 'groq'):\n        \"\"\"Initialize a Groq model.\n\n        Args:\n            model_name: The name of the Groq model to use. List of model names available\n                [here](https://console.groq.com/docs/models).\n            provider: The provider to use for authentication and API access. Can be either the string\n                'groq' or an instance of `Provider[AsyncGroq]`. If not provided, a new provider will be\n                created using the other parameters.\n        \"\"\"\n        self._model_name = model_name\n\n        if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self.client = provider.client\n\n    @property\n    def base_url(self) -> str:\n        return str(self.client.base_url)\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, usage.Usage]:\n        check_allow_model_requests()\n        response = await self._completions_create(\n            messages, False, cast(GroqModelSettings, model_settings or {}), model_request_parameters\n        )\n        return self._process_response(response), _map_usage(response)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: Model", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-77d1c9fabe1883697171dedd7266ffd7", "__created_at__": 1744231651.420514, "content": "model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, usage.Usage]:\n        check_allow_model_requests()\n        response = await self._completions_create(\n            messages, False, cast(GroqModelSettings, model_settings or {}), model_request_parameters\n        )\n        return self._process_response(response), _map_usage(response)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        check_allow_model_requests()\n        response = await self._completions_create(\n            messages, True, cast(GroqModelSettings, model_settings or {}), model_request_parameters\n        )\n        async with response:\n            yield await self._process_streamed_response(response)\n\n    @property\n    def model_name(self) -> GroqModelName:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n    @overload\n    async def _completions_create(\n        self,\n        messages: list[ModelMessage],\n        stream: Literal[True],\n        model_settings: GroqModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncStream[chat.ChatCompletionChunk]:\n        pass\n\n    @overload\n    async def _completions_create(\n        self,\n        messages: list[ModelMessage],\n        stream: Literal[False],\n        model_settings: GroqModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> chat.ChatCompletion:\n        pass\n\n    async def _completions_create(\n        self,\n        messages: list[ModelMessage],\n        stream: bool,\n        model_settings: GroqModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> chat.ChatCompletion | AsyncStream[chat.ChatCompletionChunk]:\n        tools = self._get_tools(model_request_parameters)\n        # standalone function to make it easier to override\n        if not tools:\n            tool_choice: Literal['none', 'required', 'auto'] | None = None\n        elif not model_request_parameters.allow_text_result:\n            tool_choice = 'required'\n        else:\n            tool_choice = 'auto'\n\n        groq_messages = list(chain(*(self._map_message(m) for m in messages)))\n\n        try:\n            return await self.client.chat.completions.create(\n                model=str(self._model_name),\n                messages=groq_messages,\n                n=1,\n                parallel_tool_calls=model_settings.get('parallel_tool_calls', NOT_GIVEN),\n                tools=tools or NOT_GIVEN,\n                tool_choice=tool_choice or NOT_GIVEN,\n                stop=model_settings.get('stop_sequences', NOT_GIVEN),\n                stream=stream,\n                max_tokens=model_settings.get('max_tokens', NOT_GIVEN),\n                temperature=model_settings.get('temperature', NOT_GIVEN),\n                top_p=model_settings.get('top_p', NOT_GIVEN),\n                timeout=model_settings.get('timeout', NOT_GIVEN),\n                seed=model_settings.get('seed', NOT_GIVEN),\n                presence_penalty=model_settings.get('presence_penalty', NOT_GIVEN),\n                frequency_penalty=model_settings.get('frequency_penalty', NOT_GIVEN),\n                logit_bias=model_settings.get('logit_bias', NOT_GIVEN),\n                extra_headers={'User-Agent': get_user_agent()},\n            )\n        except APIStatusError as e:\n            if (status_code := e.status_code) >= 400:\n                raise ModelHTTPError(status_code=status_code, model_name=self.model_name, body=e.body) from e\n            raise\n\n    def _process_response(self, response: chat.ChatCompletion) -> ModelResponse:\n        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"\n        timestamp = datetime.fromtimestamp(response.created, tz=timezone.utc)\n        choice = response.choices[0]\n        items: list[ModelResponsePart] = []\n        if choice.message.content is not None:\n            items.append(TextPart(content=choice.message.content))\n        if choice.message.tool_calls is not None:\n            for c in choice.message.tool_calls:\n                items.append(ToolCallPart(tool_name=c.function.name, args=c.function.arguments, tool_call_id=c.id))\n        return ModelResponse(items, model_name=response.model, timestamp=timestamp)\n\n    async def _process_streamed_response(self, response: AsyncStream[chat.ChatCompletionChunk]) -> GroqStreamedResponse:\n        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"\n        peekable_response = _utils.PeekableAsyncStream(response)\n        first_chunk = await peekable_response.peek()\n        if isinstance(first_chunk, _utils.Unset):\n            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')\n\n        return GroqStreamedResponse(\n            _response=peekable_response,\n            _model_name=self._model_name,\n            _timestamp=datetime.fromtimestamp(first_chunk.created, tz=timezone.utc),\n        )\n\n    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[chat.ChatCompletionToolParam]:\n        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]\n        if model_request_parameters.result_tools:\n            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]\n        return tools\n\n    def _map_message(self, message: ModelMessage) -> Iterable[chat.ChatCompletionMessageParam]:\n        \"\"\"Just maps a `pydantic_ai.Message` to a `groq.types.ChatCompletionMessageParam`.\"\"\"\n        if isinstance(message, ModelRequest):\n            yield from self._map_user_message(message)\n        elif isinstance(message, ModelResponse):\n            texts: list[str", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f73ad8c376a9fcf91ca2d50decf5ccc8", "__created_at__": 1744231651.420514, "content": "tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]\n        return tools\n\n    def _map_message(self, message: ModelMessage) -> Iterable[chat.ChatCompletionMessageParam]:\n        \"\"\"Just maps a `pydantic_ai.Message` to a `groq.types.ChatCompletionMessageParam`.\"\"\"\n        if isinstance(message, ModelRequest):\n            yield from self._map_user_message(message)\n        elif isinstance(message, ModelResponse):\n            texts: list[str] = []\n            tool_calls: list[chat.ChatCompletionMessageToolCallParam] = []\n            for item in message.parts:\n                if isinstance(item, TextPart):\n                    texts.append(item.content)\n                elif isinstance(item, ToolCallPart):\n                    tool_calls.append(self._map_tool_call(item))\n                else:\n                    assert_never(item)\n            message_param = chat.ChatCompletionAssistantMessageParam(role='assistant')\n            if texts:\n                # Note: model responses from this model should only have one text item, so the following\n                # shouldn't merge multiple texts into one unless you switch models between runs:\n                message_param['content'] = '\\n\\n'.join(texts)\n            if tool_calls:\n                message_param['tool_calls'] = tool_calls\n            yield message_param\n        else:\n            assert_never(message)\n\n    @staticmethod\n    def _map_tool_call(t: ToolCallPart) -> chat.ChatCompletionMessageToolCallParam:\n        return chat.ChatCompletionMessageToolCallParam(\n            id=_guard_tool_call_id(t=t),\n            type='function',\n            function={'name': t.tool_name, 'arguments': t.args_as_json_str()},\n        )\n\n    @staticmethod\n    def _map_tool_definition(f: ToolDefinition) -> chat.ChatCompletionToolParam:\n        return {\n            'type': 'function',\n            'function': {\n                'name': f.name,\n                'description': f.description,\n                'parameters': f.parameters_json_schema,\n            },\n        }\n\n    @classmethod\n    def _map_user_message(cls, message: ModelRequest) -> Iterable[chat.ChatCompletionMessageParam]:\n        for part in message.parts:\n            if isinstance(part, SystemPromptPart):\n                yield chat.ChatCompletionSystemMessageParam(role='system', content=part.content)\n            elif isinstance(part, UserPromptPart):\n                yield cls._map_user_prompt(part)\n            elif isinstance(part, ToolReturnPart):\n                yield chat.ChatCompletionToolMessageParam(\n                    role='tool',\n                    tool_call_id=_guard_tool_call_id(t=part),\n                    content=part.model_response_str(),\n                )\n            elif isinstance(part, RetryPromptPart):\n                if part.tool_name is None:\n                    yield chat.ChatCompletionUserMessageParam(role='user', content=part.model_response())\n                else:\n                    yield chat.ChatCompletionToolMessageParam(\n                        role='tool',\n                        tool_call_id=_guard_tool_call_id(t=part),\n                        content=part.model_response(),\n                    )\n\n    @staticmethod\n    def _map_user_prompt(part: UserPromptPart) -> chat.ChatCompletionUserMessageParam:\n        content: str | list[chat.ChatCompletionContentPartParam]\n        if isinstance(part.content, str):\n            content = part.content\n        else:\n            content = []\n            for item in part.content:\n                if isinstance(item, str):\n                    content.append(chat.ChatCompletionContentPartTextParam(text=item, type='text'))\n                elif isinstance(item, ImageUrl):\n                    image_url = ImageURL(url=item.url)\n                    content.append(chat.ChatCompletionContentPartImageParam(image_url=image_url, type='image_url'))\n                elif isinstance(item, BinaryContent):\n                    base64_encoded = base64.b64encode(item.data).decode('utf-8')\n                    if item.is_image:\n                        image_url = ImageURL(url=f'data:{item.media_type};base64,{base64_encoded}')\n                        content.append(chat.ChatCompletionContentPartImageParam(image_url=image_url, type='image_url'))\n                    else:\n                        raise RuntimeError('Only images are supported for binary content in Groq.')\n                elif isinstance(item, DocumentUrl):  # pragma: no cover\n                    raise RuntimeError('DocumentUrl is not supported in Groq.')\n                else:  # pragma: no cover\n                    raise RuntimeError(f'Unsupported content type: {type(item)}')\n\n        return chat.ChatCompletionUserMessageParam(role='user', content=content)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: GroqModelName,\n    *,\n    provider: Literal[\"groq\"] | Provider[AsyncGroq] = \"groq\"\n)\n\n```\n\nInitialize a Groq model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `GroqModelName` | The name of the Groq model to use. List of model names available [here](https://console.groq.com/docs/models). | *required* |\n| `provider` | `Literal['groq'] | Provider[AsyncGroq]` | The provider to use for authentication and API access. Can be either the string 'groq' or an instance of `Provider[AsyncGroq]`. If not provided, a new provider will be created using the other parameters. | `'groq'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n```\ndef __init__(self, model_name: GroqModelName, *, provider: Literal['groq'] | Provider[AsyncGroq] = 'groq'):\n    \"\"\"Initialize a Groq model.\n\n    Args:\n        model_name: The name of the Groq model to use. List of model names available\n            [here](https://console.groq.com/docs/models).\n        provider: The provider to use for authentication and API access. Can be either the string", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-23dd09bcb6c976f2167345bb77e402ff", "__created_at__": 1744231651.420514, "content": ".py`\n```\ndef __init__(self, model_name: GroqModelName, *, provider: Literal['groq'] | Provider[AsyncGroq] = 'groq'):\n    \"\"\"Initialize a Groq model.\n\n    Args:\n        model_name: The name of the Groq model to use. List of model names available\n            [here](https://console.groq.com/docs/models).\n        provider: The provider to use for authentication and API access. Can be either the string\n            'groq' or an instance of `Provider[AsyncGroq]`. If not provided, a new provider will be\n            created using the other parameters.\n    \"\"\"\n    self._model_name = model_name\n\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self.client = provider.client\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: GroqModelName\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n### GroqStreamedResponse `dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for Groq models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/groq.py`\n```\n@dataclass\nclass GroqStreamedResponse(StreamedResponse):\n    \"\"\"Implementation of `StreamedResponse` for Groq models.\"\"\"\n\n    _model_name: GroqModelName\n    _response: AsyncIterable[chat.ChatCompletionChunk]\n    _timestamp: datetime\n\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        async for chunk in self._response:\n            self._usage += _map_usage(chunk)\n\n            try:\n                choice = chunk.choices[0]\n            except IndexError:\n                continue\n\n            # Handle the text part of the response\n            content = choice.delta.content\n            if content is not None:\n                yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=content)\n\n            # Handle the tool calls\n            for dtc in choice.delta.tool_calls or []:\n                maybe_event = self._parts_manager.handle_tool_call_delta(\n                    vendor_part_id=dtc.index,\n                    tool_name=dtc.function and dtc.function.name,\n                    args=dtc.function and dtc.function.arguments,\n                    tool_call_id=dtc.id,\n                )\n                if maybe_event is not None:\n                    yield maybe_event\n\n    @property\n    def model_name(self) -> GroqModelName:\n        \"\"\"Get the model name of the response.\"\"\"\n        return self._model_name\n\n    @property\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        return self._timestamp\n\n```\n\n\n#### model\\_name `property`\n\n```\nmodel_name: GroqModelName\n\n```\n\nGet the model name of the response.\n\n\n\n#### timestamp `property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n\n\n\n\n\n\n\n\n\npydantic\\_ai.models.instrumented\n================================\n\n### InstrumentationSettings `dataclass`\n\nOptions for instrumenting models and agents with OpenTelemetry.\n\nUsed in:\n\n* `Agent(instrument=...)`\n* `Agent.instrument_all()`\n* `InstrumentedModel`\n\nSee the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/instrumented.py`\n```\n@dataclass(init=False)\nclass InstrumentationSettings:\n    \"\"\"Options for instrumenting models and agents with OpenTelemetry.\n\n    Used in:\n\n    - `Agent(instrument=...)`\n    - [`Agent.instrument_all()`][pydantic_ai.agent.Agent.instrument_all]\n    - [`InstrumentedModel`][pydantic_ai.models.instrumented.InstrumentedModel]\n\n    See the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info.\n    \"\"\"\n\n    tracer: Tracer = field(repr=False)\n    event_logger: EventLogger = field(repr=False)\n    event_mode: Literal['attributes', 'logs'] = 'attributes'\n\n    def __init__(\n        self,\n        *,\n        event_mode: Literal['attributes', 'logs'] = 'attributes',\n        tracer_provider: TracerProvider | None = None,\n        event_logger_provider: EventLoggerProvider | None = None,\n    ):\n        \"\"\"Create instrumentation options.\n\n        Args:\n            event_mode: The mode for emitting events. If `'attributes'`, events are attached to the span as attributes.\n                If `'logs'`, events are emitted as OpenTelemetry log-based events.\n            tracer_provider: The OpenTelemetry tracer provider to use.\n                If not provided, the global tracer provider is used.\n                Calling `logfire.configure()` sets the global tracer provider, so most users don't need this.\n            event_logger_provider: The OpenTelemetry event logger provider to use.\n                If not provided, the global event logger provider is used.\n                Calling `logfire.configure()` sets the global event logger provider, so most users don't need this.\n                This is only used if `event_mode='logs'`.\n        \"\"\"\n        from pydantic_ai import __version__\n\n        tracer_provider = tracer_provider or get_tracer_provider()\n        event_logger_provider = event_logger_provider or get_event_logger_provider()\n        self.tracer = tracer_provider.get_tracer('pydantic-ai', __version__)\n        self.event_logger = event_logger_provider.get_event_logger('pydantic-ai', __version__)\n        self.event_mode = event_mode\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    event_mode: Literal[\n        \"attributes\", \"logs\"\n    ] = \"attributes\",\n    tracer_provider: TracerProvider | None = None,\n    event_logger_provider", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-790ebf5be3b16b55c5c47a819e17bb54", "__created_at__": 1744231651.420514, "content": "()\n        self.tracer = tracer_provider.get_tracer('pydantic-ai', __version__)\n        self.event_logger = event_logger_provider.get_event_logger('pydantic-ai', __version__)\n        self.event_mode = event_mode\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    event_mode: Literal[\n        \"attributes\", \"logs\"\n    ] = \"attributes\",\n    tracer_provider: TracerProvider | None = None,\n    event_logger_provider: EventLoggerProvider | None = None\n)\n\n```\n\nCreate instrumentation options.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `event_mode` | `Literal['attributes', 'logs']` | The mode for emitting events. If `'attributes'`, events are attached to the span as attributes. If `'logs'`, events are emitted as OpenTelemetry log-based events. | `'attributes'` |\n| `tracer_provider` | `TracerProvider | None` | The OpenTelemetry tracer provider to use. If not provided, the global tracer provider is used. Calling `logfire.configure()` sets the global tracer provider, so most users don't need this. | `None` |\n| `event_logger_provider` | `EventLoggerProvider | None` | The OpenTelemetry event logger provider to use. If not provided, the global event logger provider is used. Calling `logfire.configure()` sets the global event logger provider, so most users don't need this. This is only used if `event_mode='logs'`. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/instrumented.py`\n```\ndef __init__(\n    self,\n    *,\n    event_mode: Literal['attributes', 'logs'] = 'attributes',\n    tracer_provider: TracerProvider | None = None,\n    event_logger_provider: EventLoggerProvider | None = None,\n):\n    \"\"\"Create instrumentation options.\n\n    Args:\n        event_mode: The mode for emitting events. If `'attributes'`, events are attached to the span as attributes.\n            If `'logs'`, events are emitted as OpenTelemetry log-based events.\n        tracer_provider: The OpenTelemetry tracer provider to use.\n            If not provided, the global tracer provider is used.\n            Calling `logfire.configure()` sets the global tracer provider, so most users don't need this.\n        event_logger_provider: The OpenTelemetry event logger provider to use.\n            If not provided, the global event logger provider is used.\n            Calling `logfire.configure()` sets the global event logger provider, so most users don't need this.\n            This is only used if `event_mode='logs'`.\n    \"\"\"\n    from pydantic_ai import __version__\n\n    tracer_provider = tracer_provider or get_tracer_provider()\n    event_logger_provider = event_logger_provider or get_event_logger_provider()\n    self.tracer = tracer_provider.get_tracer('pydantic-ai', __version__)\n    self.event_logger = event_logger_provider.get_event_logger('pydantic-ai', __version__)\n    self.event_mode = event_mode\n\n```\n\n\n\n\n\n\n\n### InstrumentedModel `dataclass`\n\nBases: `WrapperModel`\n\nModel which wraps another model so that requests are instrumented with OpenTelemetry.\n\nSee the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/instrumented.py`\n```\n@dataclass\nclass InstrumentedModel(WrapperModel):\n    \"\"\"Model which wraps another model so that requests are instrumented with OpenTelemetry.\n\n    See the [Debugging and Monitoring guide](https://ai.pydantic.dev/logfire/) for more info.\n    \"\"\"\n\n    settings: InstrumentationSettings\n    \"\"\"Configuration for instrumenting requests.\"\"\"\n\n    def __init__(\n        self,\n        wrapped: Model | KnownModelName,\n        options: InstrumentationSettings | None = None,\n    ) -> None:\n        super().__init__(wrapped)\n        self.settings = options or InstrumentationSettings()\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, Usage]:\n        with self._instrument(messages, model_settings, model_request_parameters) as finish:\n            response, usage = await super().request(messages, model_settings, model_request_parameters)\n            finish(response, usage)\n            return response, usage\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        with self._instrument(messages, model_settings, model_request_parameters) as finish:\n            response_stream: StreamedResponse | None = None\n            try:\n                async with super().request_stream(\n                    messages, model_settings, model_request_parameters\n                ) as response_stream:\n                    yield response_stream\n            finally:\n                if response_stream:\n                    finish(response_stream.get(), response_stream.usage())\n\n    @contextmanager\n    def _instrument(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> Iterator[Callable[[ModelResponse, Usage], None]]:\n        operation = 'chat'\n        span_name = f'{operation} {self.model_name}'\n        # TODO Missing attributes:\n        #  - error.type: unclear if we should do something here or just always rely on span exceptions\n        #  - gen_ai.request.stop_sequences/top_k: model_settings doesn't include these\n        attributes: dict[str, AttributeValue] = {\n            'gen_ai.operation.name': operation,\n            **self.model_attributes(self.wrapped),\n            '", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a381b47482fff82b5e9f8a96e51cf27c", "__created_at__": 1744231651.420514, "content": "Usage], None]]:\n        operation = 'chat'\n        span_name = f'{operation} {self.model_name}'\n        # TODO Missing attributes:\n        #  - error.type: unclear if we should do something here or just always rely on span exceptions\n        #  - gen_ai.request.stop_sequences/top_k: model_settings doesn't include these\n        attributes: dict[str, AttributeValue] = {\n            'gen_ai.operation.name': operation,\n            **self.model_attributes(self.wrapped),\n            'model_request_parameters': json.dumps(InstrumentedModel.serialize_any(model_request_parameters)),\n            'logfire.json_schema': json.dumps(\n                {\n                    'type': 'object',\n                    'properties': {'model_request_parameters': {'type': 'object'}},\n                }\n            ),\n        }\n\n        if model_settings:\n            for key in MODEL_SETTING_ATTRIBUTES:\n                if isinstance(value := model_settings.get(key), (float, int)):\n                    attributes[f'gen_ai.request.{key}'] = value\n\n        with self.settings.tracer.start_as_current_span(span_name, attributes=attributes) as span:\n\n            def finish(response: ModelResponse, usage: Usage):\n                if not span.is_recording():\n                    return\n\n                events = self.messages_to_otel_events(messages)\n                for event in self.messages_to_otel_events([response]):\n                    events.append(\n                        Event(\n                            'gen_ai.choice',\n                            body={\n                                # TODO finish_reason\n                                'index': 0,\n                                'message': event.body,\n                            },\n                        )\n                    )\n                new_attributes: dict[str, AttributeValue] = usage.opentelemetry_attributes()  # type: ignore\n                attributes.update(getattr(span, 'attributes', {}))\n                request_model = attributes[GEN_AI_REQUEST_MODEL_ATTRIBUTE]\n                new_attributes['gen_ai.response.model'] = response.model_name or request_model\n                span.set_attributes(new_attributes)\n                span.update_name(f'{operation} {request_model}')\n                for event in events:\n                    event.attributes = {\n                        GEN_AI_SYSTEM_ATTRIBUTE: attributes[GEN_AI_SYSTEM_ATTRIBUTE],\n                        **(event.attributes or {}),\n                    }\n                self._emit_events(span, events)\n\n            yield finish\n\n    def _emit_events(self, span: Span, events: list[Event]) -> None:\n        if self.settings.event_mode == 'logs':\n            for event in events:\n                self.settings.event_logger.emit(event)\n        else:\n            attr_name = 'events'\n            span.set_attributes(\n                {\n                    attr_name: json.dumps([self.event_to_dict(event) for event in events]),\n                    'logfire.json_schema': json.dumps(\n                        {\n                            'type': 'object',\n                            'properties': {\n                                attr_name: {'type': 'array'},\n                                'model_request_parameters': {'type': 'object'},\n                            },\n                        }\n                    ),\n                }\n            )\n\n    @staticmethod\n    def model_attributes(model: Model):\n        attributes: dict[str, AttributeValue] = {\n            GEN_AI_SYSTEM_ATTRIBUTE: model.system,\n            GEN_AI_REQUEST_MODEL_ATTRIBUTE: model.model_name,\n        }\n        if base_url := model.base_url:\n            try:\n                parsed = urlparse(base_url)\n            except Exception:  # pragma: no cover\n                pass\n            else:\n                if parsed.hostname:\n                    attributes['server.address'] = parsed.hostname\n                if parsed.port:\n                    attributes['server.port'] = parsed.port\n\n        return attributes\n\n    @staticmethod\n    def event_to_dict(event: Event) -> dict[str, Any]:\n        if not event.body:\n            body = {}\n        elif isinstance(event.body, Mapping):\n            body = event.body  # type: ignore\n        else:\n            body = {'body': event.body}\n        return {**body, **(event.attributes or {})}\n\n    @staticmethod\n    def messages_to_otel_events(messages: list[ModelMessage]) -> list[Event]:\n        result: list[Event] = []\n        for message_index, message in enumerate(messages):\n            message_events: list[Event] = []\n            if isinstance(message, ModelRequest):\n                for part in message.parts:\n                    if hasattr(part, 'otel_event'):\n                        message_events.append(part.otel_event())\n            elif isinstance(message, ModelResponse):\n                message_events = message.otel_events()\n            for event in message_events:\n                event.attributes = {\n                    'gen_ai.message.index': message_index,\n                    **(event.attributes or {}),\n                }\n            result.extend(message_events)\n        for event in result:\n            event.body = InstrumentedModel.serialize_any(event.body)\n        return result\n\n    @staticmethod\n    def serialize_any(value: Any) -> str:\n        try:\n            return ANY_ADAPTER.dump_python(value, mode='json')\n        except Exception:\n            try:\n                return str(value)\n            except Exception as e:\n                return f'Unable to serialize: {e}'\n\n```\n\n\n#### settings `instance-attribute`\n\n```\nsettings: InstrumentationSettings = (\n    options or InstrumentationSettings()\n)\n\n```\n\nConfiguration for instrumenting requests.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.mistral`\n============================\n\nSetup\n-----\n\nFor details on how to set up authentication with this model, see [model configuration for Mistral](../../../models/#mistral).\n\n### LatestMistralModelNames `module-attribute`\n\n```\nLatestMistralModelNames = Literal[\n    \"mistral-large-latest\",\n    \"mistral-small-latest\",\n    \"codestral-latest\",\n    \"mistral-moderation-latest\",\n]\n\n```\n\nLatest Mistral models.\n\n\n\n### MistralModelName `module-attribute`\n\n```\nMistralModelName = Union[str, LatestMistralModelNames]\n\n```\n\nPossible Mistral model names.\n\nSince Mistral supports a variety of date-stamped models, we explicitly list the most popular models but\nallow any name in the type hints.\nSince", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-49dda393c384d6eedda81d9cf452a9c8", "__created_at__": 1744231651.420514, "content": "-small-latest\",\n    \"codestral-latest\",\n    \"mistral-moderation-latest\",\n]\n\n```\n\nLatest Mistral models.\n\n\n\n### MistralModelName `module-attribute`\n\n```\nMistralModelName = Union[str, LatestMistralModelNames]\n\n```\n\nPossible Mistral model names.\n\nSince Mistral supports a variety of date-stamped models, we explicitly list the most popular models but\nallow any name in the type hints.\nSince [the Mistral docs](https://docs.mistral.ai/getting-started/models/models_overview/) for a full list.\n\n\n\n### MistralModelSettings\n\nBases: `ModelSettings`\n\nSettings used for a Mistral model request.\n\nALL FIELDS MUST BE `mistral_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n```\nclass MistralModelSettings(ModelSettings):\n    \"\"\"Settings used for a Mistral model request.\n\n    ALL FIELDS MUST BE `mistral_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n    \"\"\"\n\n```\n\n\n\n\n\n### MistralModel `dataclass`\n\nBases: `Model`\n\nA model that uses Mistral.\n\nInternally, this uses the [Mistral Python client](https://github.com/mistralai/client-python) to interact with the API.\n\n[API Documentation](https://docs.mistral.ai/)\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n```\n@dataclass(init=False)\nclass MistralModel(Model):\n    \"\"\"A model that uses Mistral.\n\n    Internally, this uses the [Mistral Python client](https://github.com/mistralai/client-python) to interact with the API.\n\n    [API Documentation](https://docs.mistral.ai/)\n    \"\"\"\n\n    client: Mistral = field(repr=False)\n    json_mode_schema_prompt: str = \"\"\"Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n\"\"\"\n\n    _model_name: MistralModelName = field(repr=False)\n    _system: str = field(default='mistral_ai', repr=False)\n\n    def __init__(\n        self,\n        model_name: MistralModelName,\n        *,\n        provider: Literal['mistral'] | Provider[Mistral] = 'mistral',\n        json_mode_schema_prompt: str = \"\"\"Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n\"\"\",\n    ):\n        \"\"\"Initialize a Mistral model.\n\n        Args:\n            model_name: The name of the model to use.\n            provider: The provider to use for authentication and API access. Can be either the string\n                'mistral' or an instance of `Provider[Mistral]`. If not provided, a new provider will be\n                created using the other parameters.\n            json_mode_schema_prompt: The prompt to show when the model expects a JSON object as input.\n        \"\"\"\n        self._model_name = model_name\n        self.json_mode_schema_prompt = json_mode_schema_prompt\n\n        if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self.client = provider.client\n\n    @property\n    def base_url(self) -> str:\n        return self.client.sdk_configuration.get_server_details()[0]\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, Usage]:\n        \"\"\"Make a non-streaming request to the model from Pydantic AI call.\"\"\"\n        check_allow_model_requests()\n        response = await self._completions_create(\n            messages, cast(MistralModelSettings, model_settings or {}), model_request_parameters\n        )\n        return self._process_response(response), _map_usage(response)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        \"\"\"Make a streaming request to the model from Pydantic AI call.\"\"\"\n        check_allow_model_requests()\n        response = await self._stream_completions_create(\n            messages, cast(MistralModelSettings, model_settings or {}), model_request_parameters\n        )\n        async with response:\n            yield await self._process_streamed_response(model_request_parameters.result_tools, response)\n\n    @property\n    def model_name(self) -> MistralModelName:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n    async def _completions_create(\n        self,\n        messages: list[ModelMessage],\n        model_settings: MistralModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> MistralChatCompletionResponse:\n        \"\"\"Make a non-streaming request to the model.\"\"\"\n        try:\n            response = await self.client.chat.complete_async(\n                model=str(self._model_name),\n                messages=list(chain(*(self._map_message(m) for m in messages))),\n                n=1,\n                tools=self._map_function_and_result_tools_definition(model_request_parameters) or UNSET,\n                tool_choice=self._get_tool_choice(model_request_parameters),\n                stream=False,\n                max_tokens=model_settings.get('max_tokens', UNSET),\n                temperature=model_settings.get('temperature', UNSET),\n                top_p=model_settings.get('top_p', 1),\n                timeout_ms=self._get_timeout_ms(model_settings.get('timeout')),", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3ddf9ea98365de8bc4bbe2bdc8d93226", "__created_at__": 1744231651.420514, "content": "._map_message(m) for m in messages))),\n                n=1,\n                tools=self._map_function_and_result_tools_definition(model_request_parameters) or UNSET,\n                tool_choice=self._get_tool_choice(model_request_parameters),\n                stream=False,\n                max_tokens=model_settings.get('max_tokens', UNSET),\n                temperature=model_settings.get('temperature', UNSET),\n                top_p=model_settings.get('top_p', 1),\n                timeout_ms=self._get_timeout_ms(model_settings.get('timeout')),\n                random_seed=model_settings.get('seed', UNSET),\n                stop=model_settings.get('stop_sequences', None),\n                http_headers={'User-Agent': get_user_agent()},\n            )\n        except SDKError as e:\n            if (status_code := e.status_code) >= 400:\n                raise ModelHTTPError(status_code=status_code, model_name=self.model_name, body=e.body) from e\n            raise\n\n        assert response, 'A unexpected empty response from Mistral.'\n        return response\n\n    async def _stream_completions_create(\n        self,\n        messages: list[ModelMessage],\n        model_settings: MistralModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> MistralEventStreamAsync[MistralCompletionEvent]:\n        \"\"\"Create a streaming completion request to the Mistral model.\"\"\"\n        response: MistralEventStreamAsync[MistralCompletionEvent] | None\n        mistral_messages = list(chain(*(self._map_message(m) for m in messages)))\n\n        if (\n            model_request_parameters.result_tools\n            and model_request_parameters.function_tools\n            or model_request_parameters.function_tools\n        ):\n            # Function Calling\n            response = await self.client.chat.stream_async(\n                model=str(self._model_name),\n                messages=mistral_messages,\n                n=1,\n                tools=self._map_function_and_result_tools_definition(model_request_parameters) or UNSET,\n                tool_choice=self._get_tool_choice(model_request_parameters),\n                temperature=model_settings.get('temperature', UNSET),\n                top_p=model_settings.get('top_p', 1),\n                max_tokens=model_settings.get('max_tokens', UNSET),\n                timeout_ms=self._get_timeout_ms(model_settings.get('timeout')),\n                presence_penalty=model_settings.get('presence_penalty'),\n                frequency_penalty=model_settings.get('frequency_penalty'),\n                stop=model_settings.get('stop_sequences', None),\n                http_headers={'User-Agent': get_user_agent()},\n            )\n\n        elif model_request_parameters.result_tools:\n            # Json Mode\n            parameters_json_schemas = [tool.parameters_json_schema for tool in model_request_parameters.result_tools]\n            user_output_format_message = self._generate_user_output_format(parameters_json_schemas)\n            mistral_messages.append(user_output_format_message)\n\n            response = await self.client.chat.stream_async(\n                model=str(self._model_name),\n                messages=mistral_messages,\n                response_format={'type': 'json_object'},\n                stream=True,\n                http_headers={'User-Agent': get_user_agent()},\n            )\n\n        else:\n            # Stream Mode\n            response = await self.client.chat.stream_async(\n                model=str(self._model_name),\n                messages=mistral_messages,\n                stream=True,\n                http_headers={'User-Agent': get_user_agent()},\n            )\n        assert response, 'A unexpected empty response from Mistral.'\n        return response\n\n    def _get_tool_choice(self, model_request_parameters: ModelRequestParameters) -> MistralToolChoiceEnum | None:\n        \"\"\"Get tool choice for the model.\n\n        - \"auto\": Default mode. Model decides if it uses the tool or not.\n        - \"any\": Select any tool.\n        - \"none\": Prevents tool use.\n        - \"required\": Forces tool use.\n        \"\"\"\n        if not model_request_parameters.function_tools and not model_request_parameters.result_tools:\n            return None\n        elif not model_request_parameters.allow_text_result:\n            return 'required'\n        else:\n            return 'auto'\n\n    def _map_function_and_result_tools_definition(\n        self, model_request_parameters: ModelRequestParameters\n    ) -> list[MistralTool] | None:\n        \"\"\"Map function and result tools to MistralTool format.\n\n        Returns None if both function_tools and result_tools are empty.\n        \"\"\"\n        all_tools: list[ToolDefinition] = (\n            model_request_parameters.function_tools + model_request_parameters.result_tools\n        )\n        tools = [\n            MistralTool(\n                function=MistralFunction(name=r.name, parameters=r.parameters_json_schema, description=r.description)\n            )\n            for r in all_tools\n        ]\n        return tools if tools else None\n\n    def _process_response(self, response: MistralChatCompletionResponse) -> ModelResponse:\n        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"\n        assert response.choices, 'Unexpected empty response choice.'\n\n        if response.created:\n            timestamp = datetime.fromtimestamp(response.created, tz=timezone.utc)\n        else:\n            timestamp = _now_utc()\n\n        choice = response.choices[0]\n        content = choice.message.content\n        tool_calls = choice.message.tool_calls\n\n        parts: list[ModelResponsePart] = []\n        if text := _map_content(content):\n            parts.append(TextPart(content=text))\n\n        if isinstance(tool_calls, list):\n            for tool_call in tool_calls:\n                tool = self._map_mistral_to_pydantic_tool_call(tool_call=tool_call)\n                parts.append(tool)\n\n        return ModelResponse(parts, model_name=response.model, timestamp=timestamp)\n\n    async def _process_streamed_response(\n        self,\n        result_tools: list[ToolDefinition],\n        response: MistralEventStreamAsync[MistralCompletionEvent],\n    ) -> StreamedResponse:\n        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"\n        peekable_response = _utils.PeekableAsyncStream", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-b9cc082fb4d59764b6410b836e296db6", "__created_at__": 1744231651.420514, "content": "ydantic_tool_call(tool_call=tool_call)\n                parts.append(tool)\n\n        return ModelResponse(parts, model_name=response.model, timestamp=timestamp)\n\n    async def _process_streamed_response(\n        self,\n        result_tools: list[ToolDefinition],\n        response: MistralEventStreamAsync[MistralCompletionEvent],\n    ) -> StreamedResponse:\n        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"\n        peekable_response = _utils.PeekableAsyncStream(response)\n        first_chunk = await peekable_response.peek()\n        if isinstance(first_chunk, _utils.Unset):\n            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')\n\n        if first_chunk.data.created:\n            timestamp = datetime.fromtimestamp(first_chunk.data.created, tz=timezone.utc)\n        else:\n            timestamp = datetime.now(tz=timezone.utc)\n\n        return MistralStreamedResponse(\n            _response=peekable_response,\n            _model_name=self._model_name,\n            _timestamp=timestamp,\n            _result_tools={c.name: c for c in result_tools},\n        )\n\n    @staticmethod\n    def _map_mistral_to_pydantic_tool_call(tool_call: MistralToolCall) -> ToolCallPart:\n        \"\"\"Maps a MistralToolCall to a ToolCall.\"\"\"\n        tool_call_id = tool_call.id or _generate_tool_call_id()\n        func_call = tool_call.function\n\n        return ToolCallPart(func_call.name, func_call.arguments, tool_call_id)\n\n    @staticmethod\n    def _map_tool_call(t: ToolCallPart) -> MistralToolCall:\n        \"\"\"Maps a pydantic-ai ToolCall to a MistralToolCall.\"\"\"\n        return MistralToolCall(\n            id=_utils.guard_tool_call_id(t=t),\n            type='function',\n            function=MistralFunctionCall(name=t.tool_name, arguments=t.args),\n        )\n\n    def _generate_user_output_format(self, schemas: list[dict[str, Any]]) -> MistralUserMessage:\n        \"\"\"Get a message with an example of the expected output format.\"\"\"\n        examples: list[dict[str, Any]] = []\n        for schema in schemas:\n            typed_dict_definition: dict[str, Any] = {}\n            for key, value in schema.get('properties', {}).items():\n                typed_dict_definition[key] = self._get_python_type(value)\n            examples.append(typed_dict_definition)\n\n        example_schema = examples[0] if len(examples) == 1 else examples\n        return MistralUserMessage(content=self.json_mode_schema_prompt.format(schema=example_schema))\n\n    @classmethod\n    def _get_python_type(cls, value: dict[str, Any]) -> str:\n        \"\"\"Return a string representation of the Python type for a single JSON schema property.\n\n        This function handles recursion for nested arrays/objects and `anyOf`.\n        \"\"\"\n        # 1) Handle anyOf first, because it's a different schema structure\n        if any_of := value.get('anyOf'):\n            # Simplistic approach: pick the first option in anyOf\n            # (In reality, you'd possibly want to merge or union types)\n            return f'Optional[{cls._get_python_type(any_of[0])}]'\n\n        # 2) If we have a top-level \"type\" field\n        value_type = value.get('type')\n        if not value_type:\n            # No explicit type; fallback\n            return 'Any'\n\n        # 3) Direct simple type mapping (string, integer, float, bool, None)\n        if value_type in SIMPLE_JSON_TYPE_MAPPING and value_type != 'array' and value_type != 'object':\n            return SIMPLE_JSON_TYPE_MAPPING[value_type]\n\n        # 4) Array: Recursively get the item type\n        if value_type == 'array':\n            items = value.get('items', {})\n            return f'list[{cls._get_python_type(items)}]'\n\n        # 5) Object: Check for additionalProperties\n        if value_type == 'object':\n            additional_properties = value.get('additionalProperties', {})\n            if isinstance(additional_properties, bool):\n                return 'bool'  # pragma: no cover\n            additional_properties_type = additional_properties.get('type')\n            if (\n                additional_properties_type in SIMPLE_JSON_TYPE_MAPPING\n                and additional_properties_type != 'array'\n                and additional_properties_type != 'object'\n            ):\n                # dict[str, bool/int/float/etc...]\n                return f'dict[str, {SIMPLE_JSON_TYPE_MAPPING[additional_properties_type]}]'\n            elif additional_properties_type == 'array':\n                array_items = additional_properties.get('items', {})\n                return f'dict[str, list[{cls._get_python_type(array_items)}]]'\n            elif additional_properties_type == 'object':\n                # nested dictionary of unknown shape\n                return 'dict[str, dict[str, Any]]'\n            else:\n                # If no additionalProperties type or something else, default to a generic dict\n                return 'dict[str, Any]'\n\n        # 6) Fallback\n        return 'Any'\n\n    @staticmethod\n    def _get_timeout_ms(timeout: Timeout | float | None) -> int | None:\n        \"\"\"Convert a timeout to milliseconds.\"\"\"\n        if timeout is None:\n            return None\n        if isinstance(timeout, float):\n            return int(1000 * timeout)\n        raise NotImplementedError('Timeout object is not yet supported for MistralModel.')\n\n    @classmethod\n    def _map_user_message(cls, message: ModelRequest) -> Iterable[MistralMessages]:\n        for part in message.parts:\n            if isinstance(part, SystemPromptPart):\n                yield MistralSystemMessage(content=part.content)\n            elif isinstance(part, UserPromptPart):\n                yield cls._map_user_prompt(part)\n            elif isinstance(part, ToolReturnPart):", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-10cb9af07d6e8d7fd92ba7df52d5c332", "__created_at__": 1744231651.420514, "content": "* timeout)\n        raise NotImplementedError('Timeout object is not yet supported for MistralModel.')\n\n    @classmethod\n    def _map_user_message(cls, message: ModelRequest) -> Iterable[MistralMessages]:\n        for part in message.parts:\n            if isinstance(part, SystemPromptPart):\n                yield MistralSystemMessage(content=part.content)\n            elif isinstance(part, UserPromptPart):\n                yield cls._map_user_prompt(part)\n            elif isinstance(part, ToolReturnPart):\n                yield MistralToolMessage(\n                    tool_call_id=part.tool_call_id,\n                    content=part.model_response_str(),\n                )\n            elif isinstance(part, RetryPromptPart):\n                if part.tool_name is None:\n                    yield MistralUserMessage(content=part.model_response())\n                else:\n                    yield MistralToolMessage(\n                        tool_call_id=part.tool_call_id,\n                        content=part.model_response(),\n                    )\n            else:\n                assert_never(part)\n\n    @classmethod\n    def _map_message(cls, message: ModelMessage) -> Iterable[MistralMessages]:\n        \"\"\"Just maps a `pydantic_ai.Message` to a `MistralMessage`.\"\"\"\n        if isinstance(message, ModelRequest):\n            yield from cls._map_user_message(message)\n        elif isinstance(message, ModelResponse):\n            content_chunks: list[MistralContentChunk] = []\n            tool_calls: list[MistralToolCall] = []\n\n            for part in message.parts:\n                if isinstance(part, TextPart):\n                    content_chunks.append(MistralTextChunk(text=part.content))\n                elif isinstance(part, ToolCallPart):\n                    tool_calls.append(cls._map_tool_call(part))\n                else:\n                    assert_never(part)\n            yield MistralAssistantMessage(content=content_chunks, tool_calls=tool_calls)\n        else:\n            assert_never(message)\n\n    @staticmethod\n    def _map_user_prompt(part: UserPromptPart) -> MistralUserMessage:\n        content: str | list[MistralContentChunk]\n        if isinstance(part.content, str):\n            content = part.content\n        else:\n            content = []\n            for item in part.content:\n                if isinstance(item, str):\n                    content.append(MistralTextChunk(text=item))\n                elif isinstance(item, ImageUrl):\n                    content.append(MistralImageURLChunk(image_url=MistralImageURL(url=item.url)))\n                elif isinstance(item, BinaryContent):\n                    base64_encoded = base64.b64encode(item.data).decode('utf-8')\n                    if item.is_image:\n                        image_url = MistralImageURL(url=f'data:{item.media_type};base64,{base64_encoded}')\n                        content.append(MistralImageURLChunk(image_url=image_url, type='image_url'))\n                    else:\n                        raise RuntimeError('Only image binary content is supported for Mistral.')\n                elif isinstance(item, DocumentUrl):\n                    raise RuntimeError('DocumentUrl is not supported in Mistral.')\n                else:  # pragma: no cover\n                    raise RuntimeError(f'Unsupported content type: {type(item)}')\n        return MistralUserMessage(content=content)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: MistralModelName,\n    *,\n    provider: (\n        Literal[\"mistral\"] | Provider[Mistral]\n    ) = \"mistral\",\n    json_mode_schema_prompt: str = \"Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n\"\n)\n\n```\n\nInitialize a Mistral model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `MistralModelName` | The name of the model to use. | *required* |\n| `provider` | `Literal['mistral'] | Provider[Mistral]` | The provider to use for authentication and API access. Can be either the string 'mistral' or an instance of `Provider[Mistral]`. If not provided, a new provider will be created using the other parameters. | `'mistral'` |\n| `json_mode_schema_prompt` | `str` | The prompt to show when the model expects a JSON object as input. | `'Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n```\ndef __init__(\n    self,\n    model_name: MistralModelName,\n    *,\n    provider: Literal['mistral'] | Provider[Mistral] = 'mistral',\n    json_mode_schema_prompt: str = \"\"\"Answer in JSON Object, respect the format:\\n```\\n{schema}\\n```\\n\"\"\",\n):\n    \"\"\"Initialize a Mistral model.\n\n    Args:\n        model_name: The name of the model to use.\n        provider: The provider to use for authentication and API access. Can be either the string\n            'mistral' or an instance of `Provider[Mistral]`. If not provided, a new provider will be\n            created using the other parameters.\n        json_mode_schema_prompt: The prompt to show when the model expects a JSON object as input.\n    \"\"\"\n    self._model_name = model_name\n    self.json_mode_schema_prompt = json_mode_schema_prompt\n\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self.client = provider.client\n\n```\n\n\n\n\n#### request `async`\n\n```\nrequest(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]\n\n```\n\nMake a non-streaming request to the model from P", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-26694cbae32bb1e9e7496e96276959ef", "__created_at__": 1744231651.420514, "content": "self._model_name = model_name\n    self.json_mode_schema_prompt = json_mode_schema_prompt\n\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self.client = provider.client\n\n```\n\n\n\n\n#### request `async`\n\n```\nrequest(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]\n\n```\n\nMake a non-streaming request to the model from Pydantic AI call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n```\nasync def request(\n    self,\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> tuple[ModelResponse, Usage]:\n    \"\"\"Make a non-streaming request to the model from Pydantic AI call.\"\"\"\n    check_allow_model_requests()\n    response = await self._completions_create(\n        messages, cast(MistralModelSettings, model_settings or {}), model_request_parameters\n    )\n    return self._process_response(response), _map_usage(response)\n\n```\n\n\n\n\n#### request\\_stream `async`\n\n```\nrequest_stream(\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> AsyncIterator[StreamedResponse]\n\n```\n\nMake a streaming request to the model from Pydantic AI call.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n```\n@asynccontextmanager\nasync def request_stream(\n    self,\n    messages: list[ModelMessage],\n    model_settings: ModelSettings | None,\n    model_request_parameters: ModelRequestParameters,\n) -> AsyncIterator[StreamedResponse]:\n    \"\"\"Make a streaming request to the model from Pydantic AI call.\"\"\"\n    check_allow_model_requests()\n    response = await self._stream_completions_create(\n        messages, cast(MistralModelSettings, model_settings or {}), model_request_parameters\n    )\n    async with response:\n        yield await self._process_streamed_response(model_request_parameters.result_tools, response)\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: MistralModelName\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n### MistralStreamedResponse `dataclass`\n\nBases: `StreamedResponse`\n\nImplementation of `StreamedResponse` for Mistral models.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/mistral.py`\n```\n@dataclass\nclass MistralStreamedResponse(StreamedResponse):\n    \"\"\"Implementation of `StreamedResponse` for Mistral models.\"\"\"\n\n    _model_name: MistralModelName\n    _response: AsyncIterable[MistralCompletionEvent]\n    _timestamp: datetime\n    _result_tools: dict[str, ToolDefinition]\n\n    _delta_content: str = field(default='', init=False)\n\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        chunk: MistralCompletionEvent\n        async for chunk in self._response:\n            self._usage += _map_usage(chunk.data)\n\n            try:\n                choice = chunk.data.choices[0]\n            except IndexError:\n                continue\n\n            # Handle the text part of the response\n            content = choice.delta.content\n            text = _map_content(content)\n            if text:\n                # Attempt to produce a result tool call from the received text\n                if self._result_tools:\n                    self._delta_content += text\n                    maybe_tool_call_part = self._try_get_result_tool_from_text(self._delta_content, self._result_tools)\n                    if maybe_tool_call_part:\n                        yield self._parts_manager.handle_tool_call_part(\n                            vendor_part_id='result',\n                            tool_name=maybe_tool_call_part.tool_name,\n                            args=maybe_tool_call_part.args_as_dict(),\n                            tool_call_id=maybe_tool_call_part.tool_call_id,\n                        )\n                else:\n                    yield self._parts_manager.handle_text_delta(vendor_part_id='content', content=text)\n\n            # Handle the explicit tool calls\n            for index, dtc in enumerate(choice.delta.tool_calls or []):\n                # It seems that mistral just sends full tool calls, so we just use them directly, rather than building\n                yield self._parts_manager.handle_tool_call_part(\n                    vendor_part_id=index, tool_name=dtc.function.name, args=dtc.function.arguments, tool_call_id=dtc.id\n                )\n\n    @property\n    def model_name(self) -> MistralModelName:\n        \"\"\"Get the model name of the response.\"\"\"\n        return self._model_name\n\n    @property\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        return self._timestamp\n\n    @staticmethod\n    def _try_get_result_tool_from_text(text: str, result_tools: dict[str, ToolDefinition]) -> ToolCallPart | None:\n        output_json: dict[str, Any] | None = pydantic_core.from_json(text, allow_partial='trailing-strings')\n        if output_json:\n            for result_tool in result_tools.values():\n                # NOTE: Additional verification to prevent JSON validation to crash in `_result.py`\n                # Ensures required parameters in the JSON schema are respected, especially for stream-based return types.\n                # Example with BaseModel and required fields.\n                if not MistralStreamedResponse._validate_required_json_schema(\n                    output_json, result_tool.parameters_json_schema\n                ):\n                    continue\n\n                # The following part_id will be thrown away\n                return ToolCallPart(tool_name=result_tool.name, args=output_json)\n\n    @staticmethod", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9a9bc262ebbbdd42a17a84adee4a7f9d", "__created_at__": 1744231651.420514, "content": "JSON validation to crash in `_result.py`\n                # Ensures required parameters in the JSON schema are respected, especially for stream-based return types.\n                # Example with BaseModel and required fields.\n                if not MistralStreamedResponse._validate_required_json_schema(\n                    output_json, result_tool.parameters_json_schema\n                ):\n                    continue\n\n                # The following part_id will be thrown away\n                return ToolCallPart(tool_name=result_tool.name, args=output_json)\n\n    @staticmethod\n    def _validate_required_json_schema(json_dict: dict[str, Any], json_schema: dict[str, Any]) -> bool:\n        \"\"\"Validate that all required parameters in the JSON schema are present in the JSON dictionary.\"\"\"\n        required_params = json_schema.get('required', [])\n        properties = json_schema.get('properties', {})\n\n        for param in required_params:\n            if param not in json_dict:\n                return False\n\n            param_schema = properties.get(param, {})\n            param_type = param_schema.get('type')\n            param_items_type = param_schema.get('items', {}).get('type')\n\n            if param_type == 'array' and param_items_type:\n                if not isinstance(json_dict[param], list):\n                    return False\n                for item in json_dict[param]:\n                    if not isinstance(item, VALID_JSON_TYPE_MAPPING[param_items_type]):\n                        return False\n            elif param_type and not isinstance(json_dict[param], VALID_JSON_TYPE_MAPPING[param_type]):\n                return False\n\n            if isinstance(json_dict[param], dict) and 'properties' in param_schema:\n                nested_schema = param_schema\n                if not MistralStreamedResponse._validate_required_json_schema(json_dict[param], nested_schema):\n                    return False\n\n        return True\n\n```\n\n\n#### model\\_name `property`\n\n```\nmodel_name: MistralModelName\n\n```\n\nGet the model name of the response.\n\n\n\n#### timestamp `property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.openai`\n===========================\n\nSetup\n-----\n\nFor details on how to set up authentication with this model, see [model configuration for OpenAI](../../../models/#openai).\n\n### OpenAIModelName `module-attribute`\n\n```\nOpenAIModelName = Union[str, ChatModel]\n\n```\n\nPossible OpenAI model names.\n\nSince OpenAI supports a variety of date-stamped models, we explicitly list the latest models but\nallow any name in the type hints.\nSee [the OpenAI docs](https://platform.openai.com/docs/models) for a full list.\n\nUsing this more broad type for the model name instead of the ChatModel definition\nallows this model to be used more easily with other model types (ie, Ollama, Deepseek).\n\n\n\n### OpenAIModelSettings\n\nBases: `ModelSettings`\n\nSettings used for an OpenAI model request.\n\nALL FIELDS MUST BE `openai_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n```\nclass OpenAIModelSettings(ModelSettings, total=False):\n    \"\"\"Settings used for an OpenAI model request.\n\n    ALL FIELDS MUST BE `openai_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n    \"\"\"\n\n    openai_reasoning_effort: ReasoningEffort\n    \"\"\"Constrains effort on reasoning for [reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\n    Currently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\n    result in faster responses and fewer tokens used on reasoning in a response.\n    \"\"\"\n\n    openai_user: str\n    \"\"\"A unique identifier representing the end-user, which can help OpenAI monitor and detect abuse.\n\n    See [OpenAI's safety best practices](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids) for more details.\n    \"\"\"\n\n```\n\n\n#### openai\\_reasoning\\_effort `instance-attribute`\n\n```\nopenai_reasoning_effort: ReasoningEffort\n\n```\n\nConstrains effort on reasoning for [reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\nCurrently supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\nresult in faster responses and fewer tokens used on reasoning in a response.\n\n\n\n#### openai\\_user `instance-attribute`\n\n```\nopenai_user: str\n\n```\n\nA unique identifier representing the end-user, which can help OpenAI monitor and detect abuse.\n\nSee [OpenAI's safety best practices](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids) for more details.\n\n\n\n\n\n\n### OpenAIResponsesModelSettings\n\nBases: `OpenAIModelSettings`\n\nSettings used for an OpenAI Responses model request.\n\nALL FIELDS MUST BE `openai_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n```\nclass OpenAIResponsesModelSettings(OpenAIModelSettings, total=False):\n    \"\"\"Settings used for an OpenAI Responses model request.\n\n    ALL FIELDS MUST BE `openai_` PREFIXED SO YOU CAN MERGE THEM WITH OTHER MODELS.\n    \"\"\"\n\n    openai_builtin_tools: Sequence[FileSearchToolParam | WebSearchToolParam | ComputerToolParam]\n    \"\"\"The provided OpenAI built-in tools to use.\n\n    See [OpenAI's built-in tools](https://platform.openai.com/docs/guides/tools?api-mode=responses) for more details.\n    \"\"\"\n\n    openai_reasoning_generate_summary: Literal['detailed', 'concise']\n    \"\"\"A summary of the reasoning performed by the model.", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-8c8f75d6c796eb1144066af5a11cfdd9", "__created_at__": 1744231651.420514, "content": "LS.\n    \"\"\"\n\n    openai_builtin_tools: Sequence[FileSearchToolParam | WebSearchToolParam | ComputerToolParam]\n    \"\"\"The provided OpenAI built-in tools to use.\n\n    See [OpenAI's built-in tools](https://platform.openai.com/docs/guides/tools?api-mode=responses) for more details.\n    \"\"\"\n\n    openai_reasoning_generate_summary: Literal['detailed', 'concise']\n    \"\"\"A summary of the reasoning performed by the model.\n\n    This can be useful for debugging and understanding the model's reasoning process.\n    One of `concise` or `detailed`.\n\n    Check the [OpenAI Computer use documentation](https://platform.openai.com/docs/guides/tools-computer-use#1-send-a-request-to-the-model)\n    for more details.\n    \"\"\"\n\n    openai_truncation: Literal['disabled', 'auto']\n    \"\"\"The truncation strategy to use for the model response.\n\n    It can be either:\n    - `disabled` (default): If a model response will exceed the context window size for a model, the\n        request will fail with a 400 error.\n    - `auto`: If the context of this response and previous ones exceeds the model's context window size,\n        the model will truncate the response to fit the context window by dropping input items in the\n        middle of the conversation.\n    \"\"\"\n\n```\n\n\n#### openai\\_builtin\\_tools `instance-attribute`\n\n```\nopenai_builtin_tools: Sequence[\n    FileSearchToolParam\n    | WebSearchToolParam\n    | ComputerToolParam\n]\n\n```\n\nThe provided OpenAI built-in tools to use.\n\nSee [OpenAI's built-in tools](https://platform.openai.com/docs/guides/tools?api-mode=responses) for more details.\n\n\n\n#### openai\\_reasoning\\_generate\\_summary `instance-attribute`\n\n```\nopenai_reasoning_generate_summary: Literal[\n    \"detailed\", \"concise\"\n]\n\n```\n\nA summary of the reasoning performed by the model.\n\nThis can be useful for debugging and understanding the model's reasoning process.\nOne of `concise` or `detailed`.\n\nCheck the [OpenAI Computer use documentation](https://platform.openai.com/docs/guides/tools-computer-use#1-send-a-request-to-the-model)\nfor more details.\n\n\n\n#### openai\\_truncation `instance-attribute`\n\n```\nopenai_truncation: Literal['disabled', 'auto']\n\n```\n\nThe truncation strategy to use for the model response.\n\nIt can be either:\n- `disabled` (default): If a model response will exceed the context window size for a model, the\nrequest will fail with a 400 error.\n- `auto`: If the context of this response and previous ones exceeds the model's context window size,\nthe model will truncate the response to fit the context window by dropping input items in the\nmiddle of the conversation.\n\n\n\n\n\n\n### OpenAIModel `dataclass`\n\nBases: `Model`\n\nA model that uses the OpenAI API.\n\nInternally, this uses the [OpenAI Python client](https://github.com/openai/openai-python) to interact with the API.\n\nApart from `__init__`, all methods are private or match those of the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n```\n@dataclass(init=False)\nclass OpenAIModel(Model):\n    \"\"\"A model that uses the OpenAI API.\n\n    Internally, this uses the [OpenAI Python client](https://github.com/openai/openai-python) to interact with the API.\n\n    Apart from `__init__`, all methods are private or match those of the base class.\n    \"\"\"\n\n    client: AsyncOpenAI = field(repr=False)\n    system_prompt_role: OpenAISystemPromptRole | None = field(default=None, repr=False)\n\n    _model_name: OpenAIModelName = field(repr=False)\n    _system: str = field(default='openai', repr=False)\n\n    def __init__(\n        self,\n        model_name: OpenAIModelName,\n        *,\n        provider: Literal['openai', 'deepseek', 'azure'] | Provider[AsyncOpenAI] = 'openai',\n        system_prompt_role: OpenAISystemPromptRole | None = None,\n    ):\n        \"\"\"Initialize an OpenAI model.\n\n        Args:\n            model_name: The name of the OpenAI model to use. List of model names available\n                [here](https://github.com/openai/openai-python/blob/v1.54.3/src/openai/types/chat_model.py#L7)\n                (Unfortunately, despite being ask to do so, OpenAI do not provide `.inv` files for their API).\n            provider: The provider to use. Defaults to `'openai'`.\n            system_prompt_role: The role to use for the system prompt message. If not provided, defaults to `'system'`.\n                In the future, this may be inferred from the model name.\n        \"\"\"\n        self._model_name = model_name\n        if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self.client = provider.client\n        self.system_prompt_role = system_prompt_role\n\n    @property\n    def base_url(self) -> str:\n        return str(self.client.base_url)\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, usage.Usage]:\n        check_allow_model_requests()\n        response = await self._completions_create(\n            messages, False, cast(OpenAIModelSettings, model_settings or {}), model_request_parameters\n        )\n        return self._process_response(response), _map_usage(response)\n\n    @asynccontextmanager", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3d1c7209debb23a47e4399b20a981057", "__created_at__": 1744231651.420514, "content": "(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, usage.Usage]:\n        check_allow_model_requests()\n        response = await self._completions_create(\n            messages, False, cast(OpenAIModelSettings, model_settings or {}), model_request_parameters\n        )\n        return self._process_response(response), _map_usage(response)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        check_allow_model_requests()\n        response = await self._completions_create(\n            messages, True, cast(OpenAIModelSettings, model_settings or {}), model_request_parameters\n        )\n        async with response:\n            yield await self._process_streamed_response(response)\n\n    def customize_request_parameters(self, model_request_parameters: ModelRequestParameters) -> ModelRequestParameters:\n        return _customize_request_parameters(model_request_parameters)\n\n    @property\n    def model_name(self) -> OpenAIModelName:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n    @overload\n    async def _completions_create(\n        self,\n        messages: list[ModelMessage],\n        stream: Literal[True],\n        model_settings: OpenAIModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncStream[ChatCompletionChunk]: ...\n\n    @overload\n    async def _completions_create(\n        self,\n        messages: list[ModelMessage],\n        stream: Literal[False],\n        model_settings: OpenAIModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> chat.ChatCompletion: ...\n\n    async def _completions_create(\n        self,\n        messages: list[ModelMessage],\n        stream: bool,\n        model_settings: OpenAIModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> chat.ChatCompletion | AsyncStream[ChatCompletionChunk]:\n        tools = self._get_tools(model_request_parameters)\n\n        # standalone function to make it easier to override\n        if not tools:\n            tool_choice: Literal['none', 'required', 'auto'] | None = None\n        elif not model_request_parameters.allow_text_result:\n            tool_choice = 'required'\n        else:\n            tool_choice = 'auto'\n\n        openai_messages: list[chat.ChatCompletionMessageParam] = []\n        for m in messages:\n            async for msg in self._map_message(m):\n                openai_messages.append(msg)\n\n        try:\n            return await self.client.chat.completions.create(\n                model=self._model_name,\n                messages=openai_messages,\n                n=1,\n                parallel_tool_calls=model_settings.get('parallel_tool_calls', NOT_GIVEN),\n                tools=tools or NOT_GIVEN,\n                tool_choice=tool_choice or NOT_GIVEN,\n                stream=stream,\n                stream_options={'include_usage': True} if stream else NOT_GIVEN,\n                stop=model_settings.get('stop_sequences', NOT_GIVEN),\n                max_completion_tokens=model_settings.get('max_tokens', NOT_GIVEN),\n                temperature=model_settings.get('temperature', NOT_GIVEN),\n                top_p=model_settings.get('top_p', NOT_GIVEN),\n                timeout=model_settings.get('timeout', NOT_GIVEN),\n                seed=model_settings.get('seed', NOT_GIVEN),\n                presence_penalty=model_settings.get('presence_penalty', NOT_GIVEN),\n                frequency_penalty=model_settings.get('frequency_penalty', NOT_GIVEN),\n                logit_bias=model_settings.get('logit_bias', NOT_GIVEN),\n                reasoning_effort=model_settings.get('openai_reasoning_effort', NOT_GIVEN),\n                user=model_settings.get('openai_user', NOT_GIVEN),\n                extra_headers={'User-Agent': get_user_agent()},\n            )\n        except APIStatusError as e:\n            if (status_code := e.status_code) >= 400:\n                raise ModelHTTPError(status_code=status_code, model_name=self.model_name, body=e.body) from e\n            raise\n\n    def _process_response(self, response: chat.ChatCompletion) -> ModelResponse:\n        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"\n        timestamp = datetime.fromtimestamp(response.created, tz=timezone.utc)\n        choice = response.choices[0]\n        items: list[ModelResponsePart] = []\n        if choice.message.content is not None:\n            items.append(TextPart(choice.message.content))\n        if choice.message.tool_calls is not None:\n            for c in choice.message.tool_calls:\n                items.append(ToolCallPart(c.function.name, c.function.arguments, tool_call_id=c.id))\n        return ModelResponse(items, model_name=response.model, timestamp=timestamp)\n\n    async def _process_streamed_response(self, response: AsyncStream[ChatCompletionChunk]) -> OpenAIStreamedResponse:\n        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"\n        peekable_response = _utils.PeekableAsyncStream(response)\n        first_chunk = await peekable_response.peek()\n        if isinstance(first_chunk, _utils.Unset):\n            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')\n\n        return OpenAIStreamedResponse(\n            _model_name=self._model_name,\n            _response=peekable_response,\n            _timestamp=datetime.fromtimestamp(first_chunk.created, tz=timezone.utc),\n        )\n\n    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[chat.ChatCompletionToolParam]:\n        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-561b3b3cda17d16517ba963b544fdd01", "__created_at__": 1744231651.420514, "content": "raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')\n\n        return OpenAIStreamedResponse(\n            _model_name=self._model_name,\n            _response=peekable_response,\n            _timestamp=datetime.fromtimestamp(first_chunk.created, tz=timezone.utc),\n        )\n\n    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[chat.ChatCompletionToolParam]:\n        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]\n        if model_request_parameters.result_tools:\n            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]\n        return tools\n\n    async def _map_message(self, message: ModelMessage) -> AsyncIterable[chat.ChatCompletionMessageParam]:\n        \"\"\"Just maps a `pydantic_ai.Message` to a `openai.types.ChatCompletionMessageParam`.\"\"\"\n        if isinstance(message, ModelRequest):\n            async for item in self._map_user_message(message):\n                yield item\n        elif isinstance(message, ModelResponse):\n            texts: list[str] = []\n            tool_calls: list[chat.ChatCompletionMessageToolCallParam] = []\n            for item in message.parts:\n                if isinstance(item, TextPart):\n                    texts.append(item.content)\n                elif isinstance(item, ToolCallPart):\n                    tool_calls.append(self._map_tool_call(item))\n                else:\n                    assert_never(item)\n            message_param = chat.ChatCompletionAssistantMessageParam(role='assistant')\n            if texts:\n                # Note: model responses from this model should only have one text item, so the following\n                # shouldn't merge multiple texts into one unless you switch models between runs:\n                message_param['content'] = '\\n\\n'.join(texts)\n            if tool_calls:\n                message_param['tool_calls'] = tool_calls\n            yield message_param\n        else:\n            assert_never(message)\n\n    @staticmethod\n    def _map_tool_call(t: ToolCallPart) -> chat.ChatCompletionMessageToolCallParam:\n        return chat.ChatCompletionMessageToolCallParam(\n            id=_guard_tool_call_id(t=t),\n            type='function',\n            function={'name': t.tool_name, 'arguments': t.args_as_json_str()},\n        )\n\n    @staticmethod\n    def _map_tool_definition(f: ToolDefinition) -> chat.ChatCompletionToolParam:\n        tool_param: chat.ChatCompletionToolParam = {\n            'type': 'function',\n            'function': {\n                'name': f.name,\n                'description': f.description,\n                'parameters': f.parameters_json_schema,\n            },\n        }\n        if f.strict:\n            tool_param['function']['strict'] = f.strict\n        return tool_param\n\n    async def _map_user_message(self, message: ModelRequest) -> AsyncIterable[chat.ChatCompletionMessageParam]:\n        for part in message.parts:\n            if isinstance(part, SystemPromptPart):\n                if self.system_prompt_role == 'developer':\n                    yield chat.ChatCompletionDeveloperMessageParam(role='developer', content=part.content)\n                elif self.system_prompt_role == 'user':\n                    yield chat.ChatCompletionUserMessageParam(role='user', content=part.content)\n                else:\n                    yield chat.ChatCompletionSystemMessageParam(role='system', content=part.content)\n            elif isinstance(part, UserPromptPart):\n                yield await self._map_user_prompt(part)\n            elif isinstance(part, ToolReturnPart):\n                yield chat.ChatCompletionToolMessageParam(\n                    role='tool',\n                    tool_call_id=_guard_tool_call_id(t=part),\n                    content=part.model_response_str(),\n                )\n            elif isinstance(part, RetryPromptPart):\n                if part.tool_name is None:\n                    yield chat.ChatCompletionUserMessageParam(role='user', content=part.model_response())\n                else:\n                    yield chat.ChatCompletionToolMessageParam(\n                        role='tool',\n                        tool_call_id=_guard_tool_call_id(t=part),\n                        content=part.model_response(),\n                    )\n            else:\n                assert_never(part)\n\n    @staticmethod\n    async def _map_user_prompt(part: UserPromptPart) -> chat.ChatCompletionUserMessageParam:\n        content: str | list[ChatCompletionContentPartParam]\n        if isinstance(part.content, str):\n            content = part.content\n        else:\n            content = []\n            for item in part.content:\n                if isinstance(item, str):\n                    content.append(ChatCompletionContentPartTextParam(text=item, type='text'))\n                elif isinstance(item, ImageUrl):\n                    image_url = ImageURL(url=item.url)\n                    content.append(ChatCompletionContentPartImageParam(image_url=image_url, type='image_url'))\n                elif isinstance(item, BinaryContent):\n                    base64_encoded = base64.b64encode(item.data).decode('utf-8')\n                    if item.is_image:\n                        image_url = ImageURL(url=f'data:{item.media_type};base64,{base64_encoded}')\n                        content.append(ChatCompletionContentPartImageParam(image_url=image_url, type='image_url'))\n                    elif item.is_audio:\n                        assert item.format in ('wav', 'mp3')\n                        audio = InputAudio(data=base64_encoded, format=item.format)\n                        content.append(ChatCompletionContentPartInputAudioParam(input_audio=audio, type='input_audio'))\n                    else:  # pragma: no cover\n                        raise RuntimeError(f'Unsupported binary content type: {item.media_type}')\n                elif isinstance(item, AudioUrl):  # pragma: no cover\n                    client = cached_async_http_client()\n                    response = await client.get(item.url)\n                    response.raise_for_status()\n                    base64_encoded = base64.b64encode(response.content).decode('utf-8')\n                    audio = InputAudio(data=base64_encoded, format=response.headers.get('content-type'))\n                    content.append(ChatCompletionContentPartInputAudioParam(input_audio=audio, type='input_audio'))\n                elif isinstance(item, DocumentUrl):  # pragma: no cover", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-53688e690a1714927cd95fd846af7f81", "__created_at__": 1744231651.420514, "content": ": no cover\n                    client = cached_async_http_client()\n                    response = await client.get(item.url)\n                    response.raise_for_status()\n                    base64_encoded = base64.b64encode(response.content).decode('utf-8')\n                    audio = InputAudio(data=base64_encoded, format=response.headers.get('content-type'))\n                    content.append(ChatCompletionContentPartInputAudioParam(input_audio=audio, type='input_audio'))\n                elif isinstance(item, DocumentUrl):  # pragma: no cover\n                    raise NotImplementedError('DocumentUrl is not supported for OpenAI')\n                    # The following implementation should have worked, but it seems we have the following error:\n                    # pydantic_ai.exceptions.ModelHTTPError: status_code: 400, model_name: gpt-4o, body:\n                    # {\n                    #   'message': \"Unknown parameter: 'messages[1].content[1].file.data'.\",\n                    #   'type': 'invalid_request_error',\n                    #   'param': 'messages[1].content[1].file.data',\n                    #   'code': 'unknown_parameter'\n                    # }\n                    #\n                    # client = cached_async_http_client()\n                    # response = await client.get(item.url)\n                    # response.raise_for_status()\n                    # base64_encoded = base64.b64encode(response.content).decode('utf-8')\n                    # media_type = response.headers.get('content-type').split(';')[0]\n                    # file_data = f'data:{media_type};base64,{base64_encoded}'\n                    # file = File(file={'file_data': file_data, 'file_name': item.url, 'file_id': item.url}, type='file')\n                    # content.append(file)\n                else:\n                    assert_never(item)\n        return chat.ChatCompletionUserMessageParam(role='user', content=content)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: OpenAIModelName,\n    *,\n    provider: (\n        Literal[\"openai\", \"deepseek\", \"azure\"]\n        | Provider[AsyncOpenAI]\n    ) = \"openai\",\n    system_prompt_role: OpenAISystemPromptRole | None = None\n)\n\n```\n\nInitialize an OpenAI model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `OpenAIModelName` | The name of the OpenAI model to use. List of model names available [here](https://github.com/openai/openai-python/blob/v1.54.3/src/openai/types/chat_model.py#L7) (Unfortunately, despite being ask to do so, OpenAI do not provide `.inv` files for their API). | *required* |\n| `provider` | `Literal['openai', 'deepseek', 'azure'] | Provider[AsyncOpenAI]` | The provider to use. Defaults to `'openai'`. | `'openai'` |\n| `system_prompt_role` | `OpenAISystemPromptRole | None` | The role to use for the system prompt message. If not provided, defaults to `'system'`. In the future, this may be inferred from the model name. | `None` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n```\ndef __init__(\n    self,\n    model_name: OpenAIModelName,\n    *,\n    provider: Literal['openai', 'deepseek', 'azure'] | Provider[AsyncOpenAI] = 'openai',\n    system_prompt_role: OpenAISystemPromptRole | None = None,\n):\n    \"\"\"Initialize an OpenAI model.\n\n    Args:\n        model_name: The name of the OpenAI model to use. List of model names available\n            [here](https://github.com/openai/openai-python/blob/v1.54.3/src/openai/types/chat_model.py#L7)\n            (Unfortunately, despite being ask to do so, OpenAI do not provide `.inv` files for their API).\n        provider: The provider to use. Defaults to `'openai'`.\n        system_prompt_role: The role to use for the system prompt message. If not provided, defaults to `'system'`.\n            In the future, this may be inferred from the model name.\n    \"\"\"\n    self._model_name = model_name\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self.client = provider.client\n    self.system_prompt_role = system_prompt_role\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: OpenAIModelName\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n### OpenAIResponsesModel `dataclass`\n\nBases: `Model`\n\nA model that uses the OpenAI Responses API.\n\nThe [OpenAI Responses API](https://platform.openai.com/docs/api-reference/responses) is the\nnew API for OpenAI models.\n\nThe Responses API has built-in tools, that you can use instead of building your own:\n\n* [Web search](https://platform.openai.com/docs/guides/tools-web-search)\n* [File search](https://platform.openai.com/docs/guides/tools-file-search)\n* [Computer use](https://platform.openai.com/docs/guides/tools-computer-use)\n\nUse the `openai_builtin_tools` setting to add these tools to your model.\n\nIf you are interested in the differences between the Responses API and the Chat Completions API,\nsee the [OpenAI API docs](https://platform.openai.com/docs/guides/responses-vs-chat-completions).\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n```\n@dataclass(init=False)\nclass OpenAIResponsesModel(Model):", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-66833d79e4d36b5a0e73579d383201e2", "__created_at__": 1744231651.420514, "content": "puter-use)\n\nUse the `openai_builtin_tools` setting to add these tools to your model.\n\nIf you are interested in the differences between the Responses API and the Chat Completions API,\nsee the [OpenAI API docs](https://platform.openai.com/docs/guides/responses-vs-chat-completions).\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n```\n@dataclass(init=False)\nclass OpenAIResponsesModel(Model):\n    \"\"\"A model that uses the OpenAI Responses API.\n\n    The [OpenAI Responses API](https://platform.openai.com/docs/api-reference/responses) is the\n    new API for OpenAI models.\n\n    The Responses API has built-in tools, that you can use instead of building your own:\n\n    - [Web search](https://platform.openai.com/docs/guides/tools-web-search)\n    - [File search](https://platform.openai.com/docs/guides/tools-file-search)\n    - [Computer use](https://platform.openai.com/docs/guides/tools-computer-use)\n\n    Use the `openai_builtin_tools` setting to add these tools to your model.\n\n    If you are interested in the differences between the Responses API and the Chat Completions API,\n    see the [OpenAI API docs](https://platform.openai.com/docs/guides/responses-vs-chat-completions).\n    \"\"\"\n\n    client: AsyncOpenAI = field(repr=False)\n    system_prompt_role: OpenAISystemPromptRole | None = field(default=None)\n\n    _model_name: OpenAIModelName = field(repr=False)\n    _system: str = field(default='openai', repr=False)\n\n    def __init__(\n        self,\n        model_name: OpenAIModelName,\n        *,\n        provider: Literal['openai', 'deepseek', 'azure'] | Provider[AsyncOpenAI] = 'openai',\n    ):\n        \"\"\"Initialize an OpenAI Responses model.\n\n        Args:\n            model_name: The name of the OpenAI model to use.\n            provider: The provider to use. Defaults to `'openai'`.\n        \"\"\"\n        self._model_name = model_name\n        if isinstance(provider, str):\n            provider = infer_provider(provider)\n        self.client = provider.client\n\n    @property\n    def model_name(self) -> OpenAIModelName:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n    async def request(\n        self,\n        messages: list[ModelRequest | ModelResponse],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, usage.Usage]:\n        check_allow_model_requests()\n        response = await self._responses_create(\n            messages, False, cast(OpenAIResponsesModelSettings, model_settings or {}), model_request_parameters\n        )\n        return self._process_response(response), _map_usage(response)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        check_allow_model_requests()\n        response = await self._responses_create(\n            messages, True, cast(OpenAIResponsesModelSettings, model_settings or {}), model_request_parameters\n        )\n        async with response:\n            yield await self._process_streamed_response(response)\n\n    def customize_request_parameters(self, model_request_parameters: ModelRequestParameters) -> ModelRequestParameters:\n        return _customize_request_parameters(model_request_parameters)\n\n    def _process_response(self, response: responses.Response) -> ModelResponse:\n        \"\"\"Process a non-streamed response, and prepare a message to return.\"\"\"\n        timestamp = datetime.fromtimestamp(response.created_at, tz=timezone.utc)\n        items: list[ModelResponsePart] = []\n        items.append(TextPart(response.output_text))\n        for item in response.output:\n            if item.type == 'function_call':\n                items.append(ToolCallPart(item.name, item.arguments, tool_call_id=item.call_id))\n        return ModelResponse(items, model_name=response.model, timestamp=timestamp)\n\n    async def _process_streamed_response(\n        self, response: AsyncStream[responses.ResponseStreamEvent]\n    ) -> OpenAIResponsesStreamedResponse:\n        \"\"\"Process a streamed response, and prepare a streaming response to return.\"\"\"\n        peekable_response = _utils.PeekableAsyncStream(response)\n        first_chunk = await peekable_response.peek()\n        if isinstance(first_chunk, _utils.Unset):  # pragma: no cover\n            raise UnexpectedModelBehavior('Streamed response ended without content or tool calls')\n\n        assert isinstance(first_chunk, responses.ResponseCreatedEvent)\n        return OpenAIResponsesStreamedResponse(\n            _model_name=self._model_name,\n            _response=peekable_response,\n            _timestamp=datetime.fromtimestamp(first_chunk.response.created_at, tz=timezone.utc),\n        )\n\n    @overload\n    async def _responses_create(\n        self,\n        messages: list[ModelRequest | ModelResponse],\n        stream: Literal[False],\n        model_settings: OpenAIResponsesModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> responses.Response: ...\n\n    @overload\n    async def _responses_create(\n        self,\n        messages: list[ModelRequest | ModelResponse],\n        stream: Literal[True],\n        model_settings: OpenAIResponsesModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncStream[responses.ResponseStreamEvent]: ...\n\n    async def _responses_create(\n        self,\n        messages: list[ModelRequest | ModelResponse],\n        stream: bool,\n        model_settings: OpenAIResponsesModelSettings,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6", "__created_at__": 1744231651.420514, "content": "@overload\n    async def _responses_create(\n        self,\n        messages: list[ModelRequest | ModelResponse],\n        stream: Literal[True],\n        model_settings: OpenAIResponsesModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncStream[responses.ResponseStreamEvent]: ...\n\n    async def _responses_create(\n        self,\n        messages: list[ModelRequest | ModelResponse],\n        stream: bool,\n        model_settings: OpenAIResponsesModelSettings,\n        model_request_parameters: ModelRequestParameters,\n    ) -> responses.Response | AsyncStream[responses.ResponseStreamEvent]:\n        tools = self._get_tools(model_request_parameters)\n        tools = list(model_settings.get('openai_builtin_tools', [])) + tools\n\n        # standalone function to make it easier to override\n        if not tools:\n            tool_choice: Literal['none', 'required', 'auto'] | None = None\n        elif not model_request_parameters.allow_text_result:\n            tool_choice = 'required'\n        else:\n            tool_choice = 'auto'\n\n        system_prompt, openai_messages = await self._map_message(messages)\n        reasoning = self._get_reasoning(model_settings)\n\n        try:\n            return await self.client.responses.create(\n                input=openai_messages,\n                model=self._model_name,\n                instructions=system_prompt,\n                parallel_tool_calls=model_settings.get('parallel_tool_calls', NOT_GIVEN),\n                tools=tools or NOT_GIVEN,\n                tool_choice=tool_choice or NOT_GIVEN,\n                max_output_tokens=model_settings.get('max_tokens', NOT_GIVEN),\n                stream=stream,\n                temperature=model_settings.get('temperature', NOT_GIVEN),\n                top_p=model_settings.get('top_p', NOT_GIVEN),\n                truncation=model_settings.get('openai_truncation', NOT_GIVEN),\n                timeout=model_settings.get('timeout', NOT_GIVEN),\n                reasoning=reasoning,\n                user=model_settings.get('openai_user', NOT_GIVEN),\n                extra_headers={'User-Agent': get_user_agent()},\n            )\n        except APIStatusError as e:\n            if (status_code := e.status_code) >= 400:\n                raise ModelHTTPError(status_code=status_code, model_name=self.model_name, body=e.body) from e\n            raise\n\n    def _get_reasoning(self, model_settings: OpenAIResponsesModelSettings) -> Reasoning | NotGiven:\n        reasoning_effort = model_settings.get('openai_reasoning_effort', None)\n        reasoning_generate_summary = model_settings.get('openai_reasoning_generate_summary', None)\n\n        if reasoning_effort is None and reasoning_generate_summary is None:\n            return NOT_GIVEN\n        return Reasoning(effort=reasoning_effort, generate_summary=reasoning_generate_summary)\n\n    def _get_tools(self, model_request_parameters: ModelRequestParameters) -> list[responses.FunctionToolParam]:\n        tools = [self._map_tool_definition(r) for r in model_request_parameters.function_tools]\n        if model_request_parameters.result_tools:\n            tools += [self._map_tool_definition(r) for r in model_request_parameters.result_tools]\n        return tools\n\n    @staticmethod\n    def _map_tool_definition(f: ToolDefinition) -> responses.FunctionToolParam:\n        return {\n            'name': f.name,\n            'parameters': f.parameters_json_schema,\n            'type': 'function',\n            'description': f.description,\n            # NOTE: f.strict should already be a boolean thanks to customize_request_parameters\n            'strict': f.strict or False,\n        }\n\n    async def _map_message(self, messages: list[ModelMessage]) -> tuple[str, list[responses.ResponseInputItemParam]]:\n        \"\"\"Just maps a `pydantic_ai.Message` to a `openai.types.responses.ResponseInputParam`.\"\"\"\n        system_prompt: str = ''\n        openai_messages: list[responses.ResponseInputItemParam] = []\n        for message in messages:\n            if isinstance(message, ModelRequest):\n                for part in message.parts:\n                    if isinstance(part, SystemPromptPart):\n                        system_prompt += part.content\n                    elif isinstance(part, UserPromptPart):\n                        openai_messages.append(await self._map_user_prompt(part))\n                    elif isinstance(part, ToolReturnPart):\n                        openai_messages.append(\n                            FunctionCallOutput(\n                                type='function_call_output',\n                                call_id=_guard_tool_call_id(t=part),\n                                output=part.model_response_str(),\n                            )\n                        )\n                    elif isinstance(part, RetryPromptPart):\n                        # TODO(Marcelo): How do we test this conditional branch?\n                        if part.tool_name is None:  # pragma: no cover\n                            openai_messages.append(\n                                Message(role='user', content=[{'type': 'input_text', 'text': part.model_response()}])\n                            )\n                        else:\n                            openai_messages.append(\n                                FunctionCallOutput(\n                                    type='function_call_output',\n                                    call_id=_guard_tool_call_id(t=part),\n                                    output=part.model_response(),\n                                )\n                            )\n                    else:\n                        assert_never(part)\n            elif isinstance(message, ModelResponse):\n                for item in message.parts:\n                    if isinstance(item, TextPart):\n                        openai_messages.append(responses.EasyInputMessageParam(role='assistant', content=item.content))\n                    elif isinstance(item, ToolCallPart):\n                        openai_messages.append(self._map_tool_call(item))\n                    else:\n                        assert_never(item)\n            else:\n                assert_never(message)\n        return system_prompt, openai_messages\n\n    @staticmethod\n    def _map_tool_call(t: ToolCallPart) -> responses.ResponseFunctionToolCallParam:\n        return responses.ResponseFunctionToolCallParam(\n            arguments=t.args_as_json_str(),\n            call_id=_guard_tool_call_id(t=t),\n            name=t.tool_name,\n            type='function_call',\n        )\n\n    @staticmethod\n    async def _map_user_prompt(part: UserPromptPart) ->", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-71384fed13de40875f84ff6882c37c84", "__created_at__": 1744231651.420514, "content": ":\n                assert_never(message)\n        return system_prompt, openai_messages\n\n    @staticmethod\n    def _map_tool_call(t: ToolCallPart) -> responses.ResponseFunctionToolCallParam:\n        return responses.ResponseFunctionToolCallParam(\n            arguments=t.args_as_json_str(),\n            call_id=_guard_tool_call_id(t=t),\n            name=t.tool_name,\n            type='function_call',\n        )\n\n    @staticmethod\n    async def _map_user_prompt(part: UserPromptPart) -> responses.EasyInputMessageParam:\n        content: str | list[responses.ResponseInputContentParam]\n        if isinstance(part.content, str):\n            content = part.content\n        else:\n            content = []\n            for item in part.content:\n                if isinstance(item, str):\n                    content.append(responses.ResponseInputTextParam(text=item, type='input_text'))\n                elif isinstance(item, BinaryContent):\n                    base64_encoded = base64.b64encode(item.data).decode('utf-8')\n                    if item.is_image:\n                        content.append(\n                            responses.ResponseInputImageParam(\n                                image_url=f'data:{item.media_type};base64,{base64_encoded}',\n                                type='input_image',\n                                detail='auto',\n                            )\n                        )\n                    elif item.is_document:\n                        content.append(\n                            responses.ResponseInputFileParam(\n                                type='input_file',\n                                file_data=f'data:{item.media_type};base64,{base64_encoded}',\n                                # NOTE: Type wise it's not necessary to include the filename, but it's required by the\n                                # API itself. If we add empty string, the server sends a 500 error - which OpenAI needs\n                                # to fix. In any case, we add a placeholder name.\n                                filename=f'filename.{item.format}',\n                            )\n                        )\n                    elif item.is_audio:\n                        raise NotImplementedError('Audio as binary content is not supported for OpenAI Responses API.')\n                    else:  # pragma: no cover\n                        raise RuntimeError(f'Unsupported binary content type: {item.media_type}')\n                elif isinstance(item, ImageUrl):\n                    content.append(\n                        responses.ResponseInputImageParam(image_url=item.url, type='input_image', detail='auto')\n                    )\n                elif isinstance(item, AudioUrl):  # pragma: no cover\n                    client = cached_async_http_client()\n                    response = await client.get(item.url)\n                    response.raise_for_status()\n                    base64_encoded = base64.b64encode(response.content).decode('utf-8')\n                    content.append(\n                        responses.ResponseInputFileParam(\n                            type='input_file',\n                            file_data=f'data:{item.media_type};base64,{base64_encoded}',\n                        )\n                    )\n                elif isinstance(item, DocumentUrl):  # pragma: no cover\n                    client = cached_async_http_client()\n                    response = await client.get(item.url)\n                    response.raise_for_status()\n                    base64_encoded = base64.b64encode(response.content).decode('utf-8')\n                    content.append(\n                        responses.ResponseInputFileParam(\n                            type='input_file',\n                            file_data=f'data:{item.media_type};base64,{base64_encoded}',\n                            filename=f'filename.{item.format}',\n                        )\n                    )\n                else:\n                    assert_never(item)\n        return responses.EasyInputMessageParam(role='user', content=content)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    model_name: OpenAIModelName,\n    *,\n    provider: (\n        Literal[\"openai\", \"deepseek\", \"azure\"]\n        | Provider[AsyncOpenAI]\n    ) = \"openai\"\n)\n\n```\n\nInitialize an OpenAI Responses model.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `model_name` | `OpenAIModelName` | The name of the OpenAI model to use. | *required* |\n| `provider` | `Literal['openai', 'deepseek', 'azure'] | Provider[AsyncOpenAI]` | The provider to use. Defaults to `'openai'`. | `'openai'` |\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/openai.py`\n```\ndef __init__(\n    self,\n    model_name: OpenAIModelName,\n    *,\n    provider: Literal['openai', 'deepseek', 'azure'] | Provider[AsyncOpenAI] = 'openai',\n):\n    \"\"\"Initialize an OpenAI Responses model.\n\n    Args:\n        model_name: The name of the OpenAI model to use.\n        provider: The provider to use. Defaults to `'openai'`.\n    \"\"\"\n    self._model_name = model_name\n    if isinstance(provider, str):\n        provider = infer_provider(provider)\n    self.client = provider.client\n\n```\n\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: OpenAIModelName\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n\n\n\n\n`pydantic_ai.models.test`\n=========================\n\nUtility model for quickly testing apps built with PydanticAI.\n\nHere's a minimal example:\n\ntest\\_model\\_usage.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models.test import TestModel\n\nmy_agent = Agent('openai:gpt-4o', system_prompt='...')\n\n\nasync def test_my_agent():\n    \"\"\"Unit test for my_agent, to be run by pytest.\"\"\"\n    m = TestModel()\n    with my_agent.override(model=m):\n        result = await my_agent.run('Testing my agent...')\n        assert result.data == 'success (no tool calls)'\n    assert m.last_model_request_parameters.function_tools == []\n\n```\n\nSee [Unit testing with `TestModel`](../../../testing/#unit-testing-with-testmodel) for detailed documentation.\n\n### TestModel `dataclass`\n\nBases:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ba870a242fd1468b0176d028dc0c47b3", "__created_at__": 1744231651.420514, "content": "test_my_agent():\n    \"\"\"Unit test for my_agent, to be run by pytest.\"\"\"\n    m = TestModel()\n    with my_agent.override(model=m):\n        result = await my_agent.run('Testing my agent...')\n        assert result.data == 'success (no tool calls)'\n    assert m.last_model_request_parameters.function_tools == []\n\n```\n\nSee [Unit testing with `TestModel`](../../../testing/#unit-testing-with-testmodel) for detailed documentation.\n\n### TestModel `dataclass`\n\nBases: `Model`\n\nA model specifically for testing purposes.\n\nThis will (by default) call all tools in the agent, then return a tool response if possible,\notherwise a plain response.\n\nHow useful this model is will vary significantly.\n\nApart from `__init__` derived by the `dataclass` decorator, all methods are private or match those\nof the base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/test.py`\n```\n@dataclass\nclass TestModel(Model):\n    \"\"\"A model specifically for testing purposes.\n\n    This will (by default) call all tools in the agent, then return a tool response if possible,\n    otherwise a plain response.\n\n    How useful this model is will vary significantly.\n\n    Apart from `__init__` derived by the `dataclass` decorator, all methods are private or match those\n    of the base class.\n    \"\"\"\n\n    # NOTE: Avoid test discovery by pytest.\n    __test__ = False\n\n    call_tools: list[str] | Literal['all'] = 'all'\n    \"\"\"List of tools to call. If `'all'`, all tools will be called.\"\"\"\n    custom_result_text: str | None = None\n    \"\"\"If set, this text is returned as the final result.\"\"\"\n    custom_result_args: Any | None = None\n    \"\"\"If set, these args will be passed to the result tool.\"\"\"\n    seed: int = 0\n    \"\"\"Seed for generating random data.\"\"\"\n    last_model_request_parameters: ModelRequestParameters | None = field(default=None, init=False)\n    \"\"\"The last ModelRequestParameters passed to the model in a request.\n\n    The ModelRequestParameters contains information about the function and result tools available during request handling.\n\n    This is set when a request is made, so will reflect the function tools from the last step of the last run.\n    \"\"\"\n    _model_name: str = field(default='test', repr=False)\n    _system: str = field(default='test', repr=False)\n\n    async def request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> tuple[ModelResponse, Usage]:\n        self.last_model_request_parameters = model_request_parameters\n\n        model_response = self._request(messages, model_settings, model_request_parameters)\n        usage = _estimate_usage([*messages, model_response])\n        return model_response, usage\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        self.last_model_request_parameters = model_request_parameters\n\n        model_response = self._request(messages, model_settings, model_request_parameters)\n        yield TestStreamedResponse(\n            _model_name=self._model_name, _structured_response=model_response, _messages=messages\n        )\n\n    @property\n    def model_name(self) -> str:\n        \"\"\"The model name.\"\"\"\n        return self._model_name\n\n    @property\n    def system(self) -> str:\n        \"\"\"The system / model provider.\"\"\"\n        return self._system\n\n    def gen_tool_args(self, tool_def: ToolDefinition) -> Any:\n        return _JsonSchemaTestData(tool_def.parameters_json_schema, self.seed).generate()\n\n    def _get_tool_calls(self, model_request_parameters: ModelRequestParameters) -> list[tuple[str, ToolDefinition]]:\n        if self.call_tools == 'all':\n            return [(r.name, r) for r in model_request_parameters.function_tools]\n        else:\n            function_tools_lookup = {t.name: t for t in model_request_parameters.function_tools}\n            tools_to_call = (function_tools_lookup[name] for name in self.call_tools)\n            return [(r.name, r) for r in tools_to_call]\n\n    def _get_result(self, model_request_parameters: ModelRequestParameters) -> _TextResult | _FunctionToolResult:\n        if self.custom_result_text is not None:\n            assert model_request_parameters.allow_text_result, (\n                'Plain response not allowed, but `custom_result_text` is set.'\n            )\n            assert self.custom_result_args is None, 'Cannot set both `custom_result_text` and `custom_result_args`.'\n            return _TextResult(self.custom_result_text)\n        elif self.custom_result_args is not None:\n            assert model_request_parameters.result_tools is not None, (\n                'No result tools provided, but `custom_result_args` is set.'\n            )\n            result_tool = model_request_parameters.result_tools[0]\n\n            if k := result_tool.outer_typed_dict_key:\n                return _FunctionToolResult({k: self.custom_result_args})\n            else:\n                return _FunctionToolResult(self.custom_result_args)\n        elif model_request_parameters.allow_text_result:\n            return _TextResult(None)\n        elif model_request_parameters.result_tools:\n            return _FunctionToolResult(None)\n        else:\n            return _TextResult(None)\n\n    def _request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> ModelResponse:\n        tool_calls = self._get_tool_calls(model_request_parameters)\n        result = self._get_result(model_request_parameters)\n        result_tools = model", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-d3269c6bd37da96e627118feb457c52c", "__created_at__": 1744231651.420514, "content": "_TextResult(None)\n        elif model_request_parameters.result_tools:\n            return _FunctionToolResult(None)\n        else:\n            return _TextResult(None)\n\n    def _request(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> ModelResponse:\n        tool_calls = self._get_tool_calls(model_request_parameters)\n        result = self._get_result(model_request_parameters)\n        result_tools = model_request_parameters.result_tools\n\n        # if there are tools, the first thing we want to do is call all of them\n        if tool_calls and not any(isinstance(m, ModelResponse) for m in messages):\n            return ModelResponse(\n                parts=[ToolCallPart(name, self.gen_tool_args(args)) for name, args in tool_calls],\n                model_name=self._model_name,\n            )\n\n        if messages:\n            last_message = messages[-1]\n            assert isinstance(last_message, ModelRequest), 'Expected last message to be a `ModelRequest`.'\n\n            # check if there are any retry prompts, if so retry them\n            new_retry_names = {p.tool_name for p in last_message.parts if isinstance(p, RetryPromptPart)}\n            if new_retry_names:\n                # Handle retries for both function tools and result tools\n                # Check function tools first\n                retry_parts: list[ModelResponsePart] = [\n                    ToolCallPart(name, self.gen_tool_args(args)) for name, args in tool_calls if name in new_retry_names\n                ]\n                # Check result tools\n                if result_tools:\n                    retry_parts.extend(\n                        [\n                            ToolCallPart(\n                                tool.name,\n                                result.value\n                                if isinstance(result, _FunctionToolResult) and result.value is not None\n                                else self.gen_tool_args(tool),\n                            )\n                            for tool in result_tools\n                            if tool.name in new_retry_names\n                        ]\n                    )\n                return ModelResponse(parts=retry_parts, model_name=self._model_name)\n\n        if isinstance(result, _TextResult):\n            if (response_text := result.value) is None:\n                # build up details of tool responses\n                output: dict[str, Any] = {}\n                for message in messages:\n                    if isinstance(message, ModelRequest):\n                        for part in message.parts:\n                            if isinstance(part, ToolReturnPart):\n                                output[part.tool_name] = part.content\n                if output:\n                    return ModelResponse(\n                        parts=[TextPart(pydantic_core.to_json(output).decode())], model_name=self._model_name\n                    )\n                else:\n                    return ModelResponse(parts=[TextPart('success (no tool calls)')], model_name=self._model_name)\n            else:\n                return ModelResponse(parts=[TextPart(response_text)], model_name=self._model_name)\n        else:\n            assert result_tools, 'No result tools provided'\n            custom_result_args = result.value\n            result_tool = result_tools[self.seed % len(result_tools)]\n            if custom_result_args is not None:\n                return ModelResponse(\n                    parts=[ToolCallPart(result_tool.name, custom_result_args)], model_name=self._model_name\n                )\n            else:\n                response_args = self.gen_tool_args(result_tool)\n                return ModelResponse(parts=[ToolCallPart(result_tool.name, response_args)], model_name=self._model_name)\n\n```\n\n\n#### call\\_tools `class-attribute` `instance-attribute`\n\n```\ncall_tools: list[str] | Literal['all'] = 'all'\n\n```\n\nList of tools to call. If `'all'`, all tools will be called.\n\n\n\n#### custom\\_result\\_text `class-attribute` `instance-attribute`\n\n```\ncustom_result_text: str | None = None\n\n```\n\nIf set, this text is returned as the final result.\n\n\n\n#### custom\\_result\\_args `class-attribute` `instance-attribute`\n\n```\ncustom_result_args: Any | None = None\n\n```\n\nIf set, these args will be passed to the result tool.\n\n\n\n#### seed `class-attribute` `instance-attribute`\n\n```\nseed: int = 0\n\n```\n\nSeed for generating random data.\n\n\n\n#### last\\_model\\_request\\_parameters `class-attribute` `instance-attribute`\n\n```\nlast_model_request_parameters: (\n    ModelRequestParameters | None\n) = field(default=None, init=False)\n\n```\n\nThe last ModelRequestParameters passed to the model in a request.\n\nThe ModelRequestParameters contains information about the function and result tools available during request handling.\n\nThis is set when a request is made, so will reflect the function tools from the last step of the last run.\n\n\n\n#### model\\_name `property`\n\n```\nmodel_name: str\n\n```\n\nThe model name.\n\n\n\n#### system `property`\n\n```\nsystem: str\n\n```\n\nThe system / model provider.\n\n\n\n\n\n\n### TestStreamedResponse `dataclass`\n\nBases: `StreamedResponse`\n\nA structured response that streams test data.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/test.py`\n```\n@dataclass\nclass TestStreamedResponse(StreamedResponse):\n    \"\"\"A structured response that streams test data.\"\"\"\n\n    _model_name: str\n    _structured_response: ModelResponse\n    _messages: InitVar[Iterable[ModelMessage]]\n    _timestamp: datetime = field(default_factory=_utils.now_utc, init=False)\n\n    def __post_init__(self, _messages: Iterable[ModelMessage]):\n        self._usage = _estimate_usage(_messages)\n\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        for i, part in enumerate(self._structured_response.parts):\n            if isinstance(part, TextPart):\n                text = part.content\n                *words, last_word = text.split(' ')\n                words = [f'{word} ' for", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-7574296d70c6b864b4a5f29f2b14afe1", "__created_at__": 1744231651.420514, "content": ".now_utc, init=False)\n\n    def __post_init__(self, _messages: Iterable[ModelMessage]):\n        self._usage = _estimate_usage(_messages)\n\n    async def _get_event_iterator(self) -> AsyncIterator[ModelResponseStreamEvent]:\n        for i, part in enumerate(self._structured_response.parts):\n            if isinstance(part, TextPart):\n                text = part.content\n                *words, last_word = text.split(' ')\n                words = [f'{word} ' for word in words]\n                words.append(last_word)\n                if len(words) == 1 and len(text) > 2:\n                    mid = len(text) // 2\n                    words = [text[:mid], text[mid:]]\n                self._usage += _get_string_usage('')\n                yield self._parts_manager.handle_text_delta(vendor_part_id=i, content='')\n                for word in words:\n                    self._usage += _get_string_usage(word)\n                    yield self._parts_manager.handle_text_delta(vendor_part_id=i, content=word)\n            else:\n                yield self._parts_manager.handle_tool_call_part(\n                    vendor_part_id=i, tool_name=part.tool_name, args=part.args, tool_call_id=part.tool_call_id\n                )\n\n    @property\n    def model_name(self) -> str:\n        \"\"\"Get the model name of the response.\"\"\"\n        return self._model_name\n\n    @property\n    def timestamp(self) -> datetime:\n        \"\"\"Get the timestamp of the response.\"\"\"\n        return self._timestamp\n\n```\n\n\n#### model\\_name `property`\n\n```\nmodel_name: str\n\n```\n\nGet the model name of the response.\n\n\n\n#### timestamp `property`\n\n```\ntimestamp: datetime\n\n```\n\nGet the timestamp of the response.\n\n\n\n\n\n\n\n\n\n\npydantic\\_ai.models.wrapper\n===========================\n\n### WrapperModel `dataclass`\n\nBases: `Model`\n\nModel which wraps another model.\n\nDoes nothing on its own, used as a base class.\n\nSource code in `pydantic_ai_slim/pydantic_ai/models/wrapper.py`\n```\n@dataclass(init=False)\nclass WrapperModel(Model):\n    \"\"\"Model which wraps another model.\n\n    Does nothing on its own, used as a base class.\n    \"\"\"\n\n    wrapped: Model\n    \"\"\"The underlying model being wrapped.\"\"\"\n\n    def __init__(self, wrapped: Model | KnownModelName):\n        self.wrapped = infer_model(wrapped)\n\n    async def request(self, *args: Any, **kwargs: Any) -> tuple[ModelResponse, Usage]:\n        return await self.wrapped.request(*args, **kwargs)\n\n    @asynccontextmanager\n    async def request_stream(\n        self,\n        messages: list[ModelMessage],\n        model_settings: ModelSettings | None,\n        model_request_parameters: ModelRequestParameters,\n    ) -> AsyncIterator[StreamedResponse]:\n        async with self.wrapped.request_stream(messages, model_settings, model_request_parameters) as response_stream:\n            yield response_stream\n\n    def customize_request_parameters(self, model_request_parameters: ModelRequestParameters) -> ModelRequestParameters:\n        return self.wrapped.customize_request_parameters(model_request_parameters)\n\n    @property\n    def model_name(self) -> str:\n        return self.wrapped.model_name\n\n    @property\n    def system(self) -> str:\n        return self.wrapped.system\n\n    def __getattr__(self, item: str):\n        return getattr(self.wrapped, item)\n\n```\n\n\n#### wrapped `instance-attribute`\n\n```\nwrapped: Model = infer_model(wrapped)\n\n```\n\nThe underlying model being wrapped.\n\n\n\n\n\n\n\n\n\n\n`pydantic_evals.dataset`\n========================\n\nDataset management for pydantic evals.\n\nThis module provides functionality for creating, loading, saving, and evaluating datasets of test cases.\nEach case must have inputs, and can optionally have a name, expected output, metadata, and case-specific evaluators.\n\nDatasets can be loaded from and saved to YAML or JSON files, and can be evaluated against\na task function to produce an evaluation report.\n\n### Case `dataclass`\n\nBases: `Generic[InputsT, OutputT, MetadataT]`\n\nA single row of a `Dataset`.\n\nEach case represents a single test scenario with inputs to test. A case may optionally specify a name, expected\noutputs to compare against, and arbitrary metadata.\n\nCases can also have their own specific evaluators which are run in addition to dataset-level evaluators.\n\nExample:\n```\nfrom pydantic_evals import Case\n\ncase = Case(\n    name='Simple addition',\n    inputs={'a': 1, 'b': 2},\n    expected_output=3,\n    metadata={'description': 'Tests basic addition'},\n)\n\n```\n\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\n@dataclass(init=False)\nclass Case(Generic[InputsT, OutputT, MetadataT]):\n    \"\"\"A single row of a [`Dataset`][pydantic_evals.Dataset].\n\n    Each case represents a single test scenario with inputs to test. A case may optionally specify a name, expected\n    outputs to compare against, and arbitrary metadata.\n\n    Cases can also have their own specific evaluators which are run in addition to dataset-level evaluators.\n\n    Example:\n    ```python\n    from pydantic_evals import Case\n\n    case = Case(\n        name='Simple addition',\n        inputs={'a': 1, 'b': 2},\n        expected_output=3,\n        metadata={'description': 'Tests basic addition'},\n    )\n    ```\n    \"\"\"\n\n    name: str | None\n    \"\"\"Name of the case. This is used to identify the case in the report and can be used to filter cases.\"\"\"\n    inputs: InputsT\n    \"\"\"Inputs to the task. This is the input to the task that will be evaluated.\"\"\"\n    metadata: MetadataT | None = None\n    \"\"\"", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a7db06d94811ecc4dc37c02ebe2a82c3", "__created_at__": 1744231651.420514, "content": "1, 'b': 2},\n        expected_output=3,\n        metadata={'description': 'Tests basic addition'},\n    )\n    ```\n    \"\"\"\n\n    name: str | None\n    \"\"\"Name of the case. This is used to identify the case in the report and can be used to filter cases.\"\"\"\n    inputs: InputsT\n    \"\"\"Inputs to the task. This is the input to the task that will be evaluated.\"\"\"\n    metadata: MetadataT | None = None\n    \"\"\"Metadata to be used in the evaluation.\n\n    This can be used to provide additional information about the case to the evaluators.\n    \"\"\"\n    expected_output: OutputT | None = None\n    \"\"\"Expected output of the task. This is the expected output of the task that will be evaluated.\"\"\"\n    evaluators: list[Evaluator[InputsT, OutputT, MetadataT]] = field(default_factory=list)\n    \"\"\"Evaluators to be used just on this case.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        name: str | None = None,\n        inputs: InputsT,\n        metadata: MetadataT | None = None,\n        expected_output: OutputT | None = None,\n        evaluators: tuple[Evaluator[InputsT, OutputT, MetadataT], ...] = (),\n    ):\n        \"\"\"Initialize a new test case.\n\n        Args:\n            name: Optional name for the case. If not provided, a generic name will be assigned when added to a dataset.\n            inputs: The inputs to the task being evaluated.\n            metadata: Optional metadata for the case, which can be used by evaluators.\n            expected_output: Optional expected output of the task, used for comparison in evaluators.\n            evaluators: Tuple of evaluators specific to this case. These are in addition to any\n                dataset-level evaluators.\n\n        \"\"\"\n        # Note: `evaluators` must be a tuple instead of Sequence due to misbehavior with pyright's generic parameter\n        # inference if it has type `Sequence`\n        self.name = name\n        self.inputs = inputs\n        self.metadata = metadata\n        self.expected_output = expected_output\n        self.evaluators = list(evaluators)\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    name: str | None = None,\n    inputs: InputsT,\n    metadata: MetadataT | None = None,\n    expected_output: OutputT | None = None,\n    evaluators: tuple[\n        Evaluator[InputsT, OutputT, MetadataT], ...\n    ] = ()\n)\n\n```\n\nInitialize a new test case.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `name` | `str | None` | Optional name for the case. If not provided, a generic name will be assigned when added to a dataset. | `None` |\n| `inputs` | `InputsT` | The inputs to the task being evaluated. | *required* |\n| `metadata` | `MetadataT | None` | Optional metadata for the case, which can be used by evaluators. | `None` |\n| `expected_output` | `OutputT | None` | Optional expected output of the task, used for comparison in evaluators. | `None` |\n| `evaluators` | `tuple[Evaluator[InputsT, OutputT, MetadataT], ...]` | Tuple of evaluators specific to this case. These are in addition to any dataset-level evaluators. | `()` |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\ndef __init__(\n    self,\n    *,\n    name: str | None = None,\n    inputs: InputsT,\n    metadata: MetadataT | None = None,\n    expected_output: OutputT | None = None,\n    evaluators: tuple[Evaluator[InputsT, OutputT, MetadataT], ...] = (),\n):\n    \"\"\"Initialize a new test case.\n\n    Args:\n        name: Optional name for the case. If not provided, a generic name will be assigned when added to a dataset.\n        inputs: The inputs to the task being evaluated.\n        metadata: Optional metadata for the case, which can be used by evaluators.\n        expected_output: Optional expected output of the task, used for comparison in evaluators.\n        evaluators: Tuple of evaluators specific to this case. These are in addition to any\n            dataset-level evaluators.\n\n    \"\"\"\n    # Note: `evaluators` must be a tuple instead of Sequence due to misbehavior with pyright's generic parameter\n    # inference if it has type `Sequence`\n    self.name = name\n    self.inputs = inputs\n    self.metadata = metadata\n    self.expected_output = expected_output\n    self.evaluators = list(evaluators)\n\n```\n\n\n\n\n#### name `instance-attribute`\n\n```\nname: str | None = name\n\n```\n\nName of the case. This is used to identify the case in the report and can be used to filter cases.\n\n\n\n#### inputs `instance-attribute`\n\n```\ninputs: InputsT = inputs\n\n```\n\nInputs to the task. This is the input to the task that will be evaluated.\n\n\n\n#### metadata `class-attribute` `instance-attribute`\n\n```\nmetadata: MetadataT | None = metadata\n\n```\n\nMetadata to be used in the evaluation.\n\nThis can be used to provide additional information about the case to the evaluators.\n\n\n\n#### expected\\_output `class-attribute` `instance-attribute`\n\n```\nexpected_output: OutputT | None = expected_output\n\n```\n\nExpected output of the task. This is the expected output of the task that will be evaluated.\n\n\n\n#### evaluators `class-attribute` `instance-attribute`\n\n```\nevaluators: list[Evaluator[InputsT, OutputT, Metadata", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c7b339013d51cc610e38dd15ec7332e2", "__created_at__": 1744231651.420514, "content": "be used in the evaluation.\n\nThis can be used to provide additional information about the case to the evaluators.\n\n\n\n#### expected\\_output `class-attribute` `instance-attribute`\n\n```\nexpected_output: OutputT | None = expected_output\n\n```\n\nExpected output of the task. This is the expected output of the task that will be evaluated.\n\n\n\n#### evaluators `class-attribute` `instance-attribute`\n\n```\nevaluators: list[Evaluator[InputsT, OutputT, MetadataT]] = (\n    list(evaluators)\n)\n\n```\n\nEvaluators to be used just on this case.\n\n\n\n\n\n\n### Dataset\n\nBases: `BaseModel`, `Generic[InputsT, OutputT, MetadataT]`\n\nA dataset of test cases.\n\nDatasets allow you to organize a collection of test cases and evaluate them against a task function.\nThey can be loaded from and saved to YAML or JSON files, and can have dataset-level evaluators that\napply to all cases.\n\nExample:\n```\n# Create a dataset with two test cases\nfrom dataclasses import dataclass\n\nfrom pydantic_evals import Case, Dataset\nfrom pydantic_evals.evaluators import Evaluator, EvaluatorContext\n\n\n@dataclass\nclass ExactMatch(Evaluator):\n    def evaluate(self, ctx: EvaluatorContext) -> bool:\n        return ctx.output == ctx.expected_output\n\ndataset = Dataset(\n    cases=[\n        Case(name='test1', inputs={'text': 'Hello'}, expected_output='HELLO'),\n        Case(name='test2', inputs={'text': 'World'}, expected_output='WORLD'),\n    ],\n    evaluators=[ExactMatch()],\n)\n\n# Evaluate the dataset against a task function\nasync def uppercase(inputs: dict) -> str:\n    return inputs['text'].upper()\n\nasync def main():\n    report = await dataset.evaluate(uppercase)\n    report.print()\n'''\n   Evaluation Summary: uppercase\n┏━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━┓\n┃ Case ID  ┃ Assertions ┃ Duration ┃\n┡━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━┩\n│ test1    │ ✔          │     10ms │\n├──────────┼────────────┼──────────┤\n│ test2    │ ✔          │     10ms │\n├──────────┼────────────┼──────────┤\n│ Averages │ 100.0% ✔   │     10ms │\n└──────────┴────────────┴──────────┘\n'''\n\n```\n\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\nclass Dataset(BaseModel, Generic[InputsT, OutputT, MetadataT], extra='forbid', arbitrary_types_allowed=True):\n    \"\"\"A dataset of test [cases][pydantic_evals.Case].\n\n    Datasets allow you to organize a collection of test cases and evaluate them against a task function.\n    They can be loaded from and saved to YAML or JSON files, and can have dataset-level evaluators that\n    apply to all cases.\n\n    Example:\n    ```python\n    # Create a dataset with two test cases\n    from dataclasses import dataclass\n\n    from pydantic_evals import Case, Dataset\n    from pydantic_evals.evaluators import Evaluator, EvaluatorContext\n\n\n    @dataclass\n    class ExactMatch(Evaluator):\n        def evaluate(self, ctx: EvaluatorContext) -> bool:\n            return ctx.output == ctx.expected_output\n\n    dataset = Dataset(\n        cases=[\n            Case(name='test1', inputs={'text': 'Hello'}, expected_output='HELLO'),\n            Case(name='test2', inputs={'text': 'World'}, expected_output='WORLD'),\n        ],\n        evaluators=[ExactMatch()],\n    )\n\n    # Evaluate the dataset against a task function\n    async def uppercase(inputs: dict) -> str:\n        return inputs['text'].upper()\n\n    async def main():\n        report = await dataset.evaluate(uppercase)\n        report.print()\n    '''\n       Evaluation Summary: uppercase\n    ┏━━━━━━━━━━┳━━━━━━━━━━━━┳━━━━━━━━━━┓\n    ┃ Case ID  ┃ Assertions ┃ Duration ┃\n    ┡━━━━━━━━━━╇━━━━━━━━━━━━╇━━━━━━━━━━┩\n    │ test1    │ ✔          │     10ms │\n    ├──────────┼────────────┼──────────┤\n    │ test2    │ ✔          │     10ms │\n    ├──────────┼────────────┼──────────┤\n    │ Averages │ 100.0% ✔   │     10ms │\n    └──────────┴────────────┴──────────┘\n    '''\n    ```\n    \"\"\"\n\n    cases: list[Case[InputsT, OutputT, MetadataT]]\n    \"\"\"List of test cases in the dataset.\"\"\"\n    evaluators: list[Evaluator[InputsT, OutputT, MetadataT]] = []\n    \"\"\"List of evaluators to be used on all cases in the dataset.\"\"\"\n\n    def __init__(\n        self,\n        *,\n        cases: Sequence[Case[InputsT, OutputT, MetadataT]],\n        evaluators: Sequence[Evaluator[InputsT, OutputT, MetadataT]] = (),\n    ):\n        \"\"\"Initialize a new dataset with test cases and optional evaluators.\n\n        Args:\n            cases: Sequence of test cases to include in the dataset.\n            evaluators: Optional sequence of evaluators to apply to all cases in the dataset.\n        \"\"\"\n        case_names = set[str]()\n        for case in cases:\n            if case.name is None:\n                continue\n            if case.name in case_names:\n                raise ValueError(f'Duplicate case name: {case.name!r}')\n            case_names.add(case.name)\n\n        super().__", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-721115271d8562920e102e684e09862b", "__created_at__": 1744231651.420514, "content": "test cases and optional evaluators.\n\n        Args:\n            cases: Sequence of test cases to include in the dataset.\n            evaluators: Optional sequence of evaluators to apply to all cases in the dataset.\n        \"\"\"\n        case_names = set[str]()\n        for case in cases:\n            if case.name is None:\n                continue\n            if case.name in case_names:\n                raise ValueError(f'Duplicate case name: {case.name!r}')\n            case_names.add(case.name)\n\n        super().__init__(\n            cases=cases,\n            evaluators=list(evaluators),\n        )\n\n    async def evaluate(\n        self, task: Callable[[InputsT], Awaitable[OutputT]], name: str | None = None, max_concurrency: int | None = None\n    ) -> EvaluationReport:\n        \"\"\"Evaluates the test cases in the dataset using the given task.\n\n        This method runs the task on each case in the dataset, applies evaluators,\n        and collects results into a report. Cases are run concurrently, limited by `max_concurrency` if specified.\n\n        Args:\n            task: The task to evaluate. This should be a callable that takes the inputs of the case\n                and returns the output.\n            name: The name of the task being evaluated, this is used to identify the task in the report.\n                If omitted, the name of the task function will be used.\n            max_concurrency: The maximum number of concurrent evaluations of the task to allow.\n                If None, all cases will be evaluated concurrently.\n\n        Returns:\n            A report containing the results of the evaluation.\n        \"\"\"\n        name = name or get_unwrapped_function_name(task)\n\n        limiter = anyio.Semaphore(max_concurrency) if max_concurrency is not None else AsyncExitStack()\n        with _logfire.span('evaluate {name}', name=name) as eval_span:\n\n            async def _handle_case(case: Case[InputsT, OutputT, MetadataT], report_case_name: str):\n                async with limiter:\n                    return await _run_task_and_evaluators(task, case, report_case_name, self.evaluators)\n\n            report = EvaluationReport(\n                name=name,\n                cases=await task_group_gather(\n                    [\n                        lambda case=case, i=i: _handle_case(case, case.name or f'Case {i}')\n                        for i, case in enumerate(self.cases, 1)\n                    ]\n                ),\n            )\n            # TODO(DavidM): This attribute will be too big in general; remove it once we can use child spans in details panel:\n            eval_span.set_attribute('cases', report.cases)\n            # TODO(DavidM): Remove this 'averages' attribute once we compute it in the details panel\n            eval_span.set_attribute('averages', report.averages())\n\n        return report\n\n    def evaluate_sync(\n        self, task: Callable[[InputsT], Awaitable[OutputT]], name: str | None = None, max_concurrency: int | None = None\n    ) -> EvaluationReport:  # pragma: no cover\n        \"\"\"Evaluates the test cases in the dataset using the given task.\n\n        This is a synchronous wrapper around [`evaluate`][pydantic_evals.Dataset.evaluate] provided for convenience.\n\n        Args:\n            task: The task to evaluate. This should be a callable that takes the inputs of the case\n                and returns the output.\n            name: The name of the task being evaluated, this is used to identify the task in the report.\n                If omitted, the name of the task function will be used.\n            max_concurrency: The maximum number of concurrent evaluations of the task to allow.\n                If None, all cases will be evaluated concurrently.\n\n        Returns:\n            A report containing the results of the evaluation.\n        \"\"\"\n        return get_event_loop().run_until_complete(self.evaluate(task, name=name, max_concurrency=max_concurrency))\n\n    def add_case(\n        self,\n        *,\n        name: str | None = None,\n        inputs: InputsT,\n        metadata: MetadataT | None = None,\n        expected_output: OutputT | None = None,\n        evaluators: tuple[Evaluator[InputsT, OutputT, MetadataT], ...] = (),\n    ) -> None:\n        \"\"\"Adds a case to the dataset.\n\n        This is a convenience method for creating a [`Case`][pydantic_evals.Case] and adding it to the dataset.\n\n        Args:\n            name: Optional name for the case. If not provided, a generic name will be assigned.\n            inputs: The inputs to the task being evaluated.\n            metadata: Optional metadata for the case, which can be used by evaluators.\n            expected_output: The expected output of the task, used for comparison in evaluators.\n            evaluators: Tuple of evaluators specific to this case, in addition to dataset-level evaluators.\n        \"\"\"\n        if name in {case.name for case in self.cases}:\n            raise ValueError(f'Duplicate case name: {name!r}')\n\n        case = Case[InputsT, OutputT, MetadataT](\n            name=name,\n            inputs=inputs,\n            metadata=metadata,\n            expected_output=expected_output,\n            evaluators=evaluators,\n        )\n        self.cases.append(case)\n\n    def add_evaluator(\n        self,\n        evaluator: Evaluator[InputsT, OutputT, MetadataT],\n        specific_case: str | None = None,\n    ) -> None:\n        \"\"\"Adds an evaluator to the dataset or a specific case.\n\n        Args:\n            evaluator: The evaluator to add.\n            specific_case: If provided, the evaluator will only be added to the case with this name.\n                If None, the evaluator will be added to all cases in the dataset.\n\n        Raises:\n            ValueError: If `specific_case` is provided but no case with that", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-6c87e8862a83ae6d7b637969dba767a5", "__created_at__": 1744231651.420514, "content": "OutputT, MetadataT],\n        specific_case: str | None = None,\n    ) -> None:\n        \"\"\"Adds an evaluator to the dataset or a specific case.\n\n        Args:\n            evaluator: The evaluator to add.\n            specific_case: If provided, the evaluator will only be added to the case with this name.\n                If None, the evaluator will be added to all cases in the dataset.\n\n        Raises:\n            ValueError: If `specific_case` is provided but no case with that name exists in the dataset.\n        \"\"\"\n        if specific_case is None:\n            self.evaluators.append(evaluator)\n        else:\n            # If this is too slow, we could try to add a case lookup dict.\n            # Note that if we do that, we'd need to make the cases list private to prevent modification.\n            added = False\n            for case in self.cases:\n                if case.name == specific_case:\n                    case.evaluators.append(evaluator)\n                    added = True\n            if not added:\n                raise ValueError(f'Case {specific_case!r} not found in the dataset')\n\n    @classmethod\n    @functools.cache\n    def _params(cls) -> tuple[type[InputsT], type[OutputT], type[MetadataT]]:\n        \"\"\"Get the type parameters for the Dataset class.\n\n        Returns:\n            A tuple of (InputsT, OutputT, MetadataT) types.\n        \"\"\"\n        for c in cls.__mro__:\n            metadata = getattr(c, '__pydantic_generic_metadata__', {})\n            if len(args := (metadata.get('args', ()) or getattr(c, '__args__', ()))) == 3:\n                return args\n        else:  # pragma: no cover\n            warnings.warn(\n                f'Could not determine the generic parameters for {cls}; using `Any` for each.'\n                f' You should explicitly set the generic parameters via `Dataset[MyInputs, MyOutput, MyMetadata]`'\n                f' when serializing or deserializing.',\n                UserWarning,\n            )\n            return Any, Any, Any  # type: ignore\n\n    @classmethod\n    def from_file(\n        cls,\n        path: Path | str,\n        fmt: Literal['yaml', 'json'] | None = None,\n        custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n    ) -> Self:\n        \"\"\"Load a dataset from a file.\n\n        Args:\n            path: Path to the file to load.\n            fmt: Format of the file. If None, the format will be inferred from the file extension.\n                Must be either 'yaml' or 'json'.\n            custom_evaluator_types: Custom evaluator classes to use when deserializing the dataset.\n                These are additional evaluators beyond the default ones.\n\n        Returns:\n            A new Dataset instance loaded from the file.\n\n        Raises:\n            ValidationError: If the file cannot be parsed as a valid dataset.\n            ValueError: If the format cannot be inferred from the file extension.\n        \"\"\"\n        path = Path(path)\n        fmt = cls._infer_fmt(path, fmt)\n\n        raw = Path(path).read_text()\n        try:\n            return cls.from_text(raw, fmt=fmt, custom_evaluator_types=custom_evaluator_types)\n        except ValidationError as e:  # pragma: no cover\n            raise ValueError(f'{path} contains data that does not match the schema for {cls.__name__}:\\n{e}.') from e\n\n    @classmethod\n    def from_text(\n        cls,\n        contents: str,\n        fmt: Literal['yaml', 'json'] = 'yaml',\n        custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n    ) -> Self:\n        \"\"\"Load a dataset from a string.\n\n        Args:\n            contents: The string content to parse.\n            fmt: Format of the content. Must be either 'yaml' or 'json'.\n            custom_evaluator_types: Custom evaluator classes to use when deserializing the dataset.\n                These are additional evaluators beyond the default ones.\n\n        Returns:\n            A new Dataset instance parsed from the string.\n\n        Raises:\n            ValidationError: If the content cannot be parsed as a valid dataset.\n        \"\"\"\n        if fmt == 'yaml':\n            loaded = yaml.safe_load(contents)\n            return cls.from_dict(loaded, custom_evaluator_types)\n        else:\n            dataset_model_type = cls._serialization_type()\n            dataset_model = dataset_model_type.model_validate_json(contents)\n            return cls._from_dataset_model(dataset_model, custom_evaluator_types)\n\n    @classmethod\n    def from_dict(\n        cls,\n        data: dict[str, Any],\n        custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n    ) -> Self:\n        \"\"\"Load a dataset from a dictionary.\n\n        Args:\n            data: Dictionary representation of the dataset.\n            custom_evaluator_types: Custom evaluator classes to use when deserializing the dataset.\n                These are additional evaluators beyond the default ones.\n\n        Returns:\n            A new Dataset instance created from the dictionary.\n\n        Raises:\n            ValidationError: If the dictionary cannot be converted to a valid dataset.\n        \"\"\"\n        dataset_model_type = cls._serialization_type()\n        dataset_model = dataset_model_type.model_validate(data)\n        return cls._from_dataset_model(dataset_model, custom_evaluator_types)\n\n    @classmethod\n    def _from_dataset_model(\n        cls,\n        dataset_model: _DatasetModel[InputsT, OutputT, MetadataT],\n        custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n    ) -> Self:\n        \"\"\"Create a Dataset from a _DatasetModel.\n\n        Args:\n            dataset_model: The _DatasetModel to convert.", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-1a1db7f3f2cdd3688c79c7bd79b8514e", "__created_at__": 1744231651.420514, "content": ")\n        return cls._from_dataset_model(dataset_model, custom_evaluator_types)\n\n    @classmethod\n    def _from_dataset_model(\n        cls,\n        dataset_model: _DatasetModel[InputsT, OutputT, MetadataT],\n        custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n    ) -> Self:\n        \"\"\"Create a Dataset from a _DatasetModel.\n\n        Args:\n            dataset_model: The _DatasetModel to convert.\n            custom_evaluator_types: Custom evaluator classes to register for deserialization.\n\n        Returns:\n            A new Dataset instance created from the _DatasetModel.\n        \"\"\"\n        registry = _get_registry(custom_evaluator_types)\n\n        cases: list[Case[InputsT, OutputT, MetadataT]] = []\n        errors: list[ValueError] = []\n        dataset_evaluators: list[Evaluator] = []\n        for spec in dataset_model.evaluators:\n            try:\n                dataset_evaluator = _load_evaluator_from_registry(registry, None, spec)\n            except ValueError as e:\n                errors.append(e)\n                continue\n            dataset_evaluators.append(dataset_evaluator)\n\n        for row in dataset_model.cases:\n            evaluators: list[Evaluator] = []\n            for spec in row.evaluators:\n                try:\n                    evaluator = _load_evaluator_from_registry(registry, row.name, spec)\n                except ValueError as e:\n                    errors.append(e)\n                    continue\n                evaluators.append(evaluator)\n            row = Case[InputsT, OutputT, MetadataT](\n                name=row.name,\n                inputs=row.inputs,\n                metadata=row.metadata,\n                expected_output=row.expected_output,\n            )\n            row.evaluators = evaluators\n            cases.append(row)\n        if errors:\n            raise ExceptionGroup(f'{len(errors)} error(s) loading evaluators from registry', errors[:3])\n        result = cls(cases=cases)\n        result.evaluators = dataset_evaluators\n        return result\n\n    def to_file(\n        self,\n        path: Path | str,\n        fmt: Literal['yaml', 'json'] | None = None,\n        schema_path: Path | str | None = DEFAULT_SCHEMA_PATH_TEMPLATE,\n        custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n    ):\n        \"\"\"Save the dataset to a file.\n\n        Args:\n            path: Path to save the dataset to.\n            fmt: Format to use. If None, the format will be inferred from the file extension.\n                Must be either 'yaml' or 'json'.\n            schema_path: Path to save the JSON schema to. If None, no schema will be saved.\n                Can be a string template with {stem} which will be replaced with the dataset filename stem.\n            custom_evaluator_types: Custom evaluator classes to include in the schema.\n        \"\"\"\n        path = Path(path)\n        fmt = self._infer_fmt(path, fmt)\n\n        schema_ref: str | None = None\n        if schema_path is not None:\n            if isinstance(schema_path, str):\n                schema_path = Path(schema_path.format(stem=path.stem))\n\n            if not schema_path.is_absolute():\n                schema_ref = str(schema_path)\n                schema_path = path.parent / schema_path\n            elif schema_path.is_relative_to(path):  # pragma: no cover\n                schema_ref = str(_get_relative_path_reference(schema_path, path))\n            else:  # pragma: no cover\n                schema_ref = str(schema_path)\n            self._save_schema(schema_path, custom_evaluator_types)\n\n        context: dict[str, Any] = {'use_short_form': True}\n        if fmt == 'yaml':\n            dumped_data = self.model_dump(mode='json', by_alias=True, exclude_defaults=True, context=context)\n            content = yaml.dump(dumped_data, sort_keys=False)\n            if schema_ref:\n                yaml_language_server_line = f'{_YAML_SCHEMA_LINE_PREFIX}{schema_ref}'\n                content = f'{yaml_language_server_line}\\n{content}'\n            path.write_text(content)\n        else:\n            context['$schema'] = schema_ref\n            json_data = self.model_dump_json(indent=2, by_alias=True, exclude_defaults=True, context=context)\n            path.write_text(json_data + '\\n')\n\n    @classmethod\n    def model_json_schema_with_evaluators(\n        cls,\n        custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n    ) -> dict[str, Any]:\n        \"\"\"Generate a JSON schema for this dataset type, including evaluator details.\n\n        This is useful for generating a schema that can be used to validate YAML-format dataset files.\n\n        Args:\n            custom_evaluator_types: Custom evaluator classes to include in the schema.\n\n        Returns:\n            A dictionary representing the JSON schema.\n        \"\"\"\n        # Note: this function could maybe be simplified now that Evaluators are always dataclasses\n        registry = _get_registry(custom_evaluator_types)\n\n        evaluator_schema_types: list[Any] = []\n        for name, evaluator_class in registry.items():\n            type_hints = _typing_extra.get_function_type_hints(evaluator_class)\n            type_hints.pop('return', None)\n            required_type_hints: dict[str, Any] = {}\n\n            for p in inspect.signature(evaluator_class).parameters.values():\n                type_hints.setdefault(p.name, Any)\n                if p.default is not p.empty:\n                    type_hints[p.name] = NotRequired[type_hints[p.name]]\n                else:\n                    required_type_hints[p.name] = type_hints[p.name]\n\n            def _make_typed_dict(cls_name_prefix: str, fields: dict[str, Any]) -> Any:\n                td = TypedDict(f'{cls_name_prefix}_{name}', fields)  # pyright: ignore[reportArgumentType", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-e8b0da52016600c1ab9198b94278d4ae", "__created_at__": 1744231651.420514, "content": "type_hints.setdefault(p.name, Any)\n                if p.default is not p.empty:\n                    type_hints[p.name] = NotRequired[type_hints[p.name]]\n                else:\n                    required_type_hints[p.name] = type_hints[p.name]\n\n            def _make_typed_dict(cls_name_prefix: str, fields: dict[str, Any]) -> Any:\n                td = TypedDict(f'{cls_name_prefix}_{name}', fields)  # pyright: ignore[reportArgumentType]\n                config = ConfigDict(extra='forbid', arbitrary_types_allowed=True)\n                # TODO: Replace with pydantic.with_config after pydantic 2.11 is released\n                td.__pydantic_config__ = config  # pyright: ignore[reportAttributeAccessIssue]\n                return td\n\n            # Shortest form: just the call name\n            if len(type_hints) == 0 or not required_type_hints:\n                evaluator_schema_types.append(Literal[name])\n\n            # Short form: can be called with only one parameter\n            if len(type_hints) == 1:\n                [type_hint_type] = type_hints.values()\n                evaluator_schema_types.append(_make_typed_dict('short_evaluator', {name: type_hint_type}))\n            elif len(required_type_hints) == 1:\n                [type_hint_type] = required_type_hints.values()\n                evaluator_schema_types.append(_make_typed_dict('short_evaluator', {name: type_hint_type}))\n\n            # Long form: multiple parameters, possibly required\n            if len(type_hints) > 1:\n                params_td = _make_typed_dict('evaluator_params', type_hints)\n                evaluator_schema_types.append(_make_typed_dict('evaluator', {name: params_td}))\n\n        in_type, out_type, meta_type = cls._params()\n\n        # Note: we shadow the `Case` and `Dataset` class names here to generate a clean JSON schema\n        class Case(BaseModel, extra='forbid'):  # pyright: ignore[reportUnusedClass]  # this _is_ used below, but pyright doesn't seem to notice..\n            name: str | None = None\n            inputs: in_type  # pyright: ignore[reportInvalidTypeForm]\n            metadata: meta_type | None = None  # pyright: ignore[reportInvalidTypeForm,reportUnknownVariableType]\n            expected_output: out_type | None = None  # pyright: ignore[reportInvalidTypeForm,reportUnknownVariableType]\n            if evaluator_schema_types:\n                evaluators: list[Union[tuple(evaluator_schema_types)]] = []  # pyright: ignore  # noqa UP007\n\n        class Dataset(BaseModel, extra='forbid'):\n            cases: list[Case]\n            if evaluator_schema_types:\n                evaluators: list[Union[tuple(evaluator_schema_types)]] = []  # pyright: ignore  # noqa UP007\n\n        json_schema = Dataset.model_json_schema()\n        # See `_add_json_schema` below, since `$schema` is added to the JSON, it has to be supported in the JSON\n        json_schema['properties']['$schema'] = {'type': 'string'}\n        return json_schema\n\n    @classmethod\n    def _save_schema(\n        cls, path: Path | str, custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = ()\n    ):\n        \"\"\"Save the JSON schema for this dataset type to a file.\n\n        Args:\n            path: Path to save the schema to.\n            custom_evaluator_types: Custom evaluator classes to include in the schema.\n        \"\"\"\n        path = Path(path)\n        json_schema = cls.model_json_schema_with_evaluators(custom_evaluator_types)\n        schema_content = to_json(json_schema, indent=2).decode() + '\\n'\n        if not path.exists() or path.read_text() != schema_content:\n            path.write_text(schema_content)\n\n    @classmethod\n    @functools.cache\n    def _serialization_type(cls) -> type[_DatasetModel[InputsT, OutputT, MetadataT]]:\n        \"\"\"Get the serialization type for this dataset class.\n\n        Returns:\n            A _DatasetModel type with the same generic parameters as this Dataset class.\n        \"\"\"\n        input_type, output_type, metadata_type = cls._params()\n        return _DatasetModel[input_type, output_type, metadata_type]\n\n    @classmethod\n    def _infer_fmt(cls, path: Path, fmt: Literal['yaml', 'json'] | None) -> Literal['yaml', 'json']:\n        \"\"\"Infer the format to use for a file based on its extension.\n\n        Args:\n            path: The path to infer the format for.\n            fmt: The explicitly provided format, if any.\n\n        Returns:\n            The inferred format ('yaml' or 'json').\n\n        Raises:\n            ValueError: If the format cannot be inferred from the file extension.\n        \"\"\"\n        if fmt is not None:\n            return fmt\n        suffix = path.suffix.lower()\n        if suffix in {'.yaml', '.yml'}:\n            return 'yaml'\n        elif suffix == '.json':\n            return 'json'\n        raise ValueError(\n            f'Could not infer format for filename {path.name!r}. Use the `fmt` argument to specify the format.'\n        )\n\n    @model_serializer(mode='wrap')\n    def _add_json_schema(self, nxt: SerializerFunctionWrapHandler, info: SerializationInfo) -> dict[str, Any]:\n        \"\"\"Add the JSON schema path to the serialized output.\n\n        See  for context, that seems to be the nearest\n        there is to a spec for this.\n        \"\"\"\n        context = cast(Union[dict[str, Any], None], info.context)\n        if isinstance(context, dict)", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ce77d28e25c8e076c1a08f2eb9cfc746", "__created_at__": 1744231651.420514, "content": "specify the format.'\n        )\n\n    @model_serializer(mode='wrap')\n    def _add_json_schema(self, nxt: SerializerFunctionWrapHandler, info: SerializationInfo) -> dict[str, Any]:\n        \"\"\"Add the JSON schema path to the serialized output.\n\n        See  for context, that seems to be the nearest\n        there is to a spec for this.\n        \"\"\"\n        context = cast(Union[dict[str, Any], None], info.context)\n        if isinstance(context, dict) and (schema := context.get('$schema')):\n            return {'$schema': schema} | nxt(self)\n        else:\n            return nxt(self)\n\n```\n\n\n#### cases `instance-attribute`\n\n```\ncases: list[Case[InputsT, OutputT, MetadataT]]\n\n```\n\nList of test cases in the dataset.\n\n\n\n#### evaluators `class-attribute` `instance-attribute`\n\n```\nevaluators: list[Evaluator[InputsT, OutputT, MetadataT]] = (\n    []\n)\n\n```\n\nList of evaluators to be used on all cases in the dataset.\n\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    cases: Sequence[Case[InputsT, OutputT, MetadataT]],\n    evaluators: Sequence[\n        Evaluator[InputsT, OutputT, MetadataT]\n    ] = ()\n)\n\n```\n\nInitialize a new dataset with test cases and optional evaluators.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `cases` | `Sequence[Case[InputsT, OutputT, MetadataT]]` | Sequence of test cases to include in the dataset. | *required* |\n| `evaluators` | `Sequence[Evaluator[InputsT, OutputT, MetadataT]]` | Optional sequence of evaluators to apply to all cases in the dataset. | `()` |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\ndef __init__(\n    self,\n    *,\n    cases: Sequence[Case[InputsT, OutputT, MetadataT]],\n    evaluators: Sequence[Evaluator[InputsT, OutputT, MetadataT]] = (),\n):\n    \"\"\"Initialize a new dataset with test cases and optional evaluators.\n\n    Args:\n        cases: Sequence of test cases to include in the dataset.\n        evaluators: Optional sequence of evaluators to apply to all cases in the dataset.\n    \"\"\"\n    case_names = set[str]()\n    for case in cases:\n        if case.name is None:\n            continue\n        if case.name in case_names:\n            raise ValueError(f'Duplicate case name: {case.name!r}')\n        case_names.add(case.name)\n\n    super().__init__(\n        cases=cases,\n        evaluators=list(evaluators),\n    )\n\n```\n\n\n\n\n#### evaluate `async`\n\n```\nevaluate(\n    task: Callable[[InputsT], Awaitable[OutputT]],\n    name: str | None = None,\n    max_concurrency: int | None = None,\n) -> EvaluationReport\n\n```\n\nEvaluates the test cases in the dataset using the given task.\n\nThis method runs the task on each case in the dataset, applies evaluators,\nand collects results into a report. Cases are run concurrently, limited by `max_concurrency` if specified.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `task` | `Callable[[InputsT], Awaitable[OutputT]]` | The task to evaluate. This should be a callable that takes the inputs of the case and returns the output. | *required* |\n| `name` | `str | None` | The name of the task being evaluated, this is used to identify the task in the report. If omitted, the name of the task function will be used. | `None` |\n| `max_concurrency` | `int | None` | The maximum number of concurrent evaluations of the task to allow. If None, all cases will be evaluated concurrently. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `EvaluationReport` | A report containing the results of the evaluation. |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\nasync def evaluate(\n    self, task: Callable[[InputsT], Awaitable[OutputT]], name: str | None = None, max_concurrency: int | None = None\n) -> EvaluationReport:\n    \"\"\"Evaluates the test cases in the dataset using the given task.\n\n    This method runs the task on each case in the dataset, applies evaluators,\n    and collects results into a report. Cases are run concurrently, limited by `max_concurrency` if specified.\n\n    Args:\n        task: The task to evaluate. This should be a callable that takes the inputs of the case\n            and returns the output.\n        name: The name of the task being evaluated, this is used to identify the task in the report.\n            If omitted, the name of the task function will be used.\n        max_concurrency: The maximum number of concurrent evaluations of the task to allow.\n            If None, all cases will be evaluated concurrently.\n\n    Returns:\n        A report containing the results of the evaluation.\n    \"\"\"\n    name = name or get_unwrapped_function_name(task)\n\n    limiter = anyio.Semaphore(max_concurrency) if max_concurrency is not None else AsyncExitStack()\n    with _logfire.span('evaluate {name}', name=name) as eval_span:\n\n        async def _handle_case(case: Case[InputsT, OutputT, MetadataT], report_case_name: str):\n            async with limiter:\n                return await _run_task_and_evaluators(task, case, report_case_name, self.evaluators)\n\n        report = EvaluationReport(\n            name=name,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-b88722767613f27ba54bd4b6245204cd", "__created_at__": 1744231651.420514, "content": ".Semaphore(max_concurrency) if max_concurrency is not None else AsyncExitStack()\n    with _logfire.span('evaluate {name}', name=name) as eval_span:\n\n        async def _handle_case(case: Case[InputsT, OutputT, MetadataT], report_case_name: str):\n            async with limiter:\n                return await _run_task_and_evaluators(task, case, report_case_name, self.evaluators)\n\n        report = EvaluationReport(\n            name=name,\n            cases=await task_group_gather(\n                [\n                    lambda case=case, i=i: _handle_case(case, case.name or f'Case {i}')\n                    for i, case in enumerate(self.cases, 1)\n                ]\n            ),\n        )\n        # TODO(DavidM): This attribute will be too big in general; remove it once we can use child spans in details panel:\n        eval_span.set_attribute('cases', report.cases)\n        # TODO(DavidM): Remove this 'averages' attribute once we compute it in the details panel\n        eval_span.set_attribute('averages', report.averages())\n\n    return report\n\n```\n\n\n\n\n#### evaluate\\_sync\n\n```\nevaluate_sync(\n    task: Callable[[InputsT], Awaitable[OutputT]],\n    name: str | None = None,\n    max_concurrency: int | None = None,\n) -> EvaluationReport\n\n```\n\nEvaluates the test cases in the dataset using the given task.\n\nThis is a synchronous wrapper around `evaluate` provided for convenience.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `task` | `Callable[[InputsT], Awaitable[OutputT]]` | The task to evaluate. This should be a callable that takes the inputs of the case and returns the output. | *required* |\n| `name` | `str | None` | The name of the task being evaluated, this is used to identify the task in the report. If omitted, the name of the task function will be used. | `None` |\n| `max_concurrency` | `int | None` | The maximum number of concurrent evaluations of the task to allow. If None, all cases will be evaluated concurrently. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `EvaluationReport` | A report containing the results of the evaluation. |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\ndef evaluate_sync(\n    self, task: Callable[[InputsT], Awaitable[OutputT]], name: str | None = None, max_concurrency: int | None = None\n) -> EvaluationReport:  # pragma: no cover\n    \"\"\"Evaluates the test cases in the dataset using the given task.\n\n    This is a synchronous wrapper around [`evaluate`][pydantic_evals.Dataset.evaluate] provided for convenience.\n\n    Args:\n        task: The task to evaluate. This should be a callable that takes the inputs of the case\n            and returns the output.\n        name: The name of the task being evaluated, this is used to identify the task in the report.\n            If omitted, the name of the task function will be used.\n        max_concurrency: The maximum number of concurrent evaluations of the task to allow.\n            If None, all cases will be evaluated concurrently.\n\n    Returns:\n        A report containing the results of the evaluation.\n    \"\"\"\n    return get_event_loop().run_until_complete(self.evaluate(task, name=name, max_concurrency=max_concurrency))\n\n```\n\n\n\n\n#### add\\_case\n\n```\nadd_case(\n    *,\n    name: str | None = None,\n    inputs: InputsT,\n    metadata: MetadataT | None = None,\n    expected_output: OutputT | None = None,\n    evaluators: tuple[\n        Evaluator[InputsT, OutputT, MetadataT], ...\n    ] = ()\n) -> None\n\n```\n\nAdds a case to the dataset.\n\nThis is a convenience method for creating a `Case` and adding it to the dataset.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `name` | `str | None` | Optional name for the case. If not provided, a generic name will be assigned. | `None` |\n| `inputs` | `InputsT` | The inputs to the task being evaluated. | *required* |\n| `metadata` | `MetadataT | None` | Optional metadata for the case, which can be used by evaluators. | `None` |\n| `expected_output` | `OutputT | None` | The expected output of the task, used for comparison in evaluators. | `None` |\n| `evaluators` | `tuple[Evaluator[InputsT, OutputT, MetadataT], ...]` | Tuple of evaluators specific to this case, in addition to dataset-level evaluators. | `()` |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\ndef add_case(\n    self,\n    *,\n    name: str | None = None,\n    inputs: InputsT,\n    metadata: MetadataT | None = None,\n    expected_output: OutputT | None = None,\n    evaluators: tuple[Evaluator[InputsT, OutputT, MetadataT], ...] = (),\n) -> None:\n    \"\"\"Adds a case to the dataset.\n\n    This is a convenience method for creating a [`Case`][pydantic_evals.Case] and adding it to the dataset.\n\n    Args:\n        name: Optional name for the case. If not provided, a generic name will be assigned.\n        inputs: The inputs to the task being evaluated.\n        metadata: Optional metadata for the case, which can be used", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-2b642c0eb3f8e30082fb1c02c90b38ee", "__created_at__": 1744231651.420514, "content": "T, OutputT, MetadataT], ...] = (),\n) -> None:\n    \"\"\"Adds a case to the dataset.\n\n    This is a convenience method for creating a [`Case`][pydantic_evals.Case] and adding it to the dataset.\n\n    Args:\n        name: Optional name for the case. If not provided, a generic name will be assigned.\n        inputs: The inputs to the task being evaluated.\n        metadata: Optional metadata for the case, which can be used by evaluators.\n        expected_output: The expected output of the task, used for comparison in evaluators.\n        evaluators: Tuple of evaluators specific to this case, in addition to dataset-level evaluators.\n    \"\"\"\n    if name in {case.name for case in self.cases}:\n        raise ValueError(f'Duplicate case name: {name!r}')\n\n    case = Case[InputsT, OutputT, MetadataT](\n        name=name,\n        inputs=inputs,\n        metadata=metadata,\n        expected_output=expected_output,\n        evaluators=evaluators,\n    )\n    self.cases.append(case)\n\n```\n\n\n\n\n#### add\\_evaluator\n\n```\nadd_evaluator(\n    evaluator: Evaluator[InputsT, OutputT, MetadataT],\n    specific_case: str | None = None,\n) -> None\n\n```\n\nAdds an evaluator to the dataset or a specific case.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `evaluator` | `Evaluator[InputsT, OutputT, MetadataT]` | The evaluator to add. | *required* |\n| `specific_case` | `str | None` | If provided, the evaluator will only be added to the case with this name. If None, the evaluator will be added to all cases in the dataset. | `None` |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValueError` | If `specific_case` is provided but no case with that name exists in the dataset. |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\ndef add_evaluator(\n    self,\n    evaluator: Evaluator[InputsT, OutputT, MetadataT],\n    specific_case: str | None = None,\n) -> None:\n    \"\"\"Adds an evaluator to the dataset or a specific case.\n\n    Args:\n        evaluator: The evaluator to add.\n        specific_case: If provided, the evaluator will only be added to the case with this name.\n            If None, the evaluator will be added to all cases in the dataset.\n\n    Raises:\n        ValueError: If `specific_case` is provided but no case with that name exists in the dataset.\n    \"\"\"\n    if specific_case is None:\n        self.evaluators.append(evaluator)\n    else:\n        # If this is too slow, we could try to add a case lookup dict.\n        # Note that if we do that, we'd need to make the cases list private to prevent modification.\n        added = False\n        for case in self.cases:\n            if case.name == specific_case:\n                case.evaluators.append(evaluator)\n                added = True\n        if not added:\n            raise ValueError(f'Case {specific_case!r} not found in the dataset')\n\n```\n\n\n\n\n#### from\\_file `classmethod`\n\n```\nfrom_file(\n    path: Path | str,\n    fmt: Literal[\"yaml\", \"json\"] | None = None,\n    custom_evaluator_types: Sequence[\n        type[Evaluator[InputsT, OutputT, MetadataT]]\n    ] = (),\n) -> Self\n\n```\n\nLoad a dataset from a file.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `path` | `Path | str` | Path to the file to load. | *required* |\n| `fmt` | `Literal['yaml', 'json'] | None` | Format of the file. If None, the format will be inferred from the file extension. Must be either 'yaml' or 'json'. | `None` |\n| `custom_evaluator_types` | `Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]]` | Custom evaluator classes to use when deserializing the dataset. These are additional evaluators beyond the default ones. | `()` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `Self` | A new Dataset instance loaded from the file. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValidationError` | If the file cannot be parsed as a valid dataset. |\n| `ValueError` | If the format cannot be inferred from the file extension. |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\n@classmethod\ndef from_file(\n    cls,\n    path: Path | str,\n    fmt: Literal['yaml', 'json'] | None = None,\n    custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n) -> Self:\n    \"\"\"Load a dataset from a file.\n\n    Args:\n        path: Path to the file to load.\n        fmt: Format of the file. If None, the format will be inferred from the file extension.\n            Must be either 'yaml' or 'json'.\n        custom_evaluator_types: Custom evaluator classes to use when deserializing the dataset.\n            These are additional evaluators beyond the default ones.\n\n    Returns:\n        A new Dataset instance loaded from the file.\n\n    Raises:\n        ValidationError: If the file cannot be parsed as a valid dataset.\n        ValueError: If the format cannot be inferred from the file extension.\n    \"\"\"\n    path = Path(path)\n    fmt = cls._infer_fmt(path, fmt", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a58389fcd1596d9d04e1ed8f3cd54773", "__created_at__": 1744231651.420514, "content": "'yaml' or 'json'.\n        custom_evaluator_types: Custom evaluator classes to use when deserializing the dataset.\n            These are additional evaluators beyond the default ones.\n\n    Returns:\n        A new Dataset instance loaded from the file.\n\n    Raises:\n        ValidationError: If the file cannot be parsed as a valid dataset.\n        ValueError: If the format cannot be inferred from the file extension.\n    \"\"\"\n    path = Path(path)\n    fmt = cls._infer_fmt(path, fmt)\n\n    raw = Path(path).read_text()\n    try:\n        return cls.from_text(raw, fmt=fmt, custom_evaluator_types=custom_evaluator_types)\n    except ValidationError as e:  # pragma: no cover\n        raise ValueError(f'{path} contains data that does not match the schema for {cls.__name__}:\\n{e}.') from e\n\n```\n\n\n\n\n#### from\\_text `classmethod`\n\n```\nfrom_text(\n    contents: str,\n    fmt: Literal[\"yaml\", \"json\"] = \"yaml\",\n    custom_evaluator_types: Sequence[\n        type[Evaluator[InputsT, OutputT, MetadataT]]\n    ] = (),\n) -> Self\n\n```\n\nLoad a dataset from a string.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `contents` | `str` | The string content to parse. | *required* |\n| `fmt` | `Literal['yaml', 'json']` | Format of the content. Must be either 'yaml' or 'json'. | `'yaml'` |\n| `custom_evaluator_types` | `Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]]` | Custom evaluator classes to use when deserializing the dataset. These are additional evaluators beyond the default ones. | `()` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `Self` | A new Dataset instance parsed from the string. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValidationError` | If the content cannot be parsed as a valid dataset. |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\n@classmethod\ndef from_text(\n    cls,\n    contents: str,\n    fmt: Literal['yaml', 'json'] = 'yaml',\n    custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n) -> Self:\n    \"\"\"Load a dataset from a string.\n\n    Args:\n        contents: The string content to parse.\n        fmt: Format of the content. Must be either 'yaml' or 'json'.\n        custom_evaluator_types: Custom evaluator classes to use when deserializing the dataset.\n            These are additional evaluators beyond the default ones.\n\n    Returns:\n        A new Dataset instance parsed from the string.\n\n    Raises:\n        ValidationError: If the content cannot be parsed as a valid dataset.\n    \"\"\"\n    if fmt == 'yaml':\n        loaded = yaml.safe_load(contents)\n        return cls.from_dict(loaded, custom_evaluator_types)\n    else:\n        dataset_model_type = cls._serialization_type()\n        dataset_model = dataset_model_type.model_validate_json(contents)\n        return cls._from_dataset_model(dataset_model, custom_evaluator_types)\n\n```\n\n\n\n\n#### from\\_dict `classmethod`\n\n```\nfrom_dict(\n    data: dict[str, Any],\n    custom_evaluator_types: Sequence[\n        type[Evaluator[InputsT, OutputT, MetadataT]]\n    ] = (),\n) -> Self\n\n```\n\nLoad a dataset from a dictionary.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `data` | `dict[str, Any]` | Dictionary representation of the dataset. | *required* |\n| `custom_evaluator_types` | `Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]]` | Custom evaluator classes to use when deserializing the dataset. These are additional evaluators beyond the default ones. | `()` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `Self` | A new Dataset instance created from the dictionary. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValidationError` | If the dictionary cannot be converted to a valid dataset. |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\n@classmethod\ndef from_dict(\n    cls,\n    data: dict[str, Any],\n    custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n) -> Self:\n    \"\"\"Load a dataset from a dictionary.\n\n    Args:\n        data: Dictionary representation of the dataset.\n        custom_evaluator_types: Custom evaluator classes to use when deserializing the dataset.\n            These are additional evaluators beyond the default ones.\n\n    Returns:\n        A new Dataset instance created from the dictionary.\n\n    Raises:\n        ValidationError: If the dictionary cannot be converted to a valid dataset.\n    \"\"\"\n    dataset_model_type = cls._serialization_type()\n    dataset_model = dataset_model_type.model_validate(data)\n    return cls._from_dataset_model(dataset_model, custom_evaluator_types)\n\n```\n\n\n\n\n#### to\\_file\n\n```\nto_file(\n    path: Path | str,\n    fmt: Literal[\"yaml\", \"json\"] | None = None,\n    schema_path: (\n        Path | str | None\n    ) = DEFAULT_SCHEMA_PATH_TEMPLATE,\n    custom_evaluator_types: Sequence[\n        type[Evaluator[InputsT, OutputT, MetadataT]]\n    ] = (),\n)\n\n```\n\nSave the dataset to a file.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `path` | `Path | str` |", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-68c71ff18ccbf9e8039bfdaa893a9aeb", "__created_at__": 1744231651.420514, "content": ": Literal[\"yaml\", \"json\"] | None = None,\n    schema_path: (\n        Path | str | None\n    ) = DEFAULT_SCHEMA_PATH_TEMPLATE,\n    custom_evaluator_types: Sequence[\n        type[Evaluator[InputsT, OutputT, MetadataT]]\n    ] = (),\n)\n\n```\n\nSave the dataset to a file.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `path` | `Path | str` | Path to save the dataset to. | *required* |\n| `fmt` | `Literal['yaml', 'json'] | None` | Format to use. If None, the format will be inferred from the file extension. Must be either 'yaml' or 'json'. | `None` |\n| `schema_path` | `Path | str | None` | Path to save the JSON schema to. If None, no schema will be saved. Can be a string template with {stem} which will be replaced with the dataset filename stem. | `DEFAULT_SCHEMA_PATH_TEMPLATE` |\n| `custom_evaluator_types` | `Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]]` | Custom evaluator classes to include in the schema. | `()` |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\ndef to_file(\n    self,\n    path: Path | str,\n    fmt: Literal['yaml', 'json'] | None = None,\n    schema_path: Path | str | None = DEFAULT_SCHEMA_PATH_TEMPLATE,\n    custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n):\n    \"\"\"Save the dataset to a file.\n\n    Args:\n        path: Path to save the dataset to.\n        fmt: Format to use. If None, the format will be inferred from the file extension.\n            Must be either 'yaml' or 'json'.\n        schema_path: Path to save the JSON schema to. If None, no schema will be saved.\n            Can be a string template with {stem} which will be replaced with the dataset filename stem.\n        custom_evaluator_types: Custom evaluator classes to include in the schema.\n    \"\"\"\n    path = Path(path)\n    fmt = self._infer_fmt(path, fmt)\n\n    schema_ref: str | None = None\n    if schema_path is not None:\n        if isinstance(schema_path, str):\n            schema_path = Path(schema_path.format(stem=path.stem))\n\n        if not schema_path.is_absolute():\n            schema_ref = str(schema_path)\n            schema_path = path.parent / schema_path\n        elif schema_path.is_relative_to(path):  # pragma: no cover\n            schema_ref = str(_get_relative_path_reference(schema_path, path))\n        else:  # pragma: no cover\n            schema_ref = str(schema_path)\n        self._save_schema(schema_path, custom_evaluator_types)\n\n    context: dict[str, Any] = {'use_short_form': True}\n    if fmt == 'yaml':\n        dumped_data = self.model_dump(mode='json', by_alias=True, exclude_defaults=True, context=context)\n        content = yaml.dump(dumped_data, sort_keys=False)\n        if schema_ref:\n            yaml_language_server_line = f'{_YAML_SCHEMA_LINE_PREFIX}{schema_ref}'\n            content = f'{yaml_language_server_line}\\n{content}'\n        path.write_text(content)\n    else:\n        context['$schema'] = schema_ref\n        json_data = self.model_dump_json(indent=2, by_alias=True, exclude_defaults=True, context=context)\n        path.write_text(json_data + '\\n')\n\n```\n\n\n\n\n#### model\\_json\\_schema\\_with\\_evaluators `classmethod`\n\n```\nmodel_json_schema_with_evaluators(\n    custom_evaluator_types: Sequence[\n        type[Evaluator[InputsT, OutputT, MetadataT]]\n    ] = (),\n) -> dict[str, Any]\n\n```\n\nGenerate a JSON schema for this dataset type, including evaluator details.\n\nThis is useful for generating a schema that can be used to validate YAML-format dataset files.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `custom_evaluator_types` | `Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]]` | Custom evaluator classes to include in the schema. | `()` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `dict[str, Any]` | A dictionary representing the JSON schema. |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\n@classmethod\ndef model_json_schema_with_evaluators(\n    cls,\n    custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n) -> dict[str, Any]:\n    \"\"\"Generate a JSON schema for this dataset type, including evaluator details.\n\n    This is useful for generating a schema that can be used to validate YAML-format dataset files.\n\n    Args:\n        custom_evaluator_types: Custom evaluator classes to include in the schema.\n\n    Returns:\n        A dictionary representing the JSON schema.\n    \"\"\"\n    # Note: this function could maybe be simplified now that Evaluators are always dataclasses\n    registry = _get_registry(custom_evaluator_types)\n\n    evaluator_schema_types: list[Any] = []\n    for name, evaluator_class in registry.items():\n        type_hints = _typing_extra.get_function_type_hints(evaluator_class)\n        type_hints.pop('return', None)\n        required_type_hints: dict[str, Any] = {}\n\n        for p in inspect.signature(evaluator_class).parameters.values():\n            type_hints.setdefault(p.name, Any)\n            if p.default is not p.empty:\n                type_hints[p.name] = NotRequired[type_hints[p.name]]\n            else", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c0417af0fa24429ddd11fe9cfa92e39e", "__created_at__": 1744231651.420514, "content": "for name, evaluator_class in registry.items():\n        type_hints = _typing_extra.get_function_type_hints(evaluator_class)\n        type_hints.pop('return', None)\n        required_type_hints: dict[str, Any] = {}\n\n        for p in inspect.signature(evaluator_class).parameters.values():\n            type_hints.setdefault(p.name, Any)\n            if p.default is not p.empty:\n                type_hints[p.name] = NotRequired[type_hints[p.name]]\n            else:\n                required_type_hints[p.name] = type_hints[p.name]\n\n        def _make_typed_dict(cls_name_prefix: str, fields: dict[str, Any]) -> Any:\n            td = TypedDict(f'{cls_name_prefix}_{name}', fields)  # pyright: ignore[reportArgumentType]\n            config = ConfigDict(extra='forbid', arbitrary_types_allowed=True)\n            # TODO: Replace with pydantic.with_config after pydantic 2.11 is released\n            td.__pydantic_config__ = config  # pyright: ignore[reportAttributeAccessIssue]\n            return td\n\n        # Shortest form: just the call name\n        if len(type_hints) == 0 or not required_type_hints:\n            evaluator_schema_types.append(Literal[name])\n\n        # Short form: can be called with only one parameter\n        if len(type_hints) == 1:\n            [type_hint_type] = type_hints.values()\n            evaluator_schema_types.append(_make_typed_dict('short_evaluator', {name: type_hint_type}))\n        elif len(required_type_hints) == 1:\n            [type_hint_type] = required_type_hints.values()\n            evaluator_schema_types.append(_make_typed_dict('short_evaluator', {name: type_hint_type}))\n\n        # Long form: multiple parameters, possibly required\n        if len(type_hints) > 1:\n            params_td = _make_typed_dict('evaluator_params', type_hints)\n            evaluator_schema_types.append(_make_typed_dict('evaluator', {name: params_td}))\n\n    in_type, out_type, meta_type = cls._params()\n\n    # Note: we shadow the `Case` and `Dataset` class names here to generate a clean JSON schema\n    class Case(BaseModel, extra='forbid'):  # pyright: ignore[reportUnusedClass]  # this _is_ used below, but pyright doesn't seem to notice..\n        name: str | None = None\n        inputs: in_type  # pyright: ignore[reportInvalidTypeForm]\n        metadata: meta_type | None = None  # pyright: ignore[reportInvalidTypeForm,reportUnknownVariableType]\n        expected_output: out_type | None = None  # pyright: ignore[reportInvalidTypeForm,reportUnknownVariableType]\n        if evaluator_schema_types:\n            evaluators: list[Union[tuple(evaluator_schema_types)]] = []  # pyright: ignore  # noqa UP007\n\n    class Dataset(BaseModel, extra='forbid'):\n        cases: list[Case]\n        if evaluator_schema_types:\n            evaluators: list[Union[tuple(evaluator_schema_types)]] = []  # pyright: ignore  # noqa UP007\n\n    json_schema = Dataset.model_json_schema()\n    # See `_add_json_schema` below, since `$schema` is added to the JSON, it has to be supported in the JSON\n    json_schema['properties']['$schema'] = {'type': 'string'}\n    return json_schema\n\n```\n\n\n\n\n\n\n\n### set\\_eval\\_attribute\n\n```\nset_eval_attribute(name: str, value: Any) -> None\n\n```\n\nSet an attribute on the current task run.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `name` | `str` | The name of the attribute. | *required* |\n| `value` | `Any` | The value of the attribute. | *required* |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\ndef set_eval_attribute(name: str, value: Any) -> None:\n    \"\"\"Set an attribute on the current task run.\n\n    Args:\n        name: The name of the attribute.\n        value: The value of the attribute.\n    \"\"\"\n    current_case = _CURRENT_TASK_RUN.get()\n    if current_case is not None:\n        current_case.record_attribute(name, value)\n\n```\n\n\n\n\n### increment\\_eval\\_metric\n\n```\nincrement_eval_metric(\n    name: str, amount: int | float\n) -> None\n\n```\n\nIncrement a metric on the current task run.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `name` | `str` | The name of the metric. | *required* |\n| `amount` | `int | float` | The amount to increment by. | *required* |\n\nSource code in `pydantic_evals/pydantic_evals/dataset.py`\n```\ndef increment_eval_metric(name: str, amount: int | float) -> None:\n    \"\"\"Increment a metric on the current task run.\n\n    Args:\n        name: The name of the metric.\n        amount: The amount to increment by.\n    \"\"\"\n    current_case = _CURRENT_TASK_RUN.get()\n    if current_case is not None:\n        current_case.increment_metric(name, amount)\n\n```\n\n\n\n\n\n\n\n\n`pydantic_evals.evaluators`\n===========================\n\n### Contains `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nCheck if the output contains the expected output.\n\nFor strings, checks if expected\\_output is a substring of output.\nFor lists/tuples, checks if expected\\_", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-88aa29b286377569bc39ad941b6e9f6a", "__created_at__": 1744231651.420514, "content": "increment by.\n    \"\"\"\n    current_case = _CURRENT_TASK_RUN.get()\n    if current_case is not None:\n        current_case.increment_metric(name, amount)\n\n```\n\n\n\n\n\n\n\n\n`pydantic_evals.evaluators`\n===========================\n\n### Contains `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nCheck if the output contains the expected output.\n\nFor strings, checks if expected\\_output is a substring of output.\nFor lists/tuples, checks if expected\\_output is in output.\nFor dicts, checks if all key-value pairs in expected\\_output are in output.\n\nNote: case\\_sensitive only applies when both the value and output are strings.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass Contains(Evaluator[object, object, object]):\n    \"\"\"Check if the output contains the expected output.\n\n    For strings, checks if expected_output is a substring of output.\n    For lists/tuples, checks if expected_output is in output.\n    For dicts, checks if all key-value pairs in expected_output are in output.\n\n    Note: case_sensitive only applies when both the value and output are strings.\n    \"\"\"\n\n    value: Any\n    case_sensitive: bool = True\n    as_strings: bool = False\n\n    def evaluate(\n        self,\n        ctx: EvaluatorContext[object, object, object],\n    ) -> EvaluationReason:\n        # Convert objects to strings if requested\n        failure_reason: str | None = None\n        as_strings = self.as_strings or (isinstance(self.value, str) and isinstance(ctx.output, str))\n        if as_strings:\n            output_str = str(ctx.output)\n            expected_str = str(self.value)\n\n            if not self.case_sensitive:\n                output_str = output_str.lower()\n                expected_str = expected_str.lower()\n\n            failure_reason: str | None = None\n            if expected_str not in output_str:\n                output_trunc = _truncated_repr(output_str, max_length=100)\n                expected_trunc = _truncated_repr(expected_str, max_length=100)\n                failure_reason = f'Output string {output_trunc} does not contain expected string {expected_trunc}'\n            return EvaluationReason(value=failure_reason is None, reason=failure_reason)\n\n        try:\n            # Handle different collection types\n            if isinstance(ctx.output, dict):\n                if isinstance(self.value, dict):\n                    # Cast to Any to avoid type checking issues\n                    output_dict = cast(dict[Any, Any], ctx.output)  # pyright: ignore[reportUnknownMemberType]\n                    expected_dict = cast(dict[Any, Any], self.value)  # pyright: ignore[reportUnknownMemberType]\n                    for k in expected_dict:\n                        if k not in output_dict:\n                            k_trunc = _truncated_repr(k, max_length=30)\n                            failure_reason = f'Output dictionary does not contain expected key {k_trunc}'\n                            break\n                        elif output_dict[k] != expected_dict[k]:\n                            k_trunc = _truncated_repr(k, max_length=30)\n                            output_v_trunc = _truncated_repr(output_dict[k], max_length=100)\n                            expected_v_trunc = _truncated_repr(expected_dict[k], max_length=100)\n                            failure_reason = f'Output dictionary has different value for key {k_trunc}: {output_v_trunc} != {expected_v_trunc}'\n                            break\n                else:\n                    if self.value not in ctx.output:  # pyright: ignore[reportUnknownMemberType]\n                        output_trunc = _truncated_repr(ctx.output, max_length=200)  # pyright: ignore[reportUnknownMemberType]\n                        failure_reason = f'Output {output_trunc} does not contain provided value as a key'\n            elif self.value not in ctx.output:  # pyright: ignore[reportOperatorIssue]  # will be handled by except block\n                output_trunc = _truncated_repr(ctx.output, max_length=200)\n                failure_reason = f'Output {output_trunc} does not contain provided value'\n        except (TypeError, ValueError) as e:\n            failure_reason = f'Containment check failed: {e}'\n\n        return EvaluationReason(value=failure_reason is None, reason=failure_reason)\n\n```\n\n\n\n\n\n### Equals `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nCheck if the output exactly equals the provided value.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass Equals(Evaluator[object, object, object]):\n    \"\"\"Check if the output exactly equals the provided value.\"\"\"\n\n    value: Any\n\n    def evaluate(self, ctx: EvaluatorContext[object, object, object]) -> bool:\n        return ctx.output == self.value\n\n```\n\n\n\n\n\n### EqualsExpected `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nCheck if the output exactly equals the expected output.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass EqualsExpected(Evaluator[object, object, object]):\n    \"\"\"Check if the output exactly equals the expected output.\"\"\"\n\n    def evaluate(self, ctx: EvaluatorContext[object, object, object]) -> bool | dict[str, bool]:\n        if ctx.expected_output is None:\n            return {}  # Only compare if expected output is provided\n        return ctx.output == ctx.expected_output\n\n```\n\n\n\n\n\n### HasMatchingSpan `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nCheck if the span tree contains a span that matches the specified query.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9ed140ecdab085e2534a8130bc747b5c", "__created_at__": 1744231651.420514, "content": "object, object, object]) -> bool | dict[str, bool]:\n        if ctx.expected_output is None:\n            return {}  # Only compare if expected output is provided\n        return ctx.output == ctx.expected_output\n\n```\n\n\n\n\n\n### HasMatchingSpan `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nCheck if the span tree contains a span that matches the specified query.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass HasMatchingSpan(Evaluator[object, object, object]):\n    \"\"\"Check if the span tree contains a span that matches the specified query.\"\"\"\n\n    query: SpanQuery\n\n    def evaluate(\n        self,\n        ctx: EvaluatorContext[object, object, object],\n    ) -> bool:\n        return ctx.span_tree.any(self.query)\n\n```\n\n\n\n\n\n### IsInstance `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nCheck if the output is an instance of a type with the given name.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass IsInstance(Evaluator[object, object, object]):\n    \"\"\"Check if the output is an instance of a type with the given name.\"\"\"\n\n    type_name: str\n\n    def evaluate(self, ctx: EvaluatorContext[object, object, object]) -> EvaluationReason:\n        output = ctx.output\n        for cls in type(output).__mro__:\n            if cls.__name__ == self.type_name or cls.__qualname__ == self.type_name:\n                return EvaluationReason(value=True)\n\n        reason = f'output is of type {type(output).__name__}'\n        if type(output).__qualname__ != type(output).__name__:\n            reason += f' (qualname: {type(output).__qualname__})'\n        return EvaluationReason(value=False, reason=reason)\n\n```\n\n\n\n\n\n### LLMJudge `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nJudge whether the output of a language model meets the criteria of a provided rubric.\n\nIf you do not specify a model, it uses the default model for judging. This starts as 'openai:gpt-4o', but can be\noverridden by calling `set_default_judge_model`.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass LLMJudge(Evaluator[object, object, object]):\n    \"\"\"Judge whether the output of a language model meets the criteria of a provided rubric.\n\n    If you do not specify a model, it uses the default model for judging. This starts as 'openai:gpt-4o', but can be\n    overridden by calling [`set_default_judge_model`][pydantic_evals.evaluators.llm_as_a_judge.set_default_judge_model].\n    \"\"\"\n\n    rubric: str\n    model: models.Model | models.KnownModelName | None = None\n    include_input: bool = False\n\n    async def evaluate(\n        self,\n        ctx: EvaluatorContext[object, object, object],\n    ) -> EvaluationReason:\n        if self.include_input:\n            from .llm_as_a_judge import judge_input_output\n\n            grading_output = await judge_input_output(ctx.inputs, ctx.output, self.rubric, self.model)\n        else:\n            from .llm_as_a_judge import judge_output\n\n            grading_output = await judge_output(ctx.output, self.rubric, self.model)\n        return EvaluationReason(value=grading_output.pass_, reason=grading_output.reason)\n\n    def build_serialization_arguments(self):\n        result = super().build_serialization_arguments()\n        # always serialize the model as a string when present; use its name if it's a KnownModelName\n        if (model := result.get('model')) and isinstance(model, models.Model):\n            result['model'] = f'{model.system}:{model.model_name}'\n\n        # Note: this may lead to confusion if you try to serialize-then-deserialize with a custom model.\n        # I expect that is rare enough to be worth not solving yet, but common enough that we probably will want to\n        # solve it eventually. I'm imagining some kind of model registry, but don't want to work out the details yet.\n        return result\n\n```\n\n\n\n\n\n### MaxDuration `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nCheck if the execution time is under the specified maximum.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass MaxDuration(Evaluator[object, object, object]):\n    \"\"\"Check if the execution time is under the specified maximum.\"\"\"\n\n    seconds: float | timedelta\n\n    def evaluate(self, ctx: EvaluatorContext[object, object, object]) -> bool:\n        duration = timedelta(seconds=ctx.duration)\n        seconds = self.seconds\n        if not isinstance(seconds, timedelta):\n            seconds = timedelta(seconds=seconds)\n        return duration <= seconds\n\n```\n\n\n\n\n\n### Python `dataclass`\n\nBases: `Evaluator[object, object, object]`\n\nThe output of this evaluator is the result of evaluating the provided Python expression.\n\n***WARNING***: this evaluator runs arbitrary Python code, so you should ***NEVER*** use it with untrusted inputs.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass Python(Evaluator[object, object, object]):\n    \"\"\"The output of this evaluator is the result of evaluating the provided Python expression.\n\n    ***WARNING***: this evaluator runs arbitrary Python code, so you should ***NEVER*** use it with untrusted inputs.\n    \"\"\"\n\n    expression: str\n\n    def evaluate(self, ctx: EvaluatorContext[", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-1e4fc04e07a090d99ba9788f91be22b2", "__created_at__": 1744231651.420514, "content": "trusted inputs.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/common.py`\n```\n@dataclass\nclass Python(Evaluator[object, object, object]):\n    \"\"\"The output of this evaluator is the result of evaluating the provided Python expression.\n\n    ***WARNING***: this evaluator runs arbitrary Python code, so you should ***NEVER*** use it with untrusted inputs.\n    \"\"\"\n\n    expression: str\n\n    def evaluate(self, ctx: EvaluatorContext[object, object, object]) -> EvaluatorOutput:\n        # Evaluate the condition, exposing access to the evaluator context as `ctx`.\n        return eval(self.expression, {'ctx': ctx})\n\n```\n\n\n\n\n\n### EvaluatorContext `dataclass`\n\nBases: `Generic[InputsT, OutputT, MetadataT]`\n\nContext for evaluating a task execution.\n\nAn instance of this class is the sole input to all Evaluators. It contains all the information\nneeded to evaluate the task execution, including inputs, outputs, metadata, and telemetry data.\n\nEvaluators use this context to access the task inputs, actual output, expected output, and other\ninformation when evaluating the result of the task execution.\n\nExample:\n```\nfrom dataclasses import dataclass\n\nfrom pydantic_evals.evaluators import Evaluator, EvaluatorContext\n\n\n@dataclass\nclass ExactMatch(Evaluator):\n    def evaluate(self, ctx: EvaluatorContext) -> bool:\n        # Use the context to access task inputs, outputs, and expected outputs\n        return ctx.output == ctx.expected_output\n\n```\n\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/context.py`\n```\n@dataclass\nclass EvaluatorContext(Generic[InputsT, OutputT, MetadataT]):\n    \"\"\"Context for evaluating a task execution.\n\n    An instance of this class is the sole input to all Evaluators. It contains all the information\n    needed to evaluate the task execution, including inputs, outputs, metadata, and telemetry data.\n\n    Evaluators use this context to access the task inputs, actual output, expected output, and other\n    information when evaluating the result of the task execution.\n\n    Example:\n    ```python\n    from dataclasses import dataclass\n\n    from pydantic_evals.evaluators import Evaluator, EvaluatorContext\n\n\n    @dataclass\n    class ExactMatch(Evaluator):\n        def evaluate(self, ctx: EvaluatorContext) -> bool:\n            # Use the context to access task inputs, outputs, and expected outputs\n            return ctx.output == ctx.expected_output\n    ```\n    \"\"\"\n\n    name: str | None\n    \"\"\"The name of the case.\"\"\"\n    inputs: InputsT\n    \"\"\"The inputs provided to the task for this case.\"\"\"\n    metadata: MetadataT | None\n    \"\"\"Metadata associated with the case, if provided. May be None if no metadata was specified.\"\"\"\n    expected_output: OutputT | None\n    \"\"\"The expected output for the case, if provided. May be None if no expected output was specified.\"\"\"\n\n    output: OutputT\n    \"\"\"The actual output produced by the task for this case.\"\"\"\n    duration: float\n    \"\"\"The duration of the task run for this case.\"\"\"\n    _span_tree: SpanTree | SpanTreeRecordingError = field(repr=False)\n    \"\"\"The span tree for the task run for this case.\n\n    This will be `None` if `logfire.configure` has not been called.\n    \"\"\"\n\n    attributes: dict[str, Any]\n    \"\"\"Attributes associated with the task run for this case.\n\n    These can be set by calling `pydantic_evals.dataset.set_eval_attribute` in any code executed\n    during the evaluation task.\"\"\"\n    metrics: dict[str, int | float]\n    \"\"\"Metrics associated with the task run for this case.\n\n    These can be set by calling `pydantic_evals.dataset.increment_eval_metric` in any code executed\n    during the evaluation task.\"\"\"\n\n    @property\n    def span_tree(self) -> SpanTree:\n        \"\"\"Get the `SpanTree` for this task execution.\n\n        The span tree is a graph where each node corresponds to an OpenTelemetry span recorded during the task\n        execution, including timing information and any custom spans created during execution.\n\n        Returns:\n            The span tree for the task execution.\n\n        Raises:\n            SpanTreeRecordingError: If spans were not captured during execution of the task, e.g. due to not having\n                the necessary dependencies installed.\n        \"\"\"\n        if isinstance(self._span_tree, SpanTreeRecordingError):\n            # In this case, there was a reason we couldn't record the SpanTree. We raise that now\n            raise self._span_tree\n        return self._span_tree\n\n```\n\n\n#### name `instance-attribute`\n\n```\nname: str | None\n\n```\n\nThe name of the case.\n\n\n\n#### inputs `instance-attribute`\n\n```\ninputs: InputsT\n\n```\n\nThe inputs provided to the task for this case.\n\n\n\n#### metadata `instance-attribute`\n\n```\nmetadata: MetadataT | None\n\n```\n\nMetadata associated with the case, if provided. May be None if no metadata was specified.\n\n\n\n#### expected\\_output `instance-attribute`\n\n```\nexpected_output: OutputT | None\n\n```\n\nThe expected output for the case, if provided. May be None if no expected output was specified.\n\n\n\n#### output `instance-attribute`\n\n```\noutput: OutputT\n\n```\n\nThe actual output produced by the task for this case.\n\n\n\n#### duration `instance-attribute`\n\n```\nduration: float\n\n```\n\nThe duration of the task run for this case.\n\n\n\n#### attributes `instance-attribute`\n\n```\nattributes: dict[str, Any]\n\n```\n\nAttributes associated with the task run for this case.\n\nThese can be set by calling `pydantic_evals.dataset.set_eval_attribute` in any code executed\nduring the evaluation task.\n\n\n\n####", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-b3a62dd1e4feda3a9c3f07deba46161f", "__created_at__": 1744231651.420514, "content": "`\noutput: OutputT\n\n```\n\nThe actual output produced by the task for this case.\n\n\n\n#### duration `instance-attribute`\n\n```\nduration: float\n\n```\n\nThe duration of the task run for this case.\n\n\n\n#### attributes `instance-attribute`\n\n```\nattributes: dict[str, Any]\n\n```\n\nAttributes associated with the task run for this case.\n\nThese can be set by calling `pydantic_evals.dataset.set_eval_attribute` in any code executed\nduring the evaluation task.\n\n\n\n#### metrics `instance-attribute`\n\n```\nmetrics: dict[str, int | float]\n\n```\n\nMetrics associated with the task run for this case.\n\nThese can be set by calling `pydantic_evals.dataset.increment_eval_metric` in any code executed\nduring the evaluation task.\n\n\n\n#### span\\_tree `property`\n\n```\nspan_tree: SpanTree\n\n```\n\nGet the `SpanTree` for this task execution.\n\nThe span tree is a graph where each node corresponds to an OpenTelemetry span recorded during the task\nexecution, including timing information and any custom spans created during execution.\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `SpanTree` | The span tree for the task execution. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `SpanTreeRecordingError` | If spans were not captured during execution of the task, e.g. due to not having the necessary dependencies installed. |\n\n\n\n\n\n\n### EvaluationReason `dataclass`\n\nThe result of running an evaluator with an optional explanation.\n\nContains a scalar value and an optional \"reason\" explaining the value.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `value` | `EvaluationScalar` | The scalar result of the evaluation (boolean, integer, float, or string). | *required* |\n| `reason` | `str | None` | An optional explanation of the evaluation result. | `None` |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\n@dataclass\nclass EvaluationReason:\n    \"\"\"The result of running an evaluator with an optional explanation.\n\n    Contains a scalar value and an optional \"reason\" explaining the value.\n\n    Args:\n        value: The scalar result of the evaluation (boolean, integer, float, or string).\n        reason: An optional explanation of the evaluation result.\n    \"\"\"\n\n    value: EvaluationScalar\n    reason: str | None = None\n\n```\n\n\n\n\n\n### EvaluationResult `dataclass`\n\nBases: `Generic[EvaluationScalarT]`\n\nThe details of an individual evaluation result.\n\nContains the name, value, reason, and source evaluator for a single evaluation.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `name` | `str` | The name of the evaluation. | *required* |\n| `value` | `EvaluationScalarT` | The scalar result of the evaluation. | *required* |\n| `reason` | `str | None` | An optional explanation of the evaluation result. | *required* |\n| `source` | `Evaluator` | The evaluator that produced this result. | *required* |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\n@dataclass\nclass EvaluationResult(Generic[EvaluationScalarT]):\n    \"\"\"The details of an individual evaluation result.\n\n    Contains the name, value, reason, and source evaluator for a single evaluation.\n\n    Args:\n        name: The name of the evaluation.\n        value: The scalar result of the evaluation.\n        reason: An optional explanation of the evaluation result.\n        source: The evaluator that produced this result.\n    \"\"\"\n\n    name: str\n    value: EvaluationScalarT\n    reason: str | None\n    source: Evaluator\n\n    def downcast(self, *value_types: type[T]) -> EvaluationResult[T] | None:\n        \"\"\"Attempt to downcast this result to a more specific type.\n\n        Args:\n            *value_types: The types to check the value against.\n\n        Returns:\n            A downcast version of this result if the value is an instance of one of the given types,\n            otherwise None.\n        \"\"\"\n        # Check if value matches any of the target types, handling bool as a special case\n        for value_type in value_types:\n            if isinstance(self.value, value_type):\n                # Only match bool with explicit bool type\n                if isinstance(self.value, bool) and value_type is not bool:\n                    continue\n                return cast(EvaluationResult[T], self)\n        return None\n\n```\n\n\n#### downcast\n\n```\ndowncast(\n    *value_types: type[T],\n) -> EvaluationResult[T] | None\n\n```\n\nAttempt to downcast this result to a more specific type.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `*value_types` | `type[T]` | The types to check the value against. | `()` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `EvaluationResult[T] | None` | A downcast version of this result if the value is an instance of one of the given types, |\n| `EvaluationResult[T] | None` | otherwise None. |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\ndef downcast(self, *value_types: type[T]) -> EvaluationResult[T] | None:\n    \"\"\"Attempt to downcast this result to a more specific type.\n\n    Args:\n        *value_types: The types to check the value against.\n\n    Returns:\n        A downcast version of this result if the value is an instance of one of the given types,\n        otherwise None.\n    \"\"\"\n    # Check if value matches", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-20e032599e3c3c011a88dd3096b104d9", "__created_at__": 1744231651.420514, "content": "/pydantic_evals/evaluators/evaluator.py`\n```\ndef downcast(self, *value_types: type[T]) -> EvaluationResult[T] | None:\n    \"\"\"Attempt to downcast this result to a more specific type.\n\n    Args:\n        *value_types: The types to check the value against.\n\n    Returns:\n        A downcast version of this result if the value is an instance of one of the given types,\n        otherwise None.\n    \"\"\"\n    # Check if value matches any of the target types, handling bool as a special case\n    for value_type in value_types:\n        if isinstance(self.value, value_type):\n            # Only match bool with explicit bool type\n            if isinstance(self.value, bool) and value_type is not bool:\n                continue\n            return cast(EvaluationResult[T], self)\n    return None\n\n```\n\n\n\n\n\n\n\n### Evaluator `dataclass`\n\nBases: `Generic[InputsT, OutputT, MetadataT]`\n\nBase class for all evaluators.\n\nEvaluators can assess the performance of a task in a variety of ways, as a function of the EvaluatorContext.\n\nSubclasses must implement the `evaluate` method. Note it can be defined with either `def` or `async def`.\n\nExample:\n```\nfrom dataclasses import dataclass\n\nfrom pydantic_evals.evaluators import Evaluator, EvaluatorContext\n\n\n@dataclass\nclass ExactMatch(Evaluator):\n    def evaluate(self, ctx: EvaluatorContext) -> bool:\n        return ctx.output == ctx.expected_output\n\n```\n\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\n@dataclass\nclass Evaluator(Generic[InputsT, OutputT, MetadataT], metaclass=_StrictABCMeta):\n    \"\"\"Base class for all evaluators.\n\n    Evaluators can assess the performance of a task in a variety of ways, as a function of the EvaluatorContext.\n\n    Subclasses must implement the `evaluate` method. Note it can be defined with either `def` or `async def`.\n\n    Example:\n    ```python\n    from dataclasses import dataclass\n\n    from pydantic_evals.evaluators import Evaluator, EvaluatorContext\n\n\n    @dataclass\n    class ExactMatch(Evaluator):\n        def evaluate(self, ctx: EvaluatorContext) -> bool:\n            return ctx.output == ctx.expected_output\n    ```\n    \"\"\"\n\n    __pydantic_config__ = ConfigDict(arbitrary_types_allowed=True)\n\n    @classmethod\n    def name(cls) -> str:\n        \"\"\"Return the 'name' of this Evaluator to use during serialization.\n\n        Returns:\n            The name of the Evaluator, which is typically the class name.\n        \"\"\"\n        # Note: if we wanted to prefer snake_case, we could use:\n        # from pydantic.alias_generators import to_snake\n        # return to_snake(cls.__name__)\n        return cls.__name__\n\n    @abstractmethod\n    def evaluate(\n        self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]\n    ) -> EvaluatorOutput | Awaitable[EvaluatorOutput]:  # pragma: no cover\n        \"\"\"Evaluate the task output in the given context.\n\n        This is the main evaluation method that subclasses must implement. It can be either synchronous\n        or asynchronous, returning either an EvaluatorOutput directly or an Awaitable[EvaluatorOutput].\n\n        Args:\n            ctx: The context containing the inputs, outputs, and metadata for evaluation.\n\n        Returns:\n            The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping\n            of evaluation names to either of those. Can be returned either synchronously or as an\n            awaitable for asynchronous evaluation.\n        \"\"\"\n        raise NotImplementedError('You must implement `evaluate`.')\n\n    def evaluate_sync(self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]) -> EvaluatorOutput:\n        \"\"\"Run the evaluator synchronously, handling both sync and async implementations.\n\n        This method ensures synchronous execution by running any async evaluate implementation\n        to completion using run_until_complete.\n\n        Args:\n            ctx: The context containing the inputs, outputs, and metadata for evaluation.\n\n        Returns:\n            The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping\n            of evaluation names to either of those.\n        \"\"\"\n        output = self.evaluate(ctx)\n        if inspect.iscoroutine(output):  # pragma: no cover\n            return get_event_loop().run_until_complete(output)\n        else:\n            return cast(EvaluatorOutput, output)\n\n    async def evaluate_async(self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]) -> EvaluatorOutput:\n        \"\"\"Run the evaluator asynchronously, handling both sync and async implementations.\n\n        This method ensures asynchronous execution by properly awaiting any async evaluate\n        implementation. For synchronous implementations, it returns the result directly.\n\n        Args:\n            ctx: The context containing the inputs, outputs, and metadata for evaluation.\n\n        Returns:\n            The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping\n            of evaluation names to either of those.\n        \"\"\"\n        # Note: If self.evaluate is synchronous, but you need to prevent this from blocking, override this method with:\n        # return await anyio.to_thread.run_sync(self.evaluate, ctx)\n        output = self.evaluate(ctx)\n        if inspect.iscoroutine(output):\n            return await output\n        else:\n            return cast(EvaluatorOutput, output)\n\n    @model_serializer(mode='plain')\n    def serialize(self, info: SerializationInfo) -> Any:\n        \"\"\"Serialize this Evaluator to a JSON-serializable form.\n\n        Returns:\n            A JSON-serializable representation of this evaluator as an EvaluatorSpec.\n        \"\"\"\n        raw_arguments = self.build_serialization_arguments()\n\n        arguments", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-76d64a3e02c213511d0d0fa80098b99b", "__created_at__": 1744231651.420514, "content": "output = self.evaluate(ctx)\n        if inspect.iscoroutine(output):\n            return await output\n        else:\n            return cast(EvaluatorOutput, output)\n\n    @model_serializer(mode='plain')\n    def serialize(self, info: SerializationInfo) -> Any:\n        \"\"\"Serialize this Evaluator to a JSON-serializable form.\n\n        Returns:\n            A JSON-serializable representation of this evaluator as an EvaluatorSpec.\n        \"\"\"\n        raw_arguments = self.build_serialization_arguments()\n\n        arguments: None | tuple[Any,] | dict[str, Any]\n        if len(raw_arguments) == 0:\n            arguments = None\n        elif len(raw_arguments) == 1:\n            arguments = (next(iter(raw_arguments.values())),)\n        else:\n            arguments = raw_arguments\n        return to_jsonable_python(\n            EvaluatorSpec(name=self.name(), arguments=arguments), context=info.context, serialize_unknown=True\n        )\n\n    def build_serialization_arguments(self) -> dict[str, Any]:\n        \"\"\"Build the arguments for serialization.\n\n        Evaluators are serialized for inclusion as the \"source\" in an `EvaluationResult`.\n        If you want to modify how the evaluator is serialized for that or other purposes, you can override this method.\n\n        Returns:\n            A dictionary of arguments to be used during serialization.\n        \"\"\"\n        raw_arguments: dict[str, Any] = {}\n        for field in fields(self):\n            value = getattr(self, field.name)\n            # always exclude defaults:\n            if field.default is not MISSING:\n                if value == field.default:\n                    continue\n            if field.default_factory is not MISSING:\n                if value == field.default_factory():\n                    continue\n            raw_arguments[field.name] = value\n        return raw_arguments\n\n```\n\n\n#### name `classmethod`\n\n```\nname() -> str\n\n```\n\nReturn the 'name' of this Evaluator to use during serialization.\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `str` | The name of the Evaluator, which is typically the class name. |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\n@classmethod\ndef name(cls) -> str:\n    \"\"\"Return the 'name' of this Evaluator to use during serialization.\n\n    Returns:\n        The name of the Evaluator, which is typically the class name.\n    \"\"\"\n    # Note: if we wanted to prefer snake_case, we could use:\n    # from pydantic.alias_generators import to_snake\n    # return to_snake(cls.__name__)\n    return cls.__name__\n\n```\n\n\n\n\n#### evaluate `abstractmethod`\n\n```\nevaluate(\n    ctx: EvaluatorContext[InputsT, OutputT, MetadataT],\n) -> EvaluatorOutput | Awaitable[EvaluatorOutput]\n\n```\n\nEvaluate the task output in the given context.\n\nThis is the main evaluation method that subclasses must implement. It can be either synchronous\nor asynchronous, returning either an EvaluatorOutput directly or an Awaitable[EvaluatorOutput].\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `ctx` | `EvaluatorContext[InputsT, OutputT, MetadataT]` | The context containing the inputs, outputs, and metadata for evaluation. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `EvaluatorOutput | Awaitable[EvaluatorOutput]` | The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping |\n| `EvaluatorOutput | Awaitable[EvaluatorOutput]` | of evaluation names to either of those. Can be returned either synchronously or as an |\n| `EvaluatorOutput | Awaitable[EvaluatorOutput]` | awaitable for asynchronous evaluation. |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\n@abstractmethod\ndef evaluate(\n    self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]\n) -> EvaluatorOutput | Awaitable[EvaluatorOutput]:  # pragma: no cover\n    \"\"\"Evaluate the task output in the given context.\n\n    This is the main evaluation method that subclasses must implement. It can be either synchronous\n    or asynchronous, returning either an EvaluatorOutput directly or an Awaitable[EvaluatorOutput].\n\n    Args:\n        ctx: The context containing the inputs, outputs, and metadata for evaluation.\n\n    Returns:\n        The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping\n        of evaluation names to either of those. Can be returned either synchronously or as an\n        awaitable for asynchronous evaluation.\n    \"\"\"\n    raise NotImplementedError('You must implement `evaluate`.')\n\n```\n\n\n\n\n#### evaluate\\_sync\n\n```\nevaluate_sync(\n    ctx: EvaluatorContext[InputsT, OutputT, MetadataT],\n) -> EvaluatorOutput\n\n```\n\nRun the evaluator synchronously, handling both sync and async implementations.\n\nThis method ensures synchronous execution by running any async evaluate implementation\nto completion using run\\_until\\_complete.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `ctx` | `EvaluatorContext[InputsT, OutputT, MetadataT]` | The context containing the inputs, outputs, and metadata for evaluation. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `EvaluatorOutput` | The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping |\n| `EvaluatorOutput` | of evaluation names to either of those. |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\ndef evaluate_sync(self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]) -> EvaluatorOutput:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-09795f59482a4f70d3c8059b12e12196", "__created_at__": 1744231651.420514, "content": "Returns:\n\n| Type | Description |\n| --- | --- |\n| `EvaluatorOutput` | The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping |\n| `EvaluatorOutput` | of evaluation names to either of those. |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\ndef evaluate_sync(self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]) -> EvaluatorOutput:\n    \"\"\"Run the evaluator synchronously, handling both sync and async implementations.\n\n    This method ensures synchronous execution by running any async evaluate implementation\n    to completion using run_until_complete.\n\n    Args:\n        ctx: The context containing the inputs, outputs, and metadata for evaluation.\n\n    Returns:\n        The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping\n        of evaluation names to either of those.\n    \"\"\"\n    output = self.evaluate(ctx)\n    if inspect.iscoroutine(output):  # pragma: no cover\n        return get_event_loop().run_until_complete(output)\n    else:\n        return cast(EvaluatorOutput, output)\n\n```\n\n\n\n\n#### evaluate\\_async `async`\n\n```\nevaluate_async(\n    ctx: EvaluatorContext[InputsT, OutputT, MetadataT],\n) -> EvaluatorOutput\n\n```\n\nRun the evaluator asynchronously, handling both sync and async implementations.\n\nThis method ensures asynchronous execution by properly awaiting any async evaluate\nimplementation. For synchronous implementations, it returns the result directly.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `ctx` | `EvaluatorContext[InputsT, OutputT, MetadataT]` | The context containing the inputs, outputs, and metadata for evaluation. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `EvaluatorOutput` | The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping |\n| `EvaluatorOutput` | of evaluation names to either of those. |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\nasync def evaluate_async(self, ctx: EvaluatorContext[InputsT, OutputT, MetadataT]) -> EvaluatorOutput:\n    \"\"\"Run the evaluator asynchronously, handling both sync and async implementations.\n\n    This method ensures asynchronous execution by properly awaiting any async evaluate\n    implementation. For synchronous implementations, it returns the result directly.\n\n    Args:\n        ctx: The context containing the inputs, outputs, and metadata for evaluation.\n\n    Returns:\n        The evaluation result, which can be a scalar value, an EvaluationReason, or a mapping\n        of evaluation names to either of those.\n    \"\"\"\n    # Note: If self.evaluate is synchronous, but you need to prevent this from blocking, override this method with:\n    # return await anyio.to_thread.run_sync(self.evaluate, ctx)\n    output = self.evaluate(ctx)\n    if inspect.iscoroutine(output):\n        return await output\n    else:\n        return cast(EvaluatorOutput, output)\n\n```\n\n\n\n\n#### serialize\n\n```\nserialize(info: SerializationInfo) -> Any\n\n```\n\nSerialize this Evaluator to a JSON-serializable form.\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `Any` | A JSON-serializable representation of this evaluator as an EvaluatorSpec. |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\n@model_serializer(mode='plain')\ndef serialize(self, info: SerializationInfo) -> Any:\n    \"\"\"Serialize this Evaluator to a JSON-serializable form.\n\n    Returns:\n        A JSON-serializable representation of this evaluator as an EvaluatorSpec.\n    \"\"\"\n    raw_arguments = self.build_serialization_arguments()\n\n    arguments: None | tuple[Any,] | dict[str, Any]\n    if len(raw_arguments) == 0:\n        arguments = None\n    elif len(raw_arguments) == 1:\n        arguments = (next(iter(raw_arguments.values())),)\n    else:\n        arguments = raw_arguments\n    return to_jsonable_python(\n        EvaluatorSpec(name=self.name(), arguments=arguments), context=info.context, serialize_unknown=True\n    )\n\n```\n\n\n\n\n#### build\\_serialization\\_arguments\n\n```\nbuild_serialization_arguments() -> dict[str, Any]\n\n```\n\nBuild the arguments for serialization.\n\nEvaluators are serialized for inclusion as the \"source\" in an `EvaluationResult`.\nIf you want to modify how the evaluator is serialized for that or other purposes, you can override this method.\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `dict[str, Any]` | A dictionary of arguments to be used during serialization. |\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/evaluator.py`\n```\ndef build_serialization_arguments(self) -> dict[str, Any]:\n    \"\"\"Build the arguments for serialization.\n\n    Evaluators are serialized for inclusion as the \"source\" in an `EvaluationResult`.\n    If you want to modify how the evaluator is serialized for that or other purposes, you can override this method.\n\n    Returns:\n        A dictionary of arguments to be used during serialization.\n    \"\"\"\n    raw_arguments: dict[str, Any] = {}\n    for field in fields(self):\n        value = getattr(self, field.name)\n        # always exclude defaults:\n        if field.default is not MISSING:\n            if value == field.default:\n                continue\n        if field.default_factory is not MISSING:\n            if value == field.default_factory():\n                continue\n        raw_arguments[field.name] = value\n    return raw_arguments\n\n```\n\n\n\n\n\n\n\n### EvaluatorOutput `module-attribute`\n\n```\nEvaluatorOutput = Union[\n    EvaluationScalar,\n    EvaluationReason,\n    Mapping[str, Union[EvaluationScalar, Evaluation", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c5ec0773b9bee4d3c1e47d6c99be1b86", "__created_at__": 1744231651.420514, "content": ", field.name)\n        # always exclude defaults:\n        if field.default is not MISSING:\n            if value == field.default:\n                continue\n        if field.default_factory is not MISSING:\n            if value == field.default_factory():\n                continue\n        raw_arguments[field.name] = value\n    return raw_arguments\n\n```\n\n\n\n\n\n\n\n### EvaluatorOutput `module-attribute`\n\n```\nEvaluatorOutput = Union[\n    EvaluationScalar,\n    EvaluationReason,\n    Mapping[str, Union[EvaluationScalar, EvaluationReason]],\n]\n\n```\n\nType for the output of an evaluator, which can be a scalar, an EvaluationReason, or a mapping of names to either.\n\n\n\n\n\n\n### GradingOutput\n\nBases: `BaseModel`\n\nThe output of a grading operation.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/llm_as_a_judge.py`\n```\nclass GradingOutput(BaseModel, populate_by_name=True):\n    \"\"\"The output of a grading operation.\"\"\"\n\n    reason: str\n    pass_: bool = Field(validation_alias='pass', serialization_alias='pass')\n    score: float\n\n```\n\n\n\n\n\n### judge\\_output `async`\n\n```\njudge_output(\n    output: Any,\n    rubric: str,\n    model: Model | KnownModelName | None = None,\n) -> GradingOutput\n\n```\n\nJudge the output of a model based on a rubric.\n\nIf the model is not specified, a default model is used. The default model starts as 'openai:gpt-4o',\nbut this can be changed using the `set_default_judge_model` function.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/llm_as_a_judge.py`\n```\nasync def judge_output(\n    output: Any, rubric: str, model: models.Model | models.KnownModelName | None = None\n) -> GradingOutput:\n    \"\"\"Judge the output of a model based on a rubric.\n\n    If the model is not specified, a default model is used. The default model starts as 'openai:gpt-4o',\n    but this can be changed using the `set_default_judge_model` function.\n    \"\"\"\n    user_prompt = f'\\n{_stringify(output)}\\n\\n\\n{rubric}\\n'\n    return (await _judge_output_agent.run(user_prompt, model=model or _default_model)).data\n\n```\n\n\n\n\n### judge\\_input\\_output `async`\n\n```\njudge_input_output(\n    inputs: Any,\n    output: Any,\n    rubric: str,\n    model: Model | KnownModelName | None = None,\n) -> GradingOutput\n\n```\n\nJudge the output of a model based on the inputs and a rubric.\n\nIf the model is not specified, a default model is used. The default model starts as 'openai:gpt-4o',\nbut this can be changed using the `set_default_judge_model` function.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/llm_as_a_judge.py`\n```\nasync def judge_input_output(\n    inputs: Any, output: Any, rubric: str, model: models.Model | models.KnownModelName | None = None\n) -> GradingOutput:\n    \"\"\"Judge the output of a model based on the inputs and a rubric.\n\n    If the model is not specified, a default model is used. The default model starts as 'openai:gpt-4o',\n    but this can be changed using the `set_default_judge_model` function.\n    \"\"\"\n    user_prompt = f'\\n{_stringify(inputs)}\\n\\n\\n{_stringify(output)}\\n\\n\\n{rubric}\\n'\n    return (await _judge_input_output_agent.run(user_prompt, model=model or _default_model)).data\n\n```\n\n\n\n\n### set\\_default\\_judge\\_model\n\n```\nset_default_judge_model(\n    model: Model | KnownModelName,\n) -> None\n\n```\n\nSet the default model used for judging.\n\nThis model is used if `None` is passed to the `model` argument of `judge_output` and `judge_input_output`.\n\nSource code in `pydantic_evals/pydantic_evals/evaluators/llm_as_a_judge.py`\n```\ndef set_default_judge_model(model: models.Model | models.KnownModelName) -> None:  # pragma: no cover\n    \"\"\"Set the default model used for judging.\n\n    This model is used if `None` is passed to the `model` argument of `judge_output` and `judge_input_output`.\n    \"\"\"\n    global _default_model\n    _default_model = model\n\n```\n\n\n\n\n\n\n\n\n`pydantic_evals.generation`\n===========================\n\nUtilities for generating example datasets for pydantic\\_evals.\n\nThis module provides functions for generating sample datasets for testing and examples,\nusing LLMs to create realistic test data with proper structure.\n\n### generate\\_dataset `async`\n\n```\ngenerate_dataset(\n    *,\n    dataset_type: type[\n        Dataset[InputsT, OutputT, MetadataT]\n    ],\n    path: Path | str | None = None,\n    custom_evaluator_types: Sequence[\n        type[Evaluator[InputsT, OutputT, MetadataT]]\n    ] = (),\n    model: Model | KnownModelName = \"openai:gpt-4o\",\n    n_examples: int = 3,\n    extra_instructions: str | None = None\n) -> Dataset[InputsT, OutputT, MetadataT]\n\n```\n\nUse an LLM to generate a dataset of test cases, each consisting of input, expected output, and metadata.\n\nThis function creates a properly structured dataset with the specified input, output, and metadata types.\nIt uses an LLM to attempt to generate realistic", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-dcc0ef06948f95ef73eef5b238e34d40", "__created_at__": 1744231651.420514, "content": "| KnownModelName = \"openai:gpt-4o\",\n    n_examples: int = 3,\n    extra_instructions: str | None = None\n) -> Dataset[InputsT, OutputT, MetadataT]\n\n```\n\nUse an LLM to generate a dataset of test cases, each consisting of input, expected output, and metadata.\n\nThis function creates a properly structured dataset with the specified input, output, and metadata types.\nIt uses an LLM to attempt to generate realistic test cases that conform to the types' schemas.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `path` | `Path | str | None` | Optional path to save the generated dataset. If provided, the dataset will be saved to this location. | `None` |\n| `dataset_type` | `type[Dataset[InputsT, OutputT, MetadataT]]` | The type of dataset to generate, with the desired input, output, and metadata types. | *required* |\n| `custom_evaluator_types` | `Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]]` | Optional sequence of custom evaluator classes to include in the schema. | `()` |\n| `model` | `Model | KnownModelName` | The PydanticAI model to use for generation. Defaults to 'gpt-4o'. | `'openai:gpt-4o'` |\n| `n_examples` | `int` | Number of examples to generate. Defaults to 3. | `3` |\n| `extra_instructions` | `str | None` | Optional additional instructions to provide to the LLM. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `Dataset[InputsT, OutputT, MetadataT]` | A properly structured Dataset object with generated test cases. |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `ValidationError` | If the LLM's response cannot be parsed as a valid dataset. |\n\nSource code in `pydantic_evals/pydantic_evals/generation.py`\n```\nasync def generate_dataset(\n    *,\n    dataset_type: type[Dataset[InputsT, OutputT, MetadataT]],\n    path: Path | str | None = None,\n    custom_evaluator_types: Sequence[type[Evaluator[InputsT, OutputT, MetadataT]]] = (),\n    model: models.Model | models.KnownModelName = 'openai:gpt-4o',\n    n_examples: int = 3,\n    extra_instructions: str | None = None,\n) -> Dataset[InputsT, OutputT, MetadataT]:  # pragma: no cover\n    \"\"\"Use an LLM to generate a dataset of test cases, each consisting of input, expected output, and metadata.\n\n    This function creates a properly structured dataset with the specified input, output, and metadata types.\n    It uses an LLM to attempt to generate realistic test cases that conform to the types' schemas.\n\n    Args:\n        path: Optional path to save the generated dataset. If provided, the dataset will be saved to this location.\n        dataset_type: The type of dataset to generate, with the desired input, output, and metadata types.\n        custom_evaluator_types: Optional sequence of custom evaluator classes to include in the schema.\n        model: The PydanticAI model to use for generation. Defaults to 'gpt-4o'.\n        n_examples: Number of examples to generate. Defaults to 3.\n        extra_instructions: Optional additional instructions to provide to the LLM.\n\n    Returns:\n        A properly structured Dataset object with generated test cases.\n\n    Raises:\n        ValidationError: If the LLM's response cannot be parsed as a valid dataset.\n    \"\"\"\n    result_schema = dataset_type.model_json_schema_with_evaluators(custom_evaluator_types)\n\n    # TODO(DavidM): Update this once we add better response_format and/or ResultTool support to PydanticAI\n    agent = Agent(\n        model,\n        system_prompt=(\n            f'Generate an object that is in compliance with this JSON schema:\\n{result_schema}\\n\\n'\n            f'Include {n_examples} example cases.'\n            ' You must not include any characters in your response before the opening { of the JSON object, or after the closing }.'\n        ),\n        result_type=str,\n        retries=1,\n    )\n\n    result = await agent.run(extra_instructions or 'Please generate the object.')\n    try:\n        result = dataset_type.from_text(result.data, fmt='json', custom_evaluator_types=custom_evaluator_types)\n    except ValidationError as e:\n        print(f'Raw response from model:\\n{result.data}')\n        raise e\n    if path is not None:\n        result.to_file(path, custom_evaluator_types=custom_evaluator_types)\n    return result\n\n```\n\n\n\n\n\n\n\n\n`pydantic_evals.otel`\n=====================\n\n### SpanNode `dataclass`\n\nA node in the span tree; provides references to parents/children for easy traversal and queries.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\n@dataclass(repr=False)\nclass SpanNode:\n    \"\"\"A node in the span tree; provides references to parents/children for easy traversal and queries.\"\"\"\n\n    name: str\n    trace_id: int\n    span_id: int\n    parent_span_id: int | None\n    start_timestamp: datetime\n    end_timestamp: datetime\n    attributes: dict[str, AttributeValue]\n\n    @property\n    def duration(self) -> timedelta:\n        \"\"\"Return the span's duration as a timedelta, or None if start/end not set.\"\"\"\n        return self.end_timestamp - self.start_timestamp\n\n    @property\n    def children(self) ->", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a5dd62229c34dcdbdeca48aacb8d6cf6", "__created_at__": 1744231651.420514, "content": "queries.\"\"\"\n\n    name: str\n    trace_id: int\n    span_id: int\n    parent_span_id: int | None\n    start_timestamp: datetime\n    end_timestamp: datetime\n    attributes: dict[str, AttributeValue]\n\n    @property\n    def duration(self) -> timedelta:\n        \"\"\"Return the span's duration as a timedelta, or None if start/end not set.\"\"\"\n        return self.end_timestamp - self.start_timestamp\n\n    @property\n    def children(self) -> list[SpanNode]:\n        return list(self.children_by_id.values())\n\n    @property\n    def descendants(self) -> list[SpanNode]:\n        \"\"\"Return all descendants of this node in DFS order.\"\"\"\n        return self.find_descendants(lambda _: True)\n\n    @property\n    def ancestors(self) -> list[SpanNode]:\n        \"\"\"Return all ancestors of this node.\"\"\"\n        return self.find_ancestors(lambda _: True)\n\n    @property\n    def node_key(self) -> str:\n        return f'{self.trace_id:032x}:{self.span_id:016x}'\n\n    @property\n    def parent_node_key(self) -> str | None:\n        return None if self.parent_span_id is None else f'{self.trace_id:032x}:{self.parent_span_id:016x}'\n\n    # -------------------------------------------------------------------------\n    # Construction\n    # -------------------------------------------------------------------------\n    def __post_init__(self):\n        self.parent: SpanNode | None = None\n        self.children_by_id: dict[str, SpanNode] = {}\n\n    @staticmethod\n    def from_readable_span(span: ReadableSpan) -> SpanNode:\n        assert span.context is not None, 'Span has no context'\n        assert span.start_time is not None, 'Span has no start time'\n        assert span.end_time is not None, 'Span has no end time'\n        return SpanNode(\n            name=span.name,\n            trace_id=span.context.trace_id,\n            span_id=span.context.span_id,\n            parent_span_id=span.parent.span_id if span.parent else None,\n            start_timestamp=datetime.fromtimestamp(span.start_time / 1e9, tz=timezone.utc),\n            end_timestamp=datetime.fromtimestamp(span.end_time / 1e9, tz=timezone.utc),\n            attributes=dict(span.attributes or {}),\n        )\n\n    def add_child(self, child: SpanNode) -> None:\n        \"\"\"Attach a child node to this node's list of children.\"\"\"\n        assert child.trace_id == self.trace_id, f\"traces don't match: {child.trace_id:032x} != {self.trace_id:032x}\"\n        assert child.parent_span_id == self.span_id, (\n            f'parent span mismatch: {child.parent_span_id:016x} != {self.span_id:016x}'\n        )\n        self.children_by_id[child.node_key] = child\n        child.parent = self\n\n    # -------------------------------------------------------------------------\n    # Child queries\n    # -------------------------------------------------------------------------\n    def find_children(self, predicate: SpanQuery | SpanPredicate) -> list[SpanNode]:\n        \"\"\"Return all immediate children that satisfy the given predicate.\"\"\"\n        return list(self._filter_children(predicate))\n\n    def first_child(self, predicate: SpanQuery | SpanPredicate) -> SpanNode | None:\n        \"\"\"Return the first immediate child that satisfies the given predicate, or None if none match.\"\"\"\n        return next(self._filter_children(predicate), None)\n\n    def any_child(self, predicate: SpanQuery | SpanPredicate) -> bool:\n        \"\"\"Returns True if there is at least one child that satisfies the predicate.\"\"\"\n        return self.first_child(predicate) is not None\n\n    def _filter_children(self, predicate: SpanQuery | SpanPredicate) -> Iterator[SpanNode]:\n        return (child for child in self.children if child.matches(predicate))\n\n    # -------------------------------------------------------------------------\n    # Descendant queries (DFS)\n    # -------------------------------------------------------------------------\n    def find_descendants(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n    ) -> list[SpanNode]:\n        \"\"\"Return all descendant nodes that satisfy the given predicate in DFS order.\"\"\"\n        return list(self._filter_descendants(predicate, stop_recursing_when))\n\n    def first_descendant(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n    ) -> SpanNode | None:\n        \"\"\"DFS: Return the first descendant (in DFS order) that satisfies the given predicate, or `None` if none match.\"\"\"\n        return next(self._filter_descendants(predicate, stop_recursing_when), None)\n\n    def any_descendant(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n    ) -> bool:\n        \"\"\"Returns `True` if there is at least one descendant that satisfies the predicate.\"\"\"\n        return self.first_descendant(predicate, stop_recursing_when) is not None\n\n    def _filter_descendants(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None\n    ) -> Iterator[SpanNode]:\n        stack = list(self.children)\n        while stack:\n            node = stack.pop()\n            if node.matches(predicate):\n                yield node\n            if stop_recursing_when is not None and node.matches(stop_recursing_when):\n                continue\n            stack.extend(node.children)\n\n    # -------------------------------------------------------------------------\n    # Ancestor queries (DFS \"up\" the chain)\n    # -------------------------------------------------------------------------\n    def find_ancestors(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n    ) -> list[SpanNode]:\n        \"\"\"Return all ancestors that satisfy the given predicate.\"\"\"\n        return list(self._filter_ancestors(predicate, stop_recursing_when))\n\n    def first_ancestor(", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-790b668cee409d289e2371718ffedaa1", "__created_at__": 1744231651.420514, "content": ".extend(node.children)\n\n    # -------------------------------------------------------------------------\n    # Ancestor queries (DFS \"up\" the chain)\n    # -------------------------------------------------------------------------\n    def find_ancestors(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n    ) -> list[SpanNode]:\n        \"\"\"Return all ancestors that satisfy the given predicate.\"\"\"\n        return list(self._filter_ancestors(predicate, stop_recursing_when))\n\n    def first_ancestor(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n    ) -> SpanNode | None:\n        \"\"\"Return the closest ancestor that satisfies the given predicate, or `None` if none match.\"\"\"\n        return next(self._filter_ancestors(predicate, stop_recursing_when), None)\n\n    def any_ancestor(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n    ) -> bool:\n        \"\"\"Returns True if any ancestor satisfies the predicate.\"\"\"\n        return self.first_ancestor(predicate, stop_recursing_when) is not None\n\n    def _filter_ancestors(\n        self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None\n    ) -> Iterator[SpanNode]:\n        node = self.parent\n        while node:\n            if node.matches(predicate):\n                yield node\n            if stop_recursing_when is not None and node.matches(stop_recursing_when):\n                break\n            node = node.parent\n\n    # -------------------------------------------------------------------------\n    # Query matching\n    # -------------------------------------------------------------------------\n    def matches(self, query: SpanQuery | SpanPredicate) -> bool:\n        \"\"\"Check if the span node matches the query conditions or predicate.\"\"\"\n        if callable(query):\n            return query(self)\n\n        return self._matches_query(query)\n\n    def _matches_query(self, query: SpanQuery) -> bool:  # noqa C901\n        \"\"\"Check if the span matches the query conditions.\"\"\"\n        # Logical combinations\n        if or_ := query.get('or_'):\n            if len(query) > 1:\n                raise ValueError(\"Cannot combine 'or_' conditions with other conditions at the same level\")\n            return any(self._matches_query(q) for q in or_)\n        if not_ := query.get('not_'):\n            if self._matches_query(not_):\n                return False\n        if and_ := query.get('and_'):\n            results = [self._matches_query(q) for q in and_]\n            if not all(results):\n                return False\n        # At this point, all existing ANDs and no existing ORs have passed, so it comes down to this condition\n\n        # Name conditions\n        if (name_equals := query.get('name_equals')) and self.name != name_equals:\n            return False\n        if (name_contains := query.get('name_contains')) and name_contains not in self.name:\n            return False\n        if (name_matches_regex := query.get('name_matches_regex')) and not re.match(name_matches_regex, self.name):\n            return False\n\n        # Attribute conditions\n        if (has_attributes := query.get('has_attributes')) and not all(\n            self.attributes.get(key) == value for key, value in has_attributes.items()\n        ):\n            return False\n        if (has_attributes_keys := query.get('has_attribute_keys')) and not all(\n            key in self.attributes for key in has_attributes_keys\n        ):\n            return False\n\n        # Timing conditions\n        if (min_duration := query.get('min_duration')) is not None:\n            if not isinstance(min_duration, timedelta):\n                min_duration = timedelta(seconds=min_duration)\n            if self.duration < min_duration:\n                return False\n        if (max_duration := query.get('max_duration')) is not None:\n            if not isinstance(max_duration, timedelta):\n                max_duration = timedelta(seconds=max_duration)\n            if self.duration > max_duration:\n                return False\n\n        # Children conditions\n        if (min_child_count := query.get('min_child_count')) and len(self.children) < min_child_count:\n            return False\n        if (max_child_count := query.get('max_child_count')) and len(self.children) > max_child_count:\n            return False\n        if (some_child_has := query.get('some_child_has')) and not any(\n            child._matches_query(some_child_has) for child in self.children\n        ):\n            return False\n        if (all_children_have := query.get('all_children_have')) and not all(\n            child._matches_query(all_children_have) for child in self.children\n        ):\n            return False\n        if (no_child_has := query.get('no_child_has')) and any(\n            child._matches_query(no_child_has) for child in self.children\n        ):\n            return False\n\n        # Descendant conditions\n        # The following local functions with cache decorators are used to avoid repeatedly evaluating these properties\n        @cache\n        def descendants():\n            return self.descendants\n\n        @cache\n        def pruned_descendants():\n            stop_recursing_when = query.get('stop_recursing_when')\n            return (\n                self._filter_descendants(lambda _: True, stop_recursing_when) if stop_recursing_when else descendants()\n            )\n\n        if (min_descendant_count := query.get('min_descendant_count')) and len(descendants()) < min_descendant_count:\n            return False\n        if (max_descendant_count := query.get('max_descendant_count')) and len(descendants()) > max_descendant_count:\n            return False\n        if (some_descendant_has := query.get('some_descendant_has')) and not any(\n            descendant._matches_query(some_descendant_has) for descendant in pruned_descendants()\n        ):\n            return False\n        if (all_descendants", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f7275e9966aa7c1401bb0a2fb82d3fda", "__created_at__": 1744231651.420514, "content": "endant_count')) and len(descendants()) < min_descendant_count:\n            return False\n        if (max_descendant_count := query.get('max_descendant_count')) and len(descendants()) > max_descendant_count:\n            return False\n        if (some_descendant_has := query.get('some_descendant_has')) and not any(\n            descendant._matches_query(some_descendant_has) for descendant in pruned_descendants()\n        ):\n            return False\n        if (all_descendants_have := query.get('all_descendants_have')) and not all(\n            descendant._matches_query(all_descendants_have) for descendant in pruned_descendants()\n        ):\n            return False\n        if (no_descendant_has := query.get('no_descendant_has')) and any(\n            descendant._matches_query(no_descendant_has) for descendant in pruned_descendants()\n        ):\n            return False\n\n        # Ancestor conditions\n        # The following local functions with cache decorators are used to avoid repeatedly evaluating these properties\n        @cache\n        def ancestors():\n            return self.ancestors\n\n        @cache\n        def pruned_ancestors():\n            stop_recursing_when = query.get('stop_recursing_when')\n            return self._filter_ancestors(lambda _: True, stop_recursing_when) if stop_recursing_when else ancestors()\n\n        if (min_depth := query.get('min_depth')) and len(ancestors()) < min_depth:\n            return False\n        if (max_depth := query.get('max_depth')) and len(ancestors()) > max_depth:\n            return False\n        if (some_ancestor_has := query.get('some_ancestor_has')) and not any(\n            ancestor._matches_query(some_ancestor_has) for ancestor in pruned_ancestors()\n        ):\n            return False\n        if (all_ancestors_have := query.get('all_ancestors_have')) and not all(\n            ancestor._matches_query(all_ancestors_have) for ancestor in pruned_ancestors()\n        ):\n            return False\n        if (no_ancestor_has := query.get('no_ancestor_has')) and any(\n            ancestor._matches_query(no_ancestor_has) for ancestor in pruned_ancestors()\n        ):\n            return False\n\n        return True\n\n    # -------------------------------------------------------------------------\n    # String representation\n    # -------------------------------------------------------------------------\n    def repr_xml(\n        self,\n        include_children: bool = True,\n        include_trace_id: bool = False,\n        include_span_id: bool = False,\n        include_start_timestamp: bool = False,\n        include_duration: bool = False,\n    ) -> str:\n        \"\"\"Return an XML-like string representation of the node.\n\n        Optionally includes children, trace_id, span_id, start_timestamp, and duration.\n        \"\"\"\n        first_line_parts = [f'')\n            for child in self.children:\n                extra_lines.append(\n                    indent(\n                        child.repr_xml(\n                            include_children=include_children,\n                            include_trace_id=include_trace_id,\n                            include_span_id=include_span_id,\n                            include_start_timestamp=include_start_timestamp,\n                            include_duration=include_duration,\n                        ),\n                        '  ',\n                    )\n                )\n            extra_lines.append('')\n        else:\n            if self.children:\n                first_line_parts.append('children=...')\n            first_line_parts.append('/>')\n        return '\\n'.join([' '.join(first_line_parts), *extra_lines])\n\n    def __str__(self) -> str:\n        if self.children:\n            return f\"...\"\n        else:\n            return f\"\"\n\n    def __repr__(self) -> str:\n        return self.repr_xml()\n\n```\n\n\n#### duration `property`\n\n```\nduration: timedelta\n\n```\n\nReturn the span's duration as a timedelta, or None if start/end not set.\n\n\n\n#### descendants `property`\n\n```\ndescendants: list[SpanNode]\n\n```\n\nReturn all descendants of this node in DFS order.\n\n\n\n#### ancestors `property`\n\n```\nancestors: list[SpanNode]\n\n```\n\nReturn all ancestors of this node.\n\n\n\n#### add\\_child\n\n```\nadd_child(child: SpanNode) -> None\n\n```\n\nAttach a child node to this node's list of children.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef add_child(self, child: SpanNode) -> None:\n    \"\"\"Attach a child node to this node's list of children.\"\"\"\n    assert child.trace_id == self.trace_id, f\"traces don't match: {child.trace_id:032x} != {self.trace_id:032x}\"\n    assert child.parent_span_id == self.span_id, (\n        f'parent span mismatch: {child.parent_span_id:016x} != {self.span_id:016x}'\n    )\n    self.children_by_id[child.node_key] = child\n    child.parent = self\n\n```\n\n\n\n\n#### find\\_children\n\n```\nfind_children(\n    predicate: SpanQuery | SpanPredicate,\n) -> list[SpanNode]\n\n```\n\nReturn all immediate children that satisfy the given predicate.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef find_children(self, predicate: SpanQuery | SpanPredicate) -> list[SpanNode]:\n    \"\"\"Return all immediate children that satisfy the given predicate.\"\"\"\n    return list(self._filter_children(predicate))\n\n```\n\n\n\n\n#### first\\_child\n\n```\nfirst_child(\n    predicate: SpanQuery | SpanPredicate,\n) -> SpanNode | None\n\n```\n\nReturn the first immediate child that satisfies the given predicate, or None if none match.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef first_child(self, predicate: SpanQuery | SpanPredicate) -> SpanNode | None:\n    \"\"\"Return the first immediate child that satisfies the given predicate, or", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-48b44901b89a7237e9bbe8f5c3d40d5a", "__created_at__": 1744231651.420514, "content": "first\\_child\n\n```\nfirst_child(\n    predicate: SpanQuery | SpanPredicate,\n) -> SpanNode | None\n\n```\n\nReturn the first immediate child that satisfies the given predicate, or None if none match.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef first_child(self, predicate: SpanQuery | SpanPredicate) -> SpanNode | None:\n    \"\"\"Return the first immediate child that satisfies the given predicate, or None if none match.\"\"\"\n    return next(self._filter_children(predicate), None)\n\n```\n\n\n\n\n#### any\\_child\n\n```\nany_child(predicate: SpanQuery | SpanPredicate) -> bool\n\n```\n\nReturns True if there is at least one child that satisfies the predicate.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef any_child(self, predicate: SpanQuery | SpanPredicate) -> bool:\n    \"\"\"Returns True if there is at least one child that satisfies the predicate.\"\"\"\n    return self.first_child(predicate) is not None\n\n```\n\n\n\n\n#### find\\_descendants\n\n```\nfind_descendants(\n    predicate: SpanQuery | SpanPredicate,\n    stop_recursing_when: (\n        SpanQuery | SpanPredicate | None\n    ) = None,\n) -> list[SpanNode]\n\n```\n\nReturn all descendant nodes that satisfy the given predicate in DFS order.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef find_descendants(\n    self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n) -> list[SpanNode]:\n    \"\"\"Return all descendant nodes that satisfy the given predicate in DFS order.\"\"\"\n    return list(self._filter_descendants(predicate, stop_recursing_when))\n\n```\n\n\n\n\n#### first\\_descendant\n\n```\nfirst_descendant(\n    predicate: SpanQuery | SpanPredicate,\n    stop_recursing_when: (\n        SpanQuery | SpanPredicate | None\n    ) = None,\n) -> SpanNode | None\n\n```\n\nDFS: Return the first descendant (in DFS order) that satisfies the given predicate, or `None` if none match.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef first_descendant(\n    self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n) -> SpanNode | None:\n    \"\"\"DFS: Return the first descendant (in DFS order) that satisfies the given predicate, or `None` if none match.\"\"\"\n    return next(self._filter_descendants(predicate, stop_recursing_when), None)\n\n```\n\n\n\n\n#### any\\_descendant\n\n```\nany_descendant(\n    predicate: SpanQuery | SpanPredicate,\n    stop_recursing_when: (\n        SpanQuery | SpanPredicate | None\n    ) = None,\n) -> bool\n\n```\n\nReturns `True` if there is at least one descendant that satisfies the predicate.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef any_descendant(\n    self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n) -> bool:\n    \"\"\"Returns `True` if there is at least one descendant that satisfies the predicate.\"\"\"\n    return self.first_descendant(predicate, stop_recursing_when) is not None\n\n```\n\n\n\n\n#### find\\_ancestors\n\n```\nfind_ancestors(\n    predicate: SpanQuery | SpanPredicate,\n    stop_recursing_when: (\n        SpanQuery | SpanPredicate | None\n    ) = None,\n) -> list[SpanNode]\n\n```\n\nReturn all ancestors that satisfy the given predicate.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef find_ancestors(\n    self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n) -> list[SpanNode]:\n    \"\"\"Return all ancestors that satisfy the given predicate.\"\"\"\n    return list(self._filter_ancestors(predicate, stop_recursing_when))\n\n```\n\n\n\n\n#### first\\_ancestor\n\n```\nfirst_ancestor(\n    predicate: SpanQuery | SpanPredicate,\n    stop_recursing_when: (\n        SpanQuery | SpanPredicate | None\n    ) = None,\n) -> SpanNode | None\n\n```\n\nReturn the closest ancestor that satisfies the given predicate, or `None` if none match.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef first_ancestor(\n    self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n) -> SpanNode | None:\n    \"\"\"Return the closest ancestor that satisfies the given predicate, or `None` if none match.\"\"\"\n    return next(self._filter_ancestors(predicate, stop_recursing_when), None)\n\n```\n\n\n\n\n#### any\\_ancestor\n\n```\nany_ancestor(\n    predicate: SpanQuery | SpanPredicate,\n    stop_recursing_when: (\n        SpanQuery | SpanPredicate | None\n    ) = None,\n) -> bool\n\n```\n\nReturns True if any ancestor satisfies the predicate.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef any_ancestor(\n    self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n) -> bool:\n    \"\"\"Returns True if any ancestor satisfies the predicate.\"\"\"\n    return self.first_ancestor(predicate, stop_recursing_when) is not None\n\n```\n\n\n\n\n#### matches\n\n```\nmatches(query: SpanQuery | SpanPredicate)", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-0d258f09bea208a8ab728ad08c68706f", "__created_at__": 1744231651.420514, "content": "code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef any_ancestor(\n    self, predicate: SpanQuery | SpanPredicate, stop_recursing_when: SpanQuery | SpanPredicate | None = None\n) -> bool:\n    \"\"\"Returns True if any ancestor satisfies the predicate.\"\"\"\n    return self.first_ancestor(predicate, stop_recursing_when) is not None\n\n```\n\n\n\n\n#### matches\n\n```\nmatches(query: SpanQuery | SpanPredicate) -> bool\n\n```\n\nCheck if the span node matches the query conditions or predicate.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef matches(self, query: SpanQuery | SpanPredicate) -> bool:\n    \"\"\"Check if the span node matches the query conditions or predicate.\"\"\"\n    if callable(query):\n        return query(self)\n\n    return self._matches_query(query)\n\n```\n\n\n\n\n#### repr\\_xml\n\n```\nrepr_xml(\n    include_children: bool = True,\n    include_trace_id: bool = False,\n    include_span_id: bool = False,\n    include_start_timestamp: bool = False,\n    include_duration: bool = False,\n) -> str\n\n```\n\nReturn an XML-like string representation of the node.\n\nOptionally includes children, trace\\_id, span\\_id, start\\_timestamp, and duration.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef repr_xml(\n    self,\n    include_children: bool = True,\n    include_trace_id: bool = False,\n    include_span_id: bool = False,\n    include_start_timestamp: bool = False,\n    include_duration: bool = False,\n) -> str:\n    \"\"\"Return an XML-like string representation of the node.\n\n    Optionally includes children, trace_id, span_id, start_timestamp, and duration.\n    \"\"\"\n    first_line_parts = [f'')\n        for child in self.children:\n            extra_lines.append(\n                indent(\n                    child.repr_xml(\n                        include_children=include_children,\n                        include_trace_id=include_trace_id,\n                        include_span_id=include_span_id,\n                        include_start_timestamp=include_start_timestamp,\n                        include_duration=include_duration,\n                    ),\n                    '  ',\n                )\n            )\n        extra_lines.append('')\n    else:\n        if self.children:\n            first_line_parts.append('children=...')\n        first_line_parts.append('/>')\n    return '\\n'.join([' '.join(first_line_parts), *extra_lines])\n\n```\n\n\n\n\n\n\n\n### SpanQuery\n\nBases: `TypedDict`\n\nA serializable query for filtering SpanNodes based on various conditions.\n\nAll fields are optional and combined with AND logic by default.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\nclass SpanQuery(TypedDict, total=False):\n    \"\"\"A serializable query for filtering SpanNodes based on various conditions.\n\n    All fields are optional and combined with AND logic by default.\n    \"\"\"\n\n    # These fields are ordered to match the implementation of SpanNode.matches_query for easy review.\n    # * Individual span conditions come first because these are generally the cheapest to evaluate\n    # * Logical combinations come next because they may just be combinations of individual span conditions\n    # * Related-span conditions come last because they may require the most work to evaluate\n\n    # Individual span conditions\n    ## Name conditions\n    name_equals: str\n    name_contains: str\n    name_matches_regex: str  # regex pattern\n\n    ## Attribute conditions\n    has_attributes: dict[str, Any]\n    has_attribute_keys: list[str]\n\n    ## Timing conditions\n    min_duration: timedelta | float\n    max_duration: timedelta | float\n\n    # Logical combinations of conditions\n    not_: SpanQuery\n    and_: list[SpanQuery]\n    or_: list[SpanQuery]\n\n    # Child conditions\n    min_child_count: int\n    max_child_count: int\n    some_child_has: SpanQuery\n    all_children_have: SpanQuery\n    no_child_has: SpanQuery\n\n    # Recursive conditions\n    stop_recursing_when: SpanQuery\n    \"\"\"If present, stop recursing through ancestors or descendants at nodes that match this condition.\"\"\"\n\n    ## Descendant conditions\n    min_descendant_count: int\n    max_descendant_count: int\n    some_descendant_has: SpanQuery\n    all_descendants_have: SpanQuery\n    no_descendant_has: SpanQuery\n\n    ## Ancestor conditions\n    min_depth: int  # depth is equivalent to ancestor count; roots have depth 0\n    max_depth: int\n    some_ancestor_has: SpanQuery\n    all_ancestors_have: SpanQuery\n    no_ancestor_has: SpanQuery\n\n```\n\n\n#### stop\\_recursing\\_when `instance-attribute`\n\n```\nstop_recursing_when: SpanQuery\n\n```\n\nIf present, stop recursing through ancestors or descendants at nodes that match this condition.\n\n\n\n\n\n\n### SpanTree `dataclass`\n\nA container that builds a hierarchy of SpanNode objects from a list of finished spans.\n\nYou can then search or iterate the tree to make your assertions (using DFS for traversal).\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\n@dataclass(repr=False)\nclass SpanTree:\n    \"\"\"A container that builds a hierarchy of SpanNode objects from a list of finished spans.\n\n    You can then search or iterate the tree to make your assertions (using DFS for traversal).\n    \"\"\"\n\n    roots: list[SpanNode] = field(default_factory=list)\n    nodes_by_id: dict[str, SpanNode] = field(default_factory=dict)\n\n    # -------------------------------------------------------------------------\n    # Construction\n    # -------------------------------------------------------------------------\n    def __post_init__(self):\n        self._rebuild_tree()\n\n    def add_sp", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-d3dca449323eaaba6c6952db29fc9336", "__created_at__": 1744231651.420514, "content": "A container that builds a hierarchy of SpanNode objects from a list of finished spans.\n\n    You can then search or iterate the tree to make your assertions (using DFS for traversal).\n    \"\"\"\n\n    roots: list[SpanNode] = field(default_factory=list)\n    nodes_by_id: dict[str, SpanNode] = field(default_factory=dict)\n\n    # -------------------------------------------------------------------------\n    # Construction\n    # -------------------------------------------------------------------------\n    def __post_init__(self):\n        self._rebuild_tree()\n\n    def add_spans(self, spans: list[SpanNode]) -> None:\n        \"\"\"Add a list of spans to the tree, rebuilding the tree structure.\"\"\"\n        for span in spans:\n            self.nodes_by_id[span.node_key] = span\n        self._rebuild_tree()\n\n    def add_readable_spans(self, readable_spans: list[ReadableSpan]):\n        self.add_spans([SpanNode.from_readable_span(span) for span in readable_spans])\n\n    def _rebuild_tree(self):\n        # Ensure spans are ordered by start_timestamp so that roots and children end up in the right order\n        nodes = list(self.nodes_by_id.values())\n        nodes.sort(key=lambda node: node.start_timestamp or datetime.min)\n        self.nodes_by_id = {node.node_key: node for node in nodes}\n\n        # Build the parent/child relationships\n        for node in self.nodes_by_id.values():\n            parent_node_key = node.parent_node_key\n            if parent_node_key is not None:\n                parent_node = self.nodes_by_id.get(parent_node_key)\n                if parent_node is not None:\n                    parent_node.add_child(node)\n\n        # Determine the roots\n        # A node is a \"root\" if its parent is None or if its parent's span_id is not in the current set of spans.\n        self.roots = []\n        for node in self.nodes_by_id.values():\n            parent_node_key = node.parent_node_key\n            if parent_node_key is None or parent_node_key not in self.nodes_by_id:\n                self.roots.append(node)\n\n    # -------------------------------------------------------------------------\n    # Node filtering and iteration\n    # -------------------------------------------------------------------------\n    def find(self, predicate: SpanQuery | SpanPredicate) -> list[SpanNode]:\n        \"\"\"Find all nodes in the entire tree that match the predicate, scanning from each root in DFS order.\"\"\"\n        return list(self._filter(predicate))\n\n    def first(self, predicate: SpanQuery | SpanPredicate) -> SpanNode | None:\n        \"\"\"Find the first node that matches a predicate, scanning from each root in DFS order. Returns `None` if not found.\"\"\"\n        return next(self._filter(predicate), None)\n\n    def any(self, predicate: SpanQuery | SpanPredicate) -> bool:\n        \"\"\"Returns True if any node in the tree matches the predicate.\"\"\"\n        return self.first(predicate) is not None\n\n    def _filter(self, predicate: SpanQuery | SpanPredicate) -> Iterator[SpanNode]:\n        for node in self:\n            if node.matches(predicate):\n                yield node\n\n    def __iter__(self) -> Iterator[SpanNode]:\n        \"\"\"Return an iterator over all nodes in the tree.\"\"\"\n        return iter(self.nodes_by_id.values())\n\n    # -------------------------------------------------------------------------\n    # String representation\n    # -------------------------------------------------------------------------\n    def repr_xml(\n        self,\n        include_children: bool = True,\n        include_trace_id: bool = False,\n        include_span_id: bool = False,\n        include_start_timestamp: bool = False,\n        include_duration: bool = False,\n    ) -> str:\n        \"\"\"Return an XML-like string representation of the tree, optionally including children, trace_id, span_id, duration, and timestamps.\"\"\"\n        if not self.roots:\n            return ''\n        repr_parts = [\n            '',\n            *[\n                indent(\n                    root.repr_xml(\n                        include_children=include_children,\n                        include_trace_id=include_trace_id,\n                        include_span_id=include_span_id,\n                        include_start_timestamp=include_start_timestamp,\n                        include_duration=include_duration,\n                    ),\n                    '  ',\n                )\n                for root in self.roots\n            ],\n            '',\n        ]\n        return '\\n'.join(repr_parts)\n\n    def __str__(self):\n        return f''\n\n    def __repr__(self):\n        return self.repr_xml()\n\n```\n\n\n#### add\\_spans\n\n```\nadd_spans(spans: list[SpanNode]) -> None\n\n```\n\nAdd a list of spans to the tree, rebuilding the tree structure.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef add_spans(self, spans: list[SpanNode]) -> None:\n    \"\"\"Add a list of spans to the tree, rebuilding the tree structure.\"\"\"\n    for span in spans:\n        self.nodes_by_id[span.node_key] = span\n    self._rebuild_tree()\n\n```\n\n\n\n\n#### find\n\n```\nfind(\n    predicate: SpanQuery | SpanPredicate,\n) -> list[SpanNode]\n\n```\n\nFind all nodes in the entire tree that match the predicate, scanning from each root in DFS order.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef find(self, predicate: SpanQuery | SpanPredicate) -> list[SpanNode]:\n    \"\"\"Find all nodes in the entire tree that match the predicate, scanning from each root in DFS order.\"\"\"\n    return list(self._filter(predicate))\n\n```\n\n\n\n\n#### first\n\n```\nfirst(\n    predicate: SpanQuery | SpanPredicate,\n) -> SpanNode | None\n\n```\n\nFind the first node that matches a predicate, scanning from each root in DFS order. Returns `None` if not found.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef first(self, predicate: SpanQuery | SpanPredicate) -> SpanNode | None:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-0ed253c93af9342b80542639b0092b30", "__created_at__": 1744231651.420514, "content": "return list(self._filter(predicate))\n\n```\n\n\n\n\n#### first\n\n```\nfirst(\n    predicate: SpanQuery | SpanPredicate,\n) -> SpanNode | None\n\n```\n\nFind the first node that matches a predicate, scanning from each root in DFS order. Returns `None` if not found.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef first(self, predicate: SpanQuery | SpanPredicate) -> SpanNode | None:\n    \"\"\"Find the first node that matches a predicate, scanning from each root in DFS order. Returns `None` if not found.\"\"\"\n    return next(self._filter(predicate), None)\n\n```\n\n\n\n\n#### any\n\n```\nany(predicate: SpanQuery | SpanPredicate) -> bool\n\n```\n\nReturns True if any node in the tree matches the predicate.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef any(self, predicate: SpanQuery | SpanPredicate) -> bool:\n    \"\"\"Returns True if any node in the tree matches the predicate.\"\"\"\n    return self.first(predicate) is not None\n\n```\n\n\n\n\n#### \\_\\_iter\\_\\_\n\n```\n__iter__() -> Iterator[SpanNode]\n\n```\n\nReturn an iterator over all nodes in the tree.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef __iter__(self) -> Iterator[SpanNode]:\n    \"\"\"Return an iterator over all nodes in the tree.\"\"\"\n    return iter(self.nodes_by_id.values())\n\n```\n\n\n\n\n#### repr\\_xml\n\n```\nrepr_xml(\n    include_children: bool = True,\n    include_trace_id: bool = False,\n    include_span_id: bool = False,\n    include_start_timestamp: bool = False,\n    include_duration: bool = False,\n) -> str\n\n```\n\nReturn an XML-like string representation of the tree, optionally including children, trace\\_id, span\\_id, duration, and timestamps.\n\nSource code in `pydantic_evals/pydantic_evals/otel/span_tree.py`\n```\ndef repr_xml(\n    self,\n    include_children: bool = True,\n    include_trace_id: bool = False,\n    include_span_id: bool = False,\n    include_start_timestamp: bool = False,\n    include_duration: bool = False,\n) -> str:\n    \"\"\"Return an XML-like string representation of the tree, optionally including children, trace_id, span_id, duration, and timestamps.\"\"\"\n    if not self.roots:\n        return ''\n    repr_parts = [\n        '',\n        *[\n            indent(\n                root.repr_xml(\n                    include_children=include_children,\n                    include_trace_id=include_trace_id,\n                    include_span_id=include_span_id,\n                    include_start_timestamp=include_start_timestamp,\n                    include_duration=include_duration,\n                ),\n                '  ',\n            )\n            for root in self.roots\n        ],\n        '',\n    ]\n    return '\\n'.join(repr_parts)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n`pydantic_evals.reporting`\n==========================\n\n### ReportCase\n\nBases: `BaseModel`\n\nA single case in an evaluation report.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\nclass ReportCase(BaseModel):\n    \"\"\"A single case in an evaluation report.\"\"\"\n\n    name: str\n    \"\"\"The name of the [case][pydantic_evals.Case].\"\"\"\n    inputs: Any\n    \"\"\"The inputs to the task, from [`Case.inputs`][pydantic_evals.Case.inputs].\"\"\"\n    metadata: Any\n    \"\"\"Any metadata associated with the case, from [`Case.metadata`][pydantic_evals.Case.metadata].\"\"\"\n    expected_output: Any\n    \"\"\"The expected output of the task, from [`Case.expected_output`][pydantic_evals.Case.expected_output].\"\"\"\n    output: Any\n    \"\"\"The output of the task execution.\"\"\"\n\n    metrics: dict[str, float | int]\n    attributes: dict[str, Any]\n\n    scores: dict[str, EvaluationResult[int | float]] = field(init=False)\n    labels: dict[str, EvaluationResult[str]] = field(init=False)\n    assertions: dict[str, EvaluationResult[bool]] = field(init=False)\n\n    task_duration: float\n    total_duration: float  # includes evaluator execution time\n\n    # TODO(DavidM): Drop these once we can reference child spans in details panel:\n    trace_id: str\n    span_id: str\n\n```\n\n\n#### name `instance-attribute`\n\n```\nname: str\n\n```\n\nThe name of the case.\n\n\n\n#### inputs `instance-attribute`\n\n```\ninputs: Any\n\n```\n\nThe inputs to the task, from `Case.inputs`.\n\n\n\n#### metadata `instance-attribute`\n\n```\nmetadata: Any\n\n```\n\nAny metadata associated with the case, from `Case.metadata`.\n\n\n\n#### expected\\_output `instance-attribute`\n\n```\nexpected_output: Any\n\n```\n\nThe expected output of the task, from `Case.expected_output`.\n\n\n\n#### output `instance-attribute`\n\n```\noutput: Any\n\n```\n\nThe output of the task execution.\n\n\n\n\n\n\n### ReportCaseAggregate\n\nBases: `BaseModel`\n\nA synthetic case that summarizes a set of cases.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\nclass ReportCaseAggregate(BaseModel):\n    \"\"\"A synthetic case that summarizes a set of cases.\"\"\"\n\n    name: str\n\n    scores: dict[str, float | int]\n    labels: dict[str, dict[str, float]]\n    metrics: dict[str, float | int]\n    assertions: float | None\n    task_duration: float\n    total_duration: float\n\n    @staticmethod\n    def average(cases: list[ReportCase]) -> Report", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ef4c7193cda16c30962e01194bc308c7", "__created_at__": 1744231651.420514, "content": "/reporting/__init__.py`\n```\nclass ReportCaseAggregate(BaseModel):\n    \"\"\"A synthetic case that summarizes a set of cases.\"\"\"\n\n    name: str\n\n    scores: dict[str, float | int]\n    labels: dict[str, dict[str, float]]\n    metrics: dict[str, float | int]\n    assertions: float | None\n    task_duration: float\n    total_duration: float\n\n    @staticmethod\n    def average(cases: list[ReportCase]) -> ReportCaseAggregate:\n        \"\"\"Produce a synthetic \"summary\" case by averaging quantitative attributes.\"\"\"\n        num_cases = len(cases)\n        if num_cases == 0:\n            return ReportCaseAggregate(\n                name='Averages',\n                scores={},\n                labels={},\n                metrics={},\n                assertions=None,\n                task_duration=0.0,\n                total_duration=0.0,\n            )\n\n        def _scores_averages(scores_by_name: list[dict[str, int | float | bool]]) -> dict[str, float]:\n            counts_by_name: dict[str, int] = defaultdict(int)\n            sums_by_name: dict[str, float] = defaultdict(float)\n            for sbn in scores_by_name:\n                for name, score in sbn.items():\n                    counts_by_name[name] += 1\n                    sums_by_name[name] += score\n            return {name: sums_by_name[name] / counts_by_name[name] for name in sums_by_name}\n\n        def _labels_averages(labels_by_name: list[dict[str, str]]) -> dict[str, dict[str, float]]:\n            counts_by_name: dict[str, int] = defaultdict(int)\n            sums_by_name: dict[str, dict[str, float]] = defaultdict(lambda: defaultdict(float))\n            for lbn in labels_by_name:\n                for name, label in lbn.items():\n                    counts_by_name[name] += 1\n                    sums_by_name[name][label] += 1\n            return {\n                name: {value: count / counts_by_name[name] for value, count in sums_by_name[name].items()}\n                for name in sums_by_name\n            }\n\n        average_task_duration = sum(case.task_duration for case in cases) / num_cases\n        average_total_duration = sum(case.total_duration for case in cases) / num_cases\n\n        # average_assertions: dict[str, float] = _scores_averages([{k: v.value for k, v in case.scores.items()} for case in cases])\n        average_scores: dict[str, float] = _scores_averages(\n            [{k: v.value for k, v in case.scores.items()} for case in cases]\n        )\n        average_labels: dict[str, dict[str, float]] = _labels_averages(\n            [{k: v.value for k, v in case.labels.items()} for case in cases]\n        )\n        average_metrics: dict[str, float] = _scores_averages([case.metrics for case in cases])\n\n        average_assertions: float | None = None\n        n_assertions = sum(len(case.assertions) for case in cases)\n        if n_assertions > 0:\n            n_passing = sum(1 for case in cases for assertion in case.assertions.values() if assertion.value)\n            average_assertions = n_passing / n_assertions\n\n        return ReportCaseAggregate(\n            name='Averages',\n            scores=average_scores,\n            labels=average_labels,\n            metrics=average_metrics,\n            assertions=average_assertions,\n            task_duration=average_task_duration,\n            total_duration=average_total_duration,\n        )\n\n```\n\n\n#### average `staticmethod`\n\n```\naverage(cases: list[ReportCase]) -> ReportCaseAggregate\n\n```\n\nProduce a synthetic \"summary\" case by averaging quantitative attributes.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\n@staticmethod\ndef average(cases: list[ReportCase]) -> ReportCaseAggregate:\n    \"\"\"Produce a synthetic \"summary\" case by averaging quantitative attributes.\"\"\"\n    num_cases = len(cases)\n    if num_cases == 0:\n        return ReportCaseAggregate(\n            name='Averages',\n            scores={},\n            labels={},\n            metrics={},\n            assertions=None,\n            task_duration=0.0,\n            total_duration=0.0,\n        )\n\n    def _scores_averages(scores_by_name: list[dict[str, int | float | bool]]) -> dict[str, float]:\n        counts_by_name: dict[str, int] = defaultdict(int)\n        sums_by_name: dict[str, float] = defaultdict(float)\n        for sbn in scores_by_name:\n            for name, score in sbn.items():\n                counts_by_name[name] += 1\n                sums_by_name[name] += score\n        return {name: sums_by_name[name] / counts_by_name[name] for name in sums_by_name}\n\n    def _labels_averages(labels_by_name: list[dict[str, str]]) -> dict[str, dict[str, float]]:\n        counts_by_name: dict[str, int] = defaultdict(int)\n        sums_by_name: dict[str, dict[str, float]] = defaultdict(lambda: defaultdict(float))\n        for lbn in labels_by_name:\n            for name, label in lbn.items():\n                counts_by_name[name] += 1\n                sums_by_name[name][label] += 1\n        return {\n            name: {value: count / counts_by_name[name] for value, count in sums_by_name[name].items()}\n            for name in sums_by_name\n        }\n\n    average_task_duration = sum(case.task_duration for case in cases) / num_cases\n    average_total_duration = sum(case.total_duration for case in cases) / num_cases\n\n    # average_assertions: dict[str, float] = _", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-5fba341bc749309a69f25c6f2f47a284", "__created_at__": 1744231651.420514, "content": "sums_by_name[name][label] += 1\n        return {\n            name: {value: count / counts_by_name[name] for value, count in sums_by_name[name].items()}\n            for name in sums_by_name\n        }\n\n    average_task_duration = sum(case.task_duration for case in cases) / num_cases\n    average_total_duration = sum(case.total_duration for case in cases) / num_cases\n\n    # average_assertions: dict[str, float] = _scores_averages([{k: v.value for k, v in case.scores.items()} for case in cases])\n    average_scores: dict[str, float] = _scores_averages(\n        [{k: v.value for k, v in case.scores.items()} for case in cases]\n    )\n    average_labels: dict[str, dict[str, float]] = _labels_averages(\n        [{k: v.value for k, v in case.labels.items()} for case in cases]\n    )\n    average_metrics: dict[str, float] = _scores_averages([case.metrics for case in cases])\n\n    average_assertions: float | None = None\n    n_assertions = sum(len(case.assertions) for case in cases)\n    if n_assertions > 0:\n        n_passing = sum(1 for case in cases for assertion in case.assertions.values() if assertion.value)\n        average_assertions = n_passing / n_assertions\n\n    return ReportCaseAggregate(\n        name='Averages',\n        scores=average_scores,\n        labels=average_labels,\n        metrics=average_metrics,\n        assertions=average_assertions,\n        task_duration=average_task_duration,\n        total_duration=average_total_duration,\n    )\n\n```\n\n\n\n\n\n\n\n### EvaluationReport\n\nBases: `BaseModel`\n\nA report of the results of evaluating a model on a set of cases.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\nclass EvaluationReport(BaseModel):\n    \"\"\"A report of the results of evaluating a model on a set of cases.\"\"\"\n\n    name: str\n    \"\"\"The name of the report.\"\"\"\n    cases: list[ReportCase]\n    \"\"\"The cases in the report.\"\"\"\n\n    def averages(self) -> ReportCaseAggregate:\n        return ReportCaseAggregate.average(self.cases)\n\n    def print(\n        self,\n        width: int | None = None,\n        baseline: EvaluationReport | None = None,\n        include_input: bool = False,\n        include_metadata: bool = False,\n        include_expected_output: bool = False,\n        include_output: bool = False,\n        include_durations: bool = True,\n        include_total_duration: bool = False,\n        include_removed_cases: bool = False,\n        include_averages: bool = True,\n        input_config: RenderValueConfig | None = None,\n        metadata_config: RenderValueConfig | None = None,\n        output_config: RenderValueConfig | None = None,\n        score_configs: dict[str, RenderNumberConfig] | None = None,\n        label_configs: dict[str, RenderValueConfig] | None = None,\n        metric_configs: dict[str, RenderNumberConfig] | None = None,\n        duration_config: RenderNumberConfig | None = None,\n    ):  # pragma: no cover\n        \"\"\"Print this report to the console, optionally comparing it to a baseline report.\n\n        If you want more control over the output, use `console_table` instead and pass it to `rich.Console.print`.\n        \"\"\"\n        table = self.console_table(\n            baseline=baseline,\n            include_input=include_input,\n            include_metadata=include_metadata,\n            include_expected_output=include_expected_output,\n            include_output=include_output,\n            include_durations=include_durations,\n            include_total_duration=include_total_duration,\n            include_removed_cases=include_removed_cases,\n            include_averages=include_averages,\n            input_config=input_config,\n            metadata_config=metadata_config,\n            output_config=output_config,\n            score_configs=score_configs,\n            label_configs=label_configs,\n            metric_configs=metric_configs,\n            duration_config=duration_config,\n        )\n        Console(width=width).print(table)\n\n    def console_table(\n        self,\n        baseline: EvaluationReport | None = None,\n        include_input: bool = False,\n        include_metadata: bool = False,\n        include_expected_output: bool = False,\n        include_output: bool = False,\n        include_durations: bool = True,\n        include_total_duration: bool = False,\n        include_removed_cases: bool = False,\n        include_averages: bool = True,\n        input_config: RenderValueConfig | None = None,\n        metadata_config: RenderValueConfig | None = None,\n        output_config: RenderValueConfig | None = None,\n        score_configs: dict[str, RenderNumberConfig] | None = None,\n        label_configs: dict[str, RenderValueConfig] | None = None,\n        metric_configs: dict[str, RenderNumberConfig] | None = None,\n        duration_config: RenderNumberConfig | None = None,\n    ) -> Table:\n        \"\"\"Return a table containing the data from this report, or the diff between this report and a baseline report.\n\n        Optionally include input and output details.\n        \"\"\"\n        renderer = EvaluationRenderer(\n            include_input=include_input,\n            include_metadata=include_metadata,\n            include_expected_output=include_expected_output,\n            include_output=include_output,\n            include_durations=include_durations,\n            include_total_duration=include_total_duration,\n            include_removed_cases=include_removed_cases,\n            include_averages=include_averages,\n            input_config={**_DEFAULT_VALUE_CONFIG, **(input_config or {})},\n            metadata_config={**_DEFAULT_VALUE_CONFIG, **(metadata_config or {})},\n            output_config=output_config or _", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-bcd914e11b03ba538ea23f2601432f3d", "__created_at__": 1744231651.420514, "content": "=include_metadata,\n            include_expected_output=include_expected_output,\n            include_output=include_output,\n            include_durations=include_durations,\n            include_total_duration=include_total_duration,\n            include_removed_cases=include_removed_cases,\n            include_averages=include_averages,\n            input_config={**_DEFAULT_VALUE_CONFIG, **(input_config or {})},\n            metadata_config={**_DEFAULT_VALUE_CONFIG, **(metadata_config or {})},\n            output_config=output_config or _DEFAULT_VALUE_CONFIG,\n            score_configs=score_configs or {},\n            label_configs=label_configs or {},\n            metric_configs=metric_configs or {},\n            duration_config=duration_config or _DEFAULT_DURATION_CONFIG,\n        )\n        if baseline is None:\n            return renderer.build_table(self)\n        else:  # pragma: no cover\n            return renderer.build_diff_table(self, baseline)\n\n    def __str__(self) -> str:\n        \"\"\"Return a string representation of the report.\"\"\"\n        table = self.console_table()\n        io_file = StringIO()\n        Console(file=io_file).print(table)\n        return io_file.getvalue()\n\n```\n\n\n#### name `instance-attribute`\n\n```\nname: str\n\n```\n\nThe name of the report.\n\n\n\n#### cases `instance-attribute`\n\n```\ncases: list[ReportCase]\n\n```\n\nThe cases in the report.\n\n\n\n#### print\n\n```\nprint(\n    width: int | None = None,\n    baseline: EvaluationReport | None = None,\n    include_input: bool = False,\n    include_metadata: bool = False,\n    include_expected_output: bool = False,\n    include_output: bool = False,\n    include_durations: bool = True,\n    include_total_duration: bool = False,\n    include_removed_cases: bool = False,\n    include_averages: bool = True,\n    input_config: RenderValueConfig | None = None,\n    metadata_config: RenderValueConfig | None = None,\n    output_config: RenderValueConfig | None = None,\n    score_configs: (\n        dict[str, RenderNumberConfig] | None\n    ) = None,\n    label_configs: (\n        dict[str, RenderValueConfig] | None\n    ) = None,\n    metric_configs: (\n        dict[str, RenderNumberConfig] | None\n    ) = None,\n    duration_config: RenderNumberConfig | None = None,\n)\n\n```\n\nPrint this report to the console, optionally comparing it to a baseline report.\n\nIf you want more control over the output, use `console_table` instead and pass it to `rich.Console.print`.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\ndef print(\n    self,\n    width: int | None = None,\n    baseline: EvaluationReport | None = None,\n    include_input: bool = False,\n    include_metadata: bool = False,\n    include_expected_output: bool = False,\n    include_output: bool = False,\n    include_durations: bool = True,\n    include_total_duration: bool = False,\n    include_removed_cases: bool = False,\n    include_averages: bool = True,\n    input_config: RenderValueConfig | None = None,\n    metadata_config: RenderValueConfig | None = None,\n    output_config: RenderValueConfig | None = None,\n    score_configs: dict[str, RenderNumberConfig] | None = None,\n    label_configs: dict[str, RenderValueConfig] | None = None,\n    metric_configs: dict[str, RenderNumberConfig] | None = None,\n    duration_config: RenderNumberConfig | None = None,\n):  # pragma: no cover\n    \"\"\"Print this report to the console, optionally comparing it to a baseline report.\n\n    If you want more control over the output, use `console_table` instead and pass it to `rich.Console.print`.\n    \"\"\"\n    table = self.console_table(\n        baseline=baseline,\n        include_input=include_input,\n        include_metadata=include_metadata,\n        include_expected_output=include_expected_output,\n        include_output=include_output,\n        include_durations=include_durations,\n        include_total_duration=include_total_duration,\n        include_removed_cases=include_removed_cases,\n        include_averages=include_averages,\n        input_config=input_config,\n        metadata_config=metadata_config,\n        output_config=output_config,\n        score_configs=score_configs,\n        label_configs=label_configs,\n        metric_configs=metric_configs,\n        duration_config=duration_config,\n    )\n    Console(width=width).print(table)\n\n```\n\n\n\n\n#### console\\_table\n\n```\nconsole_table(\n    baseline: EvaluationReport | None = None,\n    include_input: bool = False,\n    include_metadata: bool = False,\n    include_expected_output: bool = False,\n    include_output: bool = False,\n    include_durations: bool = True,\n    include_total_duration: bool = False,\n    include_removed_cases: bool = False,\n    include_averages: bool = True,\n    input_config: RenderValueConfig | None = None,\n    metadata_config: RenderValueConfig | None = None,\n    output_config: RenderValueConfig | None = None,\n    score_configs: (\n        dict[str, RenderNumberConfig] | None\n    ) = None,\n    label_configs: (\n        dict[str, RenderValueConfig] | None\n    ) = None,\n    metric_configs: (\n        dict[str, RenderNumberConfig] | None\n    ) = None,\n    duration_config: RenderNumberConfig | None = None,\n) -> Table\n\n```\n\nReturn a table containing the data from this report, or the diff between this report and a baseline report.\n\nOptionally include input and output details.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\ndef console_table(\n    self,\n    baseline: Evaluation", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-93245afbea546c456fe18a9e7a924d07", "__created_at__": 1744231651.420514, "content": "_configs: (\n        dict[str, RenderNumberConfig] | None\n    ) = None,\n    duration_config: RenderNumberConfig | None = None,\n) -> Table\n\n```\n\nReturn a table containing the data from this report, or the diff between this report and a baseline report.\n\nOptionally include input and output details.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\ndef console_table(\n    self,\n    baseline: EvaluationReport | None = None,\n    include_input: bool = False,\n    include_metadata: bool = False,\n    include_expected_output: bool = False,\n    include_output: bool = False,\n    include_durations: bool = True,\n    include_total_duration: bool = False,\n    include_removed_cases: bool = False,\n    include_averages: bool = True,\n    input_config: RenderValueConfig | None = None,\n    metadata_config: RenderValueConfig | None = None,\n    output_config: RenderValueConfig | None = None,\n    score_configs: dict[str, RenderNumberConfig] | None = None,\n    label_configs: dict[str, RenderValueConfig] | None = None,\n    metric_configs: dict[str, RenderNumberConfig] | None = None,\n    duration_config: RenderNumberConfig | None = None,\n) -> Table:\n    \"\"\"Return a table containing the data from this report, or the diff between this report and a baseline report.\n\n    Optionally include input and output details.\n    \"\"\"\n    renderer = EvaluationRenderer(\n        include_input=include_input,\n        include_metadata=include_metadata,\n        include_expected_output=include_expected_output,\n        include_output=include_output,\n        include_durations=include_durations,\n        include_total_duration=include_total_duration,\n        include_removed_cases=include_removed_cases,\n        include_averages=include_averages,\n        input_config={**_DEFAULT_VALUE_CONFIG, **(input_config or {})},\n        metadata_config={**_DEFAULT_VALUE_CONFIG, **(metadata_config or {})},\n        output_config=output_config or _DEFAULT_VALUE_CONFIG,\n        score_configs=score_configs or {},\n        label_configs=label_configs or {},\n        metric_configs=metric_configs or {},\n        duration_config=duration_config or _DEFAULT_DURATION_CONFIG,\n    )\n    if baseline is None:\n        return renderer.build_table(self)\n    else:  # pragma: no cover\n        return renderer.build_diff_table(self, baseline)\n\n```\n\n\n\n\n#### \\_\\_str\\_\\_\n\n```\n__str__() -> str\n\n```\n\nReturn a string representation of the report.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\ndef __str__(self) -> str:\n    \"\"\"Return a string representation of the report.\"\"\"\n    table = self.console_table()\n    io_file = StringIO()\n    Console(file=io_file).print(table)\n    return io_file.getvalue()\n\n```\n\n\n\n\n\n\n\n### RenderValueConfig\n\nBases: `TypedDict`\n\nA configuration for rendering a values in an Evaluation report.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\nclass RenderValueConfig(TypedDict, total=False):\n    \"\"\"A configuration for rendering a values in an Evaluation report.\"\"\"\n\n    value_formatter: str | Callable[[Any], str]\n    diff_checker: Callable[[Any, Any], bool] | None\n    diff_formatter: Callable[[Any, Any], str | None] | None\n    diff_style: str\n\n```\n\n\n\n\n\n### RenderNumberConfig\n\nBases: `TypedDict`\n\nA configuration for rendering a particular score or metric in an Evaluation report.\n\nSee the implementation of `_RenderNumber` for more clarity on how these parameters affect the rendering.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\nclass RenderNumberConfig(TypedDict, total=False):\n    \"\"\"A configuration for rendering a particular score or metric in an Evaluation report.\n\n    See the implementation of `_RenderNumber` for more clarity on how these parameters affect the rendering.\n    \"\"\"\n\n    value_formatter: str | Callable[[float | int], str]\n    \"\"\"The logic to use for formatting values.\n\n    * If not provided, format as ints if all values are ints, otherwise at least one decimal place and at least four significant figures.\n    * You can also use a custom string format spec, e.g. '{:.3f}'\n    * You can also use a custom function, e.g. lambda x: f'{x:.3f}'\n    \"\"\"\n    diff_formatter: str | Callable[[float | int, float | int], str | None] | None\n    \"\"\"The logic to use for formatting details about the diff.\n\n    The strings produced by the value_formatter will always be included in the reports, but the diff_formatter is\n    used to produce additional text about the difference between the old and new values, such as the absolute or\n    relative difference.\n\n    * If not provided, format as ints if all values are ints, otherwise at least one decimal place and at least four\n        significant figures, and will include the percentage change.\n    * You can also use a custom string format spec, e.g. '{:+.3f}'\n    * You can also use a custom function, e.g. lambda x: f'{x:+.3f}'.\n        If this function returns None, no extra diff text will be added.\n    * You can also use None to never generate extra diff text.\n    \"\"\"\n    diff_atol: float\n    \"\"\"The absolute tolerance for considering a difference \"significant\".\n\n    A difference is \"significant\" if `abs(new - old) < self.diff_atol + self.diff_rtol * abs(old)`.\n\n    If a difference is not significant, it will not have the", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ced21a7dd02af8eb0205821f3cf77e51", "__created_at__": 1744231651.420514, "content": ":+.3f}'.\n        If this function returns None, no extra diff text will be added.\n    * You can also use None to never generate extra diff text.\n    \"\"\"\n    diff_atol: float\n    \"\"\"The absolute tolerance for considering a difference \"significant\".\n\n    A difference is \"significant\" if `abs(new - old) < self.diff_atol + self.diff_rtol * abs(old)`.\n\n    If a difference is not significant, it will not have the diff styles applied. Note that we still show\n    both the rendered before and after values in the diff any time they differ, even if the difference is not\n    significant. (If the rendered values are exactly the same, we only show the value once.)\n\n    If not provided, use 1e-6.\n    \"\"\"\n    diff_rtol: float\n    \"\"\"The relative tolerance for considering a difference \"significant\".\n\n    See the description of `diff_atol` for more details about what makes a difference \"significant\".\n\n    If not provided, use 0.001 if all values are ints, otherwise 0.05.\n    \"\"\"\n    diff_increase_style: str\n    \"\"\"The style to apply to diffed values that have a significant increase.\n\n    See the description of `diff_atol` for more details about what makes a difference \"significant\".\n\n    If not provided, use green for scores and red for metrics. You can also use arbitrary `rich` styles, such as \"bold red\".\n    \"\"\"\n    diff_decrease_style: str\n    \"\"\"The style to apply to diffed values that have significant decrease.\n\n    See the description of `diff_atol` for more details about what makes a difference \"significant\".\n\n    If not provided, use red for scores and green for metrics. You can also use arbitrary `rich` styles, such as \"bold red\".\n    \"\"\"\n\n```\n\n\n#### value\\_formatter `instance-attribute`\n\n```\nvalue_formatter: str | Callable[[float | int], str]\n\n```\n\nThe logic to use for formatting values.\n\n* If not provided, format as ints if all values are ints, otherwise at least one decimal place and at least four significant figures.\n* You can also use a custom string format spec, e.g. '{:.3f}'\n* You can also use a custom function, e.g. lambda x: f'{x:.3f}'\n\n\n#### diff\\_formatter `instance-attribute`\n\n```\ndiff_formatter: (\n    str\n    | Callable[[float | int, float | int], str | None]\n    | None\n)\n\n```\n\nThe logic to use for formatting details about the diff.\n\nThe strings produced by the value\\_formatter will always be included in the reports, but the diff\\_formatter is\nused to produce additional text about the difference between the old and new values, such as the absolute or\nrelative difference.\n\n* If not provided, format as ints if all values are ints, otherwise at least one decimal place and at least four\n  significant figures, and will include the percentage change.\n* You can also use a custom string format spec, e.g. '{:+.3f}'\n* You can also use a custom function, e.g. lambda x: f'{x:+.3f}'.\n  If this function returns None, no extra diff text will be added.\n* You can also use None to never generate extra diff text.\n\n\n#### diff\\_atol `instance-attribute`\n\n```\ndiff_atol: float\n\n```\n\nThe absolute tolerance for considering a difference \"significant\".\n\nA difference is \"significant\" if `abs(new - old) < self.diff_atol + self.diff_rtol * abs(old)`.\n\nIf a difference is not significant, it will not have the diff styles applied. Note that we still show\nboth the rendered before and after values in the diff any time they differ, even if the difference is not\nsignificant. (If the rendered values are exactly the same, we only show the value once.)\n\nIf not provided, use 1e-6.\n\n\n\n#### diff\\_rtol `instance-attribute`\n\n```\ndiff_rtol: float\n\n```\n\nThe relative tolerance for considering a difference \"significant\".\n\nSee the description of `diff_atol` for more details about what makes a difference \"significant\".\n\nIf not provided, use 0.001 if all values are ints, otherwise 0.05.\n\n\n\n#### diff\\_increase\\_style `instance-attribute`\n\n```\ndiff_increase_style: str\n\n```\n\nThe style to apply to diffed values that have a significant increase.\n\nSee the description of `diff_atol` for more details about what makes a difference \"significant\".\n\nIf not provided, use green for scores and red for metrics. You can also use arbitrary `rich` styles, such as \"bold red\".\n\n\n\n#### diff\\_decrease\\_style `instance-attribute`\n\n```\ndiff_decrease_style: str\n\n```\n\nThe style to apply to diffed values that have significant decrease.\n\nSee the description of `diff_atol` for more details about what makes a difference \"significant\".\n\nIf not provided, use red for scores and green for metrics. You can also use arbitrary `rich` styles, such as \"bold red\".\n\n\n\n\n\n\n### EvaluationRenderer `dataclass`\n\nA class for rendering an EvalReport or the diff between two EvalReports.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\n@dataclass\nclass EvaluationRenderer:\n    \"\"\"A class for rendering an EvalReport or the diff between two EvalReports.\"\"\"\n\n    # Columns to include\n    include_input: bool\n    include_metadata: bool\n    include_expected_output: bool\n    include_output: bool\n    include_durations: bool", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-284eb3a94fa6c6af38603bdfd484f6f5", "__created_at__": 1744231651.420514, "content": "class for rendering an EvalReport or the diff between two EvalReports.\n\nSource code in `pydantic_evals/pydantic_evals/reporting/__init__.py`\n```\n@dataclass\nclass EvaluationRenderer:\n    \"\"\"A class for rendering an EvalReport or the diff between two EvalReports.\"\"\"\n\n    # Columns to include\n    include_input: bool\n    include_metadata: bool\n    include_expected_output: bool\n    include_output: bool\n    include_durations: bool\n    include_total_duration: bool\n\n    # Rows to include\n    include_removed_cases: bool\n    include_averages: bool\n\n    input_config: RenderValueConfig\n    metadata_config: RenderValueConfig\n    output_config: RenderValueConfig\n    score_configs: dict[str, RenderNumberConfig]\n    label_configs: dict[str, RenderValueConfig]\n    metric_configs: dict[str, RenderNumberConfig]\n    duration_config: RenderNumberConfig\n\n    def include_scores(self, report: EvaluationReport, baseline: EvaluationReport | None = None):\n        return any(case.scores for case in self._all_cases(report, baseline))\n\n    def include_labels(self, report: EvaluationReport, baseline: EvaluationReport | None = None):\n        return any(case.labels for case in self._all_cases(report, baseline))\n\n    def include_metrics(self, report: EvaluationReport, baseline: EvaluationReport | None = None):\n        return any(case.metrics for case in self._all_cases(report, baseline))\n\n    def include_assertions(self, report: EvaluationReport, baseline: EvaluationReport | None = None):\n        return any(case.assertions for case in self._all_cases(report, baseline))\n\n    def _all_cases(self, report: EvaluationReport, baseline: EvaluationReport | None) -> list[ReportCase]:\n        if not baseline:\n            return report.cases\n        else:\n            return report.cases + self._baseline_cases_to_include(report, baseline)\n\n    def _baseline_cases_to_include(self, report: EvaluationReport, baseline: EvaluationReport) -> list[ReportCase]:\n        if self.include_removed_cases:\n            return baseline.cases\n        report_case_names = {case.name for case in report.cases}\n        return [case for case in baseline.cases if case.name in report_case_names]\n\n    def _get_case_renderer(\n        self, report: EvaluationReport, baseline: EvaluationReport | None = None\n    ) -> ReportCaseRenderer:\n        input_renderer = _ValueRenderer.from_config(self.input_config)\n        metadata_renderer = _ValueRenderer.from_config(self.metadata_config)\n        output_renderer = _ValueRenderer.from_config(self.output_config)\n        score_renderers = self._infer_score_renderers(report, baseline)\n        label_renderers = self._infer_label_renderers(report, baseline)\n        metric_renderers = self._infer_metric_renderers(report, baseline)\n        duration_renderer = _NumberRenderer.infer_from_config(\n            self.duration_config, 'duration', [x.task_duration for x in self._all_cases(report, baseline)]\n        )\n\n        return ReportCaseRenderer(\n            include_input=self.include_input,\n            include_metadata=self.include_metadata,\n            include_expected_output=self.include_expected_output,\n            include_output=self.include_output,\n            include_scores=self.include_scores(report, baseline),\n            include_labels=self.include_labels(report, baseline),\n            include_metrics=self.include_metrics(report, baseline),\n            include_assertions=self.include_assertions(report, baseline),\n            include_durations=self.include_durations,\n            include_total_duration=self.include_total_duration,\n            input_renderer=input_renderer,\n            metadata_renderer=metadata_renderer,\n            output_renderer=output_renderer,\n            score_renderers=score_renderers,\n            label_renderers=label_renderers,\n            metric_renderers=metric_renderers,\n            duration_renderer=duration_renderer,\n        )\n\n    def build_table(self, report: EvaluationReport) -> Table:\n        case_renderer = self._get_case_renderer(report)\n        table = case_renderer.build_base_table(f'Evaluation Summary: {report.name}')\n        for case in report.cases:\n            table.add_row(*case_renderer.build_row(case))\n\n        if self.include_averages:\n            average = report.averages()\n            table.add_row(*case_renderer.build_aggregate_row(average))\n        return table\n\n    def build_diff_table(self, report: EvaluationReport, baseline: EvaluationReport) -> Table:\n        report_cases = report.cases\n        baseline_cases = self._baseline_cases_to_include(report, baseline)\n\n        report_cases_by_id = {case.name: case for case in report_cases}\n        baseline_cases_by_id = {case.name: case for case in baseline_cases}\n\n        diff_cases: list[tuple[ReportCase, ReportCase]] = []\n        removed_cases: list[ReportCase] = []\n        added_cases: list[ReportCase] = []\n\n        for case_id in sorted(set(baseline_cases_by_id.keys()) | set(report_cases_by_id.keys())):\n            maybe_baseline_case = baseline_cases_by_id.get(case_id)\n            maybe_report_case = report_cases_by_id.get(case_id)\n            if maybe_baseline_case and maybe_report_case:\n                diff_cases.append((maybe_baseline_case, maybe_report_case))\n            elif maybe_baseline_case:\n                removed_cases.append(maybe_baseline_case)\n            elif maybe_report_case:\n                added_cases.append(maybe_report_case)\n            else:  # pragma: no cover\n                assert False, 'This should be unreachable'\n\n        case_renderer = self._get_case_renderer(report, baseline)\n        diff_name = baseline.name if baseline.name == report.name else f'{baseline.name} → {report.name}'\n        table = case_renderer.build_base_table(f'Evaluation Diff: {diff_name}')\n        for baseline_case, new_case in diff_cases:\n            table.add_row(*case_renderer.build_diff_row(new_case, baseline_case))\n        for case in added_cases:\n            row = case_renderer.build_row", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-25346d17202fa22ebc450f7f7382c828", "__created_at__": 1744231651.420514, "content": "'This should be unreachable'\n\n        case_renderer = self._get_case_renderer(report, baseline)\n        diff_name = baseline.name if baseline.name == report.name else f'{baseline.name} → {report.name}'\n        table = case_renderer.build_base_table(f'Evaluation Diff: {diff_name}')\n        for baseline_case, new_case in diff_cases:\n            table.add_row(*case_renderer.build_diff_row(new_case, baseline_case))\n        for case in added_cases:\n            row = case_renderer.build_row(case)\n            row[0] = f'[green]+ Added Case[/]\\n{row[0]}'\n            table.add_row(*row)\n        for case in removed_cases:\n            row = case_renderer.build_row(case)\n            row[0] = f'[red]- Removed Case[/]\\n{row[0]}'\n            table.add_row(*row)\n\n        if self.include_averages:\n            report_average = ReportCaseAggregate.average(report_cases)\n            baseline_average = ReportCaseAggregate.average(baseline_cases)\n            table.add_row(*case_renderer.build_diff_aggregate_row(report_average, baseline_average))\n\n        return table\n\n    def _infer_score_renderers(\n        self, report: EvaluationReport, baseline: EvaluationReport | None\n    ) -> dict[str, _NumberRenderer]:\n        all_cases = self._all_cases(report, baseline)\n\n        values_by_name: dict[str, list[float | int]] = {}\n        for case in all_cases:\n            for k, score in case.scores.items():\n                values_by_name.setdefault(k, []).append(score.value)\n\n        all_renderers: dict[str, _NumberRenderer] = {}\n        for name, values in values_by_name.items():\n            merged_config = _DEFAULT_NUMBER_CONFIG.copy()\n            merged_config.update(self.score_configs.get(name, {}))\n            all_renderers[name] = _NumberRenderer.infer_from_config(merged_config, 'score', values)\n        return all_renderers\n\n    def _infer_label_renderers(\n        self, report: EvaluationReport, baseline: EvaluationReport | None\n    ) -> dict[str, _ValueRenderer]:\n        all_cases = self._all_cases(report, baseline)\n        all_names: set[str] = set()\n        for case in all_cases:\n            for k in case.labels:\n                all_names.add(k)\n\n        all_renderers: dict[str, _ValueRenderer] = {}\n        for name in all_names:\n            merged_config = _DEFAULT_VALUE_CONFIG.copy()\n            merged_config.update(self.label_configs.get(name, {}))\n            all_renderers[name] = _ValueRenderer.from_config(merged_config)\n        return all_renderers\n\n    def _infer_metric_renderers(\n        self, report: EvaluationReport, baseline: EvaluationReport | None\n    ) -> dict[str, _NumberRenderer]:\n        all_cases = self._all_cases(report, baseline)\n\n        values_by_name: dict[str, list[float | int]] = {}\n        for case in all_cases:\n            for k, v in case.metrics.items():\n                values_by_name.setdefault(k, []).append(v)\n\n        all_renderers: dict[str, _NumberRenderer] = {}\n        for name, values in values_by_name.items():\n            merged_config = _DEFAULT_NUMBER_CONFIG.copy()\n            merged_config.update(self.metric_configs.get(name, {}))\n            all_renderers[name] = _NumberRenderer.infer_from_config(merged_config, 'metric', values)\n        return all_renderers\n\n    def _infer_duration_renderer(\n        self, report: EvaluationReport, baseline: EvaluationReport | None\n    ) -> _NumberRenderer:  # pragma: no cover\n        all_cases = self._all_cases(report, baseline)\n        all_durations = [x.task_duration for x in all_cases]\n        if self.include_total_duration:\n            all_durations += [x.total_duration for x in all_cases]\n        return _NumberRenderer.infer_from_config(self.duration_config, 'duration', all_durations)\n\n```\n\n\n\n\n\n\n\n\n\n`pydantic_graph.exceptions`\n===========================\n\n### GraphSetupError\n\nBases: `TypeError`\n\nError caused by an incorrectly configured graph.\n\nSource code in `pydantic_graph/pydantic_graph/exceptions.py`\n```\nclass GraphSetupError(TypeError):\n    \"\"\"Error caused by an incorrectly configured graph.\"\"\"\n\n    message: str\n    \"\"\"Description of the mistake.\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(message)\n\n```\n\n\n#### message `instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nDescription of the mistake.\n\n\n\n\n\n\n### GraphRuntimeError\n\nBases: `RuntimeError`\n\nError caused by an issue during graph execution.\n\nSource code in `pydantic_graph/pydantic_graph/exceptions.py`\n```\nclass GraphRuntimeError(RuntimeError):\n    \"\"\"Error caused by an issue during graph execution.\"\"\"\n\n    message: str\n    \"\"\"The error message.\"\"\"\n\n    def __init__(self, message: str):\n        self.message = message\n        super().__init__(message)\n\n```\n\n\n#### message `instance-attribute`\n\n```\nmessage: str = message\n\n```\n\nThe error message.\n\n\n\n\n\n\n### GraphNodeStatusError\n\nBases: `GraphRuntimeError`\n\nError caused by trying to run a node that already has status `'running'`, `'success'`, or `'error'`.\n\nSource code in `pydantic_graph/pydantic_graph/exceptions.py`\n```\nclass GraphNodeStatusError(GraphRuntimeError):\n    \"\"\"Error caused by trying to run a node that already has status `'running'`, `'success'`, or `'error'`.\"\"\"\n\n    def __init__(self, actual_status: 'SnapshotStatus'):\n        self.actual_status = actual_status\n        super().__init__(f\"Incorrect snapshot status {actual_status!r}, must be 'created' or 'pending'.\")\n\n    @classmethod\n    def check(cls, status: '", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd", "__created_at__": 1744231651.420514, "content": "`\n```\nclass GraphNodeStatusError(GraphRuntimeError):\n    \"\"\"Error caused by trying to run a node that already has status `'running'`, `'success'`, or `'error'`.\"\"\"\n\n    def __init__(self, actual_status: 'SnapshotStatus'):\n        self.actual_status = actual_status\n        super().__init__(f\"Incorrect snapshot status {actual_status!r}, must be 'created' or 'pending'.\")\n\n    @classmethod\n    def check(cls, status: 'SnapshotStatus') -> None:\n        \"\"\"Check if the status is valid.\"\"\"\n        if status not in {'created', 'pending'}:\n            raise cls(status)\n\n```\n\n\n#### check `classmethod`\n\n```\ncheck(status: SnapshotStatus) -> None\n\n```\n\nCheck if the status is valid.\n\nSource code in `pydantic_graph/pydantic_graph/exceptions.py`\n```\n@classmethod\ndef check(cls, status: 'SnapshotStatus') -> None:\n    \"\"\"Check if the status is valid.\"\"\"\n    if status not in {'created', 'pending'}:\n        raise cls(status)\n\n```\n\n\n\n\n\n\n\n\n\n\n\n`pydantic_graph`\n================\n\n### Graph `dataclass`\n\nBases: `Generic[StateT, DepsT, RunEndT]`\n\nDefinition of a graph.\n\nIn `pydantic-graph`, a graph is a collection of nodes that can be run in sequence. The nodes define\ntheir outgoing edges — e.g. which nodes may be run next, and thereby the structure of the graph.\n\nHere's a very simple example of a graph which increments a number by 1, but makes sure the number is never\n42 at the end.\n\nnever\\_42.py\n```\nfrom __future__ import annotations\n\nfrom dataclasses import dataclass\n\nfrom pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n@dataclass\nclass MyState:\n    number: int\n\n@dataclass\nclass Increment(BaseNode[MyState]):\n    async def run(self, ctx: GraphRunContext) -> Check42:\n        ctx.state.number += 1\n        return Check42()\n\n@dataclass\nclass Check42(BaseNode[MyState, None, int]):\n    async def run(self, ctx: GraphRunContext) -> Increment | End[int]:\n        if ctx.state.number == 42:\n            return Increment()\n        else:\n            return End(ctx.state.number)\n\nnever_42_graph = Graph(nodes=(Increment, Check42))\n\n```\n\n*(This example is complete, it can be run \"as is\")*\n\nSee `run` For an example of running graph, and\n`mermaid_code` for an example of generating a mermaid diagram\nfrom the graph.\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\n@dataclass(init=False)\nclass Graph(Generic[StateT, DepsT, RunEndT]):\n    \"\"\"Definition of a graph.\n\n    In `pydantic-graph`, a graph is a collection of nodes that can be run in sequence. The nodes define\n    their outgoing edges — e.g. which nodes may be run next, and thereby the structure of the graph.\n\n    Here's a very simple example of a graph which increments a number by 1, but makes sure the number is never\n    42 at the end.\n\n    ```py {title=\"never_42.py\" noqa=\"I001\" py=\"3.10\"}\n    from __future__ import annotations\n\n    from dataclasses import dataclass\n\n    from pydantic_graph import BaseNode, End, Graph, GraphRunContext\n\n    @dataclass\n    class MyState:\n        number: int\n\n    @dataclass\n    class Increment(BaseNode[MyState]):\n        async def run(self, ctx: GraphRunContext) -> Check42:\n            ctx.state.number += 1\n            return Check42()\n\n    @dataclass\n    class Check42(BaseNode[MyState, None, int]):\n        async def run(self, ctx: GraphRunContext) -> Increment | End[int]:\n            if ctx.state.number == 42:\n                return Increment()\n            else:\n                return End(ctx.state.number)\n\n    never_42_graph = Graph(nodes=(Increment, Check42))\n    ```\n    _(This example is complete, it can be run \"as is\")_\n\n    See [`run`][pydantic_graph.graph.Graph.run] For an example of running graph, and\n    [`mermaid_code`][pydantic_graph.graph.Graph.mermaid_code] for an example of generating a mermaid diagram\n    from the graph.\n    \"\"\"\n\n    name: str | None\n    node_defs: dict[str, NodeDef[StateT, DepsT, RunEndT]]\n    _state_type: type[StateT] | _utils.Unset = field(repr=False)\n    _run_end_type: type[RunEndT] | _utils.Unset = field(repr=False)\n    auto_instrument: bool = field(repr=False)\n\n    def __init__(\n        self,\n        *,\n        nodes: Sequence[type[BaseNode[StateT, DepsT, RunEndT]]],\n        name: str | None = None,\n        state_type: type[StateT] | _utils.Unset = _utils.UNSET,\n        run_end_type: type[RunEndT] | _utils.Unset = _utils.UNSET,\n        auto_instrument: bool = True,\n    ):\n        \"\"\"Create a graph from a sequence of nodes.\n\n        Args:\n            nodes: The nodes which make up the graph, nodes need to be unique and all be generic in the same\n                state type.\n            name: Optional name for the graph, if not provided the name will be inferred from the calling frame\n                on the first call to a graph method.\n            state_type: The type of the state for the graph,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3360dcbe94ed167cf50ca5e3fe657d4c", "__created_at__": 1744231651.420514, "content": "SET,\n        auto_instrument: bool = True,\n    ):\n        \"\"\"Create a graph from a sequence of nodes.\n\n        Args:\n            nodes: The nodes which make up the graph, nodes need to be unique and all be generic in the same\n                state type.\n            name: Optional name for the graph, if not provided the name will be inferred from the calling frame\n                on the first call to a graph method.\n            state_type: The type of the state for the graph, this can generally be inferred from `nodes`.\n            run_end_type: The type of the result of running the graph, this can generally be inferred from `nodes`.\n            auto_instrument: Whether to create a span for the graph run and the execution of each node's run method.\n        \"\"\"\n        self.name = name\n        self._state_type = state_type\n        self._run_end_type = run_end_type\n        self.auto_instrument = auto_instrument\n\n        parent_namespace = _utils.get_parent_namespace(inspect.currentframe())\n        self.node_defs = {}\n        for node in nodes:\n            self._register_node(node, parent_namespace)\n\n        self._validate_edges()\n\n    async def run(\n        self,\n        start_node: BaseNode[StateT, DepsT, RunEndT],\n        *,\n        state: StateT = None,\n        deps: DepsT = None,\n        persistence: BaseStatePersistence[StateT, RunEndT] | None = None,\n        infer_name: bool = True,\n        span: LogfireSpan | None = None,\n    ) -> GraphRunResult[StateT, RunEndT]:\n        \"\"\"Run the graph from a starting node until it ends.\n\n        Args:\n            start_node: the first node to run, since the graph definition doesn't define the entry point in the graph,\n                you need to provide the starting node.\n            state: The initial state of the graph.\n            deps: The dependencies of the graph.\n            persistence: State persistence interface, defaults to\n                [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n            infer_name: Whether to infer the graph name from the calling frame.\n            span: The span to use for the graph run. If not provided, a span will be created depending on the value of\n                the `auto_instrument` field.\n\n        Returns:\n            A `GraphRunResult` containing information about the run, including its final result.\n\n        Here's an example of running the graph from [above][pydantic_graph.graph.Graph]:\n\n        ```py {title=\"run_never_42.py\" noqa=\"I001\" py=\"3.10\"}\n        from never_42 import Increment, MyState, never_42_graph\n\n        async def main():\n            state = MyState(1)\n            await never_42_graph.run(Increment(), state=state)\n            print(state)\n            #> MyState(number=2)\n\n            state = MyState(41)\n            await never_42_graph.run(Increment(), state=state)\n            print(state)\n            #> MyState(number=43)\n        ```\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n\n        async with self.iter(\n            start_node, state=state, deps=deps, persistence=persistence, span=span, infer_name=False\n        ) as graph_run:\n            async for _node in graph_run:\n                pass\n\n        final_result = graph_run.result\n        assert final_result is not None, 'GraphRun should have a final result'\n        return final_result\n\n    def run_sync(\n        self,\n        start_node: BaseNode[StateT, DepsT, RunEndT],\n        *,\n        state: StateT = None,\n        deps: DepsT = None,\n        persistence: BaseStatePersistence[StateT, RunEndT] | None = None,\n        infer_name: bool = True,\n    ) -> GraphRunResult[StateT, RunEndT]:\n        \"\"\"Synchronously run the graph.\n\n        This is a convenience method that wraps [`self.run`][pydantic_graph.Graph.run] with `loop.run_until_complete(...)`.\n        You therefore can't use this method inside async code or if there's an active event loop.\n\n        Args:\n            start_node: the first node to run, since the graph definition doesn't define the entry point in the graph,\n                you need to provide the starting node.\n            state: The initial state of the graph.\n            deps: The dependencies of the graph.\n            persistence: State persistence interface, defaults to\n                [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n            infer_name: Whether to infer the graph name from the calling frame.\n\n        Returns:\n            The result type from ending the run and the history of the run.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n\n        return _utils.get_event_loop().run_until_complete(\n            self.run(start_node, state=state, deps=deps, persistence=persistence, infer_name=False)\n        )\n\n    @asynccontextmanager\n    async def iter(\n        self,\n        start_node: BaseNode[StateT, DepsT, RunEndT],\n        *,\n        state: StateT = None,\n        deps: DepsT = None,\n        persistence: BaseStatePersistence[StateT, RunEndT] | None = None,\n        span: AbstractContextManager[Any] | None = None,\n        infer_name: bool = True,\n    ) -> AsyncIterator[GraphRun[StateT, DepsT, RunEndT]]:\n        \"\"\"A contextmanager which can be used to iterate over the graph's nodes as they are executed.\n\n        This method returns a `GraphRun` object which can be used to async", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-0e7f162426f06e195505dd4c52435908", "__created_at__": 1744231651.420514, "content": "= None,\n        persistence: BaseStatePersistence[StateT, RunEndT] | None = None,\n        span: AbstractContextManager[Any] | None = None,\n        infer_name: bool = True,\n    ) -> AsyncIterator[GraphRun[StateT, DepsT, RunEndT]]:\n        \"\"\"A contextmanager which can be used to iterate over the graph's nodes as they are executed.\n\n        This method returns a `GraphRun` object which can be used to async-iterate over the nodes of this `Graph` as\n        they are executed. This is the API to use if you want to record or interact with the nodes as the graph\n        execution unfolds.\n\n        The `GraphRun` can also be used to manually drive the graph execution by calling\n        [`GraphRun.next`][pydantic_graph.graph.GraphRun.next].\n\n        The `GraphRun` provides access to the full run history, state, deps, and the final result of the run once\n        it has completed.\n\n        For more details, see the API documentation of [`GraphRun`][pydantic_graph.graph.GraphRun].\n\n        Args:\n            start_node: the first node to run. Since the graph definition doesn't define the entry point in the graph,\n                you need to provide the starting node.\n            state: The initial state of the graph.\n            deps: The dependencies of the graph.\n            persistence: State persistence interface, defaults to\n                [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n            span: The span to use for the graph run. If not provided, a new span will be created.\n            infer_name: Whether to infer the graph name from the calling frame.\n\n        Returns: A GraphRun that can be async iterated over to drive the graph to completion.\n        \"\"\"\n        if infer_name and self.name is None:\n            # f_back because `asynccontextmanager` adds one frame\n            if frame := inspect.currentframe():  # pragma: no branch\n                self._infer_name(frame.f_back)\n\n        if persistence is None:\n            persistence = SimpleStatePersistence()\n        persistence.set_graph_types(self)\n\n        if self.auto_instrument and span is None:\n            span = logfire_api.span('run graph {graph.name}', graph=self)\n\n        with ExitStack() as stack:\n            if span is not None:\n                stack.enter_context(span)\n            yield GraphRun[StateT, DepsT, RunEndT](\n                graph=self, start_node=start_node, persistence=persistence, state=state, deps=deps\n            )\n\n    @asynccontextmanager\n    async def iter_from_persistence(\n        self,\n        persistence: BaseStatePersistence[StateT, RunEndT],\n        *,\n        deps: DepsT = None,\n        span: AbstractContextManager[Any] | None = None,\n        infer_name: bool = True,\n    ) -> AsyncIterator[GraphRun[StateT, DepsT, RunEndT]]:\n        \"\"\"A contextmanager to iterate over the graph's nodes as they are executed, created from a persistence object.\n\n        This method has similar functionality to [`iter`][pydantic_graph.graph.Graph.iter],\n        but instead of passing the node to run, it will restore the node and state from state persistence.\n\n        Args:\n            persistence: The state persistence interface to use.\n            deps: The dependencies of the graph.\n            span: The span to use for the graph run. If not provided, a new span will be created.\n            infer_name: Whether to infer the graph name from the calling frame.\n\n        Returns: A GraphRun that can be async iterated over to drive the graph to completion.\n        \"\"\"\n        if infer_name and self.name is None:\n            # f_back because `asynccontextmanager` adds one frame\n            if frame := inspect.currentframe():  # pragma: no branch\n                self._infer_name(frame.f_back)\n\n        persistence.set_graph_types(self)\n\n        snapshot = await persistence.load_next()\n        if snapshot is None:\n            raise exceptions.GraphRuntimeError('Unable to restore snapshot from state persistence.')\n\n        snapshot.node.set_snapshot_id(snapshot.id)\n\n        if self.auto_instrument and span is None:\n            span = logfire_api.span('run graph {graph.name}', graph=self)\n\n        with ExitStack() as stack:\n            if span is not None:\n                stack.enter_context(span)\n            yield GraphRun[StateT, DepsT, RunEndT](\n                graph=self,\n                start_node=snapshot.node,\n                persistence=persistence,\n                state=snapshot.state,\n                deps=deps,\n                snapshot_id=snapshot.id,\n            )\n\n    async def initialize(\n        self,\n        node: BaseNode[StateT, DepsT, RunEndT],\n        persistence: BaseStatePersistence[StateT, RunEndT],\n        *,\n        state: StateT = None,\n        infer_name: bool = True,\n    ) -> None:\n        \"\"\"Initialize a new graph run in persistence without running it.\n\n        This is useful if you want to set up a graph run to be run later, e.g. via\n        [`iter_from_persistence`][pydantic_graph.graph.Graph.iter_from_persistence].\n\n        Args:\n            node: The node to run first.\n            persistence: State persistence interface.\n            state: The start state of the graph.\n            infer_name: Whether to infer the graph name from the calling frame.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n\n        persistence.set_graph_types(self)\n        await persistence.snapshot_node(state, node)\n\n    @deprecated('`next` is deprecated, use `async with graph.iter(...) as run:  run.next()` instead')\n    async def next(\n        self,\n        node: BaseNode[StateT, DepsT,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-14e53235b034b988f73d8d04cdce068d", "__created_at__": 1744231651.420514, "content": "infer_name: Whether to infer the graph name from the calling frame.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n\n        persistence.set_graph_types(self)\n        await persistence.snapshot_node(state, node)\n\n    @deprecated('`next` is deprecated, use `async with graph.iter(...) as run:  run.next()` instead')\n    async def next(\n        self,\n        node: BaseNode[StateT, DepsT, RunEndT],\n        persistence: BaseStatePersistence[StateT, RunEndT],\n        *,\n        state: StateT = None,\n        deps: DepsT = None,\n        infer_name: bool = True,\n    ) -> BaseNode[StateT, DepsT, Any] | End[RunEndT]:\n        \"\"\"Run a node in the graph and return the next node to run.\n\n        Args:\n            node: The node to run.\n            persistence: State persistence interface, defaults to\n                [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n            state: The current state of the graph.\n            deps: The dependencies of the graph.\n            infer_name: Whether to infer the graph name from the calling frame.\n\n        Returns:\n            The next node to run or [`End`][pydantic_graph.nodes.End] if the graph has finished.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n\n        persistence.set_graph_types(self)\n        run = GraphRun[StateT, DepsT, RunEndT](\n            graph=self,\n            start_node=node,\n            persistence=persistence,\n            state=state,\n            deps=deps,\n        )\n        return await run.next(node)\n\n    def mermaid_code(\n        self,\n        *,\n        start_node: Sequence[mermaid.NodeIdent] | mermaid.NodeIdent | None = None,\n        title: str | None | typing_extensions.Literal[False] = None,\n        edge_labels: bool = True,\n        notes: bool = True,\n        highlighted_nodes: Sequence[mermaid.NodeIdent] | mermaid.NodeIdent | None = None,\n        highlight_css: str = mermaid.DEFAULT_HIGHLIGHT_CSS,\n        infer_name: bool = True,\n        direction: mermaid.StateDiagramDirection | None = None,\n    ) -> str:\n        \"\"\"Generate a diagram representing the graph as [mermaid](https://mermaid.js.org/) diagram.\n\n        This method calls [`pydantic_graph.mermaid.generate_code`][pydantic_graph.mermaid.generate_code].\n\n        Args:\n            start_node: The node or nodes which can start the graph.\n            title: The title of the diagram, use `False` to not include a title.\n            edge_labels: Whether to include edge labels.\n            notes: Whether to include notes on each node.\n            highlighted_nodes: Optional node or nodes to highlight.\n            highlight_css: The CSS to use for highlighting nodes.\n            infer_name: Whether to infer the graph name from the calling frame.\n            direction: The direction of flow.\n\n        Returns:\n            The mermaid code for the graph, which can then be rendered as a diagram.\n\n        Here's an example of generating a diagram for the graph from [above][pydantic_graph.graph.Graph]:\n\n        ```py {title=\"mermaid_never_42.py\" py=\"3.10\"}\n        from never_42 import Increment, never_42_graph\n\n        print(never_42_graph.mermaid_code(start_node=Increment))\n        '''\n        ---\n        title: never_42_graph\n        ---\n        stateDiagram-v2\n          [*] --> Increment\n          Increment --> Check42\n          Check42 --> Increment\n          Check42 --> [*]\n        '''\n        ```\n\n        The rendered diagram will look like this:\n\n        ```mermaid\n        ---\n        title: never_42_graph\n        ---\n        stateDiagram-v2\n          [*] --> Increment\n          Increment --> Check42\n          Check42 --> Increment\n          Check42 --> [*]\n        ```\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n        if title is None and self.name:\n            title = self.name\n        return mermaid.generate_code(\n            self,\n            start_node=start_node,\n            highlighted_nodes=highlighted_nodes,\n            highlight_css=highlight_css,\n            title=title or None,\n            edge_labels=edge_labels,\n            notes=notes,\n            direction=direction,\n        )\n\n    def mermaid_image(\n        self, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid.MermaidConfig]\n    ) -> bytes:\n        \"\"\"Generate a diagram representing the graph as an image.\n\n        The format and diagram can be customized using `kwargs`,\n        see [`pydantic_graph.mermaid.MermaidConfig`][pydantic_graph.mermaid.MermaidConfig].\n\n        !!! note \"Uses external service\"\n            This method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`\n            is a free service not affiliated with Pydantic.\n\n        Args:\n            infer_name: Whether to infer the graph name from the calling frame.\n            **kwargs: Additional arguments to pass to `mermaid.request_image`.\n\n        Returns:\n            The image bytes.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n        if 'title' not in kwargs and self.name:\n            kwargs['title'] = self.name\n        return mermaid.request_image(self, **kwargs)\n\n    def mermaid_save(\n        self, path: Path | str, /, *, infer_name: bool = True, **kwargs: typing", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-fa226bf2bd8d292e7db953abc96ebbde", "__created_at__": 1744231651.420514, "content": "to pass to `mermaid.request_image`.\n\n        Returns:\n            The image bytes.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n        if 'title' not in kwargs and self.name:\n            kwargs['title'] = self.name\n        return mermaid.request_image(self, **kwargs)\n\n    def mermaid_save(\n        self, path: Path | str, /, *, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid.MermaidConfig]\n    ) -> None:\n        \"\"\"Generate a diagram representing the graph and save it as an image.\n\n        The format and diagram can be customized using `kwargs`,\n        see [`pydantic_graph.mermaid.MermaidConfig`][pydantic_graph.mermaid.MermaidConfig].\n\n        !!! note \"Uses external service\"\n            This method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`\n            is a free service not affiliated with Pydantic.\n\n        Args:\n            path: The path to save the image to.\n            infer_name: Whether to infer the graph name from the calling frame.\n            **kwargs: Additional arguments to pass to `mermaid.save_image`.\n        \"\"\"\n        if infer_name and self.name is None:\n            self._infer_name(inspect.currentframe())\n        if 'title' not in kwargs and self.name:\n            kwargs['title'] = self.name\n        mermaid.save_image(path, self, **kwargs)\n\n    def get_nodes(self) -> Sequence[type[BaseNode[StateT, DepsT, RunEndT]]]:\n        \"\"\"Get the nodes in the graph.\"\"\"\n        return [node_def.node for node_def in self.node_defs.values()]\n\n    @cached_property\n    def inferred_types(self) -> tuple[type[StateT], type[RunEndT]]:\n        # Get the types of the state and run end from the graph.\n        if _utils.is_set(self._state_type) and _utils.is_set(self._run_end_type):\n            return self._state_type, self._run_end_type\n\n        state_type = self._state_type\n        run_end_type = self._run_end_type\n\n        for node_def in self.node_defs.values():\n            for base in typing_extensions.get_original_bases(node_def.node):\n                if typing_extensions.get_origin(base) is BaseNode:\n                    args = typing_extensions.get_args(base)\n                    if not _utils.is_set(state_type) and args:\n                        state_type = args[0]\n\n                    if not _utils.is_set(run_end_type) and len(args) == 3:\n                        t = args[2]\n                        if not typing_objects.is_never(t):\n                            run_end_type = t\n                    if _utils.is_set(state_type) and _utils.is_set(run_end_type):\n                        return state_type, run_end_type  # pyright: ignore[reportReturnType]\n                    # break the inner (bases) loop\n                    break\n\n        if not _utils.is_set(state_type):\n            # state defaults to None, so use that if we can't infer it\n            state_type = None\n        if not _utils.is_set(run_end_type):\n            # this happens if a graph has no return nodes, use None so any downstream errors are clear\n            run_end_type = None\n        return state_type, run_end_type  # pyright: ignore[reportReturnType]\n\n    def _register_node(\n        self,\n        node: type[BaseNode[StateT, DepsT, RunEndT]],\n        parent_namespace: dict[str, Any] | None,\n    ) -> None:\n        node_id = node.get_node_id()\n        if existing_node := self.node_defs.get(node_id):\n            raise exceptions.GraphSetupError(\n                f'Node ID `{node_id}` is not unique — found on {existing_node.node} and {node}'\n            )\n        else:\n            self.node_defs[node_id] = node.get_node_def(parent_namespace)\n\n    def _validate_edges(self):\n        known_node_ids = self.node_defs.keys()\n        bad_edges: dict[str, list[str]] = {}\n\n        for node_id, node_def in self.node_defs.items():\n            for edge in node_def.next_node_edges.keys():\n                if edge not in known_node_ids:\n                    bad_edges.setdefault(edge, []).append(f'`{node_id}`')\n\n        if bad_edges:\n            bad_edges_list = [f'`{k}` is referenced by {_utils.comma_and(v)}' for k, v in bad_edges.items()]\n            if len(bad_edges_list) == 1:\n                raise exceptions.GraphSetupError(f'{bad_edges_list[0]} but not included in the graph.')\n            else:\n                b = '\\n'.join(f' {be}' for be in bad_edges_list)\n                raise exceptions.GraphSetupError(\n                    f'Nodes are referenced in the graph but not included in the graph:\\n{b}'\n                )\n\n    def _infer_name(self, function_frame: types.FrameType | None) -> None:\n        \"\"\"Infer the agent name from the call frame.\n\n        Usage should be `self._infer_name(inspect.currentframe())`.\n\n        Copied from `Agent`.\n        \"\"\"\n        assert self.name is None, 'Name already set'\n        if function_frame is not None and (parent_frame := function_frame.f_back):  # pragma: no branch\n            for name, item in parent_frame.f_locals.items():\n                if item is self:\n                    self.name = name\n                    return\n            if parent_frame.f_locals != parent_frame.f_globals:\n                # if we couldn't find the agent in locals and globals are a different dict, try globals\n                for name, item in parent_frame.f_globals.items():\n                    if item is self:", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-c013a90b995a125733a858f2892c9f74", "__created_at__": 1744231651.420514, "content": "is not None and (parent_frame := function_frame.f_back):  # pragma: no branch\n            for name, item in parent_frame.f_locals.items():\n                if item is self:\n                    self.name = name\n                    return\n            if parent_frame.f_locals != parent_frame.f_globals:\n                # if we couldn't find the agent in locals and globals are a different dict, try globals\n                for name, item in parent_frame.f_globals.items():\n                    if item is self:\n                        self.name = name\n                        return\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    nodes: Sequence[type[BaseNode[StateT, DepsT, RunEndT]]],\n    name: str | None = None,\n    state_type: type[StateT] | Unset = UNSET,\n    run_end_type: type[RunEndT] | Unset = UNSET,\n    auto_instrument: bool = True\n)\n\n```\n\nCreate a graph from a sequence of nodes.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `nodes` | `Sequence[type[BaseNode[StateT, DepsT, RunEndT]]]` | The nodes which make up the graph, nodes need to be unique and all be generic in the same state type. | *required* |\n| `name` | `str | None` | Optional name for the graph, if not provided the name will be inferred from the calling frame on the first call to a graph method. | `None` |\n| `state_type` | `type[StateT] | Unset` | The type of the state for the graph, this can generally be inferred from `nodes`. | `UNSET` |\n| `run_end_type` | `type[RunEndT] | Unset` | The type of the result of running the graph, this can generally be inferred from `nodes`. | `UNSET` |\n| `auto_instrument` | `bool` | Whether to create a span for the graph run and the execution of each node's run method. | `True` |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\ndef __init__(\n    self,\n    *,\n    nodes: Sequence[type[BaseNode[StateT, DepsT, RunEndT]]],\n    name: str | None = None,\n    state_type: type[StateT] | _utils.Unset = _utils.UNSET,\n    run_end_type: type[RunEndT] | _utils.Unset = _utils.UNSET,\n    auto_instrument: bool = True,\n):\n    \"\"\"Create a graph from a sequence of nodes.\n\n    Args:\n        nodes: The nodes which make up the graph, nodes need to be unique and all be generic in the same\n            state type.\n        name: Optional name for the graph, if not provided the name will be inferred from the calling frame\n            on the first call to a graph method.\n        state_type: The type of the state for the graph, this can generally be inferred from `nodes`.\n        run_end_type: The type of the result of running the graph, this can generally be inferred from `nodes`.\n        auto_instrument: Whether to create a span for the graph run and the execution of each node's run method.\n    \"\"\"\n    self.name = name\n    self._state_type = state_type\n    self._run_end_type = run_end_type\n    self.auto_instrument = auto_instrument\n\n    parent_namespace = _utils.get_parent_namespace(inspect.currentframe())\n    self.node_defs = {}\n    for node in nodes:\n        self._register_node(node, parent_namespace)\n\n    self._validate_edges()\n\n```\n\n\n\n\n#### run `async`\n\n```\nrun(\n    start_node: BaseNode[StateT, DepsT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    persistence: (\n        BaseStatePersistence[StateT, RunEndT] | None\n    ) = None,\n    infer_name: bool = True,\n    span: LogfireSpan | None = None\n) -> GraphRunResult[StateT, RunEndT]\n\n```\n\nRun the graph from a starting node until it ends.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `start_node` | `BaseNode[StateT, DepsT, RunEndT]` | the first node to run, since the graph definition doesn't define the entry point in the graph, you need to provide the starting node. | *required* |\n| `state` | `StateT` | The initial state of the graph. | `None` |\n| `deps` | `DepsT` | The dependencies of the graph. | `None` |\n| `persistence` | `BaseStatePersistence[StateT, RunEndT] | None` | State persistence interface, defaults to `SimpleStatePersistence` if `None`. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n| `span` | `LogfireSpan | None` | The span to use for the graph run. If not provided, a span will be created depending on the value of the `auto_instrument` field. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `GraphRunResult[StateT, RunEndT]` | A `GraphRunResult` containing information about the run, including its final result. |\n\nHere's an example of running the graph from above:\n\nrun\\_never\\_42.py\n```\nfrom never_", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f7a153b92621f59bd3b8f81f24daf8b2", "__created_at__": 1744231651.420514, "content": "the graph run. If not provided, a span will be created depending on the value of the `auto_instrument` field. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `GraphRunResult[StateT, RunEndT]` | A `GraphRunResult` containing information about the run, including its final result. |\n\nHere's an example of running the graph from above:\n\nrun\\_never\\_42.py\n```\nfrom never_42 import Increment, MyState, never_42_graph\n\nasync def main():\n    state = MyState(1)\n    await never_42_graph.run(Increment(), state=state)\n    print(state)\n    #> MyState(number=2)\n\n    state = MyState(41)\n    await never_42_graph.run(Increment(), state=state)\n    print(state)\n    #> MyState(number=43)\n\n```\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\nasync def run(\n    self,\n    start_node: BaseNode[StateT, DepsT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    persistence: BaseStatePersistence[StateT, RunEndT] | None = None,\n    infer_name: bool = True,\n    span: LogfireSpan | None = None,\n) -> GraphRunResult[StateT, RunEndT]:\n    \"\"\"Run the graph from a starting node until it ends.\n\n    Args:\n        start_node: the first node to run, since the graph definition doesn't define the entry point in the graph,\n            you need to provide the starting node.\n        state: The initial state of the graph.\n        deps: The dependencies of the graph.\n        persistence: State persistence interface, defaults to\n            [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n        infer_name: Whether to infer the graph name from the calling frame.\n        span: The span to use for the graph run. If not provided, a span will be created depending on the value of\n            the `auto_instrument` field.\n\n    Returns:\n        A `GraphRunResult` containing information about the run, including its final result.\n\n    Here's an example of running the graph from [above][pydantic_graph.graph.Graph]:\n\n    ```py {title=\"run_never_42.py\" noqa=\"I001\" py=\"3.10\"}\n    from never_42 import Increment, MyState, never_42_graph\n\n    async def main():\n        state = MyState(1)\n        await never_42_graph.run(Increment(), state=state)\n        print(state)\n        #> MyState(number=2)\n\n        state = MyState(41)\n        await never_42_graph.run(Increment(), state=state)\n        print(state)\n        #> MyState(number=43)\n    ```\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n\n    async with self.iter(\n        start_node, state=state, deps=deps, persistence=persistence, span=span, infer_name=False\n    ) as graph_run:\n        async for _node in graph_run:\n            pass\n\n    final_result = graph_run.result\n    assert final_result is not None, 'GraphRun should have a final result'\n    return final_result\n\n```\n\n\n\n\n#### run\\_sync\n\n```\nrun_sync(\n    start_node: BaseNode[StateT, DepsT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    persistence: (\n        BaseStatePersistence[StateT, RunEndT] | None\n    ) = None,\n    infer_name: bool = True\n) -> GraphRunResult[StateT, RunEndT]\n\n```\n\nSynchronously run the graph.\n\nThis is a convenience method that wraps `self.run` with `loop.run_until_complete(...)`.\nYou therefore can't use this method inside async code or if there's an active event loop.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `start_node` | `BaseNode[StateT, DepsT, RunEndT]` | the first node to run, since the graph definition doesn't define the entry point in the graph, you need to provide the starting node. | *required* |\n| `state` | `StateT` | The initial state of the graph. | `None` |\n| `deps` | `DepsT` | The dependencies of the graph. | `None` |\n| `persistence` | `BaseStatePersistence[StateT, RunEndT] | None` | State persistence interface, defaults to `SimpleStatePersistence` if `None`. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `GraphRunResult[StateT, RunEndT]` | The result type from ending the run and the history of the run. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\ndef run_sync(\n    self,\n    start_node: BaseNode[StateT, DepsT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    persistence: BaseStatePersistence[StateT, RunEndT] | None = None,\n    infer_name: bool = True,\n) -> GraphRunResult[StateT, RunEndT]:\n    \"\"\"Synchronously run the graph.\n\n    This is a convenience method that wraps [`self.run`][pydantic_graph.Graph", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-bff54291e33877e654a2a213873bb216", "__created_at__": 1744231651.420514, "content": ": BaseNode[StateT, DepsT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    persistence: BaseStatePersistence[StateT, RunEndT] | None = None,\n    infer_name: bool = True,\n) -> GraphRunResult[StateT, RunEndT]:\n    \"\"\"Synchronously run the graph.\n\n    This is a convenience method that wraps [`self.run`][pydantic_graph.Graph.run] with `loop.run_until_complete(...)`.\n    You therefore can't use this method inside async code or if there's an active event loop.\n\n    Args:\n        start_node: the first node to run, since the graph definition doesn't define the entry point in the graph,\n            you need to provide the starting node.\n        state: The initial state of the graph.\n        deps: The dependencies of the graph.\n        persistence: State persistence interface, defaults to\n            [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n        infer_name: Whether to infer the graph name from the calling frame.\n\n    Returns:\n        The result type from ending the run and the history of the run.\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n\n    return _utils.get_event_loop().run_until_complete(\n        self.run(start_node, state=state, deps=deps, persistence=persistence, infer_name=False)\n    )\n\n```\n\n\n\n\n#### iter `async`\n\n```\niter(\n    start_node: BaseNode[StateT, DepsT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    persistence: (\n        BaseStatePersistence[StateT, RunEndT] | None\n    ) = None,\n    span: AbstractContextManager[Any] | None = None,\n    infer_name: bool = True\n) -> AsyncIterator[GraphRun[StateT, DepsT, RunEndT]]\n\n```\n\nA contextmanager which can be used to iterate over the graph's nodes as they are executed.\n\nThis method returns a `GraphRun` object which can be used to async-iterate over the nodes of this `Graph` as\nthey are executed. This is the API to use if you want to record or interact with the nodes as the graph\nexecution unfolds.\n\nThe `GraphRun` can also be used to manually drive the graph execution by calling\n`GraphRun.next`.\n\nThe `GraphRun` provides access to the full run history, state, deps, and the final result of the run once\nit has completed.\n\nFor more details, see the API documentation of `GraphRun`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `start_node` | `BaseNode[StateT, DepsT, RunEndT]` | the first node to run. Since the graph definition doesn't define the entry point in the graph, you need to provide the starting node. | *required* |\n| `state` | `StateT` | The initial state of the graph. | `None` |\n| `deps` | `DepsT` | The dependencies of the graph. | `None` |\n| `persistence` | `BaseStatePersistence[StateT, RunEndT] | None` | State persistence interface, defaults to `SimpleStatePersistence` if `None`. | `None` |\n| `span` | `AbstractContextManager[Any] | None` | The span to use for the graph run. If not provided, a new span will be created. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n\nReturns: A GraphRun that can be async iterated over to drive the graph to completion.\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\n@asynccontextmanager\nasync def iter(\n    self,\n    start_node: BaseNode[StateT, DepsT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    persistence: BaseStatePersistence[StateT, RunEndT] | None = None,\n    span: AbstractContextManager[Any] | None = None,\n    infer_name: bool = True,\n) -> AsyncIterator[GraphRun[StateT, DepsT, RunEndT]]:\n    \"\"\"A contextmanager which can be used to iterate over the graph's nodes as they are executed.\n\n    This method returns a `GraphRun` object which can be used to async-iterate over the nodes of this `Graph` as\n    they are executed. This is the API to use if you want to record or interact with the nodes as the graph\n    execution unfolds.\n\n    The `GraphRun` can also be used to manually drive the graph execution by calling\n    [`GraphRun.next`][pydantic_graph.graph.GraphRun.next].\n\n    The `GraphRun` provides access to the full run history, state, deps, and the final result of the run once\n    it has completed.\n\n    For more details, see the API documentation of [`GraphRun`][pydantic_graph.graph.GraphRun].\n\n    Args:\n        start_node: the first node to run. Since the graph definition doesn't define the entry point in the graph,\n            you need to provide the starting node.\n        state: The initial state of the graph.\n        deps: The dependencies of the graph.\n        persistence: State persistence interface, defaults to\n            [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n        span: The span to use for the graph run. If not provided, a new span will be created.", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-84dbc168c641445f220e32b439e688dd", "__created_at__": 1744231651.420514, "content": ": the first node to run. Since the graph definition doesn't define the entry point in the graph,\n            you need to provide the starting node.\n        state: The initial state of the graph.\n        deps: The dependencies of the graph.\n        persistence: State persistence interface, defaults to\n            [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n        span: The span to use for the graph run. If not provided, a new span will be created.\n        infer_name: Whether to infer the graph name from the calling frame.\n\n    Returns: A GraphRun that can be async iterated over to drive the graph to completion.\n    \"\"\"\n    if infer_name and self.name is None:\n        # f_back because `asynccontextmanager` adds one frame\n        if frame := inspect.currentframe():  # pragma: no branch\n            self._infer_name(frame.f_back)\n\n    if persistence is None:\n        persistence = SimpleStatePersistence()\n    persistence.set_graph_types(self)\n\n    if self.auto_instrument and span is None:\n        span = logfire_api.span('run graph {graph.name}', graph=self)\n\n    with ExitStack() as stack:\n        if span is not None:\n            stack.enter_context(span)\n        yield GraphRun[StateT, DepsT, RunEndT](\n            graph=self, start_node=start_node, persistence=persistence, state=state, deps=deps\n        )\n\n```\n\n\n\n\n#### iter\\_from\\_persistence `async`\n\n```\niter_from_persistence(\n    persistence: BaseStatePersistence[StateT, RunEndT],\n    *,\n    deps: DepsT = None,\n    span: AbstractContextManager[Any] | None = None,\n    infer_name: bool = True\n) -> AsyncIterator[GraphRun[StateT, DepsT, RunEndT]]\n\n```\n\nA contextmanager to iterate over the graph's nodes as they are executed, created from a persistence object.\n\nThis method has similar functionality to `iter`,\nbut instead of passing the node to run, it will restore the node and state from state persistence.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `persistence` | `BaseStatePersistence[StateT, RunEndT]` | The state persistence interface to use. | *required* |\n| `deps` | `DepsT` | The dependencies of the graph. | `None` |\n| `span` | `AbstractContextManager[Any] | None` | The span to use for the graph run. If not provided, a new span will be created. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n\nReturns: A GraphRun that can be async iterated over to drive the graph to completion.\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\n@asynccontextmanager\nasync def iter_from_persistence(\n    self,\n    persistence: BaseStatePersistence[StateT, RunEndT],\n    *,\n    deps: DepsT = None,\n    span: AbstractContextManager[Any] | None = None,\n    infer_name: bool = True,\n) -> AsyncIterator[GraphRun[StateT, DepsT, RunEndT]]:\n    \"\"\"A contextmanager to iterate over the graph's nodes as they are executed, created from a persistence object.\n\n    This method has similar functionality to [`iter`][pydantic_graph.graph.Graph.iter],\n    but instead of passing the node to run, it will restore the node and state from state persistence.\n\n    Args:\n        persistence: The state persistence interface to use.\n        deps: The dependencies of the graph.\n        span: The span to use for the graph run. If not provided, a new span will be created.\n        infer_name: Whether to infer the graph name from the calling frame.\n\n    Returns: A GraphRun that can be async iterated over to drive the graph to completion.\n    \"\"\"\n    if infer_name and self.name is None:\n        # f_back because `asynccontextmanager` adds one frame\n        if frame := inspect.currentframe():  # pragma: no branch\n            self._infer_name(frame.f_back)\n\n    persistence.set_graph_types(self)\n\n    snapshot = await persistence.load_next()\n    if snapshot is None:\n        raise exceptions.GraphRuntimeError('Unable to restore snapshot from state persistence.')\n\n    snapshot.node.set_snapshot_id(snapshot.id)\n\n    if self.auto_instrument and span is None:\n        span = logfire_api.span('run graph {graph.name}', graph=self)\n\n    with ExitStack() as stack:\n        if span is not None:\n            stack.enter_context(span)\n        yield GraphRun[StateT, DepsT, RunEndT](\n            graph=self,\n            start_node=snapshot.node,\n            persistence=persistence,\n            state=snapshot.state,\n            deps=deps,\n            snapshot_id=snapshot.id,\n        )\n\n```\n\n\n\n\n#### initialize `async`\n\n```\ninitialize(\n    node: BaseNode[StateT, DepsT, RunEndT],\n    persistence: BaseStatePersistence[StateT, RunEndT],\n    *,\n    state: StateT = None,\n    infer_name: bool = True\n) -> None\n\n```\n\nInitialize a new graph run in persistence without running it.\n\nThis is useful if you want to set up a graph run to be run later, e.g. via\n`iter_from_persistence`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `node` | `BaseNode[StateT, DepsT, RunEndT]` | The node to run first. | *required* |\n| `persistence` | `BaseStatePersistence[StateT,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-b713802bb6676d53f06afddee9aa1d12", "__created_at__": 1744231651.420514, "content": "persistence without running it.\n\nThis is useful if you want to set up a graph run to be run later, e.g. via\n`iter_from_persistence`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `node` | `BaseNode[StateT, DepsT, RunEndT]` | The node to run first. | *required* |\n| `persistence` | `BaseStatePersistence[StateT, RunEndT]` | State persistence interface. | *required* |\n| `state` | `StateT` | The start state of the graph. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\nasync def initialize(\n    self,\n    node: BaseNode[StateT, DepsT, RunEndT],\n    persistence: BaseStatePersistence[StateT, RunEndT],\n    *,\n    state: StateT = None,\n    infer_name: bool = True,\n) -> None:\n    \"\"\"Initialize a new graph run in persistence without running it.\n\n    This is useful if you want to set up a graph run to be run later, e.g. via\n    [`iter_from_persistence`][pydantic_graph.graph.Graph.iter_from_persistence].\n\n    Args:\n        node: The node to run first.\n        persistence: State persistence interface.\n        state: The start state of the graph.\n        infer_name: Whether to infer the graph name from the calling frame.\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n\n    persistence.set_graph_types(self)\n    await persistence.snapshot_node(state, node)\n\n```\n\n\n\n\n#### next `async`\n\n```\nnext(\n    node: BaseNode[StateT, DepsT, RunEndT],\n    persistence: BaseStatePersistence[StateT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    infer_name: bool = True\n) -> BaseNode[StateT, DepsT, Any] | End[RunEndT]\n\n```\n\nRun a node in the graph and return the next node to run.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `node` | `BaseNode[StateT, DepsT, RunEndT]` | The node to run. | *required* |\n| `persistence` | `BaseStatePersistence[StateT, RunEndT]` | State persistence interface, defaults to `SimpleStatePersistence` if `None`. | *required* |\n| `state` | `StateT` | The current state of the graph. | `None` |\n| `deps` | `DepsT` | The dependencies of the graph. | `None` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `BaseNode[StateT, DepsT, Any] | End[RunEndT]` | The next node to run or `End` if the graph has finished. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\n@deprecated('`next` is deprecated, use `async with graph.iter(...) as run:  run.next()` instead')\nasync def next(\n    self,\n    node: BaseNode[StateT, DepsT, RunEndT],\n    persistence: BaseStatePersistence[StateT, RunEndT],\n    *,\n    state: StateT = None,\n    deps: DepsT = None,\n    infer_name: bool = True,\n) -> BaseNode[StateT, DepsT, Any] | End[RunEndT]:\n    \"\"\"Run a node in the graph and return the next node to run.\n\n    Args:\n        node: The node to run.\n        persistence: State persistence interface, defaults to\n            [`SimpleStatePersistence`][pydantic_graph.SimpleStatePersistence] if `None`.\n        state: The current state of the graph.\n        deps: The dependencies of the graph.\n        infer_name: Whether to infer the graph name from the calling frame.\n\n    Returns:\n        The next node to run or [`End`][pydantic_graph.nodes.End] if the graph has finished.\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n\n    persistence.set_graph_types(self)\n    run = GraphRun[StateT, DepsT, RunEndT](\n        graph=self,\n        start_node=node,\n        persistence=persistence,\n        state=state,\n        deps=deps,\n    )\n    return await run.next(node)\n\n```\n\n\n\n\n#### mermaid\\_code\n\n```\nmermaid_code(\n    *,\n    start_node: (\n        Sequence[NodeIdent] | NodeIdent | None\n    ) = None,\n    title: str | None | Literal[False] = None,\n    edge_labels: bool = True,\n    notes: bool = True,\n    highlighted_nodes: (\n        Sequence[NodeIdent] | NodeIdent | None\n    ) = None,\n    highlight_css: str = DEFAULT_HIGHLIGHT_CSS,\n    infer_name: bool = True,\n    direction: StateDiagramDirection | None = None\n) -> str\n\n```\n\nGenerate a diagram representing the graph as [mermaid](https://mermaid.js.org/) diagram.\n\nThis method calls `pydantic_graph.mermaid.generate_code`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- |", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-41cb6d18e75a14fbbb4ecaef7f988d07", "__created_at__": 1744231651.420514, "content": "] | NodeIdent | None\n    ) = None,\n    highlight_css: str = DEFAULT_HIGHLIGHT_CSS,\n    infer_name: bool = True,\n    direction: StateDiagramDirection | None = None\n) -> str\n\n```\n\nGenerate a diagram representing the graph as [mermaid](https://mermaid.js.org/) diagram.\n\nThis method calls `pydantic_graph.mermaid.generate_code`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `start_node` | `Sequence[NodeIdent] | NodeIdent | None` | The node or nodes which can start the graph. | `None` |\n| `title` | `str | None | Literal[False]` | The title of the diagram, use `False` to not include a title. | `None` |\n| `edge_labels` | `bool` | Whether to include edge labels. | `True` |\n| `notes` | `bool` | Whether to include notes on each node. | `True` |\n| `highlighted_nodes` | `Sequence[NodeIdent] | NodeIdent | None` | Optional node or nodes to highlight. | `None` |\n| `highlight_css` | `str` | The CSS to use for highlighting nodes. | `DEFAULT_HIGHLIGHT_CSS` |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n| `direction` | `StateDiagramDirection | None` | The direction of flow. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `str` | The mermaid code for the graph, which can then be rendered as a diagram. |\n\nHere's an example of generating a diagram for the graph from above:\n\nmermaid\\_never\\_42.py\n```\nfrom never_42 import Increment, never_42_graph\n\nprint(never_42_graph.mermaid_code(start_node=Increment))\n'''\n---\ntitle: never_42_graph\n---\nstateDiagram-v2\n  [*] --> Increment\n  Increment --> Check42\n  Check42 --> Increment\n  Check42 --> [*]\n'''\n\n```\n\nThe rendered diagram will look like this:\n\n```\n---\ntitle: never_42_graph\n---\nstateDiagram-v2\n  [*] --> Increment\n  Increment --> Check42\n  Check42 --> Increment\n  Check42 --> [*]\n```\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\ndef mermaid_code(\n    self,\n    *,\n    start_node: Sequence[mermaid.NodeIdent] | mermaid.NodeIdent | None = None,\n    title: str | None | typing_extensions.Literal[False] = None,\n    edge_labels: bool = True,\n    notes: bool = True,\n    highlighted_nodes: Sequence[mermaid.NodeIdent] | mermaid.NodeIdent | None = None,\n    highlight_css: str = mermaid.DEFAULT_HIGHLIGHT_CSS,\n    infer_name: bool = True,\n    direction: mermaid.StateDiagramDirection | None = None,\n) -> str:\n    \"\"\"Generate a diagram representing the graph as [mermaid](https://mermaid.js.org/) diagram.\n\n    This method calls [`pydantic_graph.mermaid.generate_code`][pydantic_graph.mermaid.generate_code].\n\n    Args:\n        start_node: The node or nodes which can start the graph.\n        title: The title of the diagram, use `False` to not include a title.\n        edge_labels: Whether to include edge labels.\n        notes: Whether to include notes on each node.\n        highlighted_nodes: Optional node or nodes to highlight.\n        highlight_css: The CSS to use for highlighting nodes.\n        infer_name: Whether to infer the graph name from the calling frame.\n        direction: The direction of flow.\n\n    Returns:\n        The mermaid code for the graph, which can then be rendered as a diagram.\n\n    Here's an example of generating a diagram for the graph from [above][pydantic_graph.graph.Graph]:\n\n    ```py {title=\"mermaid_never_42.py\" py=\"3.10\"}\n    from never_42 import Increment, never_42_graph\n\n    print(never_42_graph.mermaid_code(start_node=Increment))\n    '''\n    ---\n    title: never_42_graph\n    ---\n    stateDiagram-v2\n      [*] --> Increment\n      Increment --> Check42\n      Check42 --> Increment\n      Check42 --> [*]\n    '''\n    ```\n\n    The rendered diagram will look like this:\n\n    ```mermaid\n    ---\n    title: never_42_graph\n    ---\n    stateDiagram-v2\n      [*] --> Increment\n      Increment --> Check42\n      Check42 --> Increment\n      Check42 --> [*]\n    ```\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n    if title is None and self.name:\n        title = self.name\n    return mermaid.generate_code(\n        self,\n        start_node=start_node,\n        highlighted_nodes=highlighted_nodes,\n        highlight_css=highlight_css,\n        title=title or None,\n        edge_labels=edge_labels,\n        notes=notes,\n        direction=direction,\n    )\n\n```\n\n\n\n\n#### mermaid\\_image\n\n```\nmermaid_image(\n    infer_name: bool = True, **kwargs: Unpack[MermaidConfig]\n) -> bytes\n\n```\n\nGenerate a diagram representing the graph as an image.\n\nThe format and diagram can be customized using `kwargs`,\nsee `pydantic_graph.mermaid.MermaidConfig`.\n\nUses external service\n\nThis method makes a request to [mermaid.ink](https://mermaid.ink) to render the image", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-084c0bc189005e46b59c6a368ad8ed78", "__created_at__": 1744231651.420514, "content": "#### mermaid\\_image\n\n```\nmermaid_image(\n    infer_name: bool = True, **kwargs: Unpack[MermaidConfig]\n) -> bytes\n\n```\n\nGenerate a diagram representing the graph as an image.\n\nThe format and diagram can be customized using `kwargs`,\nsee `pydantic_graph.mermaid.MermaidConfig`.\n\nUses external service\n\nThis method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`\nis a free service not affiliated with Pydantic.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n| `**kwargs` | `Unpack[MermaidConfig]` | Additional arguments to pass to `mermaid.request_image`. | `{}` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | The image bytes. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\ndef mermaid_image(\n    self, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid.MermaidConfig]\n) -> bytes:\n    \"\"\"Generate a diagram representing the graph as an image.\n\n    The format and diagram can be customized using `kwargs`,\n    see [`pydantic_graph.mermaid.MermaidConfig`][pydantic_graph.mermaid.MermaidConfig].\n\n    !!! note \"Uses external service\"\n        This method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`\n        is a free service not affiliated with Pydantic.\n\n    Args:\n        infer_name: Whether to infer the graph name from the calling frame.\n        **kwargs: Additional arguments to pass to `mermaid.request_image`.\n\n    Returns:\n        The image bytes.\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n    if 'title' not in kwargs and self.name:\n        kwargs['title'] = self.name\n    return mermaid.request_image(self, **kwargs)\n\n```\n\n\n\n\n#### mermaid\\_save\n\n```\nmermaid_save(\n    path: Path | str,\n    /,\n    *,\n    infer_name: bool = True,\n    **kwargs: Unpack[MermaidConfig],\n) -> None\n\n```\n\nGenerate a diagram representing the graph and save it as an image.\n\nThe format and diagram can be customized using `kwargs`,\nsee `pydantic_graph.mermaid.MermaidConfig`.\n\nUses external service\n\nThis method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`\nis a free service not affiliated with Pydantic.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `path` | `Path | str` | The path to save the image to. | *required* |\n| `infer_name` | `bool` | Whether to infer the graph name from the calling frame. | `True` |\n| `**kwargs` | `Unpack[MermaidConfig]` | Additional arguments to pass to `mermaid.save_image`. | `{}` |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\ndef mermaid_save(\n    self, path: Path | str, /, *, infer_name: bool = True, **kwargs: typing_extensions.Unpack[mermaid.MermaidConfig]\n) -> None:\n    \"\"\"Generate a diagram representing the graph and save it as an image.\n\n    The format and diagram can be customized using `kwargs`,\n    see [`pydantic_graph.mermaid.MermaidConfig`][pydantic_graph.mermaid.MermaidConfig].\n\n    !!! note \"Uses external service\"\n        This method makes a request to [mermaid.ink](https://mermaid.ink) to render the image, `mermaid.ink`\n        is a free service not affiliated with Pydantic.\n\n    Args:\n        path: The path to save the image to.\n        infer_name: Whether to infer the graph name from the calling frame.\n        **kwargs: Additional arguments to pass to `mermaid.save_image`.\n    \"\"\"\n    if infer_name and self.name is None:\n        self._infer_name(inspect.currentframe())\n    if 'title' not in kwargs and self.name:\n        kwargs['title'] = self.name\n    mermaid.save_image(path, self, **kwargs)\n\n```\n\n\n\n\n#### get\\_nodes\n\n```\nget_nodes() -> (\n    Sequence[type[BaseNode[StateT, DepsT, RunEndT]]]\n)\n\n```\n\nGet the nodes in the graph.\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\ndef get_nodes(self) -> Sequence[type[BaseNode[StateT, DepsT, RunEndT]]]:\n    \"\"\"Get the nodes in the graph.\"\"\"\n    return [node_def.node for node_def in self.node_defs.values()]\n\n```\n\n\n\n\n\n\n\n### GraphRun\n\nBases: `Generic[StateT, DepsT, RunEndT]`\n\nA stateful, async-iterable run of a `Graph`.\n\nYou typically get a `GraphRun` instance from calling\n`async with [my_graph.iter(...)][pydantic_graph.graph.Graph.iter] as graph_run:`. That gives you the ability to iterate\nthrough nodes as they run, either by `async for` iteration or by repeatedly calling `.next(...)`.\n\nHere's an example of iterating over the graph from above:\niter\\_never\\_42.py", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-5450fc697e851cd84d7c84b663431a41", "__created_at__": 1744231651.420514, "content": "T]`\n\nA stateful, async-iterable run of a `Graph`.\n\nYou typically get a `GraphRun` instance from calling\n`async with [my_graph.iter(...)][pydantic_graph.graph.Graph.iter] as graph_run:`. That gives you the ability to iterate\nthrough nodes as they run, either by `async for` iteration or by repeatedly calling `.next(...)`.\n\nHere's an example of iterating over the graph from above:\niter\\_never\\_42.py\n```\nfrom copy import deepcopy\nfrom never_42 import Increment, MyState, never_42_graph\n\nasync def main():\n    state = MyState(1)\n    async with never_42_graph.iter(Increment(), state=state) as graph_run:\n        node_states = [(graph_run.next_node, deepcopy(graph_run.state))]\n        async for node in graph_run:\n            node_states.append((node, deepcopy(graph_run.state)))\n        print(node_states)\n        '''\n        [\n            (Increment(), MyState(number=1)),\n            (Increment(), MyState(number=1)),\n            (Check42(), MyState(number=2)),\n            (End(data=2), MyState(number=2)),\n        ]\n        '''\n\n    state = MyState(41)\n    async with never_42_graph.iter(Increment(), state=state) as graph_run:\n        node_states = [(graph_run.next_node, deepcopy(graph_run.state))]\n        async for node in graph_run:\n            node_states.append((node, deepcopy(graph_run.state)))\n        print(node_states)\n        '''\n        [\n            (Increment(), MyState(number=41)),\n            (Increment(), MyState(number=41)),\n            (Check42(), MyState(number=42)),\n            (Increment(), MyState(number=42)),\n            (Check42(), MyState(number=43)),\n            (End(data=43), MyState(number=43)),\n        ]\n        '''\n\n```\n\n\nSee the `GraphRun.next` documentation for an example of how to manually\ndrive the graph run.\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\nclass GraphRun(Generic[StateT, DepsT, RunEndT]):\n    \"\"\"A stateful, async-iterable run of a [`Graph`][pydantic_graph.graph.Graph].\n\n    You typically get a `GraphRun` instance from calling\n    `async with [my_graph.iter(...)][pydantic_graph.graph.Graph.iter] as graph_run:`. That gives you the ability to iterate\n    through nodes as they run, either by `async for` iteration or by repeatedly calling `.next(...)`.\n\n    Here's an example of iterating over the graph from [above][pydantic_graph.graph.Graph]:\n    ```py {title=\"iter_never_42.py\" noqa=\"I001\" py=\"3.10\"}\n    from copy import deepcopy\n    from never_42 import Increment, MyState, never_42_graph\n\n    async def main():\n        state = MyState(1)\n        async with never_42_graph.iter(Increment(), state=state) as graph_run:\n            node_states = [(graph_run.next_node, deepcopy(graph_run.state))]\n            async for node in graph_run:\n                node_states.append((node, deepcopy(graph_run.state)))\n            print(node_states)\n            '''\n            [\n                (Increment(), MyState(number=1)),\n                (Increment(), MyState(number=1)),\n                (Check42(), MyState(number=2)),\n                (End(data=2), MyState(number=2)),\n            ]\n            '''\n\n        state = MyState(41)\n        async with never_42_graph.iter(Increment(), state=state) as graph_run:\n            node_states = [(graph_run.next_node, deepcopy(graph_run.state))]\n            async for node in graph_run:\n                node_states.append((node, deepcopy(graph_run.state)))\n            print(node_states)\n            '''\n            [\n                (Increment(), MyState(number=41)),\n                (Increment(), MyState(number=41)),\n                (Check42(), MyState(number=42)),\n                (Increment(), MyState(number=42)),\n                (Check42(), MyState(number=43)),\n                (End(data=43), MyState(number=43)),\n            ]\n            '''\n    ```\n\n    See the [`GraphRun.next` documentation][pydantic_graph.graph.GraphRun.next] for an example of how to manually\n    drive the graph run.\n    \"\"\"\n\n    def __init__(\n        self,\n        *,\n        graph: Graph[StateT, DepsT, RunEndT],\n        start_node: BaseNode[StateT, DepsT, RunEndT],\n        persistence: BaseStatePersistence[StateT, RunEndT],\n        state: StateT,\n        deps: DepsT,\n        snapshot_id: str | None = None,\n    ):\n        \"\"\"Create a new run for a given graph, starting at the specified node.\n\n        Typically, you'll use [`Graph.iter`][pydantic_graph.graph.Graph.iter] rather than calling this directly.\n\n        Args:\n            graph: The [`Graph`][pydantic_graph.graph.Graph] to run.\n            start_node: The node where execution will begin.\n            persistence: State persistence interface.\n            state: A shared state object or primitive (like a counter, dataclass, etc.) that is available\n                to all nodes via `ctx.state`.\n            deps: Optional dependencies that each node can access via `ctx.deps`, e.g. database connections,\n                configuration, or logging clients.\n            snapshot_id: The ID of the snapshot the node came from.\n        \"\"\"\n        self.graph = graph\n        self.persistence = persistence\n        self._snapshot_id: str | None = snapshot_id\n        self.state = state\n        self.deps = deps\n\n        self._next_node: BaseNode[StateT, DepsT, RunEndT]", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-cf0b5eddc59e331e374c5180dc0f0b26", "__created_at__": 1744231651.420514, "content": "Optional dependencies that each node can access via `ctx.deps`, e.g. database connections,\n                configuration, or logging clients.\n            snapshot_id: The ID of the snapshot the node came from.\n        \"\"\"\n        self.graph = graph\n        self.persistence = persistence\n        self._snapshot_id: str | None = snapshot_id\n        self.state = state\n        self.deps = deps\n\n        self._next_node: BaseNode[StateT, DepsT, RunEndT] | End[RunEndT] = start_node\n        self._is_started: bool = False\n\n    @property\n    def next_node(self) -> BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]:\n        \"\"\"The next node that will be run in the graph.\n\n        This is the next node that will be used during async iteration, or if a node is not passed to `self.next(...)`.\n        \"\"\"\n        return self._next_node\n\n    @property\n    def result(self) -> GraphRunResult[StateT, RunEndT] | None:\n        \"\"\"The final result of the graph run if the run is completed, otherwise `None`.\"\"\"\n        if not isinstance(self._next_node, End):\n            return None  # The GraphRun has not finished running\n        return GraphRunResult(\n            self._next_node.data,\n            state=self.state,\n            persistence=self.persistence,\n        )\n\n    async def next(\n        self, node: BaseNode[StateT, DepsT, RunEndT] | None = None\n    ) -> BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]:\n        \"\"\"Manually drive the graph run by passing in the node you want to run next.\n\n        This lets you inspect or mutate the node before continuing execution, or skip certain nodes\n        under dynamic conditions. The graph run should stop when you return an [`End`][pydantic_graph.nodes.End] node.\n\n        Here's an example of using `next` to drive the graph from [above][pydantic_graph.graph.Graph]:\n        ```py {title=\"next_never_42.py\" noqa=\"I001\" py=\"3.10\"}\n        from copy import deepcopy\n        from pydantic_graph import End\n        from never_42 import Increment, MyState, never_42_graph\n\n        async def main():\n            state = MyState(48)\n            async with never_42_graph.iter(Increment(), state=state) as graph_run:\n                next_node = graph_run.next_node  # start with the first node\n                node_states = [(next_node, deepcopy(graph_run.state))]\n\n                while not isinstance(next_node, End):\n                    if graph_run.state.number == 50:\n                        graph_run.state.number = 42\n                    next_node = await graph_run.next(next_node)\n                    node_states.append((next_node, deepcopy(graph_run.state)))\n\n                print(node_states)\n                '''\n                [\n                    (Increment(), MyState(number=48)),\n                    (Check42(), MyState(number=49)),\n                    (End(data=49), MyState(number=49)),\n                ]\n                '''\n        ```\n\n        Args:\n            node: The node to run next in the graph. If not specified, uses `self.next_node`, which is initialized to\n                the `start_node` of the run and updated each time a new node is returned.\n\n        Returns:\n            The next node returned by the graph logic, or an [`End`][pydantic_graph.nodes.End] node if\n            the run has completed.\n        \"\"\"\n        if node is None:\n            # This cast is necessary because self._next_node could be an `End`. You'll get a runtime error if that's\n            # the case, but if it is, the only way to get there would be to have tried calling next manually after\n            # the run finished. Either way, maybe it would be better to not do this cast...\n            node = cast(BaseNode[StateT, DepsT, RunEndT], self._next_node)\n            node_snapshot_id = node.get_snapshot_id()\n        else:\n            node_snapshot_id = node.get_snapshot_id()\n\n        if node_snapshot_id != self._snapshot_id:\n            await self.persistence.snapshot_node_if_new(node_snapshot_id, self.state, node)\n            self._snapshot_id = node_snapshot_id\n\n        if not isinstance(node, BaseNode):\n            # While technically this is not compatible with the documented method signature, it's an easy mistake to\n            # make, and we should eagerly provide a more helpful error message than you'd get otherwise.\n            raise TypeError(f'`next` must be called with a `BaseNode` instance, got {node!r}.')\n\n        node_id = node.get_node_id()\n        if node_id not in self.graph.node_defs:\n            raise exceptions.GraphRuntimeError(f'Node `{node}` is not in the graph.')\n\n        with ExitStack() as stack:\n            if self.graph.auto_instrument:\n                stack.enter_context(_logfire.span('run node {node_id}', node_id=node_id, node=node))\n\n            async with self.persistence.record_run(node_snapshot_id):\n                ctx = GraphRunContext(self.state, self.deps)\n                self._next_node = await node.run(ctx)\n\n        if isinstance(self._next_node, End):\n            self._snapshot_id = self._next_node.get_snapshot_id()\n            await self.persistence.snapshot_end(self.state, self._next_node)\n        elif isinstance(self._next_node, BaseNode):\n            self._snapshot_id = self._next_node.get_snapshot_id()\n            await self.persistence.snapshot_node(self.state, self._next_node)\n        else:\n            raise exceptions.GraphRuntimeError(\n                f'Invalid node return type: `{type(self._next_node).__name__}`. Expected `BaseNode`", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-e84d9789a2133f11a435754d1aaecda4", "__created_at__": 1744231651.420514, "content": "self._snapshot_id = self._next_node.get_snapshot_id()\n            await self.persistence.snapshot_end(self.state, self._next_node)\n        elif isinstance(self._next_node, BaseNode):\n            self._snapshot_id = self._next_node.get_snapshot_id()\n            await self.persistence.snapshot_node(self.state, self._next_node)\n        else:\n            raise exceptions.GraphRuntimeError(\n                f'Invalid node return type: `{type(self._next_node).__name__}`. Expected `BaseNode` or `End`.'\n            )\n\n        return self._next_node\n\n    def __aiter__(self) -> AsyncIterator[BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]]:\n        return self\n\n    async def __anext__(self) -> BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]:\n        \"\"\"Use the last returned node as the input to `Graph.next`.\"\"\"\n        if not self._is_started:\n            self._is_started = True\n            return self._next_node\n\n        if isinstance(self._next_node, End):\n            raise StopAsyncIteration\n\n        return await self.next(self._next_node)\n\n    def __repr__(self) -> str:\n        return f''\n\n```\n\n\n#### \\_\\_init\\_\\_\n\n```\n__init__(\n    *,\n    graph: Graph[StateT, DepsT, RunEndT],\n    start_node: BaseNode[StateT, DepsT, RunEndT],\n    persistence: BaseStatePersistence[StateT, RunEndT],\n    state: StateT,\n    deps: DepsT,\n    snapshot_id: str | None = None\n)\n\n```\n\nCreate a new run for a given graph, starting at the specified node.\n\nTypically, you'll use `Graph.iter` rather than calling this directly.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `graph` | `Graph[StateT, DepsT, RunEndT]` | The `Graph` to run. | *required* |\n| `start_node` | `BaseNode[StateT, DepsT, RunEndT]` | The node where execution will begin. | *required* |\n| `persistence` | `BaseStatePersistence[StateT, RunEndT]` | State persistence interface. | *required* |\n| `state` | `StateT` | A shared state object or primitive (like a counter, dataclass, etc.) that is available to all nodes via `ctx.state`. | *required* |\n| `deps` | `DepsT` | Optional dependencies that each node can access via `ctx.deps`, e.g. database connections, configuration, or logging clients. | *required* |\n| `snapshot_id` | `str | None` | The ID of the snapshot the node came from. | `None` |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\ndef __init__(\n    self,\n    *,\n    graph: Graph[StateT, DepsT, RunEndT],\n    start_node: BaseNode[StateT, DepsT, RunEndT],\n    persistence: BaseStatePersistence[StateT, RunEndT],\n    state: StateT,\n    deps: DepsT,\n    snapshot_id: str | None = None,\n):\n    \"\"\"Create a new run for a given graph, starting at the specified node.\n\n    Typically, you'll use [`Graph.iter`][pydantic_graph.graph.Graph.iter] rather than calling this directly.\n\n    Args:\n        graph: The [`Graph`][pydantic_graph.graph.Graph] to run.\n        start_node: The node where execution will begin.\n        persistence: State persistence interface.\n        state: A shared state object or primitive (like a counter, dataclass, etc.) that is available\n            to all nodes via `ctx.state`.\n        deps: Optional dependencies that each node can access via `ctx.deps`, e.g. database connections,\n            configuration, or logging clients.\n        snapshot_id: The ID of the snapshot the node came from.\n    \"\"\"\n    self.graph = graph\n    self.persistence = persistence\n    self._snapshot_id: str | None = snapshot_id\n    self.state = state\n    self.deps = deps\n\n    self._next_node: BaseNode[StateT, DepsT, RunEndT] | End[RunEndT] = start_node\n    self._is_started: bool = False\n\n```\n\n\n\n\n#### next\\_node `property`\n\n```\nnext_node: BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]\n\n```\n\nThe next node that will be run in the graph.\n\nThis is the next node that will be used during async iteration, or if a node is not passed to `self.next(...)`.\n\n\n\n#### result `property`\n\n```\nresult: GraphRunResult[StateT, RunEndT] | None\n\n```\n\nThe final result of the graph run if the run is completed, otherwise `None`.\n\n\n\n#### next `async`\n\n```\nnext(\n    node: BaseNode[StateT, DepsT, RunEndT] | None = None,\n) -> BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]\n\n```\n\nManually drive the graph run by passing in the node you want to run next.\n\nThis lets you inspect or mutate the node before continuing execution, or skip certain nodes\nunder dynamic conditions. The graph run should stop when you return an `End` node.\n\nHere's an example of using `next` to drive the graph from above:\nnext\\_never\\_42.py\n```\nfrom copy import deepcopy", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-074bfa68ac0e63b1f628efd6720d1253", "__created_at__": 1744231651.420514, "content": ", DepsT, RunEndT] | End[RunEndT]\n\n```\n\nManually drive the graph run by passing in the node you want to run next.\n\nThis lets you inspect or mutate the node before continuing execution, or skip certain nodes\nunder dynamic conditions. The graph run should stop when you return an `End` node.\n\nHere's an example of using `next` to drive the graph from above:\nnext\\_never\\_42.py\n```\nfrom copy import deepcopy\nfrom pydantic_graph import End\nfrom never_42 import Increment, MyState, never_42_graph\n\nasync def main():\n    state = MyState(48)\n    async with never_42_graph.iter(Increment(), state=state) as graph_run:\n        next_node = graph_run.next_node  # start with the first node\n        node_states = [(next_node, deepcopy(graph_run.state))]\n\n        while not isinstance(next_node, End):\n            if graph_run.state.number == 50:\n                graph_run.state.number = 42\n            next_node = await graph_run.next(next_node)\n            node_states.append((next_node, deepcopy(graph_run.state)))\n\n        print(node_states)\n        '''\n        [\n            (Increment(), MyState(number=48)),\n            (Check42(), MyState(number=49)),\n            (End(data=49), MyState(number=49)),\n        ]\n        '''\n\n```\n\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `node` | `BaseNode[StateT, DepsT, RunEndT] | None` | The node to run next in the graph. If not specified, uses `self.next_node`, which is initialized to the `start_node` of the run and updated each time a new node is returned. | `None` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]` | The next node returned by the graph logic, or an `End` node if |\n| `BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]` | the run has completed. |\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\nasync def next(\n    self, node: BaseNode[StateT, DepsT, RunEndT] | None = None\n) -> BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]:\n    \"\"\"Manually drive the graph run by passing in the node you want to run next.\n\n    This lets you inspect or mutate the node before continuing execution, or skip certain nodes\n    under dynamic conditions. The graph run should stop when you return an [`End`][pydantic_graph.nodes.End] node.\n\n    Here's an example of using `next` to drive the graph from [above][pydantic_graph.graph.Graph]:\n    ```py {title=\"next_never_42.py\" noqa=\"I001\" py=\"3.10\"}\n    from copy import deepcopy\n    from pydantic_graph import End\n    from never_42 import Increment, MyState, never_42_graph\n\n    async def main():\n        state = MyState(48)\n        async with never_42_graph.iter(Increment(), state=state) as graph_run:\n            next_node = graph_run.next_node  # start with the first node\n            node_states = [(next_node, deepcopy(graph_run.state))]\n\n            while not isinstance(next_node, End):\n                if graph_run.state.number == 50:\n                    graph_run.state.number = 42\n                next_node = await graph_run.next(next_node)\n                node_states.append((next_node, deepcopy(graph_run.state)))\n\n            print(node_states)\n            '''\n            [\n                (Increment(), MyState(number=48)),\n                (Check42(), MyState(number=49)),\n                (End(data=49), MyState(number=49)),\n            ]\n            '''\n    ```\n\n    Args:\n        node: The node to run next in the graph. If not specified, uses `self.next_node`, which is initialized to\n            the `start_node` of the run and updated each time a new node is returned.\n\n    Returns:\n        The next node returned by the graph logic, or an [`End`][pydantic_graph.nodes.End] node if\n        the run has completed.\n    \"\"\"\n    if node is None:\n        # This cast is necessary because self._next_node could be an `End`. You'll get a runtime error if that's\n        # the case, but if it is, the only way to get there would be to have tried calling next manually after\n        # the run finished. Either way, maybe it would be better to not do this cast...\n        node = cast(BaseNode[StateT, DepsT, RunEndT], self._next_node)\n        node_snapshot_id = node.get_snapshot_id()\n    else:\n        node_snapshot_id = node.get_snapshot_id()\n\n    if node_snapshot_id != self._snapshot_id:\n        await self.persistence.snapshot_node_if_new(node_snapshot_id, self.state, node)\n        self._snapshot_id = node_snapshot_id\n\n    if not isinstance(node, BaseNode):\n        # While technically this is not compatible with the documented method signature, it's an easy mistake to\n        # make, and we should eagerly provide a more helpful error message than you'd get otherwise.\n        raise TypeError(f'`next` must be called with a `BaseNode` instance, got {node!r}.')\n\n    node_id = node.get_node_id()\n    if node_id not in self.graph.node_defs:\n        raise exceptions.GraphRuntimeError(f'Node `{node}` is not in the graph.')\n\n    with Exit", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-2d3139a4102a477030ac7d07fb813c82", "__created_at__": 1744231651.420514, "content": "compatible with the documented method signature, it's an easy mistake to\n        # make, and we should eagerly provide a more helpful error message than you'd get otherwise.\n        raise TypeError(f'`next` must be called with a `BaseNode` instance, got {node!r}.')\n\n    node_id = node.get_node_id()\n    if node_id not in self.graph.node_defs:\n        raise exceptions.GraphRuntimeError(f'Node `{node}` is not in the graph.')\n\n    with ExitStack() as stack:\n        if self.graph.auto_instrument:\n            stack.enter_context(_logfire.span('run node {node_id}', node_id=node_id, node=node))\n\n        async with self.persistence.record_run(node_snapshot_id):\n            ctx = GraphRunContext(self.state, self.deps)\n            self._next_node = await node.run(ctx)\n\n    if isinstance(self._next_node, End):\n        self._snapshot_id = self._next_node.get_snapshot_id()\n        await self.persistence.snapshot_end(self.state, self._next_node)\n    elif isinstance(self._next_node, BaseNode):\n        self._snapshot_id = self._next_node.get_snapshot_id()\n        await self.persistence.snapshot_node(self.state, self._next_node)\n    else:\n        raise exceptions.GraphRuntimeError(\n            f'Invalid node return type: `{type(self._next_node).__name__}`. Expected `BaseNode` or `End`.'\n        )\n\n    return self._next_node\n\n```\n\n\n\n\n#### \\_\\_anext\\_\\_ `async`\n\n```\n__anext__() -> (\n    BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]\n)\n\n```\n\nUse the last returned node as the input to `Graph.next`.\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\nasync def __anext__(self) -> BaseNode[StateT, DepsT, RunEndT] | End[RunEndT]:\n    \"\"\"Use the last returned node as the input to `Graph.next`.\"\"\"\n    if not self._is_started:\n        self._is_started = True\n        return self._next_node\n\n    if isinstance(self._next_node, End):\n        raise StopAsyncIteration\n\n    return await self.next(self._next_node)\n\n```\n\n\n\n\n\n\n\n### GraphRunResult `dataclass`\n\nBases: `Generic[StateT, RunEndT]`\n\nThe final result of running a graph.\n\nSource code in `pydantic_graph/pydantic_graph/graph.py`\n```\n@dataclass\nclass GraphRunResult(Generic[StateT, RunEndT]):\n    \"\"\"The final result of running a graph.\"\"\"\n\n    output: RunEndT\n    state: StateT\n    persistence: BaseStatePersistence[StateT, RunEndT] = field(repr=False)\n\n```\n\n\n\n\n\n\n\n\n\n`pydantic_graph.mermaid`\n========================\n\n### DEFAULT\\_HIGHLIGHT\\_CSS `module-attribute`\n\n```\nDEFAULT_HIGHLIGHT_CSS = 'fill:#fdff32'\n\n```\n\nThe default CSS to use for highlighting nodes.\n\n\n\n### StateDiagramDirection `module-attribute`\n\n```\nStateDiagramDirection = Literal['TB', 'LR', 'RL', 'BT']\n\n```\n\nUsed to specify the direction of the state diagram generated by mermaid.\n\n* `'TB'`: Top to bottom, this is the default for mermaid charts.\n* `'LR'`: Left to right\n* `'RL'`: Right to left\n* `'BT'`: Bottom to top\n\n\n### generate\\_code\n\n```\ngenerate_code(\n    graph: Graph[Any, Any, Any],\n    /,\n    *,\n    start_node: (\n        Sequence[NodeIdent] | NodeIdent | None\n    ) = None,\n    highlighted_nodes: (\n        Sequence[NodeIdent] | NodeIdent | None\n    ) = None,\n    highlight_css: str = DEFAULT_HIGHLIGHT_CSS,\n    title: str | None = None,\n    edge_labels: bool = True,\n    notes: bool = True,\n    direction: StateDiagramDirection | None,\n) -> str\n\n```\n\nGenerate [Mermaid state diagram](https://mermaid.js.org/syntax/stateDiagram.html) code for a graph.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `graph` | `Graph[Any, Any, Any]` | The graph to generate the image for. | *required* |\n| `start_node` | `Sequence[NodeIdent] | NodeIdent | None` | Identifiers of nodes that start the graph. | `None` |\n| `highlighted_nodes` | `Sequence[NodeIdent] | NodeIdent | None` | Identifiers of nodes to highlight. | `None` |\n| `highlight_css` | `str` | CSS to use for highlighting nodes. | `DEFAULT_HIGHLIGHT_CSS` |\n| `title` | `str | None` | The title of the diagram. | `None` |\n| `edge_labels` | `bool` | Whether to include edge labels in the diagram. | `True` |\n| `notes` | `bool` | Whether to include notes in the diagram. | `True` |\n| `direction` | `StateDiagramDirection | None` | The direction of flow. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `str` | The Mermaid code for the graph. |\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n```\ndef generate_code(  # noqa: C901\n    graph: Graph[Any, Any, Any],\n    /,\n    *,\n    start_node: Sequence[NodeIdent] | NodeIdent | None = None,\n    highlighted_nodes: Sequence[NodeIdent] | NodeIdent |", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-903ceedfc8bca9b75a8ebb3eef35e7d8", "__created_at__": 1744231651.420514, "content": "Returns:\n\n| Type | Description |\n| --- | --- |\n| `str` | The Mermaid code for the graph. |\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n```\ndef generate_code(  # noqa: C901\n    graph: Graph[Any, Any, Any],\n    /,\n    *,\n    start_node: Sequence[NodeIdent] | NodeIdent | None = None,\n    highlighted_nodes: Sequence[NodeIdent] | NodeIdent | None = None,\n    highlight_css: str = DEFAULT_HIGHLIGHT_CSS,\n    title: str | None = None,\n    edge_labels: bool = True,\n    notes: bool = True,\n    direction: StateDiagramDirection | None,\n) -> str:\n    \"\"\"Generate [Mermaid state diagram](https://mermaid.js.org/syntax/stateDiagram.html) code for a graph.\n\n    Args:\n        graph: The graph to generate the image for.\n        start_node: Identifiers of nodes that start the graph.\n        highlighted_nodes: Identifiers of nodes to highlight.\n        highlight_css: CSS to use for highlighting nodes.\n        title: The title of the diagram.\n        edge_labels: Whether to include edge labels in the diagram.\n        notes: Whether to include notes in the diagram.\n        direction: The direction of flow.\n\n\n    Returns:\n        The Mermaid code for the graph.\n    \"\"\"\n    start_node_ids = set(_node_ids(start_node or ()))\n    for node_id in start_node_ids:\n        if node_id not in graph.node_defs:\n            raise LookupError(f'Start node \"{node_id}\" is not in the graph.')\n\n    lines: list[str] = []\n    if title:\n        lines = ['---', f'title: {title}', '---']\n    lines.append('stateDiagram-v2')\n    if direction is not None:\n        lines.append(f'  direction {direction}')\n    for node_id, node_def in graph.node_defs.items():\n        # we use round brackets (rounded box) for nodes other than the start and end\n        if node_id in start_node_ids:\n            lines.append(f'  [*] --> {node_id}')\n        if node_def.returns_base_node:\n            for next_node_id in graph.node_defs:\n                lines.append(f'  {node_id} --> {next_node_id}')\n        else:\n            for next_node_id, edge in node_def.next_node_edges.items():\n                line = f'  {node_id} --> {next_node_id}'\n                if edge_labels and edge.label:\n                    line += f': {edge.label}'\n                lines.append(line)\n        if end_edge := node_def.end_edge:\n            line = f'  {node_id} --> [*]'\n            if edge_labels and end_edge.label:\n                line += f': {end_edge.label}'\n            lines.append(line)\n\n        if notes and node_def.note:\n            lines.append(f'  note right of {node_id}')\n            # mermaid doesn't like multiple paragraphs in a note, and shows if so\n            clean_docs = re.sub('\\n{2,}', '\\n', node_def.note)\n            lines.append(indent(clean_docs, '    '))\n            lines.append('  end note')\n\n    if highlighted_nodes:\n        lines.append('')\n        lines.append(f'classDef highlighted {highlight_css}')\n        for node_id in _node_ids(highlighted_nodes):\n            if node_id not in graph.node_defs:\n                raise LookupError(f'Highlighted node \"{node_id}\" is not in the graph.')\n            lines.append(f'class {node_id} highlighted')\n\n    return '\\n'.join(lines)\n\n```\n\n\n\n\n### request\\_image\n\n```\nrequest_image(\n    graph: Graph[Any, Any, Any],\n    /,\n    **kwargs: Unpack[MermaidConfig],\n) -> bytes\n\n```\n\nGenerate an image of a Mermaid diagram using [mermaid.ink](https://mermaid.ink).\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `graph` | `Graph[Any, Any, Any]` | The graph to generate the image for. | *required* |\n| `**kwargs` | `Unpack[MermaidConfig]` | Additional parameters to configure mermaid chart generation. | `{}` |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `bytes` | The image data. |\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n```\ndef request_image(\n    graph: Graph[Any, Any, Any],\n    /,\n    **kwargs: Unpack[MermaidConfig],\n) -> bytes:\n    \"\"\"Generate an image of a Mermaid diagram using [mermaid.ink](https://mermaid.ink).\n\n    Args:\n        graph: The graph to generate the image for.\n        **kwargs: Additional parameters to configure mermaid chart generation.\n\n    Returns:\n        The image data.\n    \"\"\"\n    code = generate_code(\n        graph,\n        start_node=kwargs.get('start_node'),\n        highlighted_nodes=kwargs.get('highlighted_nodes'),\n        highlight_css=kwargs.get('highlight_css', DEFAULT_HIGHLIGHT_CSS),\n        title=kwargs.get('title'),\n        edge_labels=kwargs.get('edge_labels', True),\n        notes=kwargs.get('notes', True),\n        direction=kwargs.get('direction'),\n    )\n    code_base64 = base64.b64encode(code.encode()).decode()\n\n    params: dict[str, str | float] = {}\n    if kwargs.get('image_type') == 'pdf':\n        url = f'https://mermaid.ink/pdf/{code_base64}'\n        if kwargs.get('pdf_fit'):\n            params['fit'] = ''\n        if kwargs.get('pdf_landscape'):\n            params['landscape'] = ''\n        if pdf_paper := kwargs.get('pdf_paper'):", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f4ca8586ecb34c1cc087f025313179ba", "__created_at__": 1744231651.420514, "content": "code_base64 = base64.b64encode(code.encode()).decode()\n\n    params: dict[str, str | float] = {}\n    if kwargs.get('image_type') == 'pdf':\n        url = f'https://mermaid.ink/pdf/{code_base64}'\n        if kwargs.get('pdf_fit'):\n            params['fit'] = ''\n        if kwargs.get('pdf_landscape'):\n            params['landscape'] = ''\n        if pdf_paper := kwargs.get('pdf_paper'):\n            params['paper'] = pdf_paper\n    elif kwargs.get('image_type') == 'svg':\n        url = f'https://mermaid.ink/svg/{code_base64}'\n    else:\n        url = f'https://mermaid.ink/img/{code_base64}'\n\n        if image_type := kwargs.get('image_type'):\n            params['type'] = image_type\n\n    if background_color := kwargs.get('background_color'):\n        params['bgColor'] = background_color\n    if theme := kwargs.get('theme'):\n        params['theme'] = theme\n    if width := kwargs.get('width'):\n        params['width'] = width\n    if height := kwargs.get('height'):\n        params['height'] = height\n    if scale := kwargs.get('scale'):\n        params['scale'] = scale\n\n    httpx_client = kwargs.get('httpx_client') or httpx.Client()\n    response = httpx_client.get(url, params=params)\n    if not response.is_success:\n        raise httpx.HTTPStatusError(\n            f'{response.status_code} error generating image:\\n{response.text}',\n            request=response.request,\n            response=response,\n        )\n    return response.content\n\n```\n\n\n\n\n### save\\_image\n\n```\nsave_image(\n    path: Path | str,\n    graph: Graph[Any, Any, Any],\n    /,\n    **kwargs: Unpack[MermaidConfig],\n) -> None\n\n```\n\nGenerate an image of a Mermaid diagram using [mermaid.ink](https://mermaid.ink) and save it to a local file.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `path` | `Path | str` | The path to save the image to. | *required* |\n| `graph` | `Graph[Any, Any, Any]` | The graph to generate the image for. | *required* |\n| `**kwargs` | `Unpack[MermaidConfig]` | Additional parameters to configure mermaid chart generation. | `{}` |\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n```\ndef save_image(\n    path: Path | str,\n    graph: Graph[Any, Any, Any],\n    /,\n    **kwargs: Unpack[MermaidConfig],\n) -> None:\n    \"\"\"Generate an image of a Mermaid diagram using [mermaid.ink](https://mermaid.ink) and save it to a local file.\n\n    Args:\n        path: The path to save the image to.\n        graph: The graph to generate the image for.\n        **kwargs: Additional parameters to configure mermaid chart generation.\n    \"\"\"\n    if isinstance(path, str):\n        path = Path(path)\n\n    if 'image_type' not in kwargs:\n        ext = path.suffix.lower()[1:]\n        # no need to check for .jpeg/.jpg, as it is the default\n        if ext in ('png', 'webp', 'svg', 'pdf'):\n            kwargs['image_type'] = ext\n\n    image_data = request_image(graph, **kwargs)\n    path.write_bytes(image_data)\n\n```\n\n\n\n\n### MermaidConfig\n\nBases: `TypedDict`\n\nParameters to configure mermaid chart generation.\n\nSource code in `pydantic_graph/pydantic_graph/mermaid.py`\n```\nclass MermaidConfig(TypedDict, total=False):\n    \"\"\"Parameters to configure mermaid chart generation.\"\"\"\n\n    start_node: Sequence[NodeIdent] | NodeIdent\n    \"\"\"Identifiers of nodes that start the graph.\"\"\"\n    highlighted_nodes: Sequence[NodeIdent] | NodeIdent\n    \"\"\"Identifiers of nodes to highlight.\"\"\"\n    highlight_css: str\n    \"\"\"CSS to use for highlighting nodes.\"\"\"\n    title: str | None\n    \"\"\"The title of the diagram.\"\"\"\n    edge_labels: bool\n    \"\"\"Whether to include edge labels in the diagram.\"\"\"\n    notes: bool\n    \"\"\"Whether to include notes on nodes in the diagram, defaults to true.\"\"\"\n    image_type: Literal['jpeg', 'png', 'webp', 'svg', 'pdf']\n    \"\"\"The image type to generate. If unspecified, the default behavior is `'jpeg'`.\"\"\"\n    pdf_fit: bool\n    \"\"\"When using image_type='pdf', whether to fit the diagram to the PDF page.\"\"\"\n    pdf_landscape: bool\n    \"\"\"When using image_type='pdf', whether to use landscape orientation for the PDF.\n\n    This has no effect if using `pdf_fit`.\n    \"\"\"\n    pdf_paper: Literal['letter', 'legal', 'tabloid', 'ledger', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6']\n    \"\"\"When using image_type='pdf', the paper size of the PDF.\"\"\"\n    background_color: str\n    \"\"\"The background color of the diagram.\n\n    If None, the default transparent background is used. The color value is interpreted as a hexadecimal color\n    code by default (and should not have a leading '#'), but you can also use named colors by prefixing the\n    value with `'!'`. For example, valid choices include `background_color='!white'` or `background_color='FF0000'`.\n    \"\"\"\n    theme: Literal['default', 'neutral', 'dark', 'forest']\n    \"\"\"The theme of the diagram", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-233800ff598500201cae99b5874ec0ac", "__created_at__": 1744231651.420514, "content": "If None, the default transparent background is used. The color value is interpreted as a hexadecimal color\n    code by default (and should not have a leading '#'), but you can also use named colors by prefixing the\n    value with `'!'`. For example, valid choices include `background_color='!white'` or `background_color='FF0000'`.\n    \"\"\"\n    theme: Literal['default', 'neutral', 'dark', 'forest']\n    \"\"\"The theme of the diagram. Defaults to 'default'.\"\"\"\n    width: int\n    \"\"\"The width of the diagram.\"\"\"\n    height: int\n    \"\"\"The height of the diagram.\"\"\"\n    scale: Annotated[float, Ge(1), Le(3)]\n    \"\"\"The scale of the diagram.\n\n    The scale must be a number between 1 and 3, and you can only set a scale if one or both of width and height are set.\n    \"\"\"\n    httpx_client: httpx.Client\n    \"\"\"An HTTPX client to use for requests, mostly for testing purposes.\"\"\"\n    direction: StateDiagramDirection\n    \"\"\"The direction of the state diagram.\"\"\"\n\n```\n\n\n#### start\\_node `instance-attribute`\n\n```\nstart_node: Sequence[NodeIdent] | NodeIdent\n\n```\n\nIdentifiers of nodes that start the graph.\n\n\n\n#### highlighted\\_nodes `instance-attribute`\n\n```\nhighlighted_nodes: Sequence[NodeIdent] | NodeIdent\n\n```\n\nIdentifiers of nodes to highlight.\n\n\n\n#### highlight\\_css `instance-attribute`\n\n```\nhighlight_css: str\n\n```\n\nCSS to use for highlighting nodes.\n\n\n\n#### title `instance-attribute`\n\n```\ntitle: str | None\n\n```\n\nThe title of the diagram.\n\n\n\n#### edge\\_labels `instance-attribute`\n\n```\nedge_labels: bool\n\n```\n\nWhether to include edge labels in the diagram.\n\n\n\n#### notes `instance-attribute`\n\n```\nnotes: bool\n\n```\n\nWhether to include notes on nodes in the diagram, defaults to true.\n\n\n\n#### image\\_type `instance-attribute`\n\n```\nimage_type: Literal['jpeg', 'png', 'webp', 'svg', 'pdf']\n\n```\n\nThe image type to generate. If unspecified, the default behavior is `'jpeg'`.\n\n\n\n#### pdf\\_fit `instance-attribute`\n\n```\npdf_fit: bool\n\n```\n\nWhen using image\\_type='pdf', whether to fit the diagram to the PDF page.\n\n\n\n#### pdf\\_landscape `instance-attribute`\n\n```\npdf_landscape: bool\n\n```\n\nWhen using image\\_type='pdf', whether to use landscape orientation for the PDF.\n\nThis has no effect if using `pdf_fit`.\n\n\n\n#### pdf\\_paper `instance-attribute`\n\n```\npdf_paper: Literal[\n    \"letter\",\n    \"legal\",\n    \"tabloid\",\n    \"ledger\",\n    \"a0\",\n    \"a1\",\n    \"a2\",\n    \"a3\",\n    \"a4\",\n    \"a5\",\n    \"a6\",\n]\n\n```\n\nWhen using image\\_type='pdf', the paper size of the PDF.\n\n\n\n#### background\\_color `instance-attribute`\n\n```\nbackground_color: str\n\n```\n\nThe background color of the diagram.\n\nIf None, the default transparent background is used. The color value is interpreted as a hexadecimal color\ncode by default (and should not have a leading '#'), but you can also use named colors by prefixing the\nvalue with `'!'`. For example, valid choices include `background_color='!white'` or `background_color='FF0000'`.\n\n\n\n#### theme `instance-attribute`\n\n```\ntheme: Literal['default', 'neutral', 'dark', 'forest']\n\n```\n\nThe theme of the diagram. Defaults to 'default'.\n\n\n\n#### width `instance-attribute`\n\n```\nwidth: int\n\n```\n\nThe width of the diagram.\n\n\n\n#### height `instance-attribute`\n\n```\nheight: int\n\n```\n\nThe height of the diagram.\n\n\n\n#### scale `instance-attribute`\n\n```\nscale: Annotated[float, Ge(1), Le(3)]\n\n```\n\nThe scale of the diagram.\n\nThe scale must be a number between 1 and 3, and you can only set a scale if one or both of width and height are set.\n\n\n\n#### httpx\\_client `instance-attribute`\n\n```\nhttpx_client: Client\n\n```\n\nAn HTTPX client to use for requests, mostly for testing purposes.\n\n\n\n#### direction `instance-attribute`\n\n```\ndirection: StateDiagramDirection\n\n```\n\nThe direction of the state diagram.\n\n\n\n\n\n\n### NodeIdent `module-attribute`\n\n```\nNodeIdent: TypeAlias = (\n    \"type[BaseNode[Any, Any, Any]] | BaseNode[Any, Any, Any] | str\"\n)\n\n```\n\nA type alias for a node identifier.\n\nThis can be:\n\n* A node instance (instance of a subclass of `BaseNode`).\n* A node class (subclass of `BaseNode`).\n* A string representing the node ID.\n\n\n\n\n\n\n`pydantic_graph.nodes`\n======================\n\n### StateT `module-attribute`\n\n```\nStateT = TypeVar('StateT', default=None)\n\n```\n\nType variable for the state in a graph.\n\n\n\n### GraphRunContext `dataclass`\n\nBases: `Generic[StateT, DepsT]`\n\nContext for a graph.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\n@dataclass\nclass GraphRunContext(Generic[StateT, DepsT]):\n    \"\"\"Context for a graph.\"\"\"\n\n    # TODO: Can we get rid of this struct and just pass both these things around..?\n\n    state: StateT\n    \"\"\"The state of the graph.\"\"\"\n    deps: DepsT\n    \"\"\"Dependencies for the graph.\"\"\"\n\n```\n\n\n#### state `instance-attribute`\n\n``", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-3e6f35e8122ac28c165b2f86d0e0b04e", "__created_at__": 1744231651.420514, "content": ".\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\n@dataclass\nclass GraphRunContext(Generic[StateT, DepsT]):\n    \"\"\"Context for a graph.\"\"\"\n\n    # TODO: Can we get rid of this struct and just pass both these things around..?\n\n    state: StateT\n    \"\"\"The state of the graph.\"\"\"\n    deps: DepsT\n    \"\"\"Dependencies for the graph.\"\"\"\n\n```\n\n\n#### state `instance-attribute`\n\n```\nstate: StateT\n\n```\n\nThe state of the graph.\n\n\n\n#### deps `instance-attribute`\n\n```\ndeps: DepsT\n\n```\n\nDependencies for the graph.\n\n\n\n\n\n\n### BaseNode\n\nBases: `ABC`, `Generic[StateT, DepsT, NodeRunEndT]`\n\nBase class for a node.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\nclass BaseNode(ABC, Generic[StateT, DepsT, NodeRunEndT]):\n    \"\"\"Base class for a node.\"\"\"\n\n    docstring_notes: ClassVar[bool] = False\n    \"\"\"Set to `True` to generate mermaid diagram notes from the class's docstring.\n\n    While this can add valuable information to the diagram, it can make diagrams harder to view, hence\n    it is disabled by default. You can also customise notes overriding the\n    [`get_note`][pydantic_graph.nodes.BaseNode.get_note] method.\n    \"\"\"\n\n    @abstractmethod\n    async def run(self, ctx: GraphRunContext[StateT, DepsT]) -> BaseNode[StateT, DepsT, Any] | End[NodeRunEndT]:\n        \"\"\"Run the node.\n\n        This is an abstract method that must be implemented by subclasses.\n\n        !!! note \"Return types used at runtime\"\n            The return type of this method are read by `pydantic_graph` at runtime and used to define which\n            nodes can be called next in the graph. This is displayed in [mermaid diagrams](mermaid.md)\n            and enforced when running the graph.\n\n        Args:\n            ctx: The graph context.\n\n        Returns:\n            The next node to run or [`End`][pydantic_graph.nodes.End] to signal the end of the graph.\n        \"\"\"\n        ...\n\n    def get_snapshot_id(self) -> str:\n        if snapshot_id := getattr(self, '__snapshot_id', None):\n            return snapshot_id\n        else:\n            self.__dict__['__snapshot_id'] = snapshot_id = generate_snapshot_id(self.get_node_id())\n            return snapshot_id\n\n    def set_snapshot_id(self, snapshot_id: str) -> None:\n        self.__dict__['__snapshot_id'] = snapshot_id\n\n    @classmethod\n    @cache\n    def get_node_id(cls) -> str:\n        \"\"\"Get the ID of the node.\"\"\"\n        return cls.__name__\n\n    @classmethod\n    def get_note(cls) -> str | None:\n        \"\"\"Get a note about the node to render on mermaid charts.\n\n        By default, this returns a note only if [`docstring_notes`][pydantic_graph.nodes.BaseNode.docstring_notes]\n        is `True`. You can override this method to customise the node notes.\n        \"\"\"\n        if not cls.docstring_notes:\n            return None\n        docstring = cls.__doc__\n        # dataclasses get an automatic docstring which is just their signature, we don't want that\n        if docstring and is_dataclass(cls) and docstring.startswith(f'{cls.__name__}('):\n            docstring = None\n        if docstring:\n            # remove indentation from docstring\n            import inspect\n\n            docstring = inspect.cleandoc(docstring)\n        return docstring\n\n    @classmethod\n    def get_node_def(cls, local_ns: dict[str, Any] | None) -> NodeDef[StateT, DepsT, NodeRunEndT]:\n        \"\"\"Get the node definition.\"\"\"\n        type_hints = get_type_hints(cls.run, localns=local_ns, include_extras=True)\n        try:\n            return_hint = type_hints['return']\n        except KeyError as e:\n            raise exceptions.GraphSetupError(f'Node {cls} is missing a return type hint on its `run` method') from e\n\n        next_node_edges: dict[str, Edge] = {}\n        end_edge: Edge | None = None\n        returns_base_node: bool = False\n        for return_type in _utils.get_union_args(return_hint):\n            return_type, annotations = _utils.unpack_annotated(return_type)\n            edge = next((a for a in annotations if isinstance(a, Edge)), Edge(None))\n            return_type_origin = get_origin(return_type) or return_type\n            if return_type_origin is End:\n                end_edge = edge\n            elif return_type_origin is BaseNode:\n                # TODO: Should we disallow this?\n                returns_base_node = True\n            elif issubclass(return_type_origin, BaseNode):\n                next_node_edges[return_type.get_node_id()] = edge\n            else:\n                raise exceptions.GraphSetupError(f'Invalid return type: {return_type}')\n\n        return NodeDef(\n            cls,\n            cls.get_node_id(),\n            cls.get_note(),\n            next_node_edges,\n            end_edge,\n            returns_base_node,\n        )\n\n    def deep_copy(self) -> Self:\n        \"\"\"Returns a deep copy of the node.\"\"\"\n        return copy.deepcopy(self)\n\n```\n\n\n#### docstring\\_notes `class-attribute`\n\n```\ndocstring_notes: bool = False\n\n```\n\nSet to `True` to generate mermaid diagram notes from the class's docstring.\n\nWhile this can add valuable information to the diagram, it can make diagrams harder to view, hence\nit is disabled by default. You can also customise", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-365decc56ad5f314b2b86848e8a892ec", "__created_at__": 1744231651.420514, "content": ")\n\n    def deep_copy(self) -> Self:\n        \"\"\"Returns a deep copy of the node.\"\"\"\n        return copy.deepcopy(self)\n\n```\n\n\n#### docstring\\_notes `class-attribute`\n\n```\ndocstring_notes: bool = False\n\n```\n\nSet to `True` to generate mermaid diagram notes from the class's docstring.\n\nWhile this can add valuable information to the diagram, it can make diagrams harder to view, hence\nit is disabled by default. You can also customise notes overriding the\n`get_note` method.\n\n\n\n#### run `abstractmethod` `async`\n\n```\nrun(\n    ctx: GraphRunContext[StateT, DepsT],\n) -> BaseNode[StateT, DepsT, Any] | End[NodeRunEndT]\n\n```\n\nRun the node.\n\nThis is an abstract method that must be implemented by subclasses.\n\nReturn types used at runtime\n\nThe return type of this method are read by `pydantic_graph` at runtime and used to define which\nnodes can be called next in the graph. This is displayed in [mermaid diagrams](../mermaid/)\nand enforced when running the graph.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `ctx` | `GraphRunContext[StateT, DepsT]` | The graph context. | *required* |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `BaseNode[StateT, DepsT, Any] | End[NodeRunEndT]` | The next node to run or `End` to signal the end of the graph. |\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\n@abstractmethod\nasync def run(self, ctx: GraphRunContext[StateT, DepsT]) -> BaseNode[StateT, DepsT, Any] | End[NodeRunEndT]:\n    \"\"\"Run the node.\n\n    This is an abstract method that must be implemented by subclasses.\n\n    !!! note \"Return types used at runtime\"\n        The return type of this method are read by `pydantic_graph` at runtime and used to define which\n        nodes can be called next in the graph. This is displayed in [mermaid diagrams](mermaid.md)\n        and enforced when running the graph.\n\n    Args:\n        ctx: The graph context.\n\n    Returns:\n        The next node to run or [`End`][pydantic_graph.nodes.End] to signal the end of the graph.\n    \"\"\"\n    ...\n\n```\n\n\n\n\n#### get\\_node\\_id `cached` `classmethod`\n\n```\nget_node_id() -> str\n\n```\n\nGet the ID of the node.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\n@classmethod\n@cache\ndef get_node_id(cls) -> str:\n    \"\"\"Get the ID of the node.\"\"\"\n    return cls.__name__\n\n```\n\n\n\n\n#### get\\_note `classmethod`\n\n```\nget_note() -> str | None\n\n```\n\nGet a note about the node to render on mermaid charts.\n\nBy default, this returns a note only if `docstring_notes`\nis `True`. You can override this method to customise the node notes.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\n@classmethod\ndef get_note(cls) -> str | None:\n    \"\"\"Get a note about the node to render on mermaid charts.\n\n    By default, this returns a note only if [`docstring_notes`][pydantic_graph.nodes.BaseNode.docstring_notes]\n    is `True`. You can override this method to customise the node notes.\n    \"\"\"\n    if not cls.docstring_notes:\n        return None\n    docstring = cls.__doc__\n    # dataclasses get an automatic docstring which is just their signature, we don't want that\n    if docstring and is_dataclass(cls) and docstring.startswith(f'{cls.__name__}('):\n        docstring = None\n    if docstring:\n        # remove indentation from docstring\n        import inspect\n\n        docstring = inspect.cleandoc(docstring)\n    return docstring\n\n```\n\n\n\n\n#### get\\_node\\_def `classmethod`\n\n```\nget_node_def(\n    local_ns: dict[str, Any] | None,\n) -> NodeDef[StateT, DepsT, NodeRunEndT]\n\n```\n\nGet the node definition.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\n@classmethod\ndef get_node_def(cls, local_ns: dict[str, Any] | None) -> NodeDef[StateT, DepsT, NodeRunEndT]:\n    \"\"\"Get the node definition.\"\"\"\n    type_hints = get_type_hints(cls.run, localns=local_ns, include_extras=True)\n    try:\n        return_hint = type_hints['return']\n    except KeyError as e:\n        raise exceptions.GraphSetupError(f'Node {cls} is missing a return type hint on its `run` method') from e\n\n    next_node_edges: dict[str, Edge] = {}\n    end_edge: Edge | None = None\n    returns_base_node: bool = False\n    for return_type in _utils.get_union_args(return_hint):\n        return_type, annotations = _utils.unpack_annotated(return_type)\n        edge = next((a for a in annotations if isinstance(a, Edge)), Edge(None))\n        return_type_origin = get_origin(return_type) or return_type\n        if return_type_origin is End:\n            end_edge = edge\n        elif return_type_origin is BaseNode:\n            # TODO: Should we disallow this?\n            returns_base_node = True\n        elif issubclass(return_type_origin, BaseNode):\n            next_node_edges", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-670369b8b58da5fb06501c822216b094", "__created_at__": 1744231651.420514, "content": "annotations = _utils.unpack_annotated(return_type)\n        edge = next((a for a in annotations if isinstance(a, Edge)), Edge(None))\n        return_type_origin = get_origin(return_type) or return_type\n        if return_type_origin is End:\n            end_edge = edge\n        elif return_type_origin is BaseNode:\n            # TODO: Should we disallow this?\n            returns_base_node = True\n        elif issubclass(return_type_origin, BaseNode):\n            next_node_edges[return_type.get_node_id()] = edge\n        else:\n            raise exceptions.GraphSetupError(f'Invalid return type: {return_type}')\n\n    return NodeDef(\n        cls,\n        cls.get_node_id(),\n        cls.get_note(),\n        next_node_edges,\n        end_edge,\n        returns_base_node,\n    )\n\n```\n\n\n\n\n#### deep\\_copy\n\n```\ndeep_copy() -> Self\n\n```\n\nReturns a deep copy of the node.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\ndef deep_copy(self) -> Self:\n    \"\"\"Returns a deep copy of the node.\"\"\"\n    return copy.deepcopy(self)\n\n```\n\n\n\n\n\n\n\n### End `dataclass`\n\nBases: `Generic[RunEndT]`\n\nType to return from a node to signal the end of the graph.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\n@dataclass\nclass End(Generic[RunEndT]):\n    \"\"\"Type to return from a node to signal the end of the graph.\"\"\"\n\n    data: RunEndT\n    \"\"\"Data to return from the graph.\"\"\"\n\n    def deep_copy_data(self) -> End[RunEndT]:\n        \"\"\"Returns a deep copy of the end of the run.\"\"\"\n        if self.data is None:\n            return self\n        else:\n            end = End(copy.deepcopy(self.data))\n            end.set_snapshot_id(self.get_snapshot_id())\n            return end\n\n    def get_snapshot_id(self) -> str:\n        if snapshot_id := getattr(self, '__snapshot_id', None):\n            return snapshot_id\n        else:\n            self.__dict__['__snapshot_id'] = snapshot_id = generate_snapshot_id('end')\n            return snapshot_id\n\n    def set_snapshot_id(self, set_id: str) -> None:\n        self.__dict__['__snapshot_id'] = set_id\n\n```\n\n\n#### data `instance-attribute`\n\n```\ndata: RunEndT\n\n```\n\nData to return from the graph.\n\n\n\n#### deep\\_copy\\_data\n\n```\ndeep_copy_data() -> End[RunEndT]\n\n```\n\nReturns a deep copy of the end of the run.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\ndef deep_copy_data(self) -> End[RunEndT]:\n    \"\"\"Returns a deep copy of the end of the run.\"\"\"\n    if self.data is None:\n        return self\n    else:\n        end = End(copy.deepcopy(self.data))\n        end.set_snapshot_id(self.get_snapshot_id())\n        return end\n\n```\n\n\n\n\n\n\n\n### Edge `dataclass`\n\nAnnotation to apply a label to an edge in a graph.\n\nSource code in `pydantic_graph/pydantic_graph/nodes.py`\n```\n@dataclass\nclass Edge:\n    \"\"\"Annotation to apply a label to an edge in a graph.\"\"\"\n\n    label: str | None\n    \"\"\"Label for the edge.\"\"\"\n\n```\n\n\n#### label `instance-attribute`\n\n```\nlabel: str | None\n\n```\n\nLabel for the edge.\n\n\n\n\n\n\n### DepsT `module-attribute`\n\n```\nDepsT = TypeVar('DepsT', default=None, contravariant=True)\n\n```\n\nType variable for the dependencies of a graph and node.\n\n\n\n### RunEndT `module-attribute`\n\n```\nRunEndT = TypeVar('RunEndT', covariant=True, default=None)\n\n```\n\nCovariant type variable for the return type of a graph `run`.\n\n\n\n### NodeRunEndT `module-attribute`\n\n```\nNodeRunEndT = TypeVar(\n    \"NodeRunEndT\", covariant=True, default=Never\n)\n\n```\n\nCovariant type variable for the return type of a node `run`.\n\n\n\n\n\n\n\n`pydantic_graph.persistence`\n============================\n\n### SnapshotStatus `module-attribute`\n\n```\nSnapshotStatus = Literal[\n    \"created\", \"pending\", \"running\", \"success\", \"error\"\n]\n\n```\n\nThe status of a snapshot.\n\n* `'created'`: The snapshot has been created but not yet run.\n* `'pending'`: The snapshot has been retrieved with\n  `load_next` but not yet run.\n* `'running'`: The snapshot is currently running.\n* `'success'`: The snapshot has been run successfully.\n* `'error'`: The snapshot has been run but an error occurred.\n\n\n### NodeSnapshot `dataclass`\n\nBases: `Generic[StateT, RunEndT]`\n\nHistory step describing the execution of a node in a graph.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\n@dataclass\nclass NodeSnapshot(Generic[StateT, RunEndT]):\n    \"\"\"History step describing the execution of a node in a graph.\"\"\"\n\n    state: StateT\n    \"\"\"The state of the graph before the node is run.\"\"\"\n    node: Annotated[BaseNode[StateT, Any, RunEndT], _utils.CustomNodeSchema()]\n    \"\"\"The node to run next.\"\"\"\n    start_ts: datetime | None = None\n    \"\"\"The timestamp when the node started running, `None` until the run starts.\"\"\"\n    duration: float | None = None\n    \"\"\"The duration of the node run in seconds, if the node has been run.\"\"\"\n    status: SnapshotStatus = 'created'\n    \"\"\"The status of the snapshot.\"\"\"\n    kind: Literal['node'] = 'node'\n    \"\"\"The kind of", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-cd5782f266ceebcaff272f062084cba6", "__created_at__": 1744231651.420514, "content": ".CustomNodeSchema()]\n    \"\"\"The node to run next.\"\"\"\n    start_ts: datetime | None = None\n    \"\"\"The timestamp when the node started running, `None` until the run starts.\"\"\"\n    duration: float | None = None\n    \"\"\"The duration of the node run in seconds, if the node has been run.\"\"\"\n    status: SnapshotStatus = 'created'\n    \"\"\"The status of the snapshot.\"\"\"\n    kind: Literal['node'] = 'node'\n    \"\"\"The kind of history step, can be used as a discriminator when deserializing history.\"\"\"\n\n    id: str = UNSET_SNAPSHOT_ID\n    \"\"\"Unique ID of the snapshot.\"\"\"\n\n    def __post_init__(self) -> None:\n        if self.id == UNSET_SNAPSHOT_ID:\n            self.id = self.node.get_snapshot_id()\n\n```\n\n\n#### state `instance-attribute`\n\n```\nstate: StateT\n\n```\n\nThe state of the graph before the node is run.\n\n\n\n#### node `instance-attribute`\n\n```\nnode: Annotated[\n    BaseNode[StateT, Any, RunEndT], CustomNodeSchema()\n]\n\n```\n\nThe node to run next.\n\n\n\n#### start\\_ts `class-attribute` `instance-attribute`\n\n```\nstart_ts: datetime | None = None\n\n```\n\nThe timestamp when the node started running, `None` until the run starts.\n\n\n\n#### duration `class-attribute` `instance-attribute`\n\n```\nduration: float | None = None\n\n```\n\nThe duration of the node run in seconds, if the node has been run.\n\n\n\n#### status `class-attribute` `instance-attribute`\n\n```\nstatus: SnapshotStatus = 'created'\n\n```\n\nThe status of the snapshot.\n\n\n\n#### kind `class-attribute` `instance-attribute`\n\n```\nkind: Literal['node'] = 'node'\n\n```\n\nThe kind of history step, can be used as a discriminator when deserializing history.\n\n\n\n#### id `class-attribute` `instance-attribute`\n\n```\nid: str = UNSET_SNAPSHOT_ID\n\n```\n\nUnique ID of the snapshot.\n\n\n\n\n\n\n### EndSnapshot `dataclass`\n\nBases: `Generic[StateT, RunEndT]`\n\nHistory step describing the end of a graph run.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\n@dataclass\nclass EndSnapshot(Generic[StateT, RunEndT]):\n    \"\"\"History step describing the end of a graph run.\"\"\"\n\n    state: StateT\n    \"\"\"The state of the graph at the end of the run.\"\"\"\n    result: End[RunEndT]\n    \"\"\"The result of the graph run.\"\"\"\n    ts: datetime = field(default_factory=_utils.now_utc)\n    \"\"\"The timestamp when the graph run ended.\"\"\"\n    kind: Literal['end'] = 'end'\n    \"\"\"The kind of history step, can be used as a discriminator when deserializing history.\"\"\"\n\n    id: str = UNSET_SNAPSHOT_ID\n    \"\"\"Unique ID of the snapshot.\"\"\"\n\n    def __post_init__(self) -> None:\n        if self.id == UNSET_SNAPSHOT_ID:\n            self.id = self.node.get_snapshot_id()\n\n    @property\n    def node(self) -> End[RunEndT]:\n        \"\"\"Shim to get the [`result`][pydantic_graph.persistence.EndSnapshot.result].\n\n        Useful to allow `[snapshot.node for snapshot in persistence.history]`.\n        \"\"\"\n        return self.result\n\n```\n\n\n#### state `instance-attribute`\n\n```\nstate: StateT\n\n```\n\nThe state of the graph at the end of the run.\n\n\n\n#### result `instance-attribute`\n\n```\nresult: End[RunEndT]\n\n```\n\nThe result of the graph run.\n\n\n\n#### ts `class-attribute` `instance-attribute`\n\n```\nts: datetime = field(default_factory=now_utc)\n\n```\n\nThe timestamp when the graph run ended.\n\n\n\n#### kind `class-attribute` `instance-attribute`\n\n```\nkind: Literal['end'] = 'end'\n\n```\n\nThe kind of history step, can be used as a discriminator when deserializing history.\n\n\n\n#### id `class-attribute` `instance-attribute`\n\n```\nid: str = UNSET_SNAPSHOT_ID\n\n```\n\nUnique ID of the snapshot.\n\n\n\n#### node `property`\n\n```\nnode: End[RunEndT]\n\n```\n\nShim to get the `result`.\n\nUseful to allow `[snapshot.node for snapshot in persistence.history]`.\n\n\n\n\n\n\n### Snapshot `module-attribute`\n\n```\nSnapshot = Union[\n    NodeSnapshot[StateT, RunEndT],\n    EndSnapshot[StateT, RunEndT],\n]\n\n```\n\nA step in the history of a graph run.\n\n`Graph.run` returns a list of these steps describing the execution of the graph,\ntogether with the run return value.\n\n\n\n### BaseStatePersistence\n\nBases: `ABC`, `Generic[StateT, RunEndT]`\n\nAbstract base class for storing the state of a graph run.\n\nEach instance of a `BaseStatePersistence` subclass should be used for a single graph run.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\nclass BaseStatePersistence(ABC, Generic[StateT, RunEndT]):\n    \"\"\"Abstract base class for storing the state of a graph run.\n\n    Each instance of a `BaseStatePersistence` subclass should be used for a single graph run.\n    \"\"\"\n\n    @abstractmethod\n    async def snapshot_node(self, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]) -> None:\n        \"\"\"Snapshot the state of a graph, when the next step is to run a node.\n\n        This method should add a [`NodeSnapshot`][pydantic_graph.persistence.NodeSnapshot] to persistence.\n\n        Args:\n            state: The state of the graph.\n            next_node", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-69438359f1bdff14dbc80ad109ccf77d", "__created_at__": 1744231651.420514, "content": "used for a single graph run.\n    \"\"\"\n\n    @abstractmethod\n    async def snapshot_node(self, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]) -> None:\n        \"\"\"Snapshot the state of a graph, when the next step is to run a node.\n\n        This method should add a [`NodeSnapshot`][pydantic_graph.persistence.NodeSnapshot] to persistence.\n\n        Args:\n            state: The state of the graph.\n            next_node: The next node to run.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    async def snapshot_node_if_new(\n        self, snapshot_id: str, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]\n    ) -> None:\n        \"\"\"Snapshot the state of a graph if the snapshot ID doesn't already exist in persistence.\n\n        This method will generally call [`snapshot_node`][pydantic_graph.persistence.BaseStatePersistence.snapshot_node]\n        but should do so in an atomic way.\n\n        Args:\n            snapshot_id: The ID of the snapshot to check.\n            state: The state of the graph.\n            next_node: The next node to run.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    async def snapshot_end(self, state: StateT, end: End[RunEndT]) -> None:\n        \"\"\"Snapshot the state of a graph when the graph has ended.\n\n        This method should add an [`EndSnapshot`][pydantic_graph.persistence.EndSnapshot] to persistence.\n\n        Args:\n            state: The state of the graph.\n            end: data from the end of the run.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def record_run(self, snapshot_id: str) -> AbstractAsyncContextManager[None]:\n        \"\"\"Record the run of the node, or error if the node is already running.\n\n        Args:\n            snapshot_id: The ID of the snapshot to record.\n\n        Raises:\n            GraphNodeRunningError: if the node status it not `'created'` or `'pending'`.\n            LookupError: if the snapshot ID is not found in persistence.\n\n        Returns:\n            An async context manager that records the run of the node.\n\n        In particular this should set:\n\n        - [`NodeSnapshot.status`][pydantic_graph.persistence.NodeSnapshot.status] to `'running'` and\n          [`NodeSnapshot.start_ts`][pydantic_graph.persistence.NodeSnapshot.start_ts] when the run starts.\n        - [`NodeSnapshot.status`][pydantic_graph.persistence.NodeSnapshot.status] to `'success'` or `'error'` and\n          [`NodeSnapshot.duration`][pydantic_graph.persistence.NodeSnapshot.duration] when the run finishes.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    async def load_next(self) -> NodeSnapshot[StateT, RunEndT] | None:\n        \"\"\"Retrieve a node snapshot with status `'created`' and set its status to `'pending'`.\n\n        This is used by [`Graph.iter_from_persistence`][pydantic_graph.graph.Graph.iter_from_persistence]\n        to get the next node to run.\n\n        Returns: The snapshot, or `None` if no snapshot with status `'created`' exists.\n        \"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    async def load_all(self) -> list[Snapshot[StateT, RunEndT]]:\n        \"\"\"Load the entire history of snapshots.\n\n        `load_all` is not used by pydantic-graph itself, instead it's provided to make it convenient to\n        get all [snapshots][pydantic_graph.persistence.Snapshot] from persistence.\n\n        Returns: The list of snapshots.\n        \"\"\"\n        raise NotImplementedError\n\n    def set_graph_types(self, graph: Graph[StateT, Any, RunEndT]) -> None:\n        \"\"\"Set the types of the state and run end from a graph.\n\n        You generally won't need to customise this method, instead implement\n        [`set_types`][pydantic_graph.persistence.BaseStatePersistence.set_types] and\n        [`should_set_types`][pydantic_graph.persistence.BaseStatePersistence.should_set_types].\n        \"\"\"\n        if self.should_set_types():\n            with _utils.set_nodes_type_context(graph.get_nodes()):\n                self.set_types(*graph.inferred_types)\n\n    def should_set_types(self) -> bool:\n        \"\"\"Whether types need to be set.\n\n        Implementations should override this method to return `True` when types have not been set if they are needed.\n        \"\"\"\n        return False\n\n    def set_types(self, state_type: type[StateT], run_end_type: type[RunEndT]) -> None:\n        \"\"\"Set the types of the state and run end.\n\n        This can be used to create [type adapters][pydantic.TypeAdapter] for serializing and deserializing snapshots,\n        e.g. with [`build_snapshot_list_type_adapter`][pydantic_graph.persistence.build_snapshot_list_type_adapter].\n\n        Args:\n            state_type: The state type.\n            run_end_type: The run end type.\n        \"\"\"\n        pass\n\n```\n\n\n#### snapshot\\_node `abstractmethod` `async`\n\n```\nsnapshot_node(\n    state: StateT, next_node: BaseNode[StateT, Any, RunEndT]\n) -> None\n\n```\n\nSnapshot the state of a graph, when the next step is to run a node.\n\nThis method should add a `NodeSnapshot` to persistence.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `state` | `StateT` | The state of the graph. | *required* |\n| `next_node` | `BaseNode[StateT, Any, RunEndT]` | The next node to run. | *", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a7790fd8de6836133264e5b5257cb4ef", "__created_at__": 1744231651.420514, "content": "`\n\nSnapshot the state of a graph, when the next step is to run a node.\n\nThis method should add a `NodeSnapshot` to persistence.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `state` | `StateT` | The state of the graph. | *required* |\n| `next_node` | `BaseNode[StateT, Any, RunEndT]` | The next node to run. | *required* |\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\n@abstractmethod\nasync def snapshot_node(self, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]) -> None:\n    \"\"\"Snapshot the state of a graph, when the next step is to run a node.\n\n    This method should add a [`NodeSnapshot`][pydantic_graph.persistence.NodeSnapshot] to persistence.\n\n    Args:\n        state: The state of the graph.\n        next_node: The next node to run.\n    \"\"\"\n    raise NotImplementedError\n\n```\n\n\n\n\n#### snapshot\\_node\\_if\\_new `abstractmethod` `async`\n\n```\nsnapshot_node_if_new(\n    snapshot_id: str,\n    state: StateT,\n    next_node: BaseNode[StateT, Any, RunEndT],\n) -> None\n\n```\n\nSnapshot the state of a graph if the snapshot ID doesn't already exist in persistence.\n\nThis method will generally call `snapshot_node`\nbut should do so in an atomic way.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `snapshot_id` | `str` | The ID of the snapshot to check. | *required* |\n| `state` | `StateT` | The state of the graph. | *required* |\n| `next_node` | `BaseNode[StateT, Any, RunEndT]` | The next node to run. | *required* |\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\n@abstractmethod\nasync def snapshot_node_if_new(\n    self, snapshot_id: str, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]\n) -> None:\n    \"\"\"Snapshot the state of a graph if the snapshot ID doesn't already exist in persistence.\n\n    This method will generally call [`snapshot_node`][pydantic_graph.persistence.BaseStatePersistence.snapshot_node]\n    but should do so in an atomic way.\n\n    Args:\n        snapshot_id: The ID of the snapshot to check.\n        state: The state of the graph.\n        next_node: The next node to run.\n    \"\"\"\n    raise NotImplementedError\n\n```\n\n\n\n\n#### snapshot\\_end `abstractmethod` `async`\n\n```\nsnapshot_end(state: StateT, end: End[RunEndT]) -> None\n\n```\n\nSnapshot the state of a graph when the graph has ended.\n\nThis method should add an `EndSnapshot` to persistence.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `state` | `StateT` | The state of the graph. | *required* |\n| `end` | `End[RunEndT]` | data from the end of the run. | *required* |\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\n@abstractmethod\nasync def snapshot_end(self, state: StateT, end: End[RunEndT]) -> None:\n    \"\"\"Snapshot the state of a graph when the graph has ended.\n\n    This method should add an [`EndSnapshot`][pydantic_graph.persistence.EndSnapshot] to persistence.\n\n    Args:\n        state: The state of the graph.\n        end: data from the end of the run.\n    \"\"\"\n    raise NotImplementedError\n\n```\n\n\n\n\n#### record\\_run `abstractmethod`\n\n```\nrecord_run(\n    snapshot_id: str,\n) -> AbstractAsyncContextManager[None]\n\n```\n\nRecord the run of the node, or error if the node is already running.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `snapshot_id` | `str` | The ID of the snapshot to record. | *required* |\n\nRaises:\n\n| Type | Description |\n| --- | --- |\n| `GraphNodeRunningError` | if the node status it not `'created'` or `'pending'`. |\n| `LookupError` | if the snapshot ID is not found in persistence. |\n\nReturns:\n\n| Type | Description |\n| --- | --- |\n| `AbstractAsyncContextManager[None]` | An async context manager that records the run of the node. |\n\nIn particular this should set:\n\n* `NodeSnapshot.status` to `'running'` and\n  `NodeSnapshot.start_ts` when the run starts.\n* `NodeSnapshot.status` to `'success'` or `'error'` and\n  `NodeSnapshot.duration` when the run finishes.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\n@abstractmethod\ndef record_run(self, snapshot_id: str) -> AbstractAsyncContextManager[None]:\n    \"\"\"Record the run of the node, or error if the node is already running.\n\n    Args:\n        snapshot_id: The ID of the snapshot to record.\n\n    Raises:\n        GraphNodeRunningError: if the node status it not `'created'` or `'pending'`.\n        LookupError: if the snapshot ID is not found in persistence.\n\n    Returns:\n        An async context manager that records the run of the node.\n\n    In particular this should set:\n\n    - [`NodeSnapshot", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-d66479842ef0830f8e7bdeb15cd91a5f", "__created_at__": 1744231651.420514, "content": "]:\n    \"\"\"Record the run of the node, or error if the node is already running.\n\n    Args:\n        snapshot_id: The ID of the snapshot to record.\n\n    Raises:\n        GraphNodeRunningError: if the node status it not `'created'` or `'pending'`.\n        LookupError: if the snapshot ID is not found in persistence.\n\n    Returns:\n        An async context manager that records the run of the node.\n\n    In particular this should set:\n\n    - [`NodeSnapshot.status`][pydantic_graph.persistence.NodeSnapshot.status] to `'running'` and\n      [`NodeSnapshot.start_ts`][pydantic_graph.persistence.NodeSnapshot.start_ts] when the run starts.\n    - [`NodeSnapshot.status`][pydantic_graph.persistence.NodeSnapshot.status] to `'success'` or `'error'` and\n      [`NodeSnapshot.duration`][pydantic_graph.persistence.NodeSnapshot.duration] when the run finishes.\n    \"\"\"\n    raise NotImplementedError\n\n```\n\n\n\n\n#### load\\_next `abstractmethod` `async`\n\n```\nload_next() -> NodeSnapshot[StateT, RunEndT] | None\n\n```\n\nRetrieve a node snapshot with status `'created`' and set its status to `'pending'`.\n\nThis is used by `Graph.iter_from_persistence`\nto get the next node to run.\n\nReturns: The snapshot, or `None` if no snapshot with status `'created`' exists.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\n@abstractmethod\nasync def load_next(self) -> NodeSnapshot[StateT, RunEndT] | None:\n    \"\"\"Retrieve a node snapshot with status `'created`' and set its status to `'pending'`.\n\n    This is used by [`Graph.iter_from_persistence`][pydantic_graph.graph.Graph.iter_from_persistence]\n    to get the next node to run.\n\n    Returns: The snapshot, or `None` if no snapshot with status `'created`' exists.\n    \"\"\"\n    raise NotImplementedError\n\n```\n\n\n\n\n#### load\\_all `abstractmethod` `async`\n\n```\nload_all() -> list[Snapshot[StateT, RunEndT]]\n\n```\n\nLoad the entire history of snapshots.\n\n`load_all` is not used by pydantic-graph itself, instead it's provided to make it convenient to\nget all snapshots from persistence.\n\nReturns: The list of snapshots.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\n@abstractmethod\nasync def load_all(self) -> list[Snapshot[StateT, RunEndT]]:\n    \"\"\"Load the entire history of snapshots.\n\n    `load_all` is not used by pydantic-graph itself, instead it's provided to make it convenient to\n    get all [snapshots][pydantic_graph.persistence.Snapshot] from persistence.\n\n    Returns: The list of snapshots.\n    \"\"\"\n    raise NotImplementedError\n\n```\n\n\n\n\n#### set\\_graph\\_types\n\n```\nset_graph_types(graph: Graph[StateT, Any, RunEndT]) -> None\n\n```\n\nSet the types of the state and run end from a graph.\n\nYou generally won't need to customise this method, instead implement\n`set_types` and\n`should_set_types`.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\ndef set_graph_types(self, graph: Graph[StateT, Any, RunEndT]) -> None:\n    \"\"\"Set the types of the state and run end from a graph.\n\n    You generally won't need to customise this method, instead implement\n    [`set_types`][pydantic_graph.persistence.BaseStatePersistence.set_types] and\n    [`should_set_types`][pydantic_graph.persistence.BaseStatePersistence.should_set_types].\n    \"\"\"\n    if self.should_set_types():\n        with _utils.set_nodes_type_context(graph.get_nodes()):\n            self.set_types(*graph.inferred_types)\n\n```\n\n\n\n\n#### should\\_set\\_types\n\n```\nshould_set_types() -> bool\n\n```\n\nWhether types need to be set.\n\nImplementations should override this method to return `True` when types have not been set if they are needed.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\ndef should_set_types(self) -> bool:\n    \"\"\"Whether types need to be set.\n\n    Implementations should override this method to return `True` when types have not been set if they are needed.\n    \"\"\"\n    return False\n\n```\n\n\n\n\n#### set\\_types\n\n```\nset_types(\n    state_type: type[StateT], run_end_type: type[RunEndT]\n) -> None\n\n```\n\nSet the types of the state and run end.\n\nThis can be used to create type adapters for serializing and deserializing snapshots,\ne.g. with `build_snapshot_list_type_adapter`.\n\nParameters:\n\n| Name | Type | Description | Default |\n| --- | --- | --- | --- |\n| `state_type` | `type[StateT]` | The state type. | *required* |\n| `run_end_type` | `type[RunEndT]` | The run end type. | *required* |\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\ndef set_types(self, state_type: type[StateT], run_end_type: type[RunEndT]) -> None:\n    \"\"\"Set the types of the state and run end.\n\n    This can be used to create [type adapters][pydantic.TypeAdapter] for serializing and deserializing snapshots,\n    e.g. with [`build_snapshot_list_type_adapter`][pydantic_graph.persistence.build_snapshot_list_type_adapter].\n\n    Args:\n        state_type: The", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-1bd62dba014785119c75d1243a535d0a", "__created_at__": 1744231651.420514, "content": "py`\n```\ndef set_types(self, state_type: type[StateT], run_end_type: type[RunEndT]) -> None:\n    \"\"\"Set the types of the state and run end.\n\n    This can be used to create [type adapters][pydantic.TypeAdapter] for serializing and deserializing snapshots,\n    e.g. with [`build_snapshot_list_type_adapter`][pydantic_graph.persistence.build_snapshot_list_type_adapter].\n\n    Args:\n        state_type: The state type.\n        run_end_type: The run end type.\n    \"\"\"\n    pass\n\n```\n\n\n\n\n\n\n\n### build\\_snapshot\\_list\\_type\\_adapter\n\n```\nbuild_snapshot_list_type_adapter(\n    state_t: type[StateT], run_end_t: type[RunEndT]\n) -> TypeAdapter[list[Snapshot[StateT, RunEndT]]]\n\n```\n\nBuild a type adapter for a list of snapshots.\n\nThis method should be called from within\n`set_types`\nwhere context variables will be set such that Pydantic can create a schema for\n`NodeSnapshot.node`.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/__init__.py`\n```\ndef build_snapshot_list_type_adapter(\n    state_t: type[StateT], run_end_t: type[RunEndT]\n) -> pydantic.TypeAdapter[list[Snapshot[StateT, RunEndT]]]:\n    \"\"\"Build a type adapter for a list of snapshots.\n\n    This method should be called from within\n    [`set_types`][pydantic_graph.persistence.BaseStatePersistence.set_types]\n    where context variables will be set such that Pydantic can create a schema for\n    [`NodeSnapshot.node`][pydantic_graph.persistence.NodeSnapshot.node].\n    \"\"\"\n    return pydantic.TypeAdapter(list[Annotated[Snapshot[state_t, run_end_t], pydantic.Discriminator('kind')]])\n\n```\n\n\n\n\n\n\n\nIn memory state persistence.\n\nThis module provides simple in memory state persistence for graphs.\n\n### SimpleStatePersistence `dataclass`\n\nBases: `BaseStatePersistence[StateT, RunEndT]`\n\nSimple in memory state persistence that just hold the latest snapshot.\n\nIf no state persistence implementation is provided when running a graph, this is used by default.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/in_mem.py`\n```\n@dataclass\nclass SimpleStatePersistence(BaseStatePersistence[StateT, RunEndT]):\n    \"\"\"Simple in memory state persistence that just hold the latest snapshot.\n\n    If no state persistence implementation is provided when running a graph, this is used by default.\n    \"\"\"\n\n    last_snapshot: Snapshot[StateT, RunEndT] | None = None\n    \"\"\"The last snapshot.\"\"\"\n\n    async def snapshot_node(self, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]) -> None:\n        self.last_snapshot = NodeSnapshot(state=state, node=next_node)\n\n    async def snapshot_node_if_new(\n        self, snapshot_id: str, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]\n    ) -> None:\n        if self.last_snapshot and self.last_snapshot.id == snapshot_id:\n            return\n        else:\n            await self.snapshot_node(state, next_node)\n\n    async def snapshot_end(self, state: StateT, end: End[RunEndT]) -> None:\n        self.last_snapshot = EndSnapshot(state=state, result=end)\n\n    @asynccontextmanager\n    async def record_run(self, snapshot_id: str) -> AsyncIterator[None]:\n        if self.last_snapshot is None or snapshot_id != self.last_snapshot.id:\n            raise LookupError(f'No snapshot found with id={snapshot_id!r}')\n\n        assert isinstance(self.last_snapshot, NodeSnapshot), 'Only NodeSnapshot can be recorded'\n        exceptions.GraphNodeStatusError.check(self.last_snapshot.status)\n        self.last_snapshot.status = 'running'\n        self.last_snapshot.start_ts = _utils.now_utc()\n\n        start = perf_counter()\n        try:\n            yield\n        except Exception:\n            self.last_snapshot.duration = perf_counter() - start\n            self.last_snapshot.status = 'error'\n            raise\n        else:\n            self.last_snapshot.duration = perf_counter() - start\n            self.last_snapshot.status = 'success'\n\n    async def load_next(self) -> NodeSnapshot[StateT, RunEndT] | None:\n        if isinstance(self.last_snapshot, NodeSnapshot) and self.last_snapshot.status == 'created':\n            self.last_snapshot.status = 'pending'\n            return self.last_snapshot\n\n    async def load_all(self) -> list[Snapshot[StateT, RunEndT]]:\n        raise NotImplementedError('load is not supported for SimpleStatePersistence')\n\n```\n\n\n#### last\\_snapshot `class-attribute` `instance-attribute`\n\n```\nlast_snapshot: Snapshot[StateT, RunEndT] | None = None\n\n```\n\nThe last snapshot.\n\n\n\n\n\n\n### FullStatePersistence `dataclass`\n\nBases: `BaseStatePersistence[StateT, RunEndT]`\n\nIn memory state persistence that hold a list of snapshots.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/in_mem.py`\n```\n@dataclass\nclass FullStatePersistence(BaseStatePersistence[StateT, RunEndT]):\n    \"\"\"In memory state persistence that hold a list of snapshots.\"\"\"\n\n    deep_copy: bool = True\n    \"\"\"Whether to deep copy the state and nodes when storing them.\n\n    Defaults to `True` so even if nodes or state are modified after the snapshot is taken,\n    the persistence history will record the value at the time of the snapshot.\n    \"\"\"\n    history: list[Snapshot[StateT, RunEndT]] = field(default_factory=list)\n    \"\"\"List of snapshots taken during the graph run.\"\"\"\n    _snapshots_type_adapter", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ad07f2b02c5c5d74bc450b7733d49434", "__created_at__": 1744231651.420514, "content": "list of snapshots.\"\"\"\n\n    deep_copy: bool = True\n    \"\"\"Whether to deep copy the state and nodes when storing them.\n\n    Defaults to `True` so even if nodes or state are modified after the snapshot is taken,\n    the persistence history will record the value at the time of the snapshot.\n    \"\"\"\n    history: list[Snapshot[StateT, RunEndT]] = field(default_factory=list)\n    \"\"\"List of snapshots taken during the graph run.\"\"\"\n    _snapshots_type_adapter: pydantic.TypeAdapter[list[Snapshot[StateT, RunEndT]]] | None = field(\n        default=None, init=False, repr=False\n    )\n\n    async def snapshot_node(self, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]) -> None:\n        snapshot = NodeSnapshot(\n            state=self._prep_state(state),\n            node=next_node.deep_copy() if self.deep_copy else next_node,\n        )\n        self.history.append(snapshot)\n\n    async def snapshot_node_if_new(\n        self, snapshot_id: str, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]\n    ) -> None:\n        if not any(s.id == snapshot_id for s in self.history):\n            await self.snapshot_node(state, next_node)\n\n    async def snapshot_end(self, state: StateT, end: End[RunEndT]) -> None:\n        snapshot = EndSnapshot(\n            state=self._prep_state(state),\n            result=end.deep_copy_data() if self.deep_copy else end,\n        )\n        self.history.append(snapshot)\n\n    @asynccontextmanager\n    async def record_run(self, snapshot_id: str) -> AsyncIterator[None]:\n        try:\n            snapshot = next(s for s in self.history if s.id == snapshot_id)\n        except StopIteration as e:\n            raise LookupError(f'No snapshot found with id={snapshot_id!r}') from e\n\n        assert isinstance(snapshot, NodeSnapshot), 'Only NodeSnapshot can be recorded'\n        exceptions.GraphNodeStatusError.check(snapshot.status)\n        snapshot.status = 'running'\n        snapshot.start_ts = _utils.now_utc()\n        start = perf_counter()\n        try:\n            yield\n        except Exception:\n            snapshot.duration = perf_counter() - start\n            snapshot.status = 'error'\n            raise\n        else:\n            snapshot.duration = perf_counter() - start\n            snapshot.status = 'success'\n\n    async def load_next(self) -> NodeSnapshot[StateT, RunEndT] | None:\n        if snapshot := next((s for s in self.history if isinstance(s, NodeSnapshot) and s.status == 'created'), None):\n            snapshot.status = 'pending'\n            return snapshot\n\n    async def load_all(self) -> list[Snapshot[StateT, RunEndT]]:\n        return self.history\n\n    def should_set_types(self) -> bool:\n        return self._snapshots_type_adapter is None\n\n    def set_types(self, state_type: type[StateT], run_end_type: type[RunEndT]) -> None:\n        self._snapshots_type_adapter = build_snapshot_list_type_adapter(state_type, run_end_type)\n\n    def dump_json(self, *, indent: int | None = None) -> bytes:\n        \"\"\"Dump the history to JSON bytes.\"\"\"\n        assert self._snapshots_type_adapter is not None, 'type adapter must be set to use `dump_json`'\n        return self._snapshots_type_adapter.dump_json(self.history, indent=indent)\n\n    def load_json(self, json_data: str | bytes | bytearray) -> None:\n        \"\"\"Load the history from JSON.\"\"\"\n        assert self._snapshots_type_adapter is not None, 'type adapter must be set to use `load_json`'\n        self.history = self._snapshots_type_adapter.validate_json(json_data)\n\n    def _prep_state(self, state: StateT) -> StateT:\n        \"\"\"Prepare state for snapshot, uses [`copy.deepcopy`][copy.deepcopy] by default.\"\"\"\n        if not self.deep_copy or state is None:\n            return state\n        else:\n            return copy.deepcopy(state)\n\n```\n\n\n#### deep\\_copy `class-attribute` `instance-attribute`\n\n```\ndeep_copy: bool = True\n\n```\n\nWhether to deep copy the state and nodes when storing them.\n\nDefaults to `True` so even if nodes or state are modified after the snapshot is taken,\nthe persistence history will record the value at the time of the snapshot.\n\n\n\n#### history `class-attribute` `instance-attribute`\n\n```\nhistory: list[Snapshot[StateT, RunEndT]] = field(\n    default_factory=list\n)\n\n```\n\nList of snapshots taken during the graph run.\n\n\n\n#### dump\\_json\n\n```\ndump_json(*, indent: int | None = None) -> bytes\n\n```\n\nDump the history to JSON bytes.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/in_mem.py`\n```\ndef dump_json(self, *, indent: int | None = None) -> bytes:\n    \"\"\"Dump the history to JSON bytes.\"\"\"\n    assert self._snapshots_type_adapter is not None, 'type adapter must be set to use `dump_json`'\n    return self._snapshots_type_adapter.dump_json(self.history, indent=indent)\n\n```\n\n\n\n\n#### load\\_json\n\n```\nload_json(json_data: str | bytes | bytearray) -> None\n\n```\n\nLoad the history from JSON.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/in_mem.py`\n```\ndef load_json(self, json_data: str | bytes | bytearray) -> None:\n    \"\"\"Load the history from JSON.\"\"\"\n    assert self._snapshots_type_adapter is not None, 'type adapter must be set to use `load_json`'\n    self.history = self._snapshots_type_adapter.validate", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-9bf460efd3887b0c0833b6922b0025ee", "__created_at__": 1744231651.420514, "content": "str | bytes | bytearray) -> None\n\n```\n\nLoad the history from JSON.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/in_mem.py`\n```\ndef load_json(self, json_data: str | bytes | bytearray) -> None:\n    \"\"\"Load the history from JSON.\"\"\"\n    assert self._snapshots_type_adapter is not None, 'type adapter must be set to use `load_json`'\n    self.history = self._snapshots_type_adapter.validate_json(json_data)\n\n```\n\n\n\n\n\n\n\n\n\n\n### FileStatePersistence `dataclass`\n\nBases: `BaseStatePersistence[StateT, RunEndT]`\n\nFile based state persistence that hold graph run state in a JSON file.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/file.py`\n```\n@dataclass\nclass FileStatePersistence(BaseStatePersistence[StateT, RunEndT]):\n    \"\"\"File based state persistence that hold graph run state in a JSON file.\"\"\"\n\n    json_file: Path\n    \"\"\"Path to the JSON file where the snapshots are stored.\n\n    You should use a different file for each graph run, but a single file should be reused for multiple\n    steps of the same run.\n\n    For example if you have a run ID of the form `run_123abc`, you might create a `FileStatePersistence` thus:\n\n    ```py\n    from pathlib import Path\n\n    from pydantic_graph import FullStatePersistence\n\n    run_id = 'run_123abc'\n    persistence = FullStatePersistence(Path('runs') / f'{run_id}.json')\n    ```\n    \"\"\"\n    _snapshots_type_adapter: pydantic.TypeAdapter[list[Snapshot[StateT, RunEndT]]] | None = field(\n        default=None, init=False, repr=False\n    )\n\n    async def snapshot_node(self, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]) -> None:\n        await self._append_save(NodeSnapshot(state=state, node=next_node))\n\n    async def snapshot_node_if_new(\n        self, snapshot_id: str, state: StateT, next_node: BaseNode[StateT, Any, RunEndT]\n    ) -> None:\n        async with self._lock():\n            snapshots = await self.load_all()\n            if not any(s.id == snapshot_id for s in snapshots):\n                await self._append_save(NodeSnapshot(state=state, node=next_node), lock=False)\n\n    async def snapshot_end(self, state: StateT, end: End[RunEndT]) -> None:\n        await self._append_save(EndSnapshot(state=state, result=end))\n\n    @asynccontextmanager\n    async def record_run(self, snapshot_id: str) -> AsyncIterator[None]:\n        async with self._lock():\n            snapshots = await self.load_all()\n            try:\n                snapshot = next(s for s in snapshots if s.id == snapshot_id)\n            except StopIteration as e:\n                raise LookupError(f'No snapshot found with id={snapshot_id!r}') from e\n\n            assert isinstance(snapshot, NodeSnapshot), 'Only NodeSnapshot can be recorded'\n            exceptions.GraphNodeStatusError.check(snapshot.status)\n            snapshot.status = 'running'\n            snapshot.start_ts = _utils.now_utc()\n            await self._save(snapshots)\n\n        start = perf_counter()\n        try:\n            yield\n        except Exception:\n            duration = perf_counter() - start\n            async with self._lock():\n                await _graph_utils.run_in_executor(self._after_run_sync, snapshot_id, duration, 'error')\n            raise\n        else:\n            snapshot.duration = perf_counter() - start\n            async with self._lock():\n                await _graph_utils.run_in_executor(self._after_run_sync, snapshot_id, snapshot.duration, 'success')\n\n    async def load_next(self) -> NodeSnapshot[StateT, RunEndT] | None:\n        async with self._lock():\n            snapshots = await self.load_all()\n            if snapshot := next((s for s in snapshots if isinstance(s, NodeSnapshot) and s.status == 'created'), None):\n                snapshot.status = 'pending'\n                await self._save(snapshots)\n                return snapshot\n\n    def should_set_types(self) -> bool:\n        \"\"\"Whether types need to be set.\"\"\"\n        return self._snapshots_type_adapter is None\n\n    def set_types(self, state_type: type[StateT], run_end_type: type[RunEndT]) -> None:\n        self._snapshots_type_adapter = build_snapshot_list_type_adapter(state_type, run_end_type)\n\n    async def load_all(self) -> list[Snapshot[StateT, RunEndT]]:\n        return await _graph_utils.run_in_executor(self._load_sync)\n\n    def _load_sync(self) -> list[Snapshot[StateT, RunEndT]]:\n        assert self._snapshots_type_adapter is not None, 'snapshots type adapter must be set'\n        try:\n            content = self.json_file.read_bytes()\n        except FileNotFoundError:\n            return []\n        else:\n            return self._snapshots_type_adapter.validate_json(content)\n\n    def _after_run_sync(self, snapshot_id: str, duration: float, status: SnapshotStatus) -> None:\n        snapshots = self._load_sync()\n        snapshot = next(s for s in snapshots if s.id == snapshot_id)\n        assert isinstance(snapshot, NodeSnapshot), 'Only NodeSnapshot can be recorded'\n        snapshot.duration = duration\n        snapshot.status = status\n        self._save_sync(snapshots)\n\n    async def _save(self, snapshots: list[Snapshot[StateT, RunEndT]]) -> None:\n        await _graph_utils.run_in_executor(self._save_sync, snapshots)\n\n    def _save_sync(self, snapshots: list[Snapshot[StateT, RunEndT]]) -> None:\n        assert", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-1874d189c1d13783a0a35c4fe1c8d046", "__created_at__": 1744231651.420514, "content": "assert isinstance(snapshot, NodeSnapshot), 'Only NodeSnapshot can be recorded'\n        snapshot.duration = duration\n        snapshot.status = status\n        self._save_sync(snapshots)\n\n    async def _save(self, snapshots: list[Snapshot[StateT, RunEndT]]) -> None:\n        await _graph_utils.run_in_executor(self._save_sync, snapshots)\n\n    def _save_sync(self, snapshots: list[Snapshot[StateT, RunEndT]]) -> None:\n        assert self._snapshots_type_adapter is not None, 'snapshots type adapter must be set'\n        self.json_file.write_bytes(self._snapshots_type_adapter.dump_json(snapshots, indent=2))\n\n    async def _append_save(self, snapshot: Snapshot[StateT, RunEndT], *, lock: bool = True) -> None:\n        assert self._snapshots_type_adapter is not None, 'snapshots type adapter must be set'\n        async with AsyncExitStack() as stack:\n            if lock:\n                await stack.enter_async_context(self._lock())\n            snapshots = await self.load_all()\n            snapshots.append(snapshot)\n            await self._save(snapshots)\n\n    @asynccontextmanager\n    async def _lock(self, *, timeout: float = 1.0) -> AsyncIterator[None]:\n        \"\"\"Lock a file by checking and writing a `.pydantic-graph-persistence-lock` to it.\n\n        Args:\n            timeout: how long to wait for the lock\n\n        Returns: an async context manager that holds the lock\n        \"\"\"\n        lock_file = self.json_file.parent / f'{self.json_file.name}.pydantic-graph-persistence-lock'\n        lock_id = secrets.token_urlsafe().encode()\n        await asyncio.wait_for(_get_lock(lock_file, lock_id), timeout=timeout)\n        try:\n            yield\n        finally:\n            await _graph_utils.run_in_executor(lock_file.unlink, missing_ok=True)\n\n```\n\n\n#### json\\_file `instance-attribute`\n\n```\njson_file: Path\n\n```\n\nPath to the JSON file where the snapshots are stored.\n\nYou should use a different file for each graph run, but a single file should be reused for multiple\nsteps of the same run.\n\nFor example if you have a run ID of the form `run_123abc`, you might create a `FileStatePersistence` thus:\n\n```\nfrom pathlib import Path\n\nfrom pydantic_graph import FullStatePersistence\n\nrun_id = 'run_123abc'\npersistence = FullStatePersistence(Path('runs') / f'{run_id}.json')\n\n```\n\n\n\n#### should\\_set\\_types\n\n```\nshould_set_types() -> bool\n\n```\n\nWhether types need to be set.\n\nSource code in `pydantic_graph/pydantic_graph/persistence/file.py`\n```\ndef should_set_types(self) -> bool:\n    \"\"\"Whether types need to be set.\"\"\"\n    return self._snapshots_type_adapter is None\n\n```\n\n\n\n\n\n\n\n\n\n\n\nExamples\n========\n\nExamples of how to use PydanticAI and what it can do.\n\nUsage\n-----\n\nThese examples are distributed with `pydantic-ai` so you can run them either by cloning the [pydantic-ai repo](https://github.com/pydantic/pydantic-ai) or by simply installing `pydantic-ai` from PyPI with `pip` or `uv`.\n\n### Installing required dependencies\n\nEither way you'll need to install extra dependencies to run some examples, you just need to install the `examples` optional dependency group.\n\nIf you've installed `pydantic-ai` via pip/uv, you can install the extra dependencies with:\n\n```\npip install \"pydantic-ai[examples]\"\n\n```\n\n\n```\nuv add \"pydantic-ai[examples]\"\n\n```\n\n\n\nIf you clone the repo, you should instead use `uv sync --extra examples` to install extra dependencies.\n\n### Setting model environment variables\n\nThese examples will need you to set up authentication with one or more of the LLMs, see the [model configuration](../models/) docs for details on how to do this.\n\nTL;DR: in most cases you'll need to set one of the following environment variables:\n\n```\nexport OPENAI_API_KEY=your-api-key\n\n```\n\n\n```\nexport GEMINI_API_KEY=your-api-key\n\n```\n\n\n\n### Running Examples\n\nTo run the examples (this will work whether you installed `pydantic_ai`, or cloned the repo), run:\n\n```\npython -m pydantic_ai_examples.<example_module_name>\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.<example_module_name>\n\n```\n\n\n\nFor examples, to run the very simple [`pydantic_model`](pydantic-model/) example:\n\n```\npython -m pydantic_ai_examples.pydantic_model\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.pydantic_model\n\n```\n\n\n\nIf you like one-liners and you're using uv, you can run a pydantic-ai example with zero setup:\n\n```\nOPENAI_API_KEY='your-api-key' \\\n  uv run --with \"pydantic-ai[examples]\" \\\n  -m pydantic_ai_examples.pydantic_model\n\n```\n\n---\n\nYou'll probably want to edit examples in addition to just running them. You can copy the examples to a new directory with:\n\n```\npython -m pydantic_ai_examples --copy-to examples/\n\n```\n\n\n```\nuv run -m pydantic_ai_examples --copy-to examples/\n\n```\n\n\n\n\n\nSmall but complete example of using PydanticAI to build a support agent for a bank.\n\nDemonstrates:\n\n* [dynamic system prompt](../../agents/#system-prompts)\n* [structured `result_type`](../../results/#structured-result-validation)\n* [tools](../../tools/)\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-55b19c469f8836f1d1e39ae4cb918116", "__created_at__": 1744231651.420514, "content": "_ai_examples --copy-to examples/\n\n```\n\n\n```\nuv run -m pydantic_ai_examples --copy-to examples/\n\n```\n\n\n\n\n\nSmall but complete example of using PydanticAI to build a support agent for a bank.\n\nDemonstrates:\n\n* [dynamic system prompt](../../agents/#system-prompts)\n* [structured `result_type`](../../results/#structured-result-validation)\n* [tools](../../tools/)\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.bank_support\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.bank_support\n\n```\n\n\n\n(or `PYDANTIC_AI_MODEL=gemini-1.5-flash ...`)\n\nExample Code\n------------\n\nbank\\_support.py\n```\nfrom dataclasses import dataclass\n\nfrom pydantic import BaseModel, Field\n\nfrom pydantic_ai import Agent, RunContext\n\n\nclass DatabaseConn:\n    \"\"\"This is a fake database for example purposes.\n\n    In reality, you'd be connecting to an external database\n    (e.g. PostgreSQL) to get information about customers.\n    \"\"\"\n\n    @classmethod\n    async def customer_name(cls, *, id: int) -> str | None:\n        if id == 123:\n            return 'John'\n\n    @classmethod\n    async def customer_balance(cls, *, id: int, include_pending: bool) -> float:\n        if id == 123 and include_pending:\n            return 123.45\n        else:\n            raise ValueError('Customer not found')\n\n\n@dataclass\nclass SupportDependencies:\n    customer_id: int\n    db: DatabaseConn\n\n\nclass SupportResult(BaseModel):\n    support_advice: str = Field(description='Advice returned to the customer')\n    block_card: bool = Field(description='Whether to block their card or not')\n    risk: int = Field(description='Risk level of query', ge=0, le=10)\n\n\nsupport_agent = Agent(\n    'openai:gpt-4o',\n    deps_type=SupportDependencies,\n    result_type=SupportResult,\n    system_prompt=(\n        'You are a support agent in our bank, give the '\n        'customer support and judge the risk level of their query. '\n        \"Reply using the customer's name.\"\n    ),\n)\n\n\n@support_agent.system_prompt\nasync def add_customer_name(ctx: RunContext[SupportDependencies]) -> str:\n    customer_name = await ctx.deps.db.customer_name(id=ctx.deps.customer_id)\n    return f\"The customer's name is {customer_name!r}\"\n\n\n@support_agent.tool\nasync def customer_balance(\n    ctx: RunContext[SupportDependencies], include_pending: bool\n) -> str:\n    \"\"\"Returns the customer's current account balance.\"\"\"\n    balance = await ctx.deps.db.customer_balance(\n        id=ctx.deps.customer_id,\n        include_pending=include_pending,\n    )\n    return f'${balance:.2f}'\n\n\nif __name__ == '__main__':\n    deps = SupportDependencies(customer_id=123, db=DatabaseConn())\n    result = support_agent.run_sync('What is my balance?', deps=deps)\n    print(result.data)\n    \"\"\"\n    support_advice='Hello John, your current account balance, including pending transactions, is $123.45.' block_card=False risk=1\n    \"\"\"\n\n    result = support_agent.run_sync('I just lost my card!', deps=deps)\n    print(result.data)\n    \"\"\"\n    support_advice=\"I'm sorry to hear that, John. We are temporarily blocking your card to prevent unauthorized transactions.\" block_card=True risk=8\n    \"\"\"\n\n```\n\n\nChat App with FastAPI\n=====================\n\nSimple chat app example build with FastAPI.\n\nDemonstrates:\n\n* [reusing chat history](../../message-history/)\n* [serializing messages](../../message-history/#accessing-messages-from-results)\n* [streaming responses](../../results/#streamed-results)\n\nThis demonstrates storing chat history between requests and using it to give the model context for new responses.\n\nMost of the complex logic here is between `chat_app.py` which streams the response to the browser,\nand `chat_app.ts` which renders messages in the browser.\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.chat_app\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.chat_app\n\n```\n\n\n\nThen open the app at [localhost:8000](http://localhost:8000).\n\n[![Example conversation](../../img/chat-app-example.png)](../../img/chat-app-example.png)\n\nExample Code\n------------\n\nPython code that runs the chat app:\n\nchat\\_app.py\n```\nfrom __future__ import annotations as _annotations\n\nimport asyncio\nimport json\nimport sqlite3\nfrom collections.abc import AsyncIterator\nfrom concurrent.futures.thread import ThreadPoolExecutor\nfrom contextlib import asynccontextmanager\nfrom dataclasses import dataclass\nfrom datetime import datetime, timezone\nfrom functools import partial\nfrom pathlib import Path\nfrom typing import Annotated, Any, Callable, Literal, TypeVar\n\nimport fastapi\nimport logfire\nfrom fastapi import Depends, Request\nfrom fastapi.responses import FileResponse, Response, StreamingResponse\nfrom typing_extensions import LiteralString, ParamSpec, TypedDict\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.exceptions import UnexpectedModelBehavior\nfrom pydantic_ai.messages import (\n    ModelMessage,\n    ModelMessagesTypeAdapter,\n    ModelRequest,\n    ModelResponse,\n    TextPart,\n    UserPromptPart,\n)\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nagent = Agent", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-02542ed8c0be3c6941f78e2491169d39", "__created_at__": 1744231651.420514, "content": ", TypedDict\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.exceptions import UnexpectedModelBehavior\nfrom pydantic_ai.messages import (\n    ModelMessage,\n    ModelMessagesTypeAdapter,\n    ModelRequest,\n    ModelResponse,\n    TextPart,\n    UserPromptPart,\n)\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nagent = Agent('openai:gpt-4o', instrument=True)\nTHIS_DIR = Path(__file__).parent\n\n\n@asynccontextmanager\nasync def lifespan(_app: fastapi.FastAPI):\n    async with Database.connect() as db:\n        yield {'db': db}\n\n\napp = fastapi.FastAPI(lifespan=lifespan)\nlogfire.instrument_fastapi(app)\n\n\n@app.get('/')\nasync def index() -> FileResponse:\n    return FileResponse((THIS_DIR / 'chat_app.html'), media_type='text/html')\n\n\n@app.get('/chat_app.ts')\nasync def main_ts() -> FileResponse:\n    \"\"\"Get the raw typescript code, it's compiled in the browser, forgive me.\"\"\"\n    return FileResponse((THIS_DIR / 'chat_app.ts'), media_type='text/plain')\n\n\nasync def get_db(request: Request) -> Database:\n    return request.state.db\n\n\n@app.get('/chat/')\nasync def get_chat(database: Database = Depends(get_db)) -> Response:\n    msgs = await database.get_messages()\n    return Response(\n        b'\\n'.join(json.dumps(to_chat_message(m)).encode('utf-8') for m in msgs),\n        media_type='text/plain',\n    )\n\n\nclass ChatMessage(TypedDict):\n    \"\"\"Format of messages sent to the browser.\"\"\"\n\n    role: Literal['user', 'model']\n    timestamp: str\n    content: str\n\n\ndef to_chat_message(m: ModelMessage) -> ChatMessage:\n    first_part = m.parts[0]\n    if isinstance(m, ModelRequest):\n        if isinstance(first_part, UserPromptPart):\n            assert isinstance(first_part.content, str)\n            return {\n                'role': 'user',\n                'timestamp': first_part.timestamp.isoformat(),\n                'content': first_part.content,\n            }\n    elif isinstance(m, ModelResponse):\n        if isinstance(first_part, TextPart):\n            return {\n                'role': 'model',\n                'timestamp': m.timestamp.isoformat(),\n                'content': first_part.content,\n            }\n    raise UnexpectedModelBehavior(f'Unexpected message type for chat app: {m}')\n\n\n@app.post('/chat/')\nasync def post_chat(\n    prompt: Annotated[str, fastapi.Form()], database: Database = Depends(get_db)\n) -> StreamingResponse:\n    async def stream_messages():\n        \"\"\"Streams new line delimited JSON `Message`s to the client.\"\"\"\n        # stream the user prompt so that can be displayed straight away\n        yield (\n            json.dumps(\n                {\n                    'role': 'user',\n                    'timestamp': datetime.now(tz=timezone.utc).isoformat(),\n                    'content': prompt,\n                }\n            ).encode('utf-8')\n            + b'\\n'\n        )\n        # get the chat history so far to pass as context to the agent\n        messages = await database.get_messages()\n        # run the agent with the user prompt and the chat history\n        async with agent.run_stream(prompt, message_history=messages) as result:\n            async for text in result.stream(debounce_by=0.01):\n                # text here is a `str` and the frontend wants\n                # JSON encoded ModelResponse, so we create one\n                m = ModelResponse(parts=[TextPart(text)], timestamp=result.timestamp())\n                yield json.dumps(to_chat_message(m)).encode('utf-8') + b'\\n'\n\n        # add new messages (e.g. the user prompt and the agent response in this case) to the database\n        await database.add_messages(result.new_messages_json())\n\n    return StreamingResponse(stream_messages(), media_type='text/plain')\n\n\nP = ParamSpec('P')\nR = TypeVar('R')\n\n\n@dataclass\nclass Database:\n    \"\"\"Rudimentary database to store chat messages in SQLite.\n\n    The SQLite standard library package is synchronous, so we\n    use a thread pool executor to run queries asynchronously.\n    \"\"\"\n\n    con: sqlite3.Connection\n    _loop: asyncio.AbstractEventLoop\n    _executor: ThreadPoolExecutor\n\n    @classmethod\n    @asynccontextmanager\n    async def connect(\n        cls, file: Path = THIS_DIR / '.chat_app_messages.sqlite'\n    ) -> AsyncIterator[Database]:\n        with logfire.span('connect to DB'):\n            loop = asyncio.get_event_loop()\n            executor = ThreadPoolExecutor(max_workers=1)\n            con = await loop.run_in_executor(executor, cls._connect, file)\n            slf = cls(con, loop, executor)\n        try:\n            yield slf\n        finally:\n            await slf._asyncify(con.close)\n\n    @staticmethod\n    def _connect(file: Path) -> sqlite3.Connection:\n        con = sqlite3.connect(str(file))\n        con = logfire.instrument_sqlite3(con)\n        cur = con.cursor()\n        cur.execute(\n            'CREATE TABLE IF NOT EXISTS messages (id INT PRIMARY KEY, message_list TEXT);'\n        )\n        con.commit()\n        return con\n\n    async def add_messages(self, messages: bytes):\n        await self._asyncify(\n            self._execute,\n            'INSERT INTO messages (message_list) VALUES (?);',\n            messages,\n            commit=True,\n        )\n        await self._asyncify(self.con.commit)\n\n    async def get_messages(self) -> list[ModelMessage]:\n        c = await self._asyncify(\n            self._execute, 'SELECT message_list FROM messages order by id'\n        )\n        rows = await self._asyncify(c.fetchall)", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-86a9f53d979bbb38ee393142b903fb00", "__created_at__": 1744231651.420514, "content": "(self, messages: bytes):\n        await self._asyncify(\n            self._execute,\n            'INSERT INTO messages (message_list) VALUES (?);',\n            messages,\n            commit=True,\n        )\n        await self._asyncify(self.con.commit)\n\n    async def get_messages(self) -> list[ModelMessage]:\n        c = await self._asyncify(\n            self._execute, 'SELECT message_list FROM messages order by id'\n        )\n        rows = await self._asyncify(c.fetchall)\n        messages: list[ModelMessage] = []\n        for row in rows:\n            messages.extend(ModelMessagesTypeAdapter.validate_json(row[0]))\n        return messages\n\n    def _execute(\n        self, sql: LiteralString, *args: Any, commit: bool = False\n    ) -> sqlite3.Cursor:\n        cur = self.con.cursor()\n        cur.execute(sql, args)\n        if commit:\n            self.con.commit()\n        return cur\n\n    async def _asyncify(\n        self, func: Callable[P, R], *args: P.args, **kwargs: P.kwargs\n    ) -> R:\n        return await self._loop.run_in_executor(  # type: ignore\n            self._executor,\n            partial(func, **kwargs),\n            *args,  # type: ignore\n        )\n\n\nif __name__ == '__main__':\n    import uvicorn\n\n    uvicorn.run(\n        'pydantic_ai_examples.chat_app:app', reload=True, reload_dirs=[str(THIS_DIR)]\n    )\n\n```\n\nSimple HTML page to render the app:\n\nchat\\_app.html\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Chat App</title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <style>\n    main {\n      max-width: 700px;\n    }\n    #conversation .user::before {\n      content: 'You asked: ';\n      font-weight: bold;\n      display: block;\n    }\n    #conversation .model::before {\n      content: 'AI Response: ';\n      font-weight: bold;\n      display: block;\n    }\n    #spinner {\n      opacity: 0;\n      transition: opacity 500ms ease-in;\n      width: 30px;\n      height: 30px;\n      border: 3px solid #222;\n      border-bottom-color: transparent;\n      border-radius: 50%;\n      animation: rotation 1s linear infinite;\n    }\n    @keyframes rotation {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    #spinner.active {\n      opacity: 1;\n    }\n  </style>\n</head>\n<body>\n  <main class=\"border rounded mx-auto my-5 p-4\">\n    <h1>Chat App</h1>\n    <p>Ask me anything...</p>\n    <div id=\"conversation\" class=\"px-2\"></div>\n    <div class=\"d-flex justify-content-center mb-3\">\n      <div id=\"spinner\"></div>\n    </div>\n    <form method=\"post\">\n      <input id=\"prompt-input\" name=\"prompt\" class=\"form-control\"/>\n      <div class=\"d-flex justify-content-end\">\n        <button class=\"btn btn-primary mt-2\">Send</button>\n      </div>\n    </form>\n    <div id=\"error\" class=\"d-none text-danger\">\n      Error occurred, check the browser developer console for more information.\n    </div>\n  </main>\n</body>\n</html>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/typescript/5.6.3/typescript.min.js\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n<script type=\"module\">\n  // to let me write TypeScript, without adding the burden of npm we do a dirty, non-production-ready hack\n  // and transpile the TypeScript code in the browser\n  // this is (arguably) A neat demo trick, but not suitable for production!\n  async function loadTs() {\n    const response = await fetch('/chat_app.ts');\n    const tsCode = await response.text();\n    const jsCode = window.ts.transpile(tsCode, { target: \"es2015\" });\n    let script = document.createElement('script');\n    script.type = 'module';\n    script.text = jsCode;\n    document.body.appendChild(script);\n  }\n\n  loadTs().catch((e) => {\n    console.error(e);\n    document.getElementById('error').classList.remove('d-none');\n    document.getElementById('spinner').classList.remove('active');\n  });\n</script>\n\n```\n\nTypeScript to handle rendering the messages, to keep this simple (and at the risk of offending frontend developers) the typescript code is passed to the browser as plain text and transpiled in the browser.\n\nchat\\_app.ts\n```\n// BIG FAT WARNING: to avoid the complexity of npm, this typescript is compiled in the browser\n// there's currently no static type checking\n\nimport { marked } from 'https://cdnjs.cloudflare.com/ajax/libs/marked/15.0.0/lib/marked.esm.js'\nconst convElement = document.getElementById('conversation')\n\nconst promptInput = document.getElementById('prompt-input') as HTMLInputElement\nconst spinner = document.getElementById('spinner')\n\n// stream the response and render messages as each chunk is received\n// data is sent as newline-delimited JSON\nasync function onFetchResponse(response: Response): Promise<void> {", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-be52e69f5b62cca9730ceaab4e9ad5ee", "__created_at__": 1744231651.420514, "content": "'https://cdnjs.cloudflare.com/ajax/libs/marked/15.0.0/lib/marked.esm.js'\nconst convElement = document.getElementById('conversation')\n\nconst promptInput = document.getElementById('prompt-input') as HTMLInputElement\nconst spinner = document.getElementById('spinner')\n\n// stream the response and render messages as each chunk is received\n// data is sent as newline-delimited JSON\nasync function onFetchResponse(response: Response): Promise<void> {\n  let text = ''\n  let decoder = new TextDecoder()\n  if (response.ok) {\n    const reader = response.body.getReader()\n    while (true) {\n      const {done, value} = await reader.read()\n      if (done) {\n        break\n      }\n      text += decoder.decode(value)\n      addMessages(text)\n      spinner.classList.remove('active')\n    }\n    addMessages(text)\n    promptInput.disabled = false\n    promptInput.focus()\n  } else {\n    const text = await response.text()\n    console.error(`Unexpected response: ${response.status}`, {response, text})\n    throw new Error(`Unexpected response: ${response.status}`)\n  }\n}\n\n// The format of messages, this matches pydantic-ai both for brevity and understanding\n// in production, you might not want to keep this format all the way to the frontend\ninterface Message {\n  role: string\n  content: string\n  timestamp: string\n}\n\n// take raw response text and render messages into the `#conversation` element\n// Message timestamp is assumed to be a unique identifier of a message, and is used to deduplicate\n// hence you can send data about the same message multiple times, and it will be updated\n// instead of creating a new message elements\nfunction addMessages(responseText: string) {\n  const lines = responseText.split('\\n')\n  const messages: Message[] = lines.filter(line => line.length > 1).map(j => JSON.parse(j))\n  for (const message of messages) {\n    // we use the timestamp as a crude element id\n    const {timestamp, role, content} = message\n    const id = `msg-${timestamp}`\n    let msgDiv = document.getElementById(id)\n    if (!msgDiv) {\n      msgDiv = document.createElement('div')\n      msgDiv.id = id\n      msgDiv.title = `${role} at ${timestamp}`\n      msgDiv.classList.add('border-top', 'pt-2', role)\n      convElement.appendChild(msgDiv)\n    }\n    msgDiv.innerHTML = marked.parse(content)\n  }\n  window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' })\n}\n\nfunction onError(error: any) {\n  console.error(error)\n  document.getElementById('error').classList.remove('d-none')\n  document.getElementById('spinner').classList.remove('active')\n}\n\nasync function onSubmit(e: SubmitEvent): Promise<void> {\n  e.preventDefault()\n  spinner.classList.add('active')\n  const body = new FormData(e.target as HTMLFormElement)\n\n  promptInput.value = ''\n  promptInput.disabled = true\n\n  const response = await fetch('/chat/', {method: 'POST', body})\n  await onFetchResponse(response)\n}\n\n// call onSubmit when the form is submitted (e.g. user clicks the send button or hits Enter)\ndocument.querySelector('form').addEventListener('submit', (e) => onSubmit(e).catch(onError))\n\n// load messages on page load\nfetch('/chat/').then(onFetchResponse).catch(onError)\n\n```\n\n\nExample of a multi-agent flow where one agent delegates work to another, then hands off control to a third agent.\n\nDemonstrates:\n\n* [agent delegation](../../multi-agent-applications/#agent-delegation)\n* [programmatic agent hand-off](../../multi-agent-applications/#programmatic-agent-hand-off)\n* [usage limits](../../agents/#usage-limits)\n\nIn this scenario, a group of agents work together to find the best flight for a user.\n\nThe control flow for this example can be summarised as follows:\n\n```\ngraph TD\n  START --> search_agent(\"search agent\")\n  search_agent --> extraction_agent(\"extraction agent\")\n  extraction_agent --> search_agent\n  search_agent --> human_confirm(\"human confirm\")\n  human_confirm --> search_agent\n  search_agent --> FAILED\n  human_confirm --> find_seat_function(\"find seat function\")\n  find_seat_function --> human_seat_choice(\"human seat choice\")\n  human_seat_choice --> find_seat_agent(\"find seat agent\")\n  find_seat_agent --> find_seat_function\n  find_seat_function --> buy_flights(\"buy flights\")\n  buy_flights --> SUCCESS\n```\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.flight_booking\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.flight_booking\n\n```\n\n\n\nExample Code\n------------\n\nflight\\_booking.py\n```\nimport datetime\nfrom dataclasses import dataclass\nfrom typing import Literal\n\nimport logfire\nfrom pydantic import BaseModel, Field\nfrom rich.prompt import Prompt\n\nfrom pydantic_ai import Agent, ModelRetry, RunContext\nfrom pydantic_ai.messages import ModelMessage\nfrom pydantic_ai.usage import Usage, UsageLimits\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\n\nclass FlightDetails(BaseModel):\n    \"\"\"Details of the most suitable flight.\"\"\"\n\n    flight_number: str\n    price: int\n    origin: str = Field(description='Three-letter airport code')\n    destination: str = Field(description", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-95d9c8fb57f58b10d2aec561612e5a51", "__created_at__": 1744231651.420514, "content": "ModelMessage\nfrom pydantic_ai.usage import Usage, UsageLimits\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\n\nclass FlightDetails(BaseModel):\n    \"\"\"Details of the most suitable flight.\"\"\"\n\n    flight_number: str\n    price: int\n    origin: str = Field(description='Three-letter airport code')\n    destination: str = Field(description='Three-letter airport code')\n    date: datetime.date\n\n\nclass NoFlightFound(BaseModel):\n    \"\"\"When no valid flight is found.\"\"\"\n\n\n@dataclass\nclass Deps:\n    web_page_text: str\n    req_origin: str\n    req_destination: str\n    req_date: datetime.date\n\n\n# This agent is responsible for controlling the flow of the conversation.\nsearch_agent = Agent[Deps, FlightDetails | NoFlightFound](\n    'openai:gpt-4o',\n    result_type=FlightDetails | NoFlightFound,  # type: ignore\n    retries=4,\n    system_prompt=(\n        'Your job is to find the cheapest flight for the user on the given date. '\n    ),\n    instrument=True,\n)\n\n\n# This agent is responsible for extracting flight details from web page text.\nextraction_agent = Agent(\n    'openai:gpt-4o',\n    result_type=list[FlightDetails],\n    system_prompt='Extract all the flight details from the given text.',\n)\n\n\n@search_agent.tool\nasync def extract_flights(ctx: RunContext[Deps]) -> list[FlightDetails]:\n    \"\"\"Get details of all flights.\"\"\"\n    # we pass the usage to the search agent so requests within this agent are counted\n    result = await extraction_agent.run(ctx.deps.web_page_text, usage=ctx.usage)\n    logfire.info('found {flight_count} flights', flight_count=len(result.data))\n    return result.data\n\n\n@search_agent.result_validator\nasync def validate_result(\n    ctx: RunContext[Deps], result: FlightDetails | NoFlightFound\n) -> FlightDetails | NoFlightFound:\n    \"\"\"Procedural validation that the flight meets the constraints.\"\"\"\n    if isinstance(result, NoFlightFound):\n        return result\n\n    errors: list[str] = []\n    if result.origin != ctx.deps.req_origin:\n        errors.append(\n            f'Flight should have origin {ctx.deps.req_origin}, not {result.origin}'\n        )\n    if result.destination != ctx.deps.req_destination:\n        errors.append(\n            f'Flight should have destination {ctx.deps.req_destination}, not {result.destination}'\n        )\n    if result.date != ctx.deps.req_date:\n        errors.append(f'Flight should be on {ctx.deps.req_date}, not {result.date}')\n\n    if errors:\n        raise ModelRetry('\\n'.join(errors))\n    else:\n        return result\n\n\nclass SeatPreference(BaseModel):\n    row: int = Field(ge=1, le=30)\n    seat: Literal['A', 'B', 'C', 'D', 'E', 'F']\n\n\nclass Failed(BaseModel):\n    \"\"\"Unable to extract a seat selection.\"\"\"\n\n\n# This agent is responsible for extracting the user's seat selection\nseat_preference_agent = Agent[None, SeatPreference | Failed](\n    'openai:gpt-4o',\n    result_type=SeatPreference | Failed,  # type: ignore\n    system_prompt=(\n        \"Extract the user's seat preference. \"\n        'Seats A and F are window seats. '\n        'Row 1 is the front row and has extra leg room. '\n        'Rows 14, and 20 also have extra leg room. '\n    ),\n)\n\n\n# in reality this would be downloaded from a booking site,\n# potentially using another agent to navigate the site\nflights_web_page = \"\"\"\n1. Flight SFO-AK123\n- Price: $350\n- Origin: San Francisco International Airport (SFO)\n- Destination: Ted Stevens Anchorage International Airport (ANC)\n- Date: January 10, 2025\n\n2. Flight SFO-AK456\n- Price: $370\n- Origin: San Francisco International Airport (SFO)\n- Destination: Fairbanks International Airport (FAI)\n- Date: January 10, 2025\n\n3. Flight SFO-AK789\n- Price: $400\n- Origin: San Francisco International Airport (SFO)\n- Destination: Juneau International Airport (JNU)\n- Date: January 20, 2025\n\n4. Flight NYC-LA101\n- Price: $250\n- Origin: San Francisco International Airport (SFO)\n- Destination: Ted Stevens Anchorage International Airport (ANC)\n- Date: January 10, 2025\n\n5. Flight CHI-MIA202\n- Price: $200\n- Origin: Chicago O'Hare International Airport (ORD)\n- Destination: Miami International Airport (MIA)\n- Date: January 12, 2025\n\n6. Flight BOS-SEA303\n- Price: $120\n- Origin: Boston Logan International Airport (BOS)\n- Destination: Ted Stevens Anchorage International Airport (ANC)\n- Date: January 12, 2025\n\n7. Flight DFW-DEN404\n- Price: $150\n- Origin: Dallas/Fort Worth International Airport (DFW)\n- Destination: Denver International Airport (DEN)\n- Date: January 10, 2025\n\n8. Flight ATL-HOU505\n- Price: $180\n- Origin: Hartsfield-Jackson Atlanta International Airport (ATL)\n- Destination: George Bush Intercontinental Airport (IAH)\n- Date: January 10, 2025\n\"\"\"\n\n# restrict how many requests this app can make to the LLM\nusage_limits = UsageLimits(request_limit=15", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-622be1f81570120dbf2ceebd39a29b57", "__created_at__": 1744231651.420514, "content": "Airport (DFW)\n- Destination: Denver International Airport (DEN)\n- Date: January 10, 2025\n\n8. Flight ATL-HOU505\n- Price: $180\n- Origin: Hartsfield-Jackson Atlanta International Airport (ATL)\n- Destination: George Bush Intercontinental Airport (IAH)\n- Date: January 10, 2025\n\"\"\"\n\n# restrict how many requests this app can make to the LLM\nusage_limits = UsageLimits(request_limit=15)\n\n\nasync def main():\n    deps = Deps(\n        web_page_text=flights_web_page,\n        req_origin='SFO',\n        req_destination='ANC',\n        req_date=datetime.date(2025, 1, 10),\n    )\n    message_history: list[ModelMessage] | None = None\n    usage: Usage = Usage()\n    # run the agent until a satisfactory flight is found\n    while True:\n        result = await search_agent.run(\n            f'Find me a flight from {deps.req_origin} to {deps.req_destination} on {deps.req_date}',\n            deps=deps,\n            usage=usage,\n            message_history=message_history,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, NoFlightFound):\n            print('No flight found')\n            break\n        else:\n            flight = result.data\n            print(f'Flight found: {flight}')\n            answer = Prompt.ask(\n                'Do you want to buy this flight, or keep searching? (buy/*search)',\n                choices=['buy', 'search', ''],\n                show_choices=False,\n            )\n            if answer == 'buy':\n                seat = await find_seat(usage)\n                await buy_tickets(flight, seat)\n                break\n            else:\n                message_history = result.all_messages(\n                    result_tool_return_content='Please suggest another flight'\n                )\n\n\nasync def find_seat(usage: Usage) -> SeatPreference:\n    message_history: list[ModelMessage] | None = None\n    while True:\n        answer = Prompt.ask('What seat would you like?')\n\n        result = await seat_preference_agent.run(\n            answer,\n            message_history=message_history,\n            usage=usage,\n            usage_limits=usage_limits,\n        )\n        if isinstance(result.data, SeatPreference):\n            return result.data\n        else:\n            print('Could not understand seat preference. Please try again.')\n            message_history = result.all_messages()\n\n\nasync def buy_tickets(flight_details: FlightDetails, seat: SeatPreference):\n    print(f'Purchasing flight {flight_details=!r} {seat=!r}...')\n\n\nif __name__ == '__main__':\n    import asyncio\n\n    asyncio.run(main())\n\n```\n\n\nPydantic Model\n==============\n\nSimple example of using PydanticAI to construct a Pydantic model from a text input.\n\nDemonstrates:\n\n* [structured `result_type`](../../results/#structured-result-validation)\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.pydantic_model\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.pydantic_model\n\n```\n\n\n\nThis examples uses `openai:gpt-4o` by default, but it works well with other models, e.g. you can run it\nwith Gemini using:\n\n```\nPYDANTIC_AI_MODEL=gemini-1.5-pro python -m pydantic_ai_examples.pydantic_model\n\n```\n\n\n```\nPYDANTIC_AI_MODEL=gemini-1.5-pro uv run -m pydantic_ai_examples.pydantic_model\n\n```\n\n\n\n(or `PYDANTIC_AI_MODEL=gemini-1.5-flash ...`)\n\nExample Code\n------------\n\npydantic\\_model.py\n```\nimport os\n\nimport logfire\nfrom pydantic import BaseModel\n\nfrom pydantic_ai import Agent\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\n\nclass MyModel(BaseModel):\n    city: str\n    country: str\n\n\nmodel = os.getenv('PYDANTIC_AI_MODEL', 'openai:gpt-4o')\nprint(f'Using model: {model}')\nagent = Agent(model, result_type=MyModel, instrument=True)\n\nif __name__ == '__main__':\n    result = agent.run_sync('The windy city in the US of A.')\n    print(result.data)\n    print(result.usage())\n\n```\n\n\nQuestion Graph\n==============\n\nExample of a graph for asking and evaluating questions.\n\nDemonstrates:\n\n* [`pydantic_graph`](../../graph/)\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.question_graph\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.question_graph\n\n```\n\n\n\nExample Code\n------------\n\nquestion\\_graph.py\n```\nfrom __future__ import annotations as _annotations\n\nfrom dataclasses import dataclass, field\nfrom pathlib import Path\n\nimport logfire\nfrom groq import BaseModel\nfrom pydantic_graph import (\n    BaseNode,\n    End,\n    Graph,\n    GraphRunContext,\n)\nfrom pydantic_graph.persistence.file import FileStatePersistence\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_ai.messages import ModelMessage\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nask_agent = Agent('openai:gpt-4o', result_type=str, instrument=True", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-7f168f5f58a160ed8d5f9ed516fb7e89", "__created_at__": 1744231651.420514, "content": "from pydantic_graph.persistence.file import FileStatePersistence\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.format_as_xml import format_as_xml\nfrom pydantic_ai.messages import ModelMessage\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nask_agent = Agent('openai:gpt-4o', result_type=str, instrument=True)\n\n\n@dataclass\nclass QuestionState:\n    question: str | None = None\n    ask_agent_messages: list[ModelMessage] = field(default_factory=list)\n    evaluate_agent_messages: list[ModelMessage] = field(default_factory=list)\n\n\n@dataclass\nclass Ask(BaseNode[QuestionState]):\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Answer:\n        result = await ask_agent.run(\n            'Ask a simple question with a single correct answer.',\n            message_history=ctx.state.ask_agent_messages,\n        )\n        ctx.state.ask_agent_messages += result.all_messages()\n        ctx.state.question = result.data\n        return Answer(result.data)\n\n\n@dataclass\nclass Answer(BaseNode[QuestionState]):\n    question: str\n\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Evaluate:\n        answer = input(f'{self.question}: ')\n        return Evaluate(answer)\n\n\nclass EvaluationResult(BaseModel, use_attribute_docstrings=True):\n    correct: bool\n    \"\"\"Whether the answer is correct.\"\"\"\n    comment: str\n    \"\"\"Comment on the answer, reprimand the user if the answer is wrong.\"\"\"\n\n\nevaluate_agent = Agent(\n    'openai:gpt-4o',\n    result_type=EvaluationResult,\n    system_prompt='Given a question and answer, evaluate if the answer is correct.',\n)\n\n\n@dataclass\nclass Evaluate(BaseNode[QuestionState, None, str]):\n    answer: str\n\n    async def run(\n        self,\n        ctx: GraphRunContext[QuestionState],\n    ) -> End[str] | Reprimand:\n        assert ctx.state.question is not None\n        result = await evaluate_agent.run(\n            format_as_xml({'question': ctx.state.question, 'answer': self.answer}),\n            message_history=ctx.state.evaluate_agent_messages,\n        )\n        ctx.state.evaluate_agent_messages += result.all_messages()\n        if result.data.correct:\n            return End(result.data.comment)\n        else:\n            return Reprimand(result.data.comment)\n\n\n@dataclass\nclass Reprimand(BaseNode[QuestionState]):\n    comment: str\n\n    async def run(self, ctx: GraphRunContext[QuestionState]) -> Ask:\n        print(f'Comment: {self.comment}')\n        ctx.state.question = None\n        return Ask()\n\n\nquestion_graph = Graph(\n    nodes=(Ask, Answer, Evaluate, Reprimand), state_type=QuestionState\n)\n\n\nasync def run_as_continuous():\n    state = QuestionState()\n    node = Ask()\n    end = await question_graph.run(node, state=state)\n    print('END:', end.output)\n\n\nasync def run_as_cli(answer: str | None):\n    persistence = FileStatePersistence(Path('question_graph.json'))\n    persistence.set_graph_types(question_graph)\n\n    if snapshot := await persistence.load_next():\n        state = snapshot.state\n        assert answer is not None, (\n            'answer required, usage \"uv run -m pydantic_ai_examples.question_graph cli <answer>\"'\n        )\n        node = Evaluate(answer)\n    else:\n        state = QuestionState()\n        node = Ask()\n    # debug(state, node)\n\n    async with question_graph.iter(node, state=state, persistence=persistence) as run:\n        while True:\n            node = await run.next()\n            if isinstance(node, End):\n                print('END:', node.data)\n                history = await persistence.load_all()\n                print('history:', '\\n'.join(str(e.node) for e in history), sep='\\n')\n                print('Finished!')\n                break\n            elif isinstance(node, Answer):\n                print(node.question)\n                break\n            # otherwise just continue\n\n\nif __name__ == '__main__':\n    import asyncio\n    import sys\n\n    try:\n        sub_command = sys.argv[1]\n        assert sub_command in ('continuous', 'cli', 'mermaid')\n    except (IndexError, AssertionError):\n        print(\n            'Usage:\\n'\n            '  uv run -m pydantic_ai_examples.question_graph mermaid\\n'\n            'or:\\n'\n            '  uv run -m pydantic_ai_examples.question_graph continuous\\n'\n            'or:\\n'\n            '  uv run -m pydantic_ai_examples.question_graph cli [answer]',\n            file=sys.stderr,\n        )\n        sys.exit(1)\n\n    if sub_command == 'mermaid':\n        print(question_graph.mermaid_code(start_node=Ask))\n    elif sub_command == 'continuous':\n        asyncio.run(run_as_continuous())\n    else:\n        a = sys.argv[2] if len(sys.argv) > 2 else None\n        asyncio.run(run_as_cli(a))\n\n```\n\nThe mermaid diagram generated in this example looks like this:\n\n```\n---\ntitle: question_graph\n---\nstateDiagram-v2\n  [*] --> Ask\n  Ask --> Answer: ask the question\n  Answer --> Evaluate: answer the question\n  Evaluate --> Congratulate\n  Evaluate --> Castigate\n  Congratulate --> [*]: success\n  Castigate --> Ask: try again\n```\n\n\nRAG\n===\n\nRAG search example. This demo allows you to ask question of the [logfire](https://pydantic.dev/logfire) documentation.\n\nDemonstrates:\n\n* [tools](../../tools/)\n* [agent dependencies](../../dependencies/)\n* RAG search\n\nThis is done by creating a database containing each section of the", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-acdd5d00db08de930d2f205385fbf543", "__created_at__": 1744231651.420514, "content": "ratulate\n  Evaluate --> Castigate\n  Congratulate --> [*]: success\n  Castigate --> Ask: try again\n```\n\n\nRAG\n===\n\nRAG search example. This demo allows you to ask question of the [logfire](https://pydantic.dev/logfire) documentation.\n\nDemonstrates:\n\n* [tools](../../tools/)\n* [agent dependencies](../../dependencies/)\n* RAG search\n\nThis is done by creating a database containing each section of the markdown documentation, then registering\nthe search tool with the PydanticAI agent.\n\nLogic for extracting sections from markdown files and a JSON file with that data is available in\n[this gist](https://gist.github.com/samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992).\n\n[PostgreSQL with pgvector](https://github.com/pgvector/pgvector) is used as the search database, the easiest way to download and run pgvector is using Docker:\n\n```\nmkdir postgres-data\ndocker run --rm \\\n  -e POSTGRES_PASSWORD=postgres \\\n  -p 54320:5432 \\\n  -v `pwd`/postgres-data:/var/lib/postgresql/data \\\n  pgvector/pgvector:pg17\n\n```\n\nAs with the [SQL gen](../sql-gen/) example, we run postgres on port `54320` to avoid conflicts with any other postgres instances you may have running.\nWe also mount the PostgreSQL `data` directory locally to persist the data if you need to stop and restart the container.\n\nWith that running and [dependencies installed and environment variables set](../#usage), we can build the search database with (**WARNING**: this requires the `OPENAI_API_KEY` env variable and will calling the OpenAI embedding API around 300 times to generate embeddings for each section of the documentation):\n\n```\npython -m pydantic_ai_examples.rag build\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.rag build\n\n```\n\n\n\n(Note building the database doesn't use PydanticAI right now, instead it uses the OpenAI SDK directly.)\n\nYou can then ask the agent a question with:\n\n```\npython -m pydantic_ai_examples.rag search \"How do I configure logfire to work with FastAPI?\"\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.rag search \"How do I configure logfire to work with FastAPI?\"\n\n```\n\n\n\nExample Code\n------------\n\nrag.py\n```\nfrom __future__ import annotations as _annotations\n\nimport asyncio\nimport re\nimport sys\nimport unicodedata\nfrom contextlib import asynccontextmanager\nfrom dataclasses import dataclass\n\nimport asyncpg\nimport httpx\nimport logfire\nimport pydantic_core\nfrom openai import AsyncOpenAI\nfrom pydantic import TypeAdapter\nfrom typing_extensions import AsyncGenerator\n\nfrom pydantic_ai import RunContext\nfrom pydantic_ai.agent import Agent\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\nlogfire.instrument_asyncpg()\n\n\n@dataclass\nclass Deps:\n    openai: AsyncOpenAI\n    pool: asyncpg.Pool\n\n\nagent = Agent('openai:gpt-4o', deps_type=Deps, instrument=True)\n\n\n@agent.tool\nasync def retrieve(context: RunContext[Deps], search_query: str) -> str:\n    \"\"\"Retrieve documentation sections based on a search query.\n\n    Args:\n        context: The call context.\n        search_query: The search query.\n    \"\"\"\n    with logfire.span(\n        'create embedding for {search_query=}', search_query=search_query\n    ):\n        embedding = await context.deps.openai.embeddings.create(\n            input=search_query,\n            model='text-embedding-3-small',\n        )\n\n    assert len(embedding.data) == 1, (\n        f'Expected 1 embedding, got {len(embedding.data)}, doc query: {search_query!r}'\n    )\n    embedding = embedding.data[0].embedding\n    embedding_json = pydantic_core.to_json(embedding).decode()\n    rows = await context.deps.pool.fetch(\n        'SELECT url, title, content FROM doc_sections ORDER BY embedding <-> $1 LIMIT 8',\n        embedding_json,\n    )\n    return '\\n\\n'.join(\n        f'# {row[\"title\"]}\\nDocumentation URL:{row[\"url\"]}\\n\\n{row[\"content\"]}\\n'\n        for row in rows\n    )\n\n\nasync def run_agent(question: str):\n    \"\"\"Entry point to run the agent and perform RAG based question answering.\"\"\"\n    openai = AsyncOpenAI()\n    logfire.instrument_openai(openai)\n\n    logfire.info('Asking \"{question}\"', question=question)\n\n    async with database_connect(False) as pool:\n        deps = Deps(openai=openai, pool=pool)\n        answer = await agent.run(question, deps=deps)\n    print(answer.data)\n\n\n#######################################################\n# The rest of this file is dedicated to preparing the #\n# search database, and some utilities.                #\n#######################################################\n\n# JSON document from\n# https://gist.github.com/samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992\nDOCS_JSON = (\n    'https://gist.githubusercontent.com/'\n    'samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992/raw/'\n    '80c5925c42f1442c24963aaf5eb1a324d47afe95/logfire_docs.json'\n)\n\n\nasync def build_search_db():\n    \"\"\"Build the", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-7ba9f90f4ef9c80fa2a116ad4984222c", "__created_at__": 1744231651.420514, "content": "5bb9bb163b1122ff17e29e48c10992\nDOCS_JSON = (\n    'https://gist.githubusercontent.com/'\n    'samuelcolvin/4b5bb9bb163b1122ff17e29e48c10992/raw/'\n    '80c5925c42f1442c24963aaf5eb1a324d47afe95/logfire_docs.json'\n)\n\n\nasync def build_search_db():\n    \"\"\"Build the search database.\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.get(DOCS_JSON)\n        response.raise_for_status()\n    sections = sessions_ta.validate_json(response.content)\n\n    openai = AsyncOpenAI()\n    logfire.instrument_openai(openai)\n\n    async with database_connect(True) as pool:\n        with logfire.span('create schema'):\n            async with pool.acquire() as conn:\n                async with conn.transaction():\n                    await conn.execute(DB_SCHEMA)\n\n        sem = asyncio.Semaphore(10)\n        async with asyncio.TaskGroup() as tg:\n            for section in sections:\n                tg.create_task(insert_doc_section(sem, openai, pool, section))\n\n\nasync def insert_doc_section(\n    sem: asyncio.Semaphore,\n    openai: AsyncOpenAI,\n    pool: asyncpg.Pool,\n    section: DocsSection,\n) -> None:\n    async with sem:\n        url = section.url()\n        exists = await pool.fetchval('SELECT 1 FROM doc_sections WHERE url = $1', url)\n        if exists:\n            logfire.info('Skipping {url=}', url=url)\n            return\n\n        with logfire.span('create embedding for {url=}', url=url):\n            embedding = await openai.embeddings.create(\n                input=section.embedding_content(),\n                model='text-embedding-3-small',\n            )\n        assert len(embedding.data) == 1, (\n            f'Expected 1 embedding, got {len(embedding.data)}, doc section: {section}'\n        )\n        embedding = embedding.data[0].embedding\n        embedding_json = pydantic_core.to_json(embedding).decode()\n        await pool.execute(\n            'INSERT INTO doc_sections (url, title, content, embedding) VALUES ($1, $2, $3, $4)',\n            url,\n            section.title,\n            section.content,\n            embedding_json,\n        )\n\n\n@dataclass\nclass DocsSection:\n    id: int\n    parent: int | None\n    path: str\n    level: int\n    title: str\n    content: str\n\n    def url(self) -> str:\n        url_path = re.sub(r'\\.md$', '', self.path)\n        return (\n            f'https://logfire.pydantic.dev/docs/{url_path}/#{slugify(self.title, \"-\")}'\n        )\n\n    def embedding_content(self) -> str:\n        return '\\n\\n'.join((f'path: {self.path}', f'title: {self.title}', self.content))\n\n\nsessions_ta = TypeAdapter(list[DocsSection])\n\n\n# pyright: reportUnknownMemberType=false\n# pyright: reportUnknownVariableType=false\n@asynccontextmanager\nasync def database_connect(\n    create_db: bool = False,\n) -> AsyncGenerator[asyncpg.Pool, None]:\n    server_dsn, database = (\n        'postgresql://postgres:postgres@localhost:54320',\n        'pydantic_ai_rag',\n    )\n    if create_db:\n        with logfire.span('check and create DB'):\n            conn = await asyncpg.connect(server_dsn)\n            try:\n                db_exists = await conn.fetchval(\n                    'SELECT 1 FROM pg_database WHERE datname = $1', database\n                )\n                if not db_exists:\n                    await conn.execute(f'CREATE DATABASE {database}')\n            finally:\n                await conn.close()\n\n    pool = await asyncpg.create_pool(f'{server_dsn}/{database}')\n    try:\n        yield pool\n    finally:\n        await pool.close()\n\n\nDB_SCHEMA = \"\"\"\nCREATE EXTENSION IF NOT EXISTS vector;\n\nCREATE TABLE IF NOT EXISTS doc_sections (\n    id serial PRIMARY KEY,\n    url text NOT NULL UNIQUE,\n    title text NOT NULL,\n    content text NOT NULL,\n    -- text-embedding-3-small returns a vector of 1536 floats\n    embedding vector(1536) NOT NULL\n);\nCREATE INDEX IF NOT EXISTS idx_doc_sections_embedding ON doc_sections USING hnsw (embedding vector_l2_ops);\n\"\"\"\n\n\ndef slugify(value: str, separator: str, unicode: bool = False) -> str:\n    \"\"\"Slugify a string, to make it URL friendly.\"\"\"\n    # Taken unchanged from https://github.com/Python-Markdown/markdown/blob/3.7/markdown/extensions/toc.py#L38\n    if not unicode:\n        # Replace Extended Latin characters with ASCII, i.e. `žlutý` => `zluty`\n        value = unicodedata.normalize('NFKD', value)\n        value = value.encode('ascii', 'ignore').decode('ascii')\n    value = re.sub(r'[^\\w\\s-]', '', value).strip().lower()\n    return re.sub(rf'[{separator}\\s]+', separator, value)\n\n\nif __name__ == '__main__':\n    action = sys.argv[1] if len(sys.argv) > 1 else None\n    if action == 'build':\n        asyncio.run(build_search_db())\n    elif action == 'search':\n        if len(sys.argv) == 3:\n            q = sys.argv[2]\n        else:\n            q = 'How do I configure logfire to work with FastAPI?'\n        asyncio.run(run_agent(q))\n    else:\n        print(\n            'uv run --extra examples -m pydantic_ai_examples.rag build|search',\n            file=sys.stderr,", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-adf88d3c03ef93c71ebadc158c0ef948", "__created_at__": 1744231651.420514, "content": "else None\n    if action == 'build':\n        asyncio.run(build_search_db())\n    elif action == 'search':\n        if len(sys.argv) == 3:\n            q = sys.argv[2]\n        else:\n            q = 'How do I configure logfire to work with FastAPI?'\n        asyncio.run(run_agent(q))\n    else:\n        print(\n            'uv run --extra examples -m pydantic_ai_examples.rag build|search',\n            file=sys.stderr,\n        )\n        sys.exit(1)\n\n```\n\n\nSQL Generation\n==============\n\nExample demonstrating how to use PydanticAI to generate SQL queries based on user input.\n\nDemonstrates:\n\n* [dynamic system prompt](../../agents/#system-prompts)\n* [structured `result_type`](../../results/#structured-result-validation)\n* [result validation](../../results/#result-validators-functions)\n* [agent dependencies](../../dependencies/)\n\nRunning the Example\n-------------------\n\nThe resulting SQL is validated by running it as an `EXPLAIN` query on PostgreSQL. To run the example, you first need to run PostgreSQL, e.g. via Docker:\n\n\n```\ndocker run --rm -e POSTGRES_PASSWORD=postgres -p 54320:5432 postgres\n\n```\n\n*(we run postgres on port `54320` to avoid conflicts with any other postgres instances you may have running)*\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.sql_gen\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.sql_gen\n\n```\n\n\n\nor to use a custom prompt:\n\n```\npython -m pydantic_ai_examples.sql_gen \"find me errors\"\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.sql_gen \"find me errors\"\n\n```\n\n\n\nThis model uses `gemini-1.5-flash` by default since Gemini is good at single shot queries of this kind.\n\nExample Code\n------------\n\nsql\\_gen.py\n```\nimport asyncio\nimport sys\nfrom collections.abc import AsyncGenerator\nfrom contextlib import asynccontextmanager\nfrom dataclasses import dataclass\nfrom datetime import date\nfrom typing import Annotated, Any, Union\n\nimport asyncpg\nimport logfire\nfrom annotated_types import MinLen\nfrom devtools import debug\nfrom pydantic import BaseModel, Field\nfrom typing_extensions import TypeAlias\n\nfrom pydantic_ai import Agent, ModelRetry, RunContext\nfrom pydantic_ai.format_as_xml import format_as_xml\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\nlogfire.instrument_asyncpg()\n\nDB_SCHEMA = \"\"\"\nCREATE TABLE records (\n    created_at timestamptz,\n    start_timestamp timestamptz,\n    end_timestamp timestamptz,\n    trace_id text,\n    span_id text,\n    parent_span_id text,\n    level log_level,\n    span_name text,\n    message text,\n    attributes_json_schema text,\n    attributes jsonb,\n    tags text[],\n    is_exception boolean,\n    otel_status_message text,\n    service_name text\n);\n\"\"\"\nSQL_EXAMPLES = [\n    {\n        'request': 'show me records where foobar is false',\n        'response': \"SELECT * FROM records WHERE attributes->>'foobar' = false\",\n    },\n    {\n        'request': 'show me records where attributes include the key \"foobar\"',\n        'response': \"SELECT * FROM records WHERE attributes ? 'foobar'\",\n    },\n    {\n        'request': 'show me records from yesterday',\n        'response': \"SELECT * FROM records WHERE start_timestamp::date > CURRENT_TIMESTAMP - INTERVAL '1 day'\",\n    },\n    {\n        'request': 'show me error records with the tag \"foobar\"',\n        'response': \"SELECT * FROM records WHERE level = 'error' and 'foobar' = ANY(tags)\",\n    },\n]\n\n\n@dataclass\nclass Deps:\n    conn: asyncpg.Connection\n\n\nclass Success(BaseModel):\n    \"\"\"Response when SQL could be successfully generated.\"\"\"\n\n    sql_query: Annotated[str, MinLen(1)]\n    explanation: str = Field(\n        '', description='Explanation of the SQL query, as markdown'\n    )\n\n\nclass InvalidRequest(BaseModel):\n    \"\"\"Response the user input didn't include enough information to generate SQL.\"\"\"\n\n    error_message: str\n\n\nResponse: TypeAlias = Union[Success, InvalidRequest]\nagent: Agent[Deps, Response] = Agent(\n    'google-gla:gemini-1.5-flash',\n    # Type ignore while we wait for PEP-0747, nonetheless unions will work fine everywhere else\n    result_type=Response,  # type: ignore\n    deps_type=Deps,\n    instrument=True,\n)\n\n\n@agent.system_prompt\nasync def system_prompt() -> str:\n    return f\"\"\"\\\nGiven the following PostgreSQL table of records, your job is to\nwrite a SQL query that suits the user's request.\n\nDatabase schema:\n\n{DB_SCHEMA}\n\ntoday's date = {date.today()}\n\n{format_as_xml(SQL_EXAMPLES)}\n\"\"\"\n\n\n@agent.result_validator\nasync def validate_result(ctx: RunContext[Deps], result: Response) -> Response:\n    if isinstance(result, InvalidRequest):\n        return result\n\n    # gemini often adds extraneous backslashes to SQL\n    result.sql_query = result.sql_query.replace('\\\\', '')\n    if not result.sql_query.upper().startswith('SELECT'):\n        raise ModelRetry('Please create a SELECT query')\n\n    try:\n        await ctx.deps.conn.execute(f'EXPLAIN {result.sql_query}')\n    except asyncpg.exceptions.PostgresError as e:\n        raise ModelRetry(f'Invalid query: {e}') from e\n    else:\n        return result\n\n\nasync def main():", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-7f55658f379b42a67f9adb2e175e54fb", "__created_at__": 1744231651.420514, "content": "extraneous backslashes to SQL\n    result.sql_query = result.sql_query.replace('\\\\', '')\n    if not result.sql_query.upper().startswith('SELECT'):\n        raise ModelRetry('Please create a SELECT query')\n\n    try:\n        await ctx.deps.conn.execute(f'EXPLAIN {result.sql_query}')\n    except asyncpg.exceptions.PostgresError as e:\n        raise ModelRetry(f'Invalid query: {e}') from e\n    else:\n        return result\n\n\nasync def main():\n    if len(sys.argv) == 1:\n        prompt = 'show me logs from yesterday, with level \"error\"'\n    else:\n        prompt = sys.argv[1]\n\n    async with database_connect(\n        'postgresql://postgres:postgres@localhost:54320', 'pydantic_ai_sql_gen'\n    ) as conn:\n        deps = Deps(conn)\n        result = await agent.run(prompt, deps=deps)\n    debug(result.data)\n\n\n# pyright: reportUnknownMemberType=false\n# pyright: reportUnknownVariableType=false\n@asynccontextmanager\nasync def database_connect(server_dsn: str, database: str) -> AsyncGenerator[Any, None]:\n    with logfire.span('check and create DB'):\n        conn = await asyncpg.connect(server_dsn)\n        try:\n            db_exists = await conn.fetchval(\n                'SELECT 1 FROM pg_database WHERE datname = $1', database\n            )\n            if not db_exists:\n                await conn.execute(f'CREATE DATABASE {database}')\n        finally:\n            await conn.close()\n\n    conn = await asyncpg.connect(f'{server_dsn}/{database}')\n    try:\n        with logfire.span('create schema'):\n            async with conn.transaction():\n                if not db_exists:\n                    await conn.execute(\n                        \"CREATE TYPE log_level AS ENUM ('debug', 'info', 'warning', 'error', 'critical')\"\n                    )\n                    await conn.execute(DB_SCHEMA)\n        yield conn\n    finally:\n        await conn.close()\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```\n\n\nThis example shows how to stream markdown from an agent, using the [`rich`](https://github.com/Textualize/rich) library to highlight the output in the terminal.\n\nIt'll run the example with both OpenAI and Google Gemini models if the required environment variables are set.\n\nDemonstrates:\n\n* [streaming text responses](../../results/#streaming-text)\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.stream_markdown\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.stream_markdown\n\n```\n\n\n\nExample Code\n------------\n\n```\nimport asyncio\nimport os\n\nimport logfire\nfrom rich.console import Console, ConsoleOptions, RenderResult\nfrom rich.live import Live\nfrom rich.markdown import CodeBlock, Markdown\nfrom rich.syntax import Syntax\nfrom rich.text import Text\n\nfrom pydantic_ai import Agent\nfrom pydantic_ai.models import KnownModelName\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\nagent = Agent(instrument=True)\n\n# models to try, and the appropriate env var\nmodels: list[tuple[KnownModelName, str]] = [\n    ('google-gla:gemini-1.5-flash', 'GEMINI_API_KEY'),\n    ('openai:gpt-4o-mini', 'OPENAI_API_KEY'),\n    ('groq:llama-3.3-70b-versatile', 'GROQ_API_KEY'),\n]\n\n\nasync def main():\n    prettier_code_blocks()\n    console = Console()\n    prompt = 'Show me a short example of using Pydantic.'\n    console.log(f'Asking: {prompt}...', style='cyan')\n    for model, env_var in models:\n        if env_var in os.environ:\n            console.log(f'Using model: {model}')\n            with Live('', console=console, vertical_overflow='visible') as live:\n                async with agent.run_stream(prompt, model=model) as result:\n                    async for message in result.stream():\n                        live.update(Markdown(message))\n            console.log(result.usage())\n        else:\n            console.log(f'{model} requires {env_var} to be set.')\n\n\ndef prettier_code_blocks():\n    \"\"\"Make rich code blocks prettier and easier to copy.\n\n    From https://github.com/samuelcolvin/aicli/blob/v0.8.0/samuelcolvin_aicli.py#L22\n    \"\"\"\n\n    class SimpleCodeBlock(CodeBlock):\n        def __rich_console__(\n            self, console: Console, options: ConsoleOptions\n        ) -> RenderResult:\n            code = str(self.text).rstrip()\n            yield Text(self.lexer_name, style='dim')\n            yield Syntax(\n                code,\n                self.lexer_name,\n                theme=self.theme,\n                background_color='default',\n                word_wrap=True,\n            )\n            yield Text(f'/{self.lexer_name}', style='dim')\n\n    Markdown.elements['fence'] = SimpleCodeBlock\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```\n\n\nInformation about whales — an example of streamed structured response validation.\n\nDemonstrates:\n\n* [streaming structured responses](../../results/#streaming-structured-responses)\n\nThis script streams structured responses from GPT-4 about whales, validates the data\nand displays it as a dynamic table using [`rich`](https://github.com/Textualize/rich) as the data is received.\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.stream_whales\n\n```\n\n\n```", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-a03d18658927c60177cdcee467ce42b8", "__created_at__": 1744231651.420514, "content": ":\n\n* [streaming structured responses](../../results/#streaming-structured-responses)\n\nThis script streams structured responses from GPT-4 about whales, validates the data\nand displays it as a dynamic table using [`rich`](https://github.com/Textualize/rich) as the data is received.\n\nRunning the Example\n-------------------\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.stream_whales\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.stream_whales\n\n```\n\n\n\nShould give an output like this:\n\nExample Code\n------------\n\nstream\\_whales.py\n```\nfrom typing import Annotated\n\nimport logfire\nfrom pydantic import Field, ValidationError\nfrom rich.console import Console\nfrom rich.live import Live\nfrom rich.table import Table\nfrom typing_extensions import NotRequired, TypedDict\n\nfrom pydantic_ai import Agent\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\n\nclass Whale(TypedDict):\n    name: str\n    length: Annotated[\n        float, Field(description='Average length of an adult whale in meters.')\n    ]\n    weight: NotRequired[\n        Annotated[\n            float,\n            Field(description='Average weight of an adult whale in kilograms.', ge=50),\n        ]\n    ]\n    ocean: NotRequired[str]\n    description: NotRequired[Annotated[str, Field(description='Short Description')]]\n\n\nagent = Agent('openai:gpt-4', result_type=list[Whale], instrument=True)\n\n\nasync def main():\n    console = Console()\n    with Live('\\n' * 36, console=console) as live:\n        console.print('Requesting data...', style='cyan')\n        async with agent.run_stream(\n            'Generate me details of 5 species of Whale.'\n        ) as result:\n            console.print('Response:', style='green')\n\n            async for message, last in result.stream_structured(debounce_by=0.01):\n                try:\n                    whales = await result.validate_structured_result(\n                        message, allow_partial=not last\n                    )\n                except ValidationError as exc:\n                    if all(\n                        e['type'] == 'missing' and e['loc'] == ('response',)\n                        for e in exc.errors()\n                    ):\n                        continue\n                    else:\n                        raise\n\n                table = Table(\n                    title='Species of Whale',\n                    caption='Streaming Structured responses from GPT-4',\n                    width=120,\n                )\n                table.add_column('ID', justify='right')\n                table.add_column('Name')\n                table.add_column('Avg. Length (m)', justify='right')\n                table.add_column('Avg. Weight (kg)', justify='right')\n                table.add_column('Ocean')\n                table.add_column('Description', justify='right')\n\n                for wid, whale in enumerate(whales, start=1):\n                    table.add_row(\n                        str(wid),\n                        whale['name'],\n                        f'{whale[\"length\"]:0.0f}',\n                        f'{w:0.0f}' if (w := whale.get('weight')) else '…',\n                        whale.get('ocean') or '…',\n                        whale.get('description') or '…',\n                    )\n                live.update(table)\n\n\nif __name__ == '__main__':\n    import asyncio\n\n    asyncio.run(main())\n\n```\n\n\nExample of PydanticAI with multiple tools which the LLM needs to call in turn to answer a question.\n\nDemonstrates:\n\n* [tools](../../tools/)\n* [agent dependencies](../../dependencies/)\n* [streaming text responses](../../results/#streaming-text)\n* Building a [Gradio](https://www.gradio.app/) UI for the agent\n\nIn this case the idea is a \"weather\" agent — the user can ask for the weather in multiple locations,\nthe agent will use the `get_lat_lng` tool to get the latitude and longitude of the locations, then use\nthe `get_weather` tool to get the weather for those locations.\n\nRunning the Example\n-------------------\n\nTo run this example properly, you might want to add two extra API keys **(Note if either key is missing, the code will fall back to dummy data, so they're not required)**:\n\n* A weather API key from [tomorrow.io](https://www.tomorrow.io/weather-api/) set via `WEATHER_API_KEY`\n* A geocoding API key from [geocode.maps.co](https://geocode.maps.co/) set via `GEO_API_KEY`\n\nWith [dependencies installed and environment variables set](../#usage), run:\n\n```\npython -m pydantic_ai_examples.weather_agent\n\n```\n\n\n```\nuv run -m pydantic_ai_examples.weather_agent\n\n```\n\n\n\nExample Code\n------------\n\npydantic\\_ai\\_examples/weather\\_agent.py\n```\nfrom __future__ import annotations as _annotations\n\nimport asyncio\nimport os\nfrom dataclasses import dataclass\nfrom typing import Any\n\nimport logfire\nfrom devtools import debug\nfrom httpx import AsyncClient\n\nfrom pydantic_ai import Agent, ModelRetry, RunContext\n\n# 'if-token-present' means nothing will be sent (and the example will work) if you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\n\n@dataclass\nclass Deps:\n    client: AsyncClient\n    weather_api_key: str | None\n    geo_api_key: str | None\n\n\nweather_agent = Agent(\n    'openai:gpt-4o',\n    # 'Be concise, reply with one sentence.' is enough for some models (like openai) to use\n    # the below tools appropriately, but others like anthrop", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-990ca6b93e3572bb93527fb4f06bad10", "__created_at__": 1744231651.420514, "content": "you don't have logfire configured\nlogfire.configure(send_to_logfire='if-token-present')\n\n\n@dataclass\nclass Deps:\n    client: AsyncClient\n    weather_api_key: str | None\n    geo_api_key: str | None\n\n\nweather_agent = Agent(\n    'openai:gpt-4o',\n    # 'Be concise, reply with one sentence.' is enough for some models (like openai) to use\n    # the below tools appropriately, but others like anthropic and gemini require a bit more direction.\n    system_prompt=(\n        'Be concise, reply with one sentence.'\n        'Use the `get_lat_lng` tool to get the latitude and longitude of the locations, '\n        'then use the `get_weather` tool to get the weather.'\n    ),\n    deps_type=Deps,\n    retries=2,\n    instrument=True,\n)\n\n\n@weather_agent.tool\nasync def get_lat_lng(\n    ctx: RunContext[Deps], location_description: str\n) -> dict[str, float]:\n    \"\"\"Get the latitude and longitude of a location.\n\n    Args:\n        ctx: The context.\n        location_description: A description of a location.\n    \"\"\"\n    if ctx.deps.geo_api_key is None:\n        # if no API key is provided, return a dummy response (London)\n        return {'lat': 51.1, 'lng': -0.1}\n\n    params = {\n        'q': location_description,\n        'api_key': ctx.deps.geo_api_key,\n    }\n    with logfire.span('calling geocode API', params=params) as span:\n        r = await ctx.deps.client.get('https://geocode.maps.co/search', params=params)\n        r.raise_for_status()\n        data = r.json()\n        span.set_attribute('response', data)\n\n    if data:\n        return {'lat': data[0]['lat'], 'lng': data[0]['lon']}\n    else:\n        raise ModelRetry('Could not find the location')\n\n\n@weather_agent.tool\nasync def get_weather(ctx: RunContext[Deps], lat: float, lng: float) -> dict[str, Any]:\n    \"\"\"Get the weather at a location.\n\n    Args:\n        ctx: The context.\n        lat: Latitude of the location.\n        lng: Longitude of the location.\n    \"\"\"\n    if ctx.deps.weather_api_key is None:\n        # if no API key is provided, return a dummy response\n        return {'temperature': '21 °C', 'description': 'Sunny'}\n\n    params = {\n        'apikey': ctx.deps.weather_api_key,\n        'location': f'{lat},{lng}',\n        'units': 'metric',\n    }\n    with logfire.span('calling weather API', params=params) as span:\n        r = await ctx.deps.client.get(\n            'https://api.tomorrow.io/v4/weather/realtime', params=params\n        )\n        r.raise_for_status()\n        data = r.json()\n        span.set_attribute('response', data)\n\n    values = data['data']['values']\n    # https://docs.tomorrow.io/reference/data-layers-weather-codes\n    code_lookup = {\n        1000: 'Clear, Sunny',\n        1100: 'Mostly Clear',\n        1101: 'Partly Cloudy',\n        1102: 'Mostly Cloudy',\n        1001: 'Cloudy',\n        2000: 'Fog',\n        2100: 'Light Fog',\n        4000: 'Drizzle',\n        4001: 'Rain',\n        4200: 'Light Rain',\n        4201: 'Heavy Rain',\n        5000: 'Snow',\n        5001: 'Flurries',\n        5100: 'Light Snow',\n        5101: 'Heavy Snow',\n        6000: 'Freezing Drizzle',\n        6001: 'Freezing Rain',\n        6200: 'Light Freezing Rain',\n        6201: 'Heavy Freezing Rain',\n        7000: 'Ice Pellets',\n        7101: 'Heavy Ice Pellets',\n        7102: 'Light Ice Pellets',\n        8000: 'Thunderstorm',\n    }\n    return {\n        'temperature': f'{values[\"temperatureApparent\"]:0.0f}°C',\n        'description': code_lookup.get(values['weatherCode'], 'Unknown'),\n    }\n\n\nasync def main():\n    async with AsyncClient() as client:\n        # create a free API key at https://www.tomorrow.io/weather-api/\n        weather_api_key = os.getenv('WEATHER_API_KEY')\n        # create a free API key at https://geocode.maps.co/\n        geo_api_key = os.getenv('GEO_API_KEY')\n        deps = Deps(\n            client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key\n        )\n        result = await weather_agent.run(\n            'What is the weather like in London and in Wiltshire?', deps=deps\n        )\n        debug(result)\n        print('Response:', result.data)\n\n\nif __name__ == '__main__':\n    asyncio.run(main())\n\n```\n\nRunning the UI\n--------------\n\nYou can build multi-turn chat applications for your agent with [Gradio](https://www.gradio.app/), a framework for building AI web applications entirely in python. Gradio comes with built-in chat components and agent support so the entire UI will be implemented in a single python file!\n\nHere's what the UI looks like for the weather agent:\n\nNote, to run the UI, you'll need Python 3.10+.\n\n```\npip install gradio>=5.9.0\npython/uv-run -m pydantic_ai_examples.weather_agent_gradio\n\n```\n\nUI Code\n-------\n\npydantic\\_ai\\_", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-8ff58ba8cb6e25434138b24e79d59425", "__created_at__": 1744231651.420514, "content": "web applications entirely in python. Gradio comes with built-in chat components and agent support so the entire UI will be implemented in a single python file!\n\nHere's what the UI looks like for the weather agent:\n\nNote, to run the UI, you'll need Python 3.10+.\n\n```\npip install gradio>=5.9.0\npython/uv-run -m pydantic_ai_examples.weather_agent_gradio\n\n```\n\nUI Code\n-------\n\npydantic\\_ai\\_examples/weather\\_agent\\_gradio.py\n```\nfrom __future__ import annotations as _annotations\n\nimport json\nimport os\n\nfrom httpx import AsyncClient\n\nfrom pydantic_ai.messages import ToolCallPart, ToolReturnPart\nfrom pydantic_ai_examples.weather_agent import Deps, weather_agent\n\ntry:\n    import gradio as gr\nexcept ImportError as e:\n    raise ImportError(\n        'Please install gradio with `pip install gradio`. You must use python>=3.10.'\n    ) from e\n\nTOOL_TO_DISPLAY_NAME = {'get_lat_lng': 'Geocoding API', 'get_weather': 'Weather API'}\n\nclient = AsyncClient()\nweather_api_key = os.getenv('WEATHER_API_KEY')\n# create a free API key at https://geocode.maps.co/\ngeo_api_key = os.getenv('GEO_API_KEY')\ndeps = Deps(client=client, weather_api_key=weather_api_key, geo_api_key=geo_api_key)\n\n\nasync def stream_from_agent(prompt: str, chatbot: list[dict], past_messages: list):\n    chatbot.append({'role': 'user', 'content': prompt})\n    yield gr.Textbox(interactive=False, value=''), chatbot, gr.skip()\n    async with weather_agent.run_stream(\n        prompt, deps=deps, message_history=past_messages\n    ) as result:\n        for message in result.new_messages():\n            for call in message.parts:\n                if isinstance(call, ToolCallPart):\n                    call_args = (\n                        call.args.args_json\n                        if hasattr(call.args, 'args_json')\n                        else json.dumps(call.args.args_dict)\n                    )\n                    metadata = {\n                        'title': f'🛠️ Using {TOOL_TO_DISPLAY_NAME[call.tool_name]}',\n                    }\n                    if call.tool_call_id is not None:\n                        metadata['id'] = {call.tool_call_id}\n\n                    gr_message = {\n                        'role': 'assistant',\n                        'content': 'Parameters: ' + call_args,\n                        'metadata': metadata,\n                    }\n                    chatbot.append(gr_message)\n                if isinstance(call, ToolReturnPart):\n                    for gr_message in chatbot:\n                        if (\n                            gr_message.get('metadata', {}).get('id', '')\n                            == call.tool_call_id\n                        ):\n                            gr_message['content'] += (\n                                f'\\nOutput: {json.dumps(call.content)}'\n                            )\n                yield gr.skip(), chatbot, gr.skip()\n        chatbot.append({'role': 'assistant', 'content': ''})\n        async for message in result.stream_text():\n            chatbot[-1]['content'] = message\n            yield gr.skip(), chatbot, gr.skip()\n        past_messages = result.all_messages()\n\n        yield gr.Textbox(interactive=True), gr.skip(), past_messages\n\n\nasync def handle_retry(chatbot, past_messages: list, retry_data: gr.RetryData):\n    new_history = chatbot[: retry_data.index]\n    previous_prompt = chatbot[retry_data.index]['content']\n    past_messages = past_messages[: retry_data.index]\n    async for update in stream_from_agent(previous_prompt, new_history, past_messages):\n        yield update\n\n\ndef undo(chatbot, past_messages: list, undo_data: gr.UndoData):\n    new_history = chatbot[: undo_data.index]\n    past_messages = past_messages[: undo_data.index]\n    return chatbot[undo_data.index]['content'], new_history, past_messages\n\n\ndef select_data(message: gr.SelectData) -> str:\n    return message.value['text']\n\n\nwith gr.Blocks() as demo:\n    gr.HTML(\n        \"\"\"\n<div style=\"display: flex; justify-content: center; align-items: center; gap: 2rem; padding: 1rem; width: 100%\">\n    <img src=\"https://ai.pydantic.dev/img/logo-white.svg\" style=\"max-width: 200px; height: auto\">\n    <div>\n        <h1 style=\"margin: 0 0 1rem 0\">Weather Assistant</h1>\n        <h3 style=\"margin: 0 0 0.5rem 0\">\n            This assistant answer your weather questions.\n        </h3>\n    </div>\n</div>\n\"\"\"\n    )\n    past_messages = gr.State([])\n    chatbot = gr.Chatbot(\n        label='Packing Assistant',\n        type='messages',\n        avatar_images=(None, 'https://ai.pydantic.dev/img/logo-white.svg'),\n        examples=[\n            {'text': 'What is the weather like in Miami?'},\n            {'text': 'What is the weather like in London?'},\n        ],\n    )\n    with gr.Row():\n        prompt = gr.Textbox(\n            lines=1,\n            show_label=False,\n            placeholder='What is the weather like in New York City?',\n        )\n    generation = prompt.submit(\n        stream_from_agent,\n        inputs=[prompt, chatbot, past_messages],\n        outputs=[prompt, chatbot, past_messages],\n    )\n    chatbot.example_select(select_data, None, [prompt])\n    chatbot.retry(\n        handle_retry, [chatbot, past_messages], [prompt, chatbot, past_messages]\n    )\n    chatbot.undo(undo, [chatbot, past_messages], [prompt, chatbot, past_messages])\n\n\nif __name__ == '__main__':\n    demo.launch()\n\n```\n\n\nModel Context Protocol (MCP)\n============================\n\nPydanticAI", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-391c89bfc96eb1cb4879cf1391cd7e50", "__created_at__": 1744231651.420514, "content": "_messages],\n        outputs=[prompt, chatbot, past_messages],\n    )\n    chatbot.example_select(select_data, None, [prompt])\n    chatbot.retry(\n        handle_retry, [chatbot, past_messages], [prompt, chatbot, past_messages]\n    )\n    chatbot.undo(undo, [chatbot, past_messages], [prompt, chatbot, past_messages])\n\n\nif __name__ == '__main__':\n    demo.launch()\n\n```\n\n\nModel Context Protocol (MCP)\n============================\n\nPydanticAI supports [Model Context Protocol (MCP)](https://modelcontextprotocol.io) in three ways:\n\n1. [Agents](../agents/) act as an MCP Client, connecting to MCP servers to use their tools, [learn more …](client/)\n2. Agents can be used within MCP servers, [learn more …](server/)\n3. As part of PydanticAI, we're building a number of MCP servers, [see below](#mcp-servers)\n\nWhat is MCP?\n------------\n\nThe Model Context Protocol is a standardized protocol that allow AI applications (including programmatic agents like PydanticAI, coding agents like [cursor](https://www.cursor.com/), and desktop applications like [Claude Desktop](https://claude.ai/download)) to connect to external tools and services using a common interface.\n\nAs with other protocols, the dream of MCP is that a wide range of applications can speak to each other without the need for specific integrations.\n\nThere is a great list of MCP servers at [github.com/modelcontextprotocol/servers](https://github.com/modelcontextprotocol/servers).\n\nSome examples of what this means:\n\n* PydanticAI could use a web search service implemented as an MCP server to implement a deep research agent\n* Cursor could connect to the [Pydantic Logfire](https://github.com/pydantic/logfire-mcp) MCP server to search logs, traces and metrics to gain context while fixing a bug\n* PydanticAI, or any other MCP client could connect to our [Run Python](run-python/) MCP server to run arbitrary Python code in a sandboxed environment\n\nMCP Servers\n-----------\n\nTo add functionality to PydanticAI while making it as widely usable as possible, we're implementing some functionality as MCP servers.\n\nSo far, we've only implemented one MCP server as part of PydanticAI:\n\n* [Run Python](run-python/): A sandboxed Python interpreter that can run arbitrary code, with a focus on security and safety.\n\n\nClient\n======\n\nPydanticAI can act as an [MCP client](https://modelcontextprotocol.io/quickstart/client), connecting to MCP servers\nto use their tools.\n\nInstall\n-------\n\nYou need to either install [`pydantic-ai`](../../install/), or[`pydantic-ai-slim`](../../install/#slim-install) with the `mcp` optional group:\n\n```\npip install \"pydantic-ai-slim[mcp]\"\n\n```\n\n\n```\nuv add \"pydantic-ai-slim[mcp]\"\n\n```\n\n\n\n\nNote\n\nMCP integration requires Python 3.10 or higher.\n\nUsage\n-----\n\nPydanticAI comes with two ways to connect to MCP servers:\n\n* `MCPServerHTTP` which connects to an MCP server using the [HTTP SSE](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#http-with-sse) transport\n* `MCPServerStdio` which runs the server as a subprocess and connects to it using the [stdio](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#stdio) transport\n\nExamples of both are shown below; [mcp-run-python](../run-python/) is used as the MCP server in both examples.\n\n### SSE Client\n\n`MCPServerHTTP` connects over HTTP using the [HTTP + Server Sent Events transport](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#http-with-sse) to a server.\n\nNote\n\n`MCPServerHTTP` requires an MCP server to be running and accepting HTTP connections before calling `agent.run_mcp_servers()`. Running the server is not managed by PydanticAI.\n\nThe name \"HTTP\" is used since this implemented will be adapted in future to use the new\n[Streamable HTTP](https://github.com/modelcontextprotocol/specification/pull/206) currently in development.\n\nBefore creating the SSE client, we need to run the server (docs [here](../run-python/)):\n\nterminal (run sse server)\n```\ndeno run \\\n  -N -R=node_modules -W=node_modules --node-modules-dir=auto \\\n  jsr:@pydantic/mcp-run-python sse\n\n```\n\nmcp\\_sse\\_client.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerHTTP\n\nserver = MCPServerHTTP(url='http://localhost:3001/sse')  # (1)!\nagent = Agent('openai:gpt-4o', mcp_servers=[server])  # (2)!\n\n\nasync def main():\n    async with agent.run_mcp_servers():  # (3)!\n        result = await agent.run('How many days between 2000-01-01 and 2025-03-18?')\n    print(result.data)\n    #> There are 9,208 days between January 1, 2000, and March 18, 2025.\n\n```\n\n1. Define the MCP server with the URL used to connect.\n2. Create an agent with the MCP server attached.\n3. Create a client session to connect to the server.\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-ca69f7760206a502c8e51fa924646c33", "__created_at__": 1744231651.420514, "content": "?')\n    print(result.data)\n    #> There are 9,208 days between January 1, 2000, and March 18, 2025.\n\n```\n\n1. Define the MCP server with the URL used to connect.\n2. Create an agent with the MCP server attached.\n3. Create a client session to connect to the server.\n\n*(This example is complete, it can be run \"as is\" with Python 3.10+ — you'll need to add `asyncio.run(main())` to run `main`)*\n\n**What's happening here?**\n\n* The model is receiving the prompt \"how many days between 2000-01-01 and 2025-03-18?\"\n* The model decides \"Oh, I've got this `run_python_code` tool, that will be a good way to answer this question\", and writes some python code to calculate the answer.\n* The model returns a tool call\n* PydanticAI sends the tool call to the MCP server using the SSE transport\n* The model is called again with the return value of running the code\n* The model returns the final answer\n\nYou can visualise this clearly, and even see the code that's run by adding three lines of code to instrument the example with [logfire](https://logfire.pydantic.dev/docs):\n\nmcp\\_sse\\_client\\_logfire.py\n```\nimport logfire\n\nlogfire.configure()\nlogfire.instrument_pydantic_ai()\n\n```\n\nWill display as follows:\n\n[![Logfire run python code](../../img/logfire-run-python-code.png)](../../img/logfire-run-python-code.png)\n\n### MCP \"stdio\" Server\n\nThe other transport offered by MCP is the [stdio transport](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#stdio) where the server is run as a subprocess and communicates with the client over `stdin` and `stdout`. In this case, you'd use the `MCPServerStdio` class.\n\nNote\n\nWhen using `MCPServerStdio` servers, the `agent.run_mcp_servers()` context manager is responsible for starting and stopping the server.\n\n\nmcp\\_stdio\\_client.py\n```\nfrom pydantic_ai import Agent\nfrom pydantic_ai.mcp import MCPServerStdio\n\nserver = MCPServerStdio(  # (1)!\n    'deno',\n    args=[\n        'run',\n        '-N',\n        '-R=node_modules',\n        '-W=node_modules',\n        '--node-modules-dir=auto',\n        'jsr:@pydantic/mcp-run-python',\n        'stdio',\n    ]\n)\nagent = Agent('openai:gpt-4o', mcp_servers=[server])\n\n\nasync def main():\n    async with agent.run_mcp_servers():\n        result = await agent.run('How many days between 2000-01-01 and 2025-03-18?')\n    print(result.data)\n    #> There are 9,208 days between January 1, 2000, and March 18, 2025.\n\n```\n\n1. See [MCP Run Python](../run-python/) for more information.\n\n\nMCP Run Python\n==============\n\nThe **MCP Run Python** package is an MCP server that allows agents to execute Python code in a secure, sandboxed environment. It uses [Pyodide](https://pyodide.org/) to run Python code in a JavaScript environment with [Deno](https://deno.com/), isolating execution from the host system.\n\nFeatures\n--------\n\n* **Secure Execution**: Run Python code in a sandboxed WebAssembly environment\n* **Package Management**: Automatically detects and installs required dependencies\n* **Complete Results**: Captures standard output, standard error, and return values\n* **Asynchronous Support**: Runs async code properly\n* **Error Handling**: Provides detailed error reports for debugging\n\nInstallation\n------------\n\nSwitch from npx to deno\n\nWe previously distributed `mcp-run-python` as an `npm` package to use via `npx`.\nWe now recommend using `deno` instead as it provides better sandboxing and security.\n\nThe MCP Run Python server is distributed as a [JSR package](https://jsr.io/@pydantic/mcp-run-python) and can be run directly using [`deno run`](https://deno.com/):\n\nterminal\n```\ndeno run \\\n  -N -R=node_modules -W=node_modules --node-modules-dir=auto \\\n  jsr:@pydantic/mcp-run-python [stdio|sse|warmup]\n\n```\n\nwhere:\n\n* `-N -R=node_modules -W=node_modules` (alias of\n  `--allow-net --allow-read=node_modules --allow-write=node_modules`) allows\n  network access and read+write access to `./node_modules`. These are required\n  so Pyodide can download and cache the Python standard library and packages\n* `--node-modules-dir=auto` tells deno to use a local `node_modules` directory\n* `stdio` runs the server with the\n  [Stdio MCP transport](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#stdio)\n  — suitable for running the process as a subprocess locally\n* `sse` runs the server with the\n  [SSE MCP transport](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#http-with-sse)\n  — running the server as an HTTP server to connect locally or remotely\n* `warmup` will run a minimal Python script to download and cache the Python\n  standard library. This is also useful to check the server is running", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-6b3f0a0a0fae5e6e6d165207998041f0", "__created_at__": 1744231651.420514, "content": "running the process as a subprocess locally\n* `sse` runs the server with the\n  [SSE MCP transport](https://spec.modelcontextprotocol.io/specification/2024-11-05/basic/transports/#http-with-sse)\n  — running the server as an HTTP server to connect locally or remotely\n* `warmup` will run a minimal Python script to download and cache the Python\n  standard library. This is also useful to check the server is running\n  correctly.\n\nUsage of `jsr:@pydantic/mcp-run-python` with PydanticAI is described in the [client](../client/#mcp-stdio-server) documentation.\n\nDirect Usage\n------------\n\nAs well as using this server with PydanticAI, it can be connected to other MCP clients. For clarity, in this example we connect directly using the [Python MCP client](https://github.com/modelcontextprotocol/python-sdk).\n\nmcp\\_run\\_python.py\n```\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\ncode = \"\"\"\nimport numpy\na = numpy.array([1, 2, 3])\nprint(a)\na\n\"\"\"\nserver_params = StdioServerParameters(\n    command='deno',\n    args=[\n        'run',\n        '-N',\n        '-R=node_modules',\n        '-W=node_modules',\n        '--node-modules-dir=auto',\n        'jsr:@pydantic/mcp-run-python',\n        'stdio',\n    ],\n)\n\n\nasync def main():\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n            tools = await session.list_tools()\n            print(len(tools.tools))\n            #> 1\n            print(repr(tools.tools[0].name))\n            #> 'run_python_code'\n            print(repr(tools.tools[0].inputSchema))\n            \"\"\"\n            {'type': 'object', 'properties': {'python_code': {'type': 'string', 'description': 'Python code to run'}}, 'required': ['python_code'], 'additionalProperties': False, '$schema': 'http://json-schema.org/draft-07/schema#'}\n            \"\"\"\n            result = await session.call_tool('run_python_code', {'python_code': code})\n            print(result.content[0].text)\n            \"\"\"\n            <status>success</status>\n            <dependencies>[\"numpy\"]</dependencies>\n            <output>\n            [1 2 3]\n            </output>\n            <return_value>\n            [\n              1,\n              2,\n              3\n            ]\n            </return_value>\n            \"\"\"\n\n```\n\nIf an exception occurs, `status` will be `install-error` or `run-error` and `return_value` will be replaced\nby `error` which will include the traceback and exception message.\n\nDependencies\n------------\n\nDependencies are installed when code is run.\n\nDependencies can be defined in one of two ways:\n\n### Inferred from imports\n\nIf there's no metadata, dependencies are inferred from imports in the code,\nas shown in the example [above](#direct-usage).\n\n### Inline script metadata\n\nAs introduced in PEP 723, explained [here](https://packaging.python.org/en/latest/specifications/inline-script-metadata/#inline-script-metadata), and popularized by [uv](https://docs.astral.sh/uv/guides/scripts/#declaring-script-dependencies) — dependencies can be defined in a comment at the top of the file.\n\nThis allows use of dependencies that aren't imported in the code, and is more explicit.\n\ninline\\_script\\_metadata.py\n```\nfrom mcp import ClientSession\nfrom mcp.client.stdio import stdio_client\n\n# using `server_params` from the above example.\nfrom mcp_run_python import server_params\n\ncode = \"\"\"\\\n# /// script\n# dependencies = [\"pydantic\", \"email-validator\"]\n# ///\nimport pydantic\n\nclass Model(pydantic.BaseModel):\n    email: pydantic.EmailStr\n\nprint(Model(email='hello@pydantic.dev'))\n\"\"\"\n\n\nasync def main():\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n            result = await session.call_tool('run_python_code', {'python_code': code})\n            print(result.content[0].text)\n            \"\"\"\n            <status>success</status>\n            <dependencies>[\"pydantic\",\"email-validator\"]</dependencies>\n            <output>\n            email='hello@pydantic.dev'\n            </output>\n            \"\"\"\n\n```\n\nIt also allows versions to be pinned for non-binary packages (Pyodide only supports a single version for the binary packages it supports, like `pydantic` and `numpy`).\n\nE.g. you could set the dependencies to\n\n```\n# /// script\n# dependencies = [\"rich<13\"]\n# ///\n\n```\n\nLogging\n-------\n\nMCP Run Python supports emitting stdout and stderr from the python execution as [MCP logging messages](https://github.com/modelcontextprotocol/specification/blob/eb4abdf2bb91e0d5afd94510741eadd416982350/docs/specification/draft/server/utilities/logging.md?plain=1).\n\nFor logs to be emitted you must set the logging level when connecting to the server. By default, the log level is set to the highest level, `emergency`.\n\nCurrently, it's not possible to demonstrate this due to a bug in the Python MCP Client, see [modelcontextprotocol/python-sdk#201](https://github.com/modelcontextprotocol/python-sdk/issues/201#issuecomment-2727663121).\n\n\n\nServer\n======\n\nPydanticAI", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}, {"__id__": "chunk-f2a50f99aa96dce25696156cf5396887", "__created_at__": 1744231651.420514, "content": "/logging.md?plain=1).\n\nFor logs to be emitted you must set the logging level when connecting to the server. By default, the log level is set to the highest level, `emergency`.\n\nCurrently, it's not possible to demonstrate this due to a bug in the Python MCP Client, see [modelcontextprotocol/python-sdk#201](https://github.com/modelcontextprotocol/python-sdk/issues/201#issuecomment-2727663121).\n\n\n\nServer\n======\n\nPydanticAI models can also be used within MCP Servers.\n\nHere's a simple example of a [Python MCP server](https://github.com/modelcontextprotocol/python-sdk) using PydanticAI within a tool call:\n\nmcp\\_server.py\n```\nfrom mcp.server.fastmcp import FastMCP\n\nfrom pydantic_ai import Agent\n\nserver = FastMCP('PydanticAI Server')\nserver_agent = Agent(\n    'anthropic:claude-3-5-haiku-latest', system_prompt='always reply in rhyme'\n)\n\n\n@server.tool()\nasync def poet(theme: str) -> str:\n    \"\"\"Poem generator\"\"\"\n    r = await server_agent.run(f'write a poem about {theme}')\n    return r.data\n\n\nif __name__ == '__main__':\n    server.run()\n\n```\n\nThis server can be queried with any MCP client. Here is an example using a direct Python client:\n\nmcp\\_client.py\n```\nimport asyncio\nimport os\n\nfrom mcp import ClientSession, StdioServerParameters\nfrom mcp.client.stdio import stdio_client\n\n\nasync def client():\n    server_params = StdioServerParameters(\n        command='uv', args=['run', 'mcp_server.py', 'server'], env=os.environ\n    )\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n            result = await session.call_tool('poet', {'theme': 'socks'})\n            print(result.content[0].text)\n            \"\"\"\n            Oh, socks, those garments soft and sweet,\n            That nestle softly 'round our feet,\n            From cotton, wool, or blended thread,\n            They keep our toes from feeling dread.\n            \"\"\"\n\n\nif __name__ == '__main__':\n    asyncio.run(client())\n\n```\n\nNote: [sampling](https://modelcontextprotocol.io/docs/concepts/sampling#sampling), whereby servers may request LLM completions from the client, is not yet supported in PydanticAI.", "full_doc_id": "doc-5106342c277c2902f5453149a0b0feef", "file_path": "unknown_source"}], "matrix": ""}