<?xml version='1.0' encoding='utf-8'?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://graphml.graphdrawing.org/xmlns http://graphml.graphdrawing.org/xmlns/1.0/graphml.xsd">
  <key id="d9" for="edge" attr.name="file_path" attr.type="string" />
  <key id="d8" for="edge" attr.name="source_id" attr.type="string" />
  <key id="d7" for="edge" attr.name="keywords" attr.type="string" />
  <key id="d6" for="edge" attr.name="description" attr.type="string" />
  <key id="d5" for="edge" attr.name="weight" attr.type="double" />
  <key id="d4" for="node" attr.name="file_path" attr.type="string" />
  <key id="d3" for="node" attr.name="source_id" attr.type="string" />
  <key id="d2" for="node" attr.name="description" attr.type="string" />
  <key id="d1" for="node" attr.name="entity_type" attr.type="string" />
  <key id="d0" for="node" attr.name="entity_id" attr.type="string" />
  <graph edgedefault="undirected">
    <node id="FastAPI">
      <data key="d0">FastAPI</data>
      <data key="d1">organization</data>
      <data key="d2">FastAPI is a modern web framework for building APIs with Python based on standard Python type hints, mentioned as something to configure with Logfire.&lt;SEP&gt;FastAPI is a modern web framework for building APIs with Python, used for developing the chat application exemplified in the document.&lt;SEP&gt;FastAPI is a modern web framework for building APIs with Python, used in creating a chat application in the example.&lt;SEP&gt;FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.&lt;SEP&gt;FastAPI is a web development framework known for its innovative design, which greatly aids developers in building APIs.</data>
      <data key="d3">chunk-55b19c469f8836f1d1e39ae4cb918116&lt;SEP&gt;chunk-adf88d3c03ef93c71ebadc158c0ef948&lt;SEP&gt;chunk-a9b9f74a239f46cb684aadb28a77cb76&lt;SEP&gt;chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Pydantic Logfire">
      <data key="d0">Pydantic Logfire</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic Logfire is a tool that integrates with PydanticAI for debugging and performance monitoring of AI applications.&lt;SEP&gt;Pydantic Logfire is an integration that allows developers to track and monitor the performance of Pydantic-based applications.&lt;SEP&gt;Pydantic Logfire is an observability platform designed for applications using Pydantic, aimed at improving monitoring and debugging of AI applications.&lt;SEP&gt;Pydantic Logfire is an observability platform for applications using Pydantic and AI, aimed at improving application performance monitoring.&lt;SEP&gt;Pydantic Logfire is an optional integration with PydanticAI that provides monitoring and insights for agent runs.</data>
      <data key="d3">chunk-fbac2cd26b16d89a2ad3c129160b997b&lt;SEP&gt;chunk-a9b9f74a239f46cb684aadb28a77cb76&lt;SEP&gt;chunk-16ca6f7569783f5691e1fd7ca9daf7c0&lt;SEP&gt;chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Gemini 1.5's Flash">
      <data key="d0">Gemini 1.5's Flash</data>
      <data key="d1">category</data>
      <data key="d2">Gemini 1.5's Flash is an AI model that can be used with PydanticAI for generating responses.</data>
      <data key="d3">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent Framework">
      <data key="d0">Agent Framework</data>
      <data key="d1">category</data>
      <data key="d2">Agent Framework refers to the system that allows the construction and management of AI agents in applications.</data>
      <data key="d3">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dependency Injection System">
      <data key="d0">Dependency Injection System</data>
      <data key="d1">category</data>
      <data key="d2">The Dependency Injection System in PydanticAI enables the provision of data and services efficiently to various parts of an agent's framework.</data>
      <data key="d3">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Structured Responses">
      <data key="d0">Structured Responses</data>
      <data key="d1">category</data>
      <data key="d2">Structured Responses refer to the validated and structured outputs generated by models integrated with Pydantic.</data>
      <data key="d3">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Type-safe">
      <data key="d0">Type-safe</data>
      <data key="d1">category</data>
      <data key="d2">Type-safe design in PydanticAI emphasizes strong type checking for improved development experience and error reduction.</data>
      <data key="d3">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="python">
      <data key="d0">python</data>
      <data key="d1">category</data>
      <data key="d2">Python is a programming language that serves as the foundation for building applications with PydanticAI.</data>
      <data key="d3">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAI SDK">
      <data key="d0">OpenAI SDK</data>
      <data key="d1">organization</data>
      <data key="d2">OpenAI SDK is a toolkit that incorporates Pydantic for validation purposes in AI development.</data>
      <data key="d3">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Practices for AI Projects">
      <data key="d0">Practices for AI Projects</data>
      <data key="d1">category</data>
      <data key="d2">Practices for AI Projects refer to standard development methodologies that can be integrated into AI applications using PydanticAI.</data>
      <data key="d3">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="LLM">
      <data key="d0">LLM</data>
      <data key="d1">category</data>
      <data key="d2">LLM refers to a language model that generates text responses based on user input.</data>
      <data key="d3">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Bank Support Agent">
      <data key="d0">Bank Support Agent</data>
      <data key="d1">event</data>
      <data key="d2">The Bank Support Agent is a specific implementation within PydanticAI designed to assist customers with banking inquiries and actions.&lt;SEP&gt;The Bank Support Agent is a system built using PydanticAI aimed at providing customer support in banking scenarios.</data>
      <data key="d3">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SupportDependencies">
      <data key="d0">SupportDependencies</data>
      <data key="d1">category</data>
      <data key="d2">SupportDependencies is a data class that organizes and provides the necessary contextual information for operating the support agent, including customer identification and database connections.&lt;SEP&gt;SupportDependencies is a data class used to manage dependencies required by the support agent, such as customer ID and database connections.</data>
      <data key="d3">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SupportResult">
      <data key="d0">SupportResult</data>
      <data key="d1">category</data>
      <data key="d2">SupportResult is a data class defining the structure of the output returned by the support agent, including support advice and risk level.&lt;SEP&gt;SupportResult is a data class that structures the output generated by the Bank Support Agent, detailing customer support responses and risk evaluation.&lt;SEP&gt;SupportResult is a type used in programming to facilitate static type checking within the context of query responses.</data>
      <data key="d3">chunk-16ca6f7569783f5691e1fd7ca9daf7c0&lt;SEP&gt;chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DatabaseConn">
      <data key="d0">DatabaseConn</data>
      <data key="d1">organization</data>
      <data key="d2">DatabaseConn is a fake database connection used for example purposes, simulating customer information retrieval.&lt;SEP&gt;DatabaseConn is a mock database connection used for testing purposes in the weather application.&lt;SEP&gt;DatabaseConn is a mock database implementation used for illustrating customer data retrieval in the context of a banking application.&lt;SEP&gt;DatabaseConn is an object that represents a connection to a database, used for managing user forecasts.&lt;SEP&gt;DatabaseConn represents a connection to a database that can be used in PydanticAI agents for executing queries.&lt;SEP&gt;DatabaseConn represents a data structure responsible for managing connections to a database that stores customer information and facilitates access through the support agent.&lt;SEP&gt;DatabaseConn represents a hypothetical database connection class used to retrieve customer information and manage data access.&lt;SEP&gt;DatabaseConn serves as a connection handler to manage interactions with a database, enabling data queries and retrieval.</data>
      <data key="d3">chunk-55b19c469f8836f1d1e39ae4cb918116&lt;SEP&gt;chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-efc722ebd98256b20f6a17746e03016e&lt;SEP&gt;chunk-974886a9bf77b52661ddb26c6b6703df&lt;SEP&gt;chunk-729cd2b3c578d9a846adee8336cc05fd&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="customer_id">
      <data key="d0">customer_id</data>
      <data key="d1">person</data>
      <data key="d2">customer_id is a unique identifier for customers used within the support system to retrieve specific customer details and context.</data>
      <data key="d3">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="system_prompt">
      <data key="d0">system_prompt</data>
      <data key="d1">category</data>
      <data key="d2">system_prompt defines the instructions given to the support agent, outlining its role and duties when interacting with customers.&lt;SEP&gt;system_prompt is a parameter that defines the instructions or guidelines for the AI model's response behaviors.&lt;SEP&gt;system_prompt is a predefined context or instruction set that guides how the AI should respond to user queries.&lt;SEP&gt;system_prompt is a series of predefined instructions or messages that guide the AI's responses based on input.&lt;SEP&gt;system_prompt is an initial setup provided to the agents to guide them in their interactions and responses.</data>
      <data key="d3">chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60&lt;SEP&gt;chunk-974886a9bf77b52661ddb26c6b6703df&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tool">
      <data key="d0">tool</data>
      <data key="d1">category</data>
      <data key="d2">Tool is a general category that includes functions registered with the Agent to perform specific tasks in the pydantic_ai library.&lt;SEP&gt;tool refers to the functionalities that the support agent can utilize, which assist in processing customer inquiries and provide dynamic responses.</data>
      <data key="d3">chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="balance inquiry">
      <data key="d0">balance inquiry</data>
      <data key="d1">event</data>
      <data key="d2">balance inquiry is an example of a customer interaction where the support agent retrieves balances and provides information related to customer accounts.</data>
      <data key="d3">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Pydantic">
      <data key="d0">Pydantic</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic is a data validation and settings management library for Python that enforces type hints at runtime and provides user-friendly errors.&lt;SEP&gt;Pydantic is a data validation and settings management library for Python that enforces type hints at runtime, ensuring data integrity.&lt;SEP&gt;Pydantic is a data validation and settings management library for Python that utilizes type annotations.&lt;SEP&gt;Pydantic is a data validation and settings management library for Python, providing tools for type validation, data parsing, and serialization.&lt;SEP&gt;Pydantic is a data validation and settings management library in Python, known for its use of data models and validation mechanisms.&lt;SEP&gt;Pydantic is a data validation and settings management library in Python, which integrates with Mermaid for graph visualization.&lt;SEP&gt;Pydantic is an organization that develops and provides data validation and settings management using Python type annotations.</data>
      <data key="d3">chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-6917f262ab39c9184d0d42aaa934095b&lt;SEP&gt;chunk-adf88d3c03ef93c71ebadc158c0ef948&lt;SEP&gt;chunk-16ca6f7569783f5691e1fd7ca9daf7c0&lt;SEP&gt;chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PostgreSQL">
      <data key="d0">PostgreSQL</data>
      <data key="d1">organization</data>
      <data key="d2">PostgreSQL is a powerful, open-source object-relational database system known for its reliability and robustness.&lt;SEP&gt;PostgreSQL is an advanced open-source relational database management system that is used in the examples for executing SQL queries.&lt;SEP&gt;PostgreSQL is an open-source relational database management system that emphasizes extensibility and SQL compliance.</data>
      <data key="d3">chunk-adf88d3c03ef93c71ebadc158c0ef948&lt;SEP&gt;chunk-16ca6f7569783f5691e1fd7ca9daf7c0&lt;SEP&gt;chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Logfire">
      <data key="d0">Logfire</data>
      <data key="d1">organization</data>
      <data key="d2">Logfire is a commercially supported observability platform that helps developers gain insights into application performance and behavior, particularly for AI applications.&lt;SEP&gt;Logfire is a hosted observability platform that provides insights and monitoring solutions for applications, with a focus on AI applications.&lt;SEP&gt;Logfire is a performance monitoring tool used to track the performance of application components and log queries in databases.&lt;SEP&gt;Logfire is a platform used for monitoring application performance, providing insights and metrics on application runs and requests.&lt;SEP&gt;Logfire is a service used for monitoring and logging application performance and errors.</data>
      <data key="d3">chunk-adf88d3c03ef93c71ebadc158c0ef948&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e&lt;SEP&gt;chunk-16ca6f7569783f5691e1fd7ca9daf7c0&lt;SEP&gt;chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="bank_support.py">
      <data key="d0">bank_support.py</data>
      <data key="d1">event</data>
      <data key="d2">bank_support.py is a Python script that exemplifies the implementation of a customer support agent in a banking context using PydanticAI.&lt;SEP&gt;bank_support.py is a script demonstrating how to implement a support agent for a bank using PydanticAI.&lt;SEP&gt;bank_support.py is a script example demonstrating the integration of Pydantic and logging functionalities for banking support applications.</data>
      <data key="d3">chunk-55b19c469f8836f1d1e39ae4cb918116&lt;SEP&gt;chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="bank_support_with_logfire.py">
      <data key="d0">bank_support_with_logfire.py</data>
      <data key="d1">event</data>
      <data key="d2">bank_support_with_logfire.py showcases the use of Logfire instrumentation for monitoring a banking support agent’s operations.</data>
      <data key="d3">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Type Checking">
      <data key="d0">Type Checking</data>
      <data key="d1">category</data>
      <data key="d2">Type Checking is a programming concept that ensures the correct types are used in code, promoting error reduction and better code quality.</data>
      <data key="d3">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Database Connection">
      <data key="d0">Database Connection</data>
      <data key="d1">event</data>
      <data key="d2">Database Connection refers to the process of establishing a link between an application and a database for data retrieval and manipulation.</data>
      <data key="d3">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Static Type Checking">
      <data key="d0">Static Type Checking</data>
      <data key="d1">category</data>
      <data key="d2">Static Type Checking is a process performed during the compile time to verify the correctness of variable types and function calls.</data>
      <data key="d3">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Asynchronous Programming">
      <data key="d0">Asynchronous Programming</data>
      <data key="d1">category</data>
      <data key="d2">Asynchronous Programming is a programming paradigm that allows operations to run concurrently, improving application performance.</data>
      <data key="d3">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Logfire Configuration">
      <data key="d0">Logfire Configuration</data>
      <data key="d1">event</data>
      <data key="d2">Logfire Configuration entails setting up Logfire's parameters for monitoring application performance effectively.</data>
      <data key="d3">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="roulette_agent">
      <data key="d0">roulette_agent</data>
      <data key="d1">organization</data>
      <data key="d2">The roulette_agent is a virtual agent designed to process bets and determine outcomes based on integer dependencies.</data>
      <data key="d3">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result">
      <data key="d0">result</data>
      <data key="d1">category</data>
      <data key="d2">Result refers to the outcome or data produced after executing a SQL query, often returned to the user or application.&lt;SEP&gt;Result refers to the output obtained from executing an agent's function, including data and usage information.&lt;SEP&gt;The result represents the output of the roulette_agent's computation, indicating whether a bet has been successful or not.&lt;SEP&gt;result contains the output data from the joke_generation_agent, which includes the jokes generated based on user interactions.&lt;SEP&gt;result refers to the output generated from model processing and typically contains the data returned by a given model request.</data>
      <data key="d3">chunk-a6135304e85ce8757eac7aa9a7eea737&lt;SEP&gt;chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="five">
      <data key="d0">five</data>
      <data key="d1">category</data>
      <data key="d2">Five represents a bet placed in the context of the roulette game, specifically on the number five as a potential winner.</data>
      <data key="d3">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result.data">
      <data key="d0">result.data</data>
      <data key="d1">event</data>
      <data key="d2">result.data holds the structured information returned from the agent, which represents the outcome of the flight or seat search.&lt;SEP&gt;result.data represents the outcome of the roulette_agent's computation, which can indicate whether a bet was successful or not, typically in boolean form.</data>
      <data key="d3">chunk-a6135304e85ce8757eac7aa9a7eea737&lt;SEP&gt;chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="success_number">
      <data key="d0">success_number</data>
      <data key="d1">category</data>
      <data key="d2">success_number refers to the integer dependency input used by the roulette_agent to determine the winning outcome in the betting scenario.</data>
      <data key="d3">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="print">
      <data key="d0">print</data>
      <data key="d1">organization</data>
      <data key="d2">print is a function in programming used to output results or messages to the console, as shown in the commands executed in the text.&lt;SEP&gt;print is a function that outputs the results of the evaluation report to the console, allowing users to see how well the evaluated function performed against the test cases.</data>
      <data key="d3">chunk-a6135304e85ce8757eac7aa9a7eea737&lt;SEP&gt;chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="True">
      <data key="d0">True</data>
      <data key="d1">category</data>
      <data key="d2">True is a boolean value representing a successful outcome in the result of the roulette_agent's computation.</data>
      <data key="d3">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="False">
      <data key="d0">False</data>
      <data key="d1">category</data>
      <data key="d2">False is a boolean value representing an unsuccessful outcome in the result of the roulette_agent's computation.</data>
      <data key="d3">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Paris">
      <data key="d0">Paris</data>
      <data key="d1">geo</data>
      <data key="d2">Paris is mentioned as the capital of France, providing a specific geographical context in a query example.&lt;SEP&gt;Paris is the capital city of France, characterized as the correct output expected when the input question queries about France's capital city.&lt;SEP&gt;Paris is the capital city of France, known for its art, fashion, culture, and historical landmarks.&lt;SEP&gt;Paris is the capital city of France, known for its art, fashion, gastronomy, and culture, and is a major European city.&lt;SEP&gt;Paris is the capital city of France, known for its historical significance and landmarks, including the Eiffel Tower.&lt;SEP&gt;Paris is the capital city of France, mentioned as the expected output in the evaluation case for the input question.&lt;SEP&gt;Paris is the capital city of France, often mentioned in various contexts, frequently as an example in question-and-answer interactions.</data>
      <data key="d3">chunk-adafe0dc68284d75a3d5c7256851229e&lt;SEP&gt;chunk-fbd48d906573dc919932c60117d15be5&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-825d3e324dae2955fa006ed4f70fe55a&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339&lt;SEP&gt;chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AgentRun">
      <data key="d0">AgentRun</data>
      <data key="d1">category</data>
      <data key="d2">AgentRun is a category or class in programming that represents the execution of an agent in a system, encapsulating its process and outputs.&lt;SEP&gt;AgentRun is a class instance representing the execution of an agent's tasks asynchronously, capable of iterating through nodes as they are executed.&lt;SEP&gt;AgentRun is a framework that manages the execution of a computational flow in an async context, handling multiple tasks and nodes.&lt;SEP&gt;AgentRun is an event that represents the various stages of an agent's response to a user prompt, including processing and output.&lt;SEP&gt;AgentRun is an object that manages the execution of an agent's tasks and holds details about the execution process, including message history.&lt;SEP&gt;AgentRun manages the stateful execution of an agent, allowing iteration over nodes as actions are performed throughout the agent's lifecycle.&lt;SEP&gt;AgentRun represents an instance of executing the agent with a user prompt to achieve results.&lt;SEP&gt;AgentRun represents the execution instance of an agent based on the provided user prompt.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UserPromptNode">
      <data key="d0">UserPromptNode</data>
      <data key="d1">event</data>
      <data key="d2">UserPromptNode appears to be a specific node in the Agent's structure that manages user prompts for processing.&lt;SEP&gt;UserPromptNode captures user inputs and prompts within the context of the agent's operations, serving as an entry point for user interactions.&lt;SEP&gt;UserPromptNode encapsulates a user-provided prompt that the agent responds to, including metadata such as timestamps and prompt details.&lt;SEP&gt;UserPromptNode is a specific type of node that takes in user prompts as input to initialize the processing sequence.&lt;SEP&gt;UserPromptNode is an event in the AgentRun that captures and processes user input for further actions.&lt;SEP&gt;UserPromptNode is an event that captures the user’s input within the agent graph, serving as the starting point for processing.&lt;SEP&gt;UserPromptNode is an event that denotes the user's initial input in the conversation with the agent.</data>
      <data key="d3">chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelRequestNode">
      <data key="d0">ModelRequestNode</data>
      <data key="d1">event</data>
      <data key="d2">ModelRequestNode is a specialized AgentNode type that handles requests for model predictions in the pydantic AI framework.&lt;SEP&gt;ModelRequestNode is a type of node responsible for executing requests to the model, initiating interaction with the model's logic.&lt;SEP&gt;ModelRequestNode is an event representing the request made to the language model for generating a response based on user input.&lt;SEP&gt;ModelRequestNode refers to a node type in a request processing system that handles model requests.&lt;SEP&gt;ModelRequestNode represents a request to the AI model based on the user prompt, facilitating interaction between the agent and the AI system.&lt;SEP&gt;ModelRequestNode represents a specific step where a request is made to a model for processing the user prompt.</data>
      <data key="d3">chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-825d3e324dae2955fa006ed4f70fe55a&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tuesday">
      <data key="d0">Tuesday</data>
      <data key="d1">event</data>
      <data key="d2">Tuesday refers to a day of the week and is relevant for scheduling and planning, particularly in this context for weather forecasting.</data>
      <data key="d3">chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Weather Forecast">
      <data key="d0">Weather Forecast</data>
      <data key="d1">category</data>
      <data key="d2">Weather forecasts provide predictions of atmospheric conditions for a particular location and date, helping people prepare for weather changes.</data>
      <data key="d3">chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="request_stream">
      <data key="d0">request_stream</data>
      <data key="d1">event</data>
      <data key="d2">The request_stream event is a function that allows for handling streaming requests to the model, enabling real-time interactions.&lt;SEP&gt;The request_stream method handles streaming responses for processing messages in a continuous manner.&lt;SEP&gt;request_stream represents a stream used to handle and process requests as they come in for a model.</data>
      <data key="d3">chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PartStartEvent">
      <data key="d0">PartStartEvent</data>
      <data key="d1">event</data>
      <data key="d2">PartStartEvent is an event that signifies the beginning of a particular part in a request which can trigger logging or handling actions.</data>
      <data key="d3">chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PartDeltaEvent">
      <data key="d0">PartDeltaEvent</data>
      <data key="d1">event</data>
      <data key="d2">PartDeltaEvent is an event signaling a delta update for an existing part in a model response.&lt;SEP&gt;PartDeltaEvent represents a type of event that indicates changes or updates to a request part as it is being processed.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789&lt;SEP&gt;chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TextPartDelta">
      <data key="d0">TextPartDelta</data>
      <data key="d1">category</data>
      <data key="d2">TextPartDelta is a specific type of delta event that reflects textual changes in the content of a request part.&lt;SEP&gt;TextPartDelta signifies a part delta intended for textual modifications or updates within a model's response, displaying adaptability in content management.</data>
      <data key="d3">chunk-825d3e324dae2955fa006ed4f70fe55a&lt;SEP&gt;chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolCallPartDelta">
      <data key="d0">ToolCallPartDelta</data>
      <data key="d1">category</data>
      <data key="d2">ToolCallPartDelta is a representation of differences or changes to a ToolCallPart, allowing for updates to tool names and arguments.&lt;SEP&gt;ToolCallPartDelta is a structured update that reflects changes made to a ToolCallPart, facilitating easy tracking of modifications.&lt;SEP&gt;ToolCallPartDelta is an event type that reflects when a tool has been invoked as part of processing a request.&lt;SEP&gt;ToolCallPartDelta serves as an incremental update structure for modifying parts of tool calls in AI messages.</data>
      <data key="d3">chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-825d3e324dae2955fa006ed4f70fe55a&lt;SEP&gt;chunk-1c5ccdde7a3769386d9598c66c9e6650&lt;SEP&gt;chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FinalResultEvent">
      <data key="d0">FinalResultEvent</data>
      <data key="d1">event</data>
      <data key="d2">FinalResultEvent indicates that the final response matches the expected result schema.&lt;SEP&gt;FinalResultEvent indicates that the response matches the expected result schema.&lt;SEP&gt;FinalResultEvent represents the completion of a request processing, indicating that the model has produced a final output.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789&lt;SEP&gt;chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelRetry">
      <data key="d0">ModelRetry</data>
      <data key="d1">event</data>
      <data key="d2">ModelRetry is a category for handling errors that occur when the model encounters unexpected behavior, allowing for limited retries.&lt;SEP&gt;ModelRetry is a category referring to the mechanism for retrying operations in case of errors or failures.&lt;SEP&gt;ModelRetry is an exception class that is raised when there is a failure to find a location, prompting a retry of the request.&lt;SEP&gt;ModelRetry is an exception raised when a model is prompted to try again due to a previous failure in processing.&lt;SEP&gt;ModelRetry is an exception raised when a tool or model needs to be prompted again, generally due to a previous failure during execution or validation of data.&lt;SEP&gt;ModelRetry is an exception that indicates a need to rerun a SQL query due to a failure or invalidation of the previous attempt.&lt;SEP&gt;ModelRetry is an exception used in pydantic_ai to handle retry logic when responses are not as expected.&lt;SEP&gt;ModelRetry represents an event where the agent has the capability to retry operations in case of errors, simulating resilience in AI responses.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-6917f262ab39c9184d0d42aaa934095b&lt;SEP&gt;chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60&lt;SEP&gt;chunk-990ca6b93e3572bb93527fb4f06bad10&lt;SEP&gt;chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UsageLimits">
      <data key="d0">UsageLimits</data>
      <data key="d1">category</data>
      <data key="d2">UsageLimits define constraints on the amount of requests or tokens utilized by the agent in its operations.&lt;SEP&gt;UsageLimits defines the constraints on model usage in terms of request counts and token limits, maintaining the overall efficiency of the service.&lt;SEP&gt;UsageLimits defines the constraints on the number of requests and tokens that an agent run can use.&lt;SEP&gt;UsageLimits defines the constraints under which the agent operates, including limits on the number of requests it can make.&lt;SEP&gt;UsageLimits refers to constraints placed on the use of the StreamedRunResult, possibly related to the number of API calls.&lt;SEP&gt;UsageLimits refers to the restrictions that can be applied to control the agent's request count or token usage.</data>
      <data key="d3">chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-283bc165fd3b54e2f1d7d98b00bc1b16&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NeverResultType">
      <data key="d0">NeverResultType</data>
      <data key="d1">category</data>
      <data key="d2">NeverResultType is a type definition that indicates certain data should not be coerced to it, ensuring type integrity in the application.</data>
      <data key="d3">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UsageLimitExceeded">
      <data key="d0">UsageLimitExceeded</data>
      <data key="d1">event</data>
      <data key="d2">UsageLimitExceeded is an event indicating that the predefined limit on agent requests has been surpassed.&lt;SEP&gt;UsageLimitExceeded is an exception raised when user requests exceed specified limits in the pydantic_ai_slim library.&lt;SEP&gt;UsageLimitExceeded signifies an error raised when a model's usage exceeds specified limits.</data>
      <data key="d3">chunk-93010a3465ed2346e5ca1cbbf11fbc95&lt;SEP&gt;chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelSettings">
      <data key="d0">ModelSettings</data>
      <data key="d1">category</data>
      <data key="d2">ModelSettings are configurable parameters that customize the agent's behavior and response generation during execution.&lt;SEP&gt;ModelSettings consist of various configurations that adjust the operational parameters of the model during API requests.&lt;SEP&gt;ModelSettings consists of the configurations that dictate how the agent interacts with the models.&lt;SEP&gt;ModelSettings defines various configurations that affect how the model behaves during request handling.&lt;SEP&gt;ModelSettings include the customizable settings applied to the model's request behavior and output.&lt;SEP&gt;ModelSettings is a base class that contains settings configurations for integrating with AI models, specifically for managing API requests.&lt;SEP&gt;ModelSettings is a category that possibly holds configuration settings specific to model operations and behaviors.&lt;SEP&gt;ModelSettings is a class containing configuration settings for how the model should respond to requests.&lt;SEP&gt;ModelSettings is a struct that allows customization of the model's behavior, influencing parameters such as temperature and timeouts.&lt;SEP&gt;ModelSettings is an overarching category that specifies settings for AI models, which can incorporate various integrations including Mistral.&lt;SEP&gt;ModelSettings refer to the configurations and parameters set for the model's operation.&lt;SEP&gt;ModelSettings refers to a configuration set that alters how the model operates during requests, impacting performance and output.&lt;SEP&gt;ModelSettings refers to the configurable options that affect how the agent operates and processes input.&lt;SEP&gt;ModelSettings refers to the configuration parameters that govern model behavior, enabling customized interactions based on user needs.</data>
      <data key="d3">chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-43f708cf2c1ed088f9752946682da243&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9&lt;SEP&gt;chunk-49dda393c384d6eedda81d9cf452a9c8&lt;SEP&gt;chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="infinite_retry_tool">
      <data key="d0">infinite_retry_tool</data>
      <data key="d1">event</data>
      <data key="d2">infinite_retry_tool is a function designed to attempt repeated operations an established number of times before yielding an error.</data>
      <data key="d3">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="usage_limits">
      <data key="d0">usage_limits</data>
      <data key="d1">category</data>
      <data key="d2">Usage limits are parameters that restrict the number of requests or tokens that can be used in interactions with the agent.&lt;SEP&gt;Usage limits define the constraints within which the flight search and seat preference functionalities operate.&lt;SEP&gt;Usage limits refer to constraints placed on model request count or token usage during the operation of the agent.&lt;SEP&gt;usage_limits define the maximum allowable resource usage for the agent's performance.&lt;SEP&gt;usage_limits refers to constraints that can be set on the number of model requests or token usage, ensuring operational boundaries are maintained.&lt;SEP&gt;usage_limits refers to the constraints or boundaries placed on the usage of the agent's functionalities.&lt;SEP&gt;usage_limits refers to the specified constraints on the number of interactions allowed with the agent.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-888f71ecd85f28d3bd82e9fee16e3882&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_sync">
      <data key="d0">result_sync</data>
      <data key="d1">event</data>
      <data key="d2">result_sync is a method of executing synchronous operations using the agent to retrieve data or results from AI models.</data>
      <data key="d3">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="User">
      <data key="d0">User</data>
      <data key="d1">person</data>
      <data key="d2">User is a data class defined to hold user information, specifically the user's name as a string.</data>
      <data key="d3">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="type_mistakes.py">
      <data key="d0">type_mistakes.py</data>
      <data key="d1">event</data>
      <data key="d2">type_mistakes.py is a Python script demonstrating the common mistakes made in type hinting and how these can lead to errors in execution.</data>
      <data key="d3">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="system_prompts.py">
      <data key="d0">system_prompts.py</data>
      <data key="d1">event</data>
      <data key="d2">system_prompts.py is a Python script exemplifying the definition and usage of static and dynamic system prompts within the PydanticAI framework.</data>
      <data key="d3">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mypy">
      <data key="d0">mypy</data>
      <data key="d1">organization</data>
      <data key="d2">mypy is a static type checker for Python that helps identify type errors in Python scripts.</data>
      <data key="d3">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pyright">
      <data key="d0">pyright</data>
      <data key="d1">organization</data>
      <data key="d2">pyright is a fast type checker meant for large Python source bases and is useful for identifying type errors in code.</data>
      <data key="d3">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Validation Errors">
      <data key="d0">Validation Errors</data>
      <data key="d1">category</data>
      <data key="d2">Validation Errors occur when there is a mismatch between expected and actual data types or structures in the context of validation processes.</data>
      <data key="d3">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dependencies">
      <data key="d0">dependencies</data>
      <data key="d1">category</data>
      <data key="d2">Dependencies are external libraries or components that a piece of software requires to function correctly.&lt;SEP&gt;Dependencies refer to components or libraries that the agent requires to function properly and are managed via context management.&lt;SEP&gt;Dependencies refer to external modules or libraries required for the agent to function properly.&lt;SEP&gt;Dependencies refer to the external libraries or modules required for the script's functionality, such as logfire, httpx, etc.&lt;SEP&gt;Dependencies refer to the required components or parameters that are necessary for the execution of functions or tasks in programming.&lt;SEP&gt;dependencies refer to the resources and information required for agents to function correctly, including API keys and client information.</data>
      <data key="d3">chunk-f375a3596539c3931dca74338cc79546&lt;SEP&gt;chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-263f86d77c473effe9073f383e8bfb9e&lt;SEP&gt;chunk-a03d18658927c60177cdcee467ce42b8&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Schema Validation">
      <data key="d0">Schema Validation</data>
      <data key="d1">category</data>
      <data key="d2">Schema Validation is the process of verifying that the data conforms to a defined structure and type requirements.</data>
      <data key="d3">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ChatResult">
      <data key="d0">ChatResult</data>
      <data key="d1">category</data>
      <data key="d2">ChatResult categorizes the outcome of user interactions in terms of user ID and message content.</data>
      <data key="d3">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="John Doe">
      <data key="d0">John Doe</data>
      <data key="d1">person</data>
      <data key="d2">John Doe is a fictional user referenced in the code as the recipient of a message.</data>
      <data key="d3">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Message to John Doe">
      <data key="d0">Message to John Doe</data>
      <data key="d1">event</data>
      <data key="d2">The message to John Doe signifies an attempt to reach out for social interaction, specifically inviting him for coffee.</data>
      <data key="d3">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UnexpectedModelBehavior">
      <data key="d0">UnexpectedModelBehavior</data>
      <data key="d1">category</data>
      <data key="d2">UnexpectedModelBehavior is a programming construct that raises an error when an unexpected situation occurs in the model's response handling.&lt;SEP&gt;UnexpectedModelBehavior is an exception class indicating that the model has behaved in an unexpected manner during processing.&lt;SEP&gt;UnexpectedModelBehavior is an exception raised in the Mistral framework when there are discrepancies in the model's behavior during response processing.&lt;SEP&gt;UnexpectedModelBehavior is an exception triggered when the model response does not meet expected output criteria.&lt;SEP&gt;UnexpectedModelBehavior occurs when there is unexpected behavior from the model, such as an incorrect response code.&lt;SEP&gt;UnexpectedModelBehavior represents a scenario where the model's behavior fails to meet expectations, thus requiring handling mechanisms.</data>
      <data key="d3">chunk-93010a3465ed2346e5ca1cbbf11fbc95&lt;SEP&gt;chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f&lt;SEP&gt;chunk-729cd2b3c578d9a846adee8336cc05fd&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="calc_volume">
      <data key="d0">calc_volume</data>
      <data key="d1">category</data>
      <data key="d2">calc_volume is a tool designed to calculate the volume of a box, demonstrating the functionality of error handling with ModelRetry.</data>
      <data key="d3">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent Tool Calls">
      <data key="d0">Agent Tool Calls</data>
      <data key="d1">event</data>
      <data key="d2">Agent Tool Calls involve the execution of specific tools to carry out operations requested by the user, such as calculating volume.</data>
      <data key="d3">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAI">
      <data key="d0">OpenAI</data>
      <data key="d1">organization</data>
      <data key="d2">OpenAI is a leading AI research organization known for its innovative developments in artificial intelligence.&lt;SEP&gt;OpenAI is a research organization focused on artificial intelligence technologies and their applications.&lt;SEP&gt;OpenAI is an AI research organization that provides advanced AI models and solutions for various applications.&lt;SEP&gt;OpenAI is an artificial intelligence research lab that aims to ensure that artificial general intelligence benefits all of humanity.&lt;SEP&gt;OpenAI is an artificial intelligence research lab that focuses on developing advanced AI technologies.&lt;SEP&gt;OpenAI is an artificial intelligence research lab that focuses on ensuring that artificial general intelligence (AGI) benefits all of humanity.&lt;SEP&gt;OpenAI is an artificial intelligence research organization that develops advanced AI tools and models.&lt;SEP&gt;OpenAI is an artificial intelligence research organization that focuses on developing and promoting friendly AI technologies.&lt;SEP&gt;OpenAI is an organization focused on developing artificial intelligence models, including GPT models for various applications.&lt;SEP&gt;OpenAI is an organization that develops artificial intelligence technologies, most notably known for its language models and generative AI solutions.&lt;SEP&gt;OpenAI provides AI models that can be utilized within various applications, particularly through its API offerings.</data>
      <data key="d3">chunk-53688e690a1714927cd95fd846af7f81&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-75b2d3dceba3b2912e53dc8b82dbacd8&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-acdd5d00db08de930d2f205385fbf543&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9&lt;SEP&gt;chunk-62b30762bc4e6dc84db8c5fa1d88d2de&lt;SEP&gt;chunk-66833d79e4d36b5a0e73579d383201e2&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DuckDuckGo">
      <data key="d0">DuckDuckGo</data>
      <data key="d1">organization</data>
      <data key="d2">DuckDuckGo is a privacy-focused search engine that offers an installation package through PyPI.&lt;SEP&gt;DuckDuckGo is a privacy-oriented search engine that offers installation options through the PyPI repository for developers seeking enhanced privacy tools.&lt;SEP&gt;DuckDuckGo is a search engine that emphasizes user privacy and provides anonymous search capabilities.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8&lt;SEP&gt;chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tavily">
      <data key="d0">Tavily</data>
      <data key="d1">organization</data>
      <data key="d2">Tavily is a paid search service that offers insights and information retrieval capabilities through its API.&lt;SEP&gt;Tavily is a platform that provides tools for managing traveler data, available for installation via PyPI.&lt;SEP&gt;Tavily is a travel management platform that allows users to install its functionalities through PyPI, thus facilitating travel data management.&lt;SEP&gt;Tavily offers exploration of its product through a freemium model, granting free credits to new users.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c&lt;SEP&gt;chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Ne Zha 2">
      <data key="d0">Ne Zha 2</data>
      <data key="d1">event</data>
      <data key="d2">Ne Zha 2 is a highly successful animated film that broke box office records as the highest-grossing non-English animated film.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Inside Out 2">
      <data key="d0">Inside Out 2</data>
      <data key="d1">event</data>
      <data key="d2">Inside Out 2 is a Pixar sequel that has been reported to potentially set new box office records.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="2025">
      <data key="d0">2025</data>
      <data key="d1">category</data>
      <data key="d2">The year 2025 is the timeframe in focus for animated films' box office performance discussions.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OPENAI_API_KEY">
      <data key="d0">OPENAI_API_KEY</data>
      <data key="d1">category</data>
      <data key="d2">OPENAI_API_KEY is an environment variable used to configure access to OpenAI's services, particularly for authentication purposes.&lt;SEP&gt;The OPENAI_API_KEY is an environment variable used to authenticate and access OpenAI's API services.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8&lt;SEP&gt;chunk-72ca9e59f2d2201907ab534202af4af4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pai">
      <data key="d0">pai</data>
      <data key="d1">event</data>
      <data key="d2">pai is a command-line interface that allows users to interact with OpenAI's models in an interactive session.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="uv">
      <data key="d0">uv</data>
      <data key="d1">organization</data>
      <data key="d2">uv is a tool that assists in running the CLI and is related to performance improvements during AI model interactions.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="uvx">
      <data key="d0">uvx</data>
      <data key="d1">organization</data>
      <data key="d2">uvx is a tool that enhances the execution of the CLI commands in conjunction with UV.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DuckDuckGo Search Tool">
      <data key="d0">DuckDuckGo Search Tool</data>
      <data key="d1">category</data>
      <data key="d2">The DuckDuckGo Search Tool allows users to search the web while emphasizing user privacy and anonymous data retrieval.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tavily Search Tool">
      <data key="d0">Tavily Search Tool</data>
      <data key="d1">organization</data>
      <data key="d2">Tavily Search Tool is a paid service that allows users to search the web for information using the Tavily API.&lt;SEP&gt;The Tavily Search Tool is a paid service designed for comprehensive search capabilities and enhanced information retrieval.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Statista">
      <data key="d0">Statista</data>
      <data key="d1">organization</data>
      <data key="d2">Statista is a statistical data provider that supplies economic data and market intelligence.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Box Office Mojo">
      <data key="d0">Box Office Mojo</data>
      <data key="d1">organization</data>
      <data key="d2">Box Office Mojo is a website that tracks box office revenue in a detailed and comprehensive manner.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="The Numbers">
      <data key="d0">The Numbers</data>
      <data key="d1">organization</data>
      <data key="d2">The Numbers is a platform that provides detailed statistics regarding box office performance and film industry data.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Just Jared">
      <data key="d0">Just Jared</data>
      <data key="d1">organization</data>
      <data key="d2">Just Jared is an entertainment industry trade outlet that covers celebrity news and listings of top-performing films.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="record-breaking films">
      <data key="d0">record-breaking films</data>
      <data key="d1">category</data>
      <data key="d2">Record-breaking films refer to movies that achieve unprecedented box office success or critical acclaim.</data>
      <data key="d3">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tavily API">
      <data key="d0">Tavily API</data>
      <data key="d1">organization</data>
      <data key="d2">The Tavily API is the underlying technology that powers the Tavily Search Tool, enabling robust web searches.</data>
      <data key="d3">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic-ai-slim">
      <data key="d0">pydantic-ai-slim</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic-ai-slim is a package that must be installed to use the Tavily search tool, facilitating AI agent operations.</data>
      <data key="d3">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Federal Reserve">
      <data key="d0">Federal Reserve</data>
      <data key="d1">organization</data>
      <data key="d2">The Federal Reserve is a central banking system in the U.S. that influences monetary policy, impacting economic stability.&lt;SEP&gt;The Federal Reserve is referenced in terms of its influence on economic policies and market trends.&lt;SEP&gt;The Federal Reserve is the central banking system of the United States, influencing economic policy and financial regulations.</data>
      <data key="d3">chunk-c48c3a158b02117d706e48f9993aaa8c&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Noah Carter">
      <data key="d0">Noah Carter</data>
      <data key="d1">person</data>
      <data key="d2">Noah Carter is an athlete who broke the 100m sprint record during the World Athletics Championship, utilizing advanced technology for performance enhancement.&lt;SEP&gt;Noah Carter is mentioned as an athlete known for breaking records in athletics, specifically the 100m sprint.&lt;SEP&gt;Noah Carter is mentioned in connection with breaking records in athletics, indicative of notable personal achievement.</data>
      <data key="d3">chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c&lt;SEP&gt;chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="World Athletics Championship">
      <data key="d0">World Athletics Championship</data>
      <data key="d1">event</data>
      <data key="d2">The World Athletics Championship is a global sports competition featuring top athletes in track and field.&lt;SEP&gt;The World Athletics Championship is a premier international sports event gathering elite athletes from around the world to compete in track and field.&lt;SEP&gt;The World Athletics Championship is a prestigious global competition in track and field, bringing together the top athletes from around the world.&lt;SEP&gt;The World Athletics Championship is a prestigious international athletics competition featuring top athletes.&lt;SEP&gt;The World Athletics Championship is a significant international sports event where athletes compete in track and field.&lt;SEP&gt;The World Athletics Championship is an international athletics competition involving various track and field events.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="installation">
      <data key="d0">installation</data>
      <data key="d1">event</data>
      <data key="d2">Installation refers to the process of setting up the necessary software components, including the pydantic-ai-slim package.</data>
      <data key="d3">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="usage">
      <data key="d0">usage</data>
      <data key="d1">category</data>
      <data key="d2">Usage encompasses the operational aspect of utilizing the Tavily Search Tool through a user account.&lt;SEP&gt;Usage is a data class in pydantic_ai that keeps track of the usage statistics associated with requests made to the language model API.&lt;SEP&gt;Usage is a term that refers to the amount of computational resources consumed during the execution of an agent's functions.&lt;SEP&gt;Usage refers to the current data regarding the interaction dynamics of the agent, including how it manages conversational inputs and outputs.&lt;SEP&gt;Usage refers to the metrics and statistics associated with model operations, highlighting performance and resource consumption.&lt;SEP&gt;Usage refers to the way the agent processes inputs and manages tasks through defined parameters and methods.&lt;SEP&gt;usage details the overall usage metrics and statistics related to the agent's performance and interactions.&lt;SEP&gt;usage provides a starting point for agents, useful in scenarios where conversation context needs to be resumed.&lt;SEP&gt;usage refers to a method or property within the state object that retrieves or calculates how much of a resource has been utilized during the program run.&lt;SEP&gt;usage refers to a method that tracks the total usage across the runtime of the streaming process.&lt;SEP&gt;usage refers to metadata tracking the number of tokens used during requests to the model.&lt;SEP&gt;usage refers to the metrics or data regarding how OpenAI models are utilized, important for performance evaluation and optimization.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9&lt;SEP&gt;chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-3fe1c986ef649646858753879674bde7&lt;SEP&gt;chunk-7024ed9fea1c2b8447084fcacb8e7cfc&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Thomson Reuters">
      <data key="d0">Thomson Reuters</data>
      <data key="d1">organization</data>
      <data key="d2">Thomson Reuters is a news outlet that reports on topics including GenAI and its applications in various industries.</data>
      <data key="d3">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TELUS Digital">
      <data key="d0">TELUS Digital</data>
      <data key="d1">organization</data>
      <data key="d2">TELUS Digital is a research entity that conducted a survey related to the use of GenAI tools in enterprises.</data>
      <data key="d3">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GenAI">
      <data key="d0">GenAI</data>
      <data key="d1">category</data>
      <data key="d2">GenAI refers to Generative Artificial Intelligence, a cutting-edge technology transforming various sectors.</data>
      <data key="d3">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Nexon Technologies">
      <data key="d0">Nexon Technologies</data>
      <data key="d1">organization</data>
      <data key="d2">Nexon Technologies is a tech company mentioned regarding financial impacts, specifically their stock movements.&lt;SEP&gt;Nexon Technologies is a tech company that saw its stock decline by 7.8% after disappointing earnings.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Omega Energy">
      <data key="d0">Omega Energy</data>
      <data key="d1">organization</data>
      <data key="d2">Omega Energy is an energy company experiencing stock price changes tied to market conditions.&lt;SEP&gt;Omega Energy is an energy company that gained 2.1% in stock value due to rising oil prices.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Gold Futures">
      <data key="d0">Gold Futures</data>
      <data key="d1">category</data>
      <data key="d2">Gold Futures are financial contracts obligating the buyer to purchase gold at a predetermined price on a future date.&lt;SEP&gt;Gold futures rose by 1.5%, indicating increased investor interest in safe-haven assets.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Crude Oil">
      <data key="d0">Crude Oil</data>
      <data key="d1">category</data>
      <data key="d2">Crude Oil is a critical commodity in the energy market, affecting global economic conditions and stock performance.&lt;SEP&gt;Crude oil prices rose to $87.60 per barrel due to supply constraints and strong demand.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tokyo">
      <data key="d0">Tokyo</data>
      <data key="d1">geo</data>
      <data key="d2">Tokyo is a major city and the capital of Japan, known for hosting international events.&lt;SEP&gt;Tokyo is a major city in Japan and the host location for significant international athletic events like the World Athletics Championship.&lt;SEP&gt;Tokyo is a major city in Japan that hosted the World Athletics Championship, serving as a significant location for international sports events.&lt;SEP&gt;Tokyo is the capital city of Japan and is known for hosting various international events, including the World Athletics Championship.&lt;SEP&gt;Tokyo is the capital city of Japan, often associated with technology and innovation, but not directly mentioned in relation to this context.&lt;SEP&gt;Tokyo is the geographical reference for a web application that includes hosting and development locations, specifically mentioned through the context of development tools.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Carbon-Fiber Spikes">
      <data key="d0">Carbon-Fiber Spikes</data>
      <data key="d1">category</data>
      <data key="d2">Carbon-fiber spikes are advanced athletic footwear designed to enhance performance in sprinting events.&lt;SEP&gt;Carbon-fiber spikes are specialized athletic footwear designed to enhance performance in sprinting events, providing better traction and speed.&lt;SEP&gt;Carbon-fiber spikes are specialized footwear used by athletes, designed to enhance speed and traction on the track.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d&lt;SEP&gt;chunk-280e2293efebc370222ffe9ce64e03c2&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="httpx">
      <data key="d0">httpx</data>
      <data key="d1">organization</data>
      <data key="d2">httpx is an HTTP client for Python, utilized for making asynchronous HTTP requests in PydanticAI functionalities.</data>
      <data key="d3">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MyDeps">
      <data key="d0">MyDeps</data>
      <data key="d1">organization</data>
      <data key="d2">MyDeps is a class defined for managing dependencies, including an API key and an HTTP client for network requests.&lt;SEP&gt;MyDeps is a class used to customize dependency injection in the testing context for the joke application.&lt;SEP&gt;MyDeps is a dataclass representing the dependencies required for PydanticAI agents, including an API key and an HTTP client.</data>
      <data key="d3">chunk-caeb7b31135f4e36ba22304bc0e7ff49&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Get System Prompt">
      <data key="d0">Get System Prompt</data>
      <data key="d1">event</data>
      <data key="d2">Get System Prompt is an action in PydanticAI that retrieves the system prompt for agents, which may involve making HTTP requests.</data>
      <data key="d3">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Main Function">
      <data key="d0">Main Function</data>
      <data key="d1">event</data>
      <data key="d2">Main Function refers to the asynchronous function defined for executing the agent with a specific set of dependencies and handling the result.</data>
      <data key="d3">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="asyncio">
      <data key="d0">asyncio</data>
      <data key="d1">organization</data>
      <data key="d2">Asyncio is a Python library used for writing concurrent code using the async/await syntax, crucial for managing asynchronous tasks.&lt;SEP&gt;Asyncio is a Python library used for writing concurrent code using the async/await syntax, facilitating asynchronous operations in the script.&lt;SEP&gt;Asyncio is a Python library used for writing concurrent code using the async/await syntax.&lt;SEP&gt;Asyncio is a Python library used to handle asynchronous programming, allowing for concurrent execution of code blocks and I/O operations.&lt;SEP&gt;asyncio is a Python library for writing concurrent code using the async/await syntax, allowing for asynchronous programming.&lt;SEP&gt;asyncio is a Python library used for writing concurrent code using the async/await syntax, enabling asynchronous execution within PydanticAI.</data>
      <data key="d3">chunk-a03d18658927c60177cdcee467ce42b8&lt;SEP&gt;chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-1874d189c1d13783a0a35c4fe1c8d046&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dependencies">
      <data key="d0">Dependencies</data>
      <data key="d1">category</data>
      <data key="d2">Dependencies in PydanticAI refer to the services or data that the agents rely on to perform their tasks effectively.&lt;SEP&gt;Dependencies refer to libraries or modules that a Python script requires to function correctly, which can be inferred from imports or explicitly defined.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Data Validation">
      <data key="d0">Data Validation</data>
      <data key="d1">category</data>
      <data key="d2">Data Validation is a process used in PydanticAI to ensure that the data passed to the agents meets specified standards and formats.</data>
      <data key="d3">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="httpx.Client">
      <data key="d0">httpx.Client</data>
      <data key="d1">organization</data>
      <data key="d2">httpx.Client is a client used for making HTTP requests, primarily mentioned in the context of testing purposes for generating diagrams.&lt;SEP&gt;httpx.Client is a library that provides an HTTP client for making requests to web services.&lt;SEP&gt;httpx.Client is a library that provides an HTTP client for making synchronous requests to web services, allowing for interaction with APIs.</data>
      <data key="d3">chunk-caeb7b31135f4e36ba22304bc0e7ff49&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="agent">
      <data key="d0">agent</data>
      <data key="d1">organization</data>
      <data key="d2">An agent is a software entity that performs tasks autonomously, often used in artificial intelligence and programming contexts.&lt;SEP&gt;agent is an instance of the Agent class designed to run specific tasks by handling inputs and managing dependencies.&lt;SEP&gt;agent is an instance of the Agent class that executes defined tasks, managing input handling and dependency resolution during runtime.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run">
      <data key="d0">run</data>
      <data key="d1">event</data>
      <data key="d2">The run method is an asynchronous function that executes the agent with a given user prompt and returns the result of the interaction.&lt;SEP&gt;run is a method defined in Graph that is responsible for executing the graph nodes based on their defined sequence.&lt;SEP&gt;run is an abstract method that subclasses must implement, intended to execute node logic and return the next node in the graph.&lt;SEP&gt;run is an asynchronous method designed to execute the tool function and manage the execution context.&lt;SEP&gt;run refers to the execution of the main function where the agent processes inputs, executes tasks, and returns results.&lt;SEP&gt;run refers to the execution of the main function which orchestrates the call to the agent and processes results.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-caeb7b31135f4e36ba22304bc0e7ff49&lt;SEP&gt;chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_system_prompt">
      <data key="d0">get_system_prompt</data>
      <data key="d1">event</data>
      <data key="d2">get_system_prompt is a defined asynchronous function responsible for obtaining the system prompt by making an HTTP call.&lt;SEP&gt;get_system_prompt is an asynchronous function within the agent responsible for retrieving prompts through an HTTP request to a specified endpoint.</data>
      <data key="d3">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Authorization">
      <data key="d0">Authorization</data>
      <data key="d1">category</data>
      <data key="d2">Authorization is a type of header used to provide a bearer token for authentication in HTTP requests.&lt;SEP&gt;Authorization refers to HTTP headers used for providing bearer tokens or credentials required for authenticated requests.</data>
      <data key="d3">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="asyncio.run">
      <data key="d0">asyncio.run</data>
      <data key="d1">event</data>
      <data key="d2">asyncio.run is a Python function that initiates the event loop for executing asynchronous code and managing tasks.&lt;SEP&gt;asyncio.run is a function that executes the main coroutine, enabling asynchronous operation within the app.&lt;SEP&gt;asyncio.run is a function that initiates an event loop for executing asynchronous functions.&lt;SEP&gt;asyncio.run is a method that runs a specified coroutine and is commonly used to start asynchronous operations in Python programming.&lt;SEP&gt;asyncio.run is a method used to execute asynchronous functions in Python, enabling the running of the main asynchronous context.</data>
      <data key="d3">chunk-888f71ecd85f28d3bd82e9fee16e3882&lt;SEP&gt;chunk-caeb7b31135f4e36ba22304bc0e7ff49&lt;SEP&gt;chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="main">
      <data key="d0">main</data>
      <data key="d1">event</data>
      <data key="d2">Main is the primary entry point function that orchestrates the operation of the script, controlling flow and execution of tasks.&lt;SEP&gt;The main function serves as the entry point of the application, coordinating the sequence of events for flight and seat selection.&lt;SEP&gt;main is a predefined function that serves as an entry point for the asynchronous execution of the graph run example used in the code.&lt;SEP&gt;main is the primary asynchronous function orchestrating the flow of the program, initializing dependencies and invoking the agent.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-caeb7b31135f4e36ba22304bc0e7ff49&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="response.raise_for_status">
      <data key="d0">response.raise_for_status</data>
      <data key="d1">event</data>
      <data key="d2">response.raise_for_status is a method that checks for successful HTTP responses and raises an error for any unsuccessful status codes.</data>
      <data key="d3">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="joke_agent">
      <data key="d0">joke_agent</data>
      <data key="d1">organization</data>
      <data key="d2">joke_agent is an entity responsible for managing and delivering jokes based on the specified dependencies.</data>
      <data key="d3">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TestMyDeps">
      <data key="d0">TestMyDeps</data>
      <data key="d1">organization</data>
      <data key="d2">TestMyDeps is a subclass of MyDeps that overrides methods to customize prompts during tests.&lt;SEP&gt;TestMyDeps is a subclass of MyDeps which customizes the dependency setup for testing purposes in the joke application.</data>
      <data key="d3">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="application_code">
      <data key="d0">application_code</data>
      <data key="d1">category</data>
      <data key="d2">application_code is the function that generates jokes when provided with a prompt, as part of the joke application system.</data>
      <data key="d3">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="test_joke_app.py">
      <data key="d0">test_joke_app.py</data>
      <data key="d1">event</data>
      <data key="d2">test_joke_app.py is a testing file containing test cases to validate the functionality of the joke application.</data>
      <data key="d3">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Pydantic Evals">
      <data key="d0">Pydantic Evals</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic Evals is a framework designed for evaluating models' performance for various applications, especially in the context of LLMs.</data>
      <data key="d3">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dataset">
      <data key="d0">Dataset</data>
      <data key="d1">organization</data>
      <data key="d2">A Dataset is a collection of inputs, outputs, and metadata structured for testing purposes, often generated using language models.&lt;SEP&gt;A Dataset is an instance representing structured data, which can be loaded from various formats such as YAML or JSON.&lt;SEP&gt;Dataset is a class used for managing data loading, processing, and validation from different formats such as YAML and JSON.&lt;SEP&gt;Dataset is a collection of test cases used for evaluating specific functions, which includes input data and expected output.&lt;SEP&gt;Dataset is a collection of test cases used to evaluate tasks within the Pydantic Evals framework.&lt;SEP&gt;Dataset is a container for multiple Case instances that provides functionalities to evaluate functions against expected outputs, encapsulating both input-output pairs and evaluation logic.&lt;SEP&gt;Dataset is a model that contains a collection of Case objects, potentially with evaluators linked to it.&lt;SEP&gt;Dataset is a structured collection of cases used for evaluating tasks through various evaluators.&lt;SEP&gt;Dataset refers to a collection of cases or data points used in machine learning evaluations, structured specifically for testing evaluator classes.&lt;SEP&gt;The Dataset in this context refers to the structured collection of question-answer pairs created for assessing knowledge about world capitals and landmarks.</data>
      <data key="d3">chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-931e9fa216c79b214c228f17140b2fb4&lt;SEP&gt;chunk-a58389fcd1596d9d04e1ed8f3cd54773&lt;SEP&gt;chunk-fbd48d906573dc919932c60117d15be5&lt;SEP&gt;chunk-c0417af0fa24429ddd11fe9cfa92e39e&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e&lt;SEP&gt;chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Case">
      <data key="d0">Case</data>
      <data key="d1">category</data>
      <data key="d2">A Case is a model that describes a single evaluation case with attributes such as name, inputs, metadata, and expected output.&lt;SEP&gt;A Case represents an individual test scenario, including inputs, expected outputs, and associated metadata that are evaluated during testing.&lt;SEP&gt;A Case represents an individual test scenario, including inputs, expected outputs, and associated metadata.&lt;SEP&gt;A case refers to a specific instance within an evaluation dataset that encapsulates inputs, expected outputs, and optional metadata associated with a task.&lt;SEP&gt;Case is a data structure that represents individual test cases within the evaluation dataset.&lt;SEP&gt;Case is a data structure used in the pydantic_evals library, specifically designed to represent individual test cases within evaluation datasets, including inputs, expected outputs, and metadata.&lt;SEP&gt;Case represents a single test scenario that corresponds to a specific task with defined inputs and expected outputs in the evaluation process.&lt;SEP&gt;Case represents an individual element or instance within the Dataset, encompassing inputs, expected outputs, and associated evaluators.&lt;SEP&gt;Case represents an individual test instance within a dataset, containing inputs and expected output.</data>
      <data key="d3">chunk-2b642c0eb3f8e30082fb1c02c90b38ee&lt;SEP&gt;chunk-931e9fa216c79b214c228f17140b2fb4&lt;SEP&gt;chunk-fbd48d906573dc919932c60117d15be5&lt;SEP&gt;chunk-c0417af0fa24429ddd11fe9cfa92e39e&lt;SEP&gt;chunk-b88722767613f27ba54bd4b6245204cd&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="joke_app">
      <data key="d0">joke_app</data>
      <data key="d1">organization</data>
      <data key="d2">joke_app is a software application designed to generate and deliver jokes based on user prompts and dependencies.</data>
      <data key="d3">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async function">
      <data key="d0">async function</data>
      <data key="d1">category</data>
      <data key="d2">An async function is a function that operates asynchronously, allowing for non-blocking execution of code, commonly used with Promises in JavaScript and Python.&lt;SEP&gt;An async function is a programming construct that allows for asynchronous operations, enabling non-blocking execution of code.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="system_prompt_factory">
      <data key="d0">system_prompt_factory</data>
      <data key="d1">method</data>
      <data key="d2">system_prompt_factory is a method that generates a system prompt for the application, returning a string used in the context of joke generation.</data>
      <data key="d3">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="joke">
      <data key="d0">joke</data>
      <data key="d1">category</data>
      <data key="d2">A joke is a funny statement or story used to elicit laughter; in this case, is generated by the joke_generation_agent.&lt;SEP&gt;A joke is a humorous statement or story designed to elicit laughter, and in this context refers to the output generated by the application.&lt;SEP&gt;A joke is a humorous statement or story, represented by the content provided in the conversation.</data>
      <data key="d3">chunk-931e9fa216c79b214c228f17140b2fb4&lt;SEP&gt;chunk-6c1f859347bcf0df691e8fe2fde806fa&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="simple_eval_complete.py">
      <data key="d0">simple_eval_complete.py</data>
      <data key="d1">category</data>
      <data key="d2">The script file, named simple_eval_complete.py, contains Python code for evaluating test cases using the pydantic_evals library.&lt;SEP&gt;The script file, named simple_eval_complete.py, contains code for evaluating test cases using the pydantic_evals library.</data>
      <data key="d3">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluator">
      <data key="d0">Evaluator</data>
      <data key="d1">organization</data>
      <data key="d2">Evaluator denotes a class or function type designed to assess dataset cases, providing evaluation metrics or outputs based on specified criteria.&lt;SEP&gt;Evaluator is a class that assesses the performance and correctness of datasets based on specified criteria and parameters.&lt;SEP&gt;Evaluator is a class type responsible for defining the assessment criteria and methods that are utilized to evaluate the execution of the cases.&lt;SEP&gt;Evaluator is a class type used within the pydantic_evals library to define custom evaluation logic for datasets.&lt;SEP&gt;Evaluator is a class within the pydantic_evals library that enables the definition of custom evaluation logic, allowing for flexible assessment of outputs based on certain criteria.&lt;SEP&gt;Evaluator is a core class in pydantic_evals which provides the structure and definition for creating custom evaluators to assess task outputs.&lt;SEP&gt;Evaluator is an abstract base class for creating evaluators that encapsulate evaluative logic and behavior.&lt;SEP&gt;Evaluator is an abstraction that defines how the evaluation of given outputs against expected outputs is performed.&lt;SEP&gt;Evaluator is an entity responsible for assessing the expected output against actual outputs in the context of testing.&lt;SEP&gt;Evaluator refers to a class that is responsible for evaluating datasets according to specified parameters.&lt;SEP&gt;Evaluator refers to components that assess the quality or correctness of generated outputs against the expected dataset formats.&lt;SEP&gt;Evaluator represents individuals or systems that perform assessments of the cases based on provided inputs and expected outputs.&lt;SEP&gt;The Evaluator is a base class for all evaluators in the context of performance assessment of tasks, it includes methods for evaluating outputs based on provided evaluators' context.&lt;SEP&gt;The Evaluator is a key component in pydantic_evals that runs evaluations synchronously or asynchronously based on provided contexts.&lt;SEP&gt;The Evaluator is an abstract base class defined in the pydantic_evals package, serving as a blueprint for creating evaluators that can be synchronized or asynchronous.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb&lt;SEP&gt;chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-2b642c0eb3f8e30082fb1c02c90b38ee&lt;SEP&gt;chunk-a7db06d94811ecc4dc37c02ebe2a82c3&lt;SEP&gt;chunk-9ed140ecdab085e2534a8130bc747b5c&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196&lt;SEP&gt;chunk-fbd48d906573dc919932c60117d15be5&lt;SEP&gt;chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="guess_city">
      <data key="d0">guess_city</data>
      <data key="d1">event</data>
      <data key="d2">guess_city is an asynchronous function designed to return the name of the capital city based on the input question.&lt;SEP&gt;guess_city is an asynchronous function that takes a question as its input and returns the corresponding capital city, specifically designed to answer geographical queries.</data>
      <data key="d3">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MyEvaluator">
      <data key="d0">MyEvaluator</data>
      <data key="d1">person</data>
      <data key="d2">MyEvaluator is a custom evaluation class implemented to assess whether the outputs of functions match the expected outputs based on pre-defined logic and scoring criteria.&lt;SEP&gt;MyEvaluator is a custom evaluation class that assesses the correctness of outputs based on predefined rules and logic.</data>
      <data key="d3">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="report">
      <data key="d0">report</data>
      <data key="d1">event</data>
      <data key="d2">The report is a compilation of results generated from evaluating the test cases.&lt;SEP&gt;report is an evaluation summary object that compiles the results of running the provided function against multiple test cases, detailing inputs, outputs, scores, and overall performance metrics.&lt;SEP&gt;report is an object that summarizes the results of evaluating test cases, including inputs, outputs, and scores.</data>
      <data key="d3">chunk-fbd48d906573dc919932c60117d15be5&lt;SEP&gt;chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="evaluate_sync">
      <data key="d0">evaluate_sync</data>
      <data key="d1">event</data>
      <data key="d2">evaluate_sync is a method that runs an evaluator synchronously.&lt;SEP&gt;evaluate_sync is a method that synchronously executes the evaluation of all test cases contained within a Dataset using a designated function.&lt;SEP&gt;evaluate_sync is a synchronous wrapper around the evaluate function, providing convenience for task evaluations.</data>
      <data key="d3">chunk-fbd48d906573dc919932c60117d15be5&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196&lt;SEP&gt;chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="vegetarian_recipe">
      <data key="d0">vegetarian_recipe</data>
      <data key="d1">category</data>
      <data key="d2">Vegetarian recipe denotes a type of dish that excludes meat and animal products, aligning with dietary restrictions for vegetarians.</data>
      <data key="d3">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gluten_free_recipe">
      <data key="d0">gluten_free_recipe</data>
      <data key="d1">category</data>
      <data key="d2">Gluten-free recipe indicates dishes that do not contain gluten or wheat products, designed for individuals with gluten sensitivities or celiac disease.</data>
      <data key="d3">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Duration">
      <data key="d0">Duration</data>
      <data key="d1">event</data>
      <data key="d2">Duration indicates the time taken for the execution of the recipe generation, measured in milliseconds.&lt;SEP&gt;Duration is a computed property of SpanNode that represents the time difference between a span's end and start timestamps, indicating how long the span took to execute.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6&lt;SEP&gt;chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Case ID">
      <data key="d0">Case ID</data>
      <data key="d1">category</data>
      <data key="d2">Case ID is a unique identifier assigned to each case for tracking and referencing in processing workflows.&lt;SEP&gt;Case ID is a unique identifier used to track and reference specific entries in the dataset.&lt;SEP&gt;Case ID refers to unique identifiers assigned to each test case in the evaluation summary for tracking purposes.&lt;SEP&gt;The Case ID is a unique identifier for each case, crucial for tracking and referencing specific inputs and outputs.</data>
      <data key="d3">chunk-96401031d88e7ec557013dad6c33f986&lt;SEP&gt;chunk-d5dc19bc0d47e207160ce81e71cc4814&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Assertions">
      <data key="d0">Assertions</data>
      <data key="d1">category</data>
      <data key="d2">Assertions are marks indicating the correctness or errors in the processing of text inputs.&lt;SEP&gt;Assertions signify the verification status of each recipe submission in the dataset, indicating whether they meet specific criteria.</data>
      <data key="d3">chunk-96401031d88e7ec557013dad6c33f986&lt;SEP&gt;chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="10ms">
      <data key="d0">10ms</data>
      <data key="d1">event</data>
      <data key="d2">10ms denotes the time duration for the processing of both recipes in milliseconds, providing a measure of computational efficiency.</data>
      <data key="d3">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenTelemetry">
      <data key="d0">OpenTelemetry</data>
      <data key="d1">organization</data>
      <data key="d2">OpenTelemetry is a collective of organizations and individuals who provide an open-source set of observability tools for collecting telemetry data such as metrics, logs, and traces.&lt;SEP&gt;OpenTelemetry is a framework designed for observability in cloud-native software, helping developers gather and report telemetry data.&lt;SEP&gt;OpenTelemetry is a framework for observability that enables monitoring and tracing of applications.&lt;SEP&gt;OpenTelemetry is a set of tools and libraries for collecting telemetry data from applications for monitoring and debugging.&lt;SEP&gt;OpenTelemetry is a set of tools, APIs, and SDKs used to instrument and monitor software performance and behaviors across various platforms.&lt;SEP&gt;OpenTelemetry is an observability framework designed to provide APIs and libraries for collecting telemetry data like metrics, logs, and traces in cloud-native software applications.&lt;SEP&gt;OpenTelemetry is an observability framework for cloud-native software that provides APIs and libraries to collect telemetry data like metrics, logs, and traces.&lt;SEP&gt;OpenTelemetry is an observability framework for cloud-native software, aiming to standardize the collection and export of telemetry data such as metrics, logs, and traces.&lt;SEP&gt;OpenTelemetry is an observability framework that provides APIs and libraries for application performance monitoring and tracing.&lt;SEP&gt;OpenTelemetry is an observability framework that provides a set of tools for collecting and managing telemetry data, including logs and traces.&lt;SEP&gt;OpenTelemetry is an open-source framework that enables observability of applications through tracing and monitoring features.&lt;SEP&gt;OpenTelemetry is an open-source observability framework that provides APIs and SDKs for collecting and instrumenting telemetry data, primarily for cloud-native applications.&lt;SEP&gt;OpenTelemetry is an open-source observability framework that provides tools and APIs for collecting and managing telemetry data, particularly in cloud-native applications.&lt;SEP&gt;OpenTelemetry is an organization that provides observability frameworks for applications and is used for tracing and monitoring.</data>
      <data key="d3">chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e&lt;SEP&gt;chunk-803ad293de9341cf22215ab0b0f22dbe&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5&lt;SEP&gt;chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a&lt;SEP&gt;chunk-21a3cb379899823f20a4957eba46c558&lt;SEP&gt;chunk-871f0637563e9955b756f367ef81e17e&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="double_number">
      <data key="d0">double_number</data>
      <data key="d1">category</data>
      <data key="d2">The double_number is a function categorically designed to evaluate and return the double of the input number.</data>
      <data key="d3">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluation Summary">
      <data key="d0">Evaluation Summary</data>
      <data key="d1">event</data>
      <data key="d2">The Evaluation Summary outlines the results of several test cases executed on the Pydantic Evals framework, showcasing inputs, outputs, and performance metrics.</data>
      <data key="d3">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Inputs">
      <data key="d0">Inputs</data>
      <data key="d1">category</data>
      <data key="d2">Inputs categorically represent the various test scenarios or inputs provided for evaluation to assess performance.</data>
      <data key="d3">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Outputs">
      <data key="d0">Outputs</data>
      <data key="d1">category</data>
      <data key="d2">Outputs categorically signify the results or outcomes produced from the evaluation of corresponding inputs.&lt;SEP&gt;Outputs refer to the results produced after processing inputs, which reflect the performance of the system.&lt;SEP&gt;Outputs refers to the data produced by the evaluation process, which can vary depending on the input context and the evaluation logic.</data>
      <data key="d3">chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-d5dc19bc0d47e207160ce81e71cc4814&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Scores">
      <data key="d0">Scores</data>
      <data key="d1">category</data>
      <data key="d2">Scores categorize the performance metrics associated with the outputs of each test case, illustrating their efficacy.&lt;SEP&gt;Scores indicate the evaluation measures that reflect the processing performance of the inputs.</data>
      <data key="d3">chunk-d5dc19bc0d47e207160ce81e71cc4814&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="logfire">
      <data key="d0">logfire</data>
      <data key="d1">organization</data>
      <data key="d2">Logfire is a component relating to configuration and logging within the context of OpenTelemetry, setting global providers for tracing and event logging.&lt;SEP&gt;Logfire is a documentation system designed for easy retrieval and integration of documentation in querying systems.&lt;SEP&gt;Logfire is a logging management tool used to capture, analyze, and manage logging data from applications.&lt;SEP&gt;Logfire is a platform that integrates with Pydantic to facilitate logging and sending contextual information to a tracking system.&lt;SEP&gt;Logfire is a service that provides logging and monitoring frameworks, allowing users to track application behavior and performance.&lt;SEP&gt;Logfire is a tool used for logging and monitoring in applications, providing insights into the script's execution.&lt;SEP&gt;Logfire is an organization that offers logging and monitoring solutions tailored for applications, integrated with OpenTelemetry.&lt;SEP&gt;Logfire is an organization that provides logging and configuration services for applications, allowing for data collection and monitoring via its logfire.configure method.&lt;SEP&gt;Logfire is an organization that seems to focus on providing embedding and search functionalities within document sections.&lt;SEP&gt;logfire is a logging tool that integrates with various frameworks, enabling structured logging and monitoring of applications.&lt;SEP&gt;logfire is a logging tool that integrates with various frameworks, enabling the logging of structured data.</data>
      <data key="d3">chunk-459acdb5bfa20be2d698a80bc830b084&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5&lt;SEP&gt;chunk-a03d18658927c60177cdcee467ce42b8&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-acdd5d00db08de930d2f205385fbf543&lt;SEP&gt;chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-7ba9f90f4ef9c80fa2a116ad4984222c&lt;SEP&gt;chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="normal_text">
      <data key="d0">normal_text</data>
      <data key="d1">category</data>
      <data key="d2">Normal text is a type of structured input that gets processed to produce a formatted output and performance score.&lt;SEP&gt;The normal_text is a type of input that gets processed to produce a standardized output and performance score.</data>
      <data key="d3">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="performance_score">
      <data key="d0">performance_score</data>
      <data key="d1">category</data>
      <data key="d2">Performance score quantifies the effectiveness of the processed text, ranging between 0 and 1, indicating processing success.&lt;SEP&gt;The performance_score quantifies the effectiveness of the processed text, indicative of processing accuracy.</data>
      <data key="d3">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="text_with_error">
      <data key="d0">text_with_error</data>
      <data key="d1">category</data>
      <data key="d2">Text with error is an input that contains an error marker, indicating it had issues during processing.&lt;SEP&gt;The text_with_error is an input that contains an error marker, resulting in a specific error output when processed.</data>
      <data key="d3">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Averages">
      <data key="d0">Averages</data>
      <data key="d1">category</data>
      <data key="d2">Averages represent computed metrics derived from performance scores across multiple cases, providing a summary statistic.&lt;SEP&gt;Averages represent the computed results or metrics derived from the performance scores over several cases.</data>
      <data key="d3">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="questions_cases.json">
      <data key="d0">questions_cases.json</data>
      <data key="d1">file</data>
      <data key="d2">The questions_cases.json file contains a structured dataset for question-answer pairs regarding world capitals and landmarks.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="questions_cases_schema.json">
      <data key="d0">questions_cases_schema.json</data>
      <data key="d1">file</data>
      <data key="d2">The questions_cases_schema.json file defines the schema for the questions_cases.json, guiding how the data should be structured.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Easy Capital Question">
      <data key="d0">Easy Capital Question</data>
      <data key="d1">event</data>
      <data key="d2">Easy Capital Question is a type of query aimed at testing knowledge about world capitals, specifically focusing on France.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Challenging Landmark Question">
      <data key="d0">Challenging Landmark Question</data>
      <data key="d1">event</data>
      <data key="d2">Challenging Landmark Question refers to an inquiry about famous landmarks, particularly concerning the Seine River and the Eiffel Tower.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Eiffel Tower">
      <data key="d0">Eiffel Tower</data>
      <data key="d1">geo</data>
      <data key="d2">The Eiffel Tower is a world-famous landmark located in Paris, known for its iconic structure and as a symbol of French culture.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="question">
      <data key="d0">question</data>
      <data key="d1">event</data>
      <data key="d2">The question is a key component in each case of the dataset, aimed at eliciting information about a specific topic such as capitals or landmarks.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="metadata">
      <data key="d0">metadata</data>
      <data key="d1">category</data>
      <data key="d2">Metadata provides additional context or information about the test case to help evaluators in their assessments.&lt;SEP&gt;Metadata provides additional context regarding the questions, such as difficulty level and category, which helps in organizing and evaluating the dataset.&lt;SEP&gt;metadata includes additional context-related information that assists in the evaluation process, enhancing the understanding of inputs and outputs.</data>
      <data key="d3">chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-a7db06d94811ecc4dc37c02ebe2a82c3&lt;SEP&gt;chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="outputs">
      <data key="d0">outputs</data>
      <data key="d1">category</data>
      <data key="d2">Outputs are the responses generated by the chatbot based on the inputs provided through prompts and past conversations.&lt;SEP&gt;Outputs represent the expected responses for the questions within the dataset, indicating correct answers along with confidence scores.&lt;SEP&gt;outputs represent the results generated by a task that are evaluated against the expected outcomes in the context of performance assessment.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="evaluators">
      <data key="d0">evaluators</data>
      <data key="d1">category</data>
      <data key="d2">Evaluators are criteria or methods used to assess whether the outputs of the questions match the expected answers.&lt;SEP&gt;Evaluators are individuals or entities that assess the test cases based on the inputs and expected outputs.</data>
      <data key="d3">chunk-a7db06d94811ecc4dc37c02ebe2a82c3&lt;SEP&gt;chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Geography">
      <data key="d0">Geography</data>
      <data key="d1">category</data>
      <data key="d2">Geography is the academic category under which the Easy Capital Question falls, focusing on the study of places and the relationships between people and their environments.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Landmarks">
      <data key="d0">Landmarks</data>
      <data key="d1">category</data>
      <data key="d2">Landmarks is a category that encompasses questions about significant structures or locations, as seen in the Challenging Landmark Question.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Confidence Score">
      <data key="d0">Confidence Score</data>
      <data key="d1">category</data>
      <data key="d2">Confidence Score is a numerical value indicating the level of certainty associated with the expected output answer for the questions.</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic-graph">
      <data key="d0">pydantic-graph</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic-graph is a library that enables the creation and execution of graph-based workflows with state persistence systems for e-commerce and other applications.&lt;SEP&gt;pydantic-graph is an async graph and state machine library for Python, developed to work with PydanticAI's utilities.&lt;SEP&gt;pydantic-graph is an asynchronous graph and state machine library for Python that allows for the modeling and execution of complex workflows using type hints and generics.</data>
      <data key="d3">chunk-871f0637563e9955b756f367ef81e17e&lt;SEP&gt;chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Graphs">
      <data key="d0">Graphs</data>
      <data key="d1">category</data>
      <data key="d2">Graphs are abstractions used to model, execute, and visualize complex workflows in software applications.&lt;SEP&gt;Graphs are powerful abstractions used to model, execute, control, and visualize complex workflows in software applications, facilitating sophisticated task management.</data>
      <data key="d3">chunk-871f0637563e9955b756f367ef81e17e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Python">
      <data key="d0">Python</data>
      <data key="d1">category</data>
      <data key="d2">Python evaluates provided Python expressions as part of the evaluation process, although it runs arbitrary code, hence caution is advised.&lt;SEP&gt;Python is a high-level programming language known for its readability and ease of use, widely used in data science, web development, and automation.&lt;SEP&gt;Python is a high-level programming language known for its readability and versatility, widely used for software development in various domains including data science, web, and automation.&lt;SEP&gt;Python is a high-level programming language known for its simplicity and readability, often used for scripting and data analysis.&lt;SEP&gt;Python is a high-level programming language that emphasizes code readability and simplicity, widely used in data science and web development.&lt;SEP&gt;Python is a high-level programming language that supports various programming paradigms and is widely used in software development, data analysis, and artificial intelligence.&lt;SEP&gt;Python is a high-level programming language utilized for developing Gradio applications, specifically emphasizing versions 3.10 and above.&lt;SEP&gt;Python is a programming language used for developing a script that handles streaming structured responses in a structured format.&lt;SEP&gt;Python is a programming language used for developing a script that handles streaming structured responses.&lt;SEP&gt;Python is a specific evaluator used to run arbitrary Python expressions within the given context while ensuring safety against untrusted inputs.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425&lt;SEP&gt;chunk-459acdb5bfa20be2d698a80bc830b084&lt;SEP&gt;chunk-a03d18658927c60177cdcee467ce42b8&lt;SEP&gt;chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-adf88d3c03ef93c71ebadc158c0ef948&lt;SEP&gt;chunk-871f0637563e9955b756f367ef81e17e&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2&lt;SEP&gt;chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="multi-agent workflows">
      <data key="d0">multi-agent workflows</data>
      <data key="d1">category</data>
      <data key="d2">Multi-agent workflows involve systems where multiple autonomous agents collaborate to complete various tasks or solve complex problems, often using structured approaches.&lt;SEP&gt;Multi-agent workflows refer to systems where multiple autonomous agents collaborate to accomplish various tasks or objectives.</data>
      <data key="d3">chunk-871f0637563e9955b756f367ef81e17e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphRunContext">
      <data key="d0">GraphRunContext</data>
      <data key="d1">category</data>
      <data key="d2">GraphRunContext facilitates the management of the execution context during the running of nodes within a stateful graph.&lt;SEP&gt;GraphRunContext is a category that encapsulates the state and management of the runtime context during the execution of graph-based queries.&lt;SEP&gt;GraphRunContext is a class that provides the execution context used during the running of the graph, including state and dependencies.&lt;SEP&gt;GraphRunContext is a class that serves as a context for managing the state and dependencies of a graph in a structured way.&lt;SEP&gt;GraphRunContext is a context manager that orchestrates the execution of nodes in the graph, managing state and transitions.&lt;SEP&gt;GraphRunContext is a context object that manages the state and dependencies for the execution of nodes in the graph.&lt;SEP&gt;GraphRunContext is a framework that manages the execution context of queries within the question graph, providing essential information during the query lifecycle.&lt;SEP&gt;GraphRunContext is a parameter that provides the context for running nodes in a graph, containing the state during execution.&lt;SEP&gt;GraphRunContext is the runtime context for graph execution that maintains state, dependencies, and is passed to nodes to manage their execution in a graph.&lt;SEP&gt;GraphRunContext represents the current state and dependencies of the agent's graph run, encapsulating necessary context for operation.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-871f0637563e9955b756f367ef81e17e&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MyNode">
      <data key="d0">MyNode</data>
      <data key="d1">organization</data>
      <data key="d2">MyNode is a dataclass representing a node in a graph that contains a single integer field `foo` and executes a run method based on its state.</data>
      <data key="d3">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AnotherNode">
      <data key="d0">AnotherNode</data>
      <data key="d1">organization</data>
      <data key="d2">AnotherNode represents a subsequent node in the graph that can be targeted after the current node completes its operation.</data>
      <data key="d3">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DivisibleBy5">
      <data key="d0">DivisibleBy5</data>
      <data key="d1">category</data>
      <data key="d2">DivisibleBy5 is a conditional node that checks if a number is divisible by 5 and routes the flow accordingly.&lt;SEP&gt;DivisibleBy5 is a node class in the graph that checks if a given integer is divisible by 5 and either ends the run or passes to another node.</data>
      <data key="d3">chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Increment">
      <data key="d0">Increment</data>
      <data key="d1">category</data>
      <data key="d2">Increment is a graph node that modifies the state by increasing a number value during processing.&lt;SEP&gt;Increment is a node in the graph that increases a state value when executed.&lt;SEP&gt;Increment is a process or function used to modify a state by increasing its value in the graph context.&lt;SEP&gt;Increment is a processing node that takes an integer value and increments it by one as part of the graph execution.&lt;SEP&gt;Increment is an event node in the graph that represents an operation to increase a certain value in the node's state.&lt;SEP&gt;Increment is an operation or function in the graph that modifies the state by increasing its numeric value.&lt;SEP&gt;Increment represents a node that increases the integer value and sends it to the DivisibleBy5 node for further processing.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="fives_graph">
      <data key="d0">fives_graph</data>
      <data key="d1">organization</data>
      <data key="d2">fives_graph is an instance of the Graph which contains nodes that perform operations on an integer to check divisibility and increment values.</data>
      <data key="d3">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MyState">
      <data key="d0">MyState</data>
      <data key="d1">person</data>
      <data key="d2">MyState is a class representing the state model used in the graph, which holds certain attributes, like 'number' in this example.&lt;SEP&gt;MyState is a class used to maintain state information during the graph run, containing properties for updated values.&lt;SEP&gt;MyState is a data structure representing the state in the increment graph that holds a numeric value.&lt;SEP&gt;MyState is a parameterized state type that can be passed within the graph, allowing nodes to access shared data during execution.&lt;SEP&gt;MyState is a representation of a state object that maintains a numerical value which can be incremented.&lt;SEP&gt;MyState is an object representing shared state associated with nodes in the graph, which can be modified during the execution of GraphRun.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Graph">
      <data key="d0">Graph</data>
      <data key="d1">organization</data>
      <data key="d2">A Graph is a data structure that consists of nodes and edges, used in the context of stateful execution with multiple interconnected nodes for processing data.&lt;SEP&gt;Graph is a data structure consisting of nodes and edges used to represent relationships between entities in the Mermaid code.&lt;SEP&gt;Graph is a data structure that represents a collection of nodes and their relationships, facilitating the Q&amp;A process.&lt;SEP&gt;Graph is a structure used in Pydantic that allows for the creation and management of nodes and edges, representing a network-like structure.&lt;SEP&gt;Graph is a structured framework that organizes nodes and their connections, facilitating the flow of operations and state changes.&lt;SEP&gt;Graph is an entity that represents the overall structure of the vending machine's operation, guiding the flow through nodes.&lt;SEP&gt;Graph is the main structure in the pydantic_graph framework that represents a collection of interconnected nodes that can be executed in a sequence.&lt;SEP&gt;Graph is the primary class for defining a sequence of nodes that can be executed in a structured manner.&lt;SEP&gt;Graph is the structure that facilitates the execution flow of nodes, managing the state and execution sequence within the graph framework.&lt;SEP&gt;Graph refers to a collection of interconnected nodes representing various computations or data transformations within an execution framework.&lt;SEP&gt;Graph refers to a structure that organizes nodes and manages the flow of operations in a stateful manner for user interactions.&lt;SEP&gt;Graph refers to a structured representation of nodes and their connections, commonly used in data processing and algorithms.&lt;SEP&gt;Graph represents a data structure that models a collection of nodes and the relationships between them, enabling the flow of operations in a system.&lt;SEP&gt;Graph represents a structure that manages nodes and their relationships, allowing for dynamic execution and evaluation.&lt;SEP&gt;The Graph is a data structure used to represent a collection of nodes, which may be interconnected, allowing for complex operations and traversals.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96&lt;SEP&gt;chunk-9f106548aed70137ff14bc29aa95f4ba&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-084c0bc189005e46b59c6a368ad8ed78&lt;SEP&gt;chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-9a99cfa8ff8a41ea240361d13d4e41ec&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Pydantic Graph">
      <data key="d0">Pydantic Graph</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic Graph is a library that provides foundational components, like BaseNode and GraphRunContext, for constructing and managing directed graphs in Python applications.</data>
      <data key="d3">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="parameterization">
      <data key="d0">parameterization</data>
      <data key="d1">category</data>
      <data key="d2">Parameterization refers to the way in which nodes are defined in terms of types, such as state, dependencies, and return types.</data>
      <data key="d3">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="state">
      <data key="d0">state</data>
      <data key="d1">category</data>
      <data key="d2">State is an abstract concept in graph execution that allows nodes to access and modify shared variables as the graph is executed.&lt;SEP&gt;State refers to the current configuration or data associated with the graph, maintained within the GraphRunContext.&lt;SEP&gt;State represents the current value stored within a node, which can be modified during graph execution.&lt;SEP&gt;state refers to the condition of the system or variables during the execution of a graph, which can be modified as the graph runs.&lt;SEP&gt;state refers to the current conditions or parameters defining the Agent's operational context during task execution.&lt;SEP&gt;state represents the initial value or condition of the graph at the start of execution.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deps">
      <data key="d0">deps</data>
      <data key="d1">category</data>
      <data key="d2">Deps refers to dependencies that can be injected into nodes as part of their configuration, although some nodes may not use them.&lt;SEP&gt;Deps refers to the dependencies that a graph node may have, influencing its execution and state transitions.&lt;SEP&gt;Deps refers to the dependency parameter used in the context of Pydantic AI to determine the tools registered for a specific execution run.&lt;SEP&gt;Deps represents the dependencies required by the graph, which ensures that all necessary components are available during execution.&lt;SEP&gt;deps is a parameter that denotes any dependencies required for the agent run, providing essential context for execution.&lt;SEP&gt;deps is a reference to the dependencies that may be needed for the agent's operation, crucial for setting up its environment.&lt;SEP&gt;deps refers to the dependencies associated with a particular node in the graph, influencing its execution.&lt;SEP&gt;deps represent dependencies required for the agent’s operation, including tools and other factors necessary for execution.&lt;SEP&gt;deps represent the dependencies required for executing the graph operations.&lt;SEP&gt;deps represents dependencies in the execution graph, indicating relationships and requirements between different nodes.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Vending Machine">
      <data key="d0">Vending Machine</data>
      <data key="d1">category</data>
      <data key="d2">A vending machine is an automated machine that dispenses products such as snacks and beverages when a user inserts coins and makes a selection.</data>
      <data key="d3">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MachineState">
      <data key="d0">MachineState</data>
      <data key="d1">organization</data>
      <data key="d2">MachineState is a dataclass representing the state of the vending machine, including user balance and selected product.</data>
      <data key="d3">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="InsertCoin">
      <data key="d0">InsertCoin</data>
      <data key="d1">event</data>
      <data key="d2">InsertCoin is a node event in the vending machine graph where the user is prompted to insert coins.&lt;SEP&gt;InsertCoin is a node in a graph that symbolizes the action of inserting coins into a vending machine, initiating a sequence of events.&lt;SEP&gt;InsertCoin is an action event in a vending machine scenario that initiates the sequence of interactions leading to a product purchase.</data>
      <data key="d3">chunk-9f106548aed70137ff14bc29aa95f4ba&lt;SEP&gt;chunk-9a99cfa8ff8a41ea240361d13d4e41ec&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="CoinsInserted">
      <data key="d0">CoinsInserted</data>
      <data key="d1">event</data>
      <data key="d2">CoinsInserted is a node event that handles the coins inserted by the user, updating their balance.&lt;SEP&gt;CoinsInserted is a node indicating that coins have been successfully inserted into the vending machine, allowing further actions to be taken.</data>
      <data key="d3">chunk-9f106548aed70137ff14bc29aa95f4ba&lt;SEP&gt;chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SelectProduct">
      <data key="d0">SelectProduct</data>
      <data key="d1">event</data>
      <data key="d2">SelectProduct is a node event that allows the user to select a product after inserting coins.</data>
      <data key="d3">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Purchase">
      <data key="d0">Purchase</data>
      <data key="d1">event</data>
      <data key="d2">Purchase is a node event that processes the user's selection and attempts to complete the transaction.&lt;SEP&gt;Purchase signifies a node where a selection is confirmed and a transaction occurs in the vending machine sequence.</data>
      <data key="d3">chunk-9f106548aed70137ff14bc29aa95f4ba&lt;SEP&gt;chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PRODUCT_PRICES">
      <data key="d0">PRODUCT_PRICES</data>
      <data key="d1">organization</data>
      <data key="d2">PRODUCT_PRICES is a dictionary mapping product names to their corresponding prices in the vending machine.</data>
      <data key="d3">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphRunResult">
      <data key="d0">GraphRunResult</data>
      <data key="d1">category</data>
      <data key="d2">GraphRunResult encapsulates the final results of a completed graph run, including state and output data.&lt;SEP&gt;GraphRunResult encapsulates the outcome of a graph execution, containing data that reflects the results after processing through the nodes of a graph.&lt;SEP&gt;GraphRunResult is a category of data containing results from a graph run, including the final state.&lt;SEP&gt;GraphRunResult is a class that encapsulates the outcome of executing a graph, detailing the results of node operations.&lt;SEP&gt;GraphRunResult is a data class that holds the output of running a graph along with its current state and persistence details.&lt;SEP&gt;GraphRunResult is a type that contains the final output after the execution of a graph, including the last state and execution history.&lt;SEP&gt;GraphRunResult refers to the outcome of executing a graph run, providing both final data and a history of actions taken during the run.</data>
      <data key="d3">chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-9f106548aed70137ff14bc29aa95f4ba&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="vending_machine_graph">
      <data key="d0">vending_machine_graph</data>
      <data key="d1">organization</data>
      <data key="d2">vending_machine_graph is a structure representing the workflow of states and operations within a vending machine's functionality, including node interactions and transitions.&lt;SEP&gt;vending_machine_graph refers to the component that models the state and transitions of a vending machine interaction.</data>
      <data key="d3">chunk-9f106548aed70137ff14bc29aa95f4ba&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RunEndT">
      <data key="d0">RunEndT</data>
      <data key="d1">category</data>
      <data key="d2">RunEndT denotes the type that signifies the conclusion of a graph's execution run in this context.&lt;SEP&gt;RunEndT is a generic parameter related to the end state of a graph run, indicating that a node can complete the flow.&lt;SEP&gt;RunEndT is a generic type parameter representing the result type of running the graph.&lt;SEP&gt;RunEndT is a parameterized type that represents the end state of a run, helping to define the result after executing a graph node.&lt;SEP&gt;RunEndT is a placeholder representing the outcome or end state of a node's execution process.&lt;SEP&gt;RunEndT is a type placeholder representing the endpoint state in the state management system.&lt;SEP&gt;RunEndT is a type variable representing the endpoint state of a graph after its execution is complete.&lt;SEP&gt;RunEndT is a type variable used for defining the return type from a node in the graph's run process.&lt;SEP&gt;RunEndT is the type parameter representing the expected output type after the graph run is completed.&lt;SEP&gt;RunEndT refers to a type indicating nodes that can signify the end of a graph execution sequence.&lt;SEP&gt;RunEndT refers to the type associated with the end state of a run in a graph, often used in managing the completion status and results of node executions.&lt;SEP&gt;RunEndT refers to the type that represents the result of a graph run, utilized within the context of the snapshot.&lt;SEP&gt;RunEndT represents a type used for defining the end result of a graph run, contributing to the overall structure of the graph run.&lt;SEP&gt;RunEndT signifies the ending type of the run in the graph, marking the completion of the execution cycle.&lt;SEP&gt;RunEndT signifies the type representing the end of a graph run in this context.&lt;SEP&gt;RunEndT signifies the type that represents termination of a node's execution, used for tracking the end state in graphs.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-9f106548aed70137ff14bc29aa95f4ba&lt;SEP&gt;chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-670369b8b58da5fb06501c822216b094&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mermaid diagrams">
      <data key="d0">mermaid diagrams</data>
      <data key="d1">event</data>
      <data key="d2">Mermaid diagrams are visual representations generated from the graph structure, providing an overview of states and transitions in a sequential format.</data>
      <data key="d3">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="vending_machine_diagram.py">
      <data key="d0">vending_machine_diagram.py</data>
      <data key="d1">event</data>
      <data key="d2">vending_machine_diagram.py is a Python script that illustrates the state diagram of the vending machine's operational flow.</data>
      <data key="d3">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="feedback_graph">
      <data key="d0">feedback_graph</data>
      <data key="d1">event</data>
      <data key="d2">feedback_graph is a structure that outlines the process of writing and reviewing an email, involving interactions between different agents.</data>
      <data key="d3">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GenAI Example">
      <data key="d0">GenAI Example</data>
      <data key="d1">event</data>
      <data key="d2">GenAI Example refers to a demonstration of how GenAI can be utilized to generate and refine feedback on user communications.</data>
      <data key="d3">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="John">
      <data key="d0">John</data>
      <data key="d1">person</data>
      <data key="d2">John is a hypothetical customer represented in the examples, serving to illustrate how the support agent interacts with users.&lt;SEP&gt;John is a person who is welcomed in the tech blog, suggesting an engaging, interactive environment.&lt;SEP&gt;John is a person who receives a welcome message in the Tech Blog, indicating his engagement with the platform.&lt;SEP&gt;John is a placeholder name used in the example to represent a bank customer querying about their account balance.</data>
      <data key="d3">chunk-55b19c469f8836f1d1e39ae4cb918116&lt;SEP&gt;chunk-e7563a1a76b149778e790581bfc9c864</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tech Blog">
      <data key="d0">Tech Blog</data>
      <data key="d1">organization</data>
      <data key="d2">The Tech Blog is an online platform providing technology-related content, analysis, and discussions.&lt;SEP&gt;The Tech Blog serves as an online platform for sharing technology-related content and discussions.</data>
      <data key="d3">chunk-e7563a1a76b149778e790581bfc9c864</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FileStatePersistence">
      <data key="d0">FileStatePersistence</data>
      <data key="d1">organization</data>
      <data key="d2">FileStatePersistence is a class that handles the persistence of state snapshots, allowing for storage and retrieval of graph data.&lt;SEP&gt;FileStatePersistence is a component within the Pydantic Graph framework that handles saving and loading the state of a graph in a file.&lt;SEP&gt;FileStatePersistence is a dataclass that manages state persistence for graph runs using a JSON file.&lt;SEP&gt;FileStatePersistence is a mechanism that saves and retrieves the state of the question graph to and from a file.&lt;SEP&gt;FileStatePersistence is a system for preserving the state of the application to allow for continuity and data management.&lt;SEP&gt;FileStatePersistence is a system used for saving graph snapshots to a JSON file, allowing graph runs to be persisted and resumed later.&lt;SEP&gt;FileStatePersistence is designed to store snapshots as JSON files, enabling graph runs to be persisted between executions.</data>
      <data key="d3">chunk-7852caa62e172f96d8bc0edb1b849a3f&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee&lt;SEP&gt;chunk-1874d189c1d13783a0a35c4fe1c8d046&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="CountDown">
      <data key="d0">CountDown</data>
      <data key="d1">event</data>
      <data key="d2">CountDown is a process or function within the pydantic-graph library that counts down from a specified number as part of a workflow.</data>
      <data key="d3">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Returns Workflow">
      <data key="d0">Returns Workflow</data>
      <data key="d1">event</data>
      <data key="d2">Returns Workflow refers to the process in e-commerce that involves how items are returned to the returns center, including conditions that might delay execution.</data>
      <data key="d3">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic">
      <data key="d0">pydantic</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic is a data validation and settings management library for Python that is used in the script to validate structured data.&lt;SEP&gt;Pydantic is a data validation and settings management library for Python that uses type annotations.&lt;SEP&gt;Pydantic is a data validation and settings management library for Python used in the script to validate structured data.&lt;SEP&gt;pydantic is a data validation library in Python that forms the foundation for the pydantic-graph library, enabling easy definition and validation of data structures.</data>
      <data key="d3">chunk-a03d18658927c60177cdcee467ce42b8&lt;SEP&gt;chunk-efc722ebd98256b20f6a17746e03016e&lt;SEP&gt;chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeSnapshot">
      <data key="d0">NodeSnapshot</data>
      <data key="d1">category</data>
      <data key="d2">NodeSnapshot captures the current state of a Node in the pydantic_graph during its execution, storing necessary data for later use.&lt;SEP&gt;NodeSnapshot is a class that describes the history of a node's execution in a graph, including state, node details, and timestamps.&lt;SEP&gt;NodeSnapshot is a data structure representing a snapshot of the state in the graph, containing attributes like duration and status that can be recorded.&lt;SEP&gt;NodeSnapshot is a specific type of Snapshot that captures the state and node information during the execution of the graph.&lt;SEP&gt;NodeSnapshot is a specific type of Snapshot that reflects the state and status of a particular node in the graph during execution.&lt;SEP&gt;NodeSnapshot is a type of snapshot specific to a node in the graph, capturing its state and attributes during its operation.&lt;SEP&gt;NodeSnapshot is a type used in the code to represent a specific state in the graph, with attributes like duration and status.&lt;SEP&gt;NodeSnapshot refers to a data structure that captures the state of a graph at specific points during its execution, allowing for persistence and recovery.&lt;SEP&gt;NodeSnapshot refers to the data structure that stores the state of a graph node at a specific point in time, specifically for persistence.&lt;SEP&gt;NodeSnapshot represents a snapshot of a node in the graph during a state persistence run.&lt;SEP&gt;NodeSnapshot represents a snapshot of a node's state at a specific point in time during execution.&lt;SEP&gt;NodeSnapshot represents the state of a specific node in the graph at a given point in time, crucial for resuming graph execution.</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-7852caa62e172f96d8bc0edb1b849a3f&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee&lt;SEP&gt;chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-1874d189c1d13783a0a35c4fe1c8d046&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-670369b8b58da5fb06501c822216b094&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EndSnapshot">
      <data key="d0">EndSnapshot</data>
      <data key="d1">category</data>
      <data key="d2">EndSnapshot captures the final state and result of a node's operations in the graph.&lt;SEP&gt;EndSnapshot is a data structure that records the state of a graph at the end of a run, contributing to the overall persistence mechanisms in the library.&lt;SEP&gt;EndSnapshot is a history step describing the end of a graph run, encapsulating the final state, result, and timestamp of the execution.&lt;SEP&gt;EndSnapshot is a type of Snapshot that captures the final state and results once a graph run has completed.&lt;SEP&gt;EndSnapshot is the final state of a graph run, indicating completion of all processes within the graph.&lt;SEP&gt;EndSnapshot represents the concluding nature of a run, storing the final state and results of a graph execution.</data>
      <data key="d3">chunk-7852caa62e172f96d8bc0edb1b849a3f&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PostgresQL">
      <data key="d0">PostgresQL</data>
      <data key="d1">organization</data>
      <data key="d2">PostgresQL is a relational database system that developers can use to implement custom state persistence for graph runs in pydantic-graph.</data>
      <data key="d3">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SimpleStatePersistence">
      <data key="d0">SimpleStatePersistence</data>
      <data key="d1">organization</data>
      <data key="d2">SimpleStatePersistence is a class within the pydantic_graph framework that provides simple in-memory state persistence, retaining only the most recent snapshot.&lt;SEP&gt;SimpleStatePersistence is a default implementation of state persistence for graphs, providing basic state handling capabilities.&lt;SEP&gt;SimpleStatePersistence is a default implementation of the BaseStatePersistence interface in the graph execution context.&lt;SEP&gt;SimpleStatePersistence is an implementation of state persistence that keeps the latest snapshot in memory for quick access.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FullStatePersistence">
      <data key="d0">FullStatePersistence</data>
      <data key="d1">organization</data>
      <data key="d2">FullStatePersistence is a class in PydanticGraph that handles the persistence of full state snapshots in JSON format.&lt;SEP&gt;FullStatePersistence is a class that holds a history of all snapshots during a graph run, allowing for comprehensive state management.&lt;SEP&gt;FullStatePersistence is an enhanced state persistence mechanism that maintains a list of snapshots in memory for detailed state management.</data>
      <data key="d3">chunk-1874d189c1d13783a0a35c4fe1c8d046&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="count_down_graph">
      <data key="d0">count_down_graph</data>
      <data key="d1">event</data>
      <data key="d2">count_down_graph is an example workflow in pydantic-graph that represents a countdown operation integrated with state persistence.</data>
      <data key="d3">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="QuestionState">
      <data key="d0">QuestionState</data>
      <data key="d1">category</data>
      <data key="d2">QuestionState is a data model that keeps track of the current question context and messages throughout user interactions.&lt;SEP&gt;QuestionState is a data structure that holds the state of a question and its associated messages in the context of a graph for asking and evaluating questions.&lt;SEP&gt;QuestionState is a data structure that holds the state of a question and its associated messages in the process of query handling.&lt;SEP&gt;QuestionState is a state management structure that tracks the progress of a question being asked within a graph execution.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Ask">
      <data key="d0">Ask</data>
      <data key="d1">event</data>
      <data key="d2">Ask is a node that prompts the user for a question in the question graph, representing the initiating action of the Q&amp;A process.&lt;SEP&gt;Ask is a node within the question graph that initiates the process of querying a user for input.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Answer">
      <data key="d0">Answer</data>
      <data key="d1">event</data>
      <data key="d2">Answer is a category representing the output generated from running queries in the question_graph.&lt;SEP&gt;Answer is a node that captures the response to a given question, representing user interaction within the graph.&lt;SEP&gt;Answer is a node that waits for the user to provide an answer to the question posed by the Ask node.&lt;SEP&gt;The Answer node captures the user's response when prompted for an answer to a question.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluate">
      <data key="d0">Evaluate</data>
      <data key="d1">event</data>
      <data key="d2">Evaluate is a class responsible for judging answers and deciding on next steps within the context of the question_graph.&lt;SEP&gt;Evaluate is a node responsible for assessing whether the provided answer is correct based on the previous question.&lt;SEP&gt;Evaluate is a node that assesses the correctness of the user's answer, part of the question and answer evaluation process.&lt;SEP&gt;Evaluate refers to the action of assessing or determining the value or quality of something, often leading to a decision or opinion.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-acdd5d00db08de930d2f205385fbf543&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Reprimand">
      <data key="d0">Reprimand</data>
      <data key="d1">event</data>
      <data key="d2">Reprimand is a node that provides feedback and prompts the user to answer again if their previous response was incorrect.&lt;SEP&gt;Reprimand is a node that provides feedback on the user’s answer and prompts a follow-up question if the answer is incorrect.&lt;SEP&gt;Reprimand is an event that occurs when an answer is judged unsatisfactory, which may trigger corrective actions within the system.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluationResult">
      <data key="d0">EvaluationResult</data>
      <data key="d1">category</data>
      <data key="d2">EvaluationResult details individual evaluations including their names, values, reasons, and sources for a deeper insight into the evaluation process.&lt;SEP&gt;EvaluationResult is a model that encapsulates the result of an evaluation, indicating whether the user's answer was correct and providing comments.&lt;SEP&gt;The EvaluationResult represents the outcome of an evaluation process, indicating whether it meets specified criteria or matches expected results.</data>
      <data key="d3">chunk-b3a62dd1e4feda3a9c3f07deba46161f&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BaseModel">
      <data key="d0">BaseModel</data>
      <data key="d1">organization</data>
      <data key="d2">BaseModel is a class from Pydantic used to create data models with validation.&lt;SEP&gt;BaseModel is a class from the Pydantic library that provides data validation and settings management using Python type annotations.&lt;SEP&gt;BaseModel is a class in Pydantic that serves as the foundation for creating data models with defined fields and validation rules.&lt;SEP&gt;BaseModel is a class utilized for creating data models that include fields with specific attributes and validations.&lt;SEP&gt;BaseModel is a foundational class from the 'dataclasses' library used to create data models in a structured format.&lt;SEP&gt;BaseModel is a foundational class in the pydantic library that provides the functionality for defining data models in Python.&lt;SEP&gt;BaseModel is a foundational class that provides core functionalities for data modeling using Pydantic.&lt;SEP&gt;BaseModel is a foundational model framework that stipulates required fields and schemas for data validation in Python applications.&lt;SEP&gt;BaseModel serves as a foundational class for creating data models in this reporting system.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30&lt;SEP&gt;chunk-c0417af0fa24429ddd11fe9cfa92e39e&lt;SEP&gt;chunk-9a9bc262ebbbdd42a17a84adee4a7f9d&lt;SEP&gt;chunk-efc722ebd98256b20f6a17746e03016e&lt;SEP&gt;chunk-ef4c7193cda16c30962e01194bc308c7&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Node">
      <data key="d0">Node</data>
      <data key="d1">category</data>
      <data key="d2">Node is a conceptual structure within the agent's execution flow, representing distinct stages or points of interest during processing.&lt;SEP&gt;Node is a general term for any unit of work or operation that the agent processes during its run, including user inputs and model requests.&lt;SEP&gt;Node is an element within the graph structure that performs tasks or computations based on defined inputs and states.&lt;SEP&gt;Node refers to an individual element in a graph that can perform a specific task or operation during the execution of a graph.&lt;SEP&gt;Node refers to an individual element within a graph, representing a point of data or activity in the pydantic_graph structure.&lt;SEP&gt;Node refers to the components of the graph which represent states, actions, or conditions in the context of a graph-based interaction.&lt;SEP&gt;Node represents a generic node within computational structures, serving as the building block for complex behaviors in the agent's model.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="format_as_xml">
      <data key="d0">format_as_xml</data>
      <data key="d1">category</data>
      <data key="d2">format_as_xml is a function that transforms data structures into an XML format for output or processing.</data>
      <data key="d3">chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="input">
      <data key="d0">input</data>
      <data key="d1">person</data>
      <data key="d2">input refers to the user's response or data entered during interaction with the Q&amp;A system.</data>
      <data key="d3">chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sys">
      <data key="d0">sys</data>
      <data key="d1">organization</data>
      <data key="d2">Sys is a Python module that provides functions and parameters to interact with the Python runtime environment, such as command-line arguments.&lt;SEP&gt;sys is a standard library in Python used to interact with the interpreter and access system functionality.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Path">
      <data key="d0">Path</data>
      <data key="d1">category</data>
      <data key="d2">Path is a class from the 'pathlib' library that provides an object-oriented interface for filesystem paths.&lt;SEP&gt;Path is a class from the pathlib module in Python that represents a filesystem path, providing methods to handle file system paths.&lt;SEP&gt;Path is a class or type from the 'pathlib' module in Python used for handling filesystem paths in a platform-independent way.&lt;SEP&gt;Path is a datatype that represents file system paths, utilized here for specifying locations related to files or outputs in the dataset model.&lt;SEP&gt;Path is a representation of a filesystem path that indicates where JSON files containing snapshots are stored.&lt;SEP&gt;Path is a representation of filesystem paths used to locate the JSON file where snapshots are stored.&lt;SEP&gt;Path is a type representing file system paths in a flexible manner, allowing for easier handling of directories and files in programming.&lt;SEP&gt;Path is a type that specifies the location or address where files can be saved.&lt;SEP&gt;Path refers to a class path specification in Python that guides how modules and packages are resolved when imported.&lt;SEP&gt;Path refers to a utility in Python used for handling and manipulating filesystem paths.&lt;SEP&gt;Path represents the file system path where images can be saved, a critical aspect of the mermaid_save function.&lt;SEP&gt;The Path is used to represent file system paths in the context of loading datasets from files.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-a58389fcd1596d9d04e1ed8f3cd54773&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-1874d189c1d13783a0a35c4fe1c8d046&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-e8b0da52016600c1ab9198b94278d4ae&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e&lt;SEP&gt;chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphRun">
      <data key="d0">GraphRun</data>
      <data key="d1">category</data>
      <data key="d2">GraphRun is a class designed for executing graph nodes, managing transitions and state throughout the graph's run.&lt;SEP&gt;GraphRun is a class that handles the execution of the graph nodes, managing the state and transitions between nodes.&lt;SEP&gt;GraphRun is a process or object representing the execution of a graph starting from a specified node.&lt;SEP&gt;GraphRun is a process that facilitates the execution of a graph, managing its nodes and their interactions.&lt;SEP&gt;GraphRun is a stateful, async-iterable entity representing a run of a Graph, allowing for iteration over nodes as they execute.&lt;SEP&gt;GraphRun is an async-iterable run of a Graph, allowing iteration through nodes in the graph by starting from a specific node and maintaining state.&lt;SEP&gt;GraphRun is an event that encapsulates the execution of a graph, allowing for async iteration over nodes as they are processed.&lt;SEP&gt;GraphRun is an event that represents the execution of nodes in a graph, allowing for asynchronous iteration and monitoring of state.&lt;SEP&gt;GraphRun manages the state of the agent during its execution and controls the flow through the agent's graph.&lt;SEP&gt;GraphRun refers to the execution context for a graph that can be iterated to drive its completion in asynchronous programming.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-084c0bc189005e46b59c6a368ad8ed78&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Snapshot">
      <data key="d0">Snapshot</data>
      <data key="d1">category</data>
      <data key="d2">Snapshot is a general representation of a state record, capturing the history in graph runs.&lt;SEP&gt;Snapshot is a representation of the state at a certain time during the graph run, capturing historical data along with specific attributes.&lt;SEP&gt;Snapshot is a structure that holds the state at a particular moment in time, capturing the information necessary for state restoration and analysis.&lt;SEP&gt;Snapshot is an abstract representation of a particular state of a graph during execution, detailing key information about the process.&lt;SEP&gt;Snapshot refers to a collection of states recorded within a NodeSnapshot, representing various points in time.&lt;SEP&gt;Snapshot refers to a collection of states that are recorded and managed within a NodeSnapshot.&lt;SEP&gt;Snapshot represents a recorded state of the graph during its execution, allowing for state persistence and retrieval.</data>
      <data key="d3">chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee&lt;SEP&gt;chunk-1874d189c1d13783a0a35c4fe1c8d046&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ProcessPoolExecutor">
      <data key="d0">ProcessPoolExecutor</data>
      <data key="d1">organization</data>
      <data key="d2">ProcessPoolExecutor is a parallel computing construct that allows execution of tasks in separate processes, usually improving performance in compute-heavy scenarios.</data>
      <data key="d3">chunk-241cea24e0ec8915cd8b8580f86bf720</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Python 3.10+">
      <data key="d0">Python 3.10+</data>
      <data key="d1">version</data>
      <data key="d2">Python 3.10+ is the minimum version of the Python programming language required to run the Gradio applications mentioned in the text.&lt;SEP&gt;Python 3.10+ is the software version required to run the code samples provided in the text.</data>
      <data key="d3">chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="question_graph">
      <data key="d0">question_graph</data>
      <data key="d1">organization</data>
      <data key="d2">The question_graph is a component in a programming environment that manages queries and statistical evaluations.</data>
      <data key="d3">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="image.png">
      <data key="d0">image.png</data>
      <data key="d1">event</data>
      <data key="d2">image.png is an output file generated to visual representation of the query processing states within the question_graph.</data>
      <data key="d3">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="success">
      <data key="d0">success</data>
      <data key="d1">event</data>
      <data key="d2">Success is an event indicating that the evaluation process was completed successfully, often leading to the next steps in the workflow.</data>
      <data key="d3">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="question_graph.mermaid_save">
      <data key="d0">question_graph.mermaid_save</data>
      <data key="d1">category</data>
      <data key="d2">question_graph.mermaid_save is a method used to generate visual representations of the state and relationships of nodes in a question graph.</data>
      <data key="d3">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Vertex AI">
      <data key="d0">Vertex AI</data>
      <data key="d1">organization</data>
      <data key="d2">Vertex AI is Google's comprehensive AI platform that supports various AI and machine learning services, including access to the Gemini models.&lt;SEP&gt;Vertex AI is Google's platform that provides AI and machine learning services, including access to Gemini models.&lt;SEP&gt;Vertex AI is a cloud-based machine learning platform provided by Google that facilitates the development, deployment, and management of AI models and applications.&lt;SEP&gt;Vertex AI is a product of Google that provides AI and machine learning services, focusing on ease of use in document processing.</data>
      <data key="d3">chunk-fbac2cd26b16d89a2ad3c129160b997b&lt;SEP&gt;chunk-a4e01bd25dcff46059903d23d9198862&lt;SEP&gt;chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Google AI">
      <data key="d0">Google AI</data>
      <data key="d1">organization</data>
      <data key="d2">Google AI is a branch of Google focused on developing artificial intelligence technologies and applications.&lt;SEP&gt;Google AI is a division of Google that focuses on developing cutting-edge artificial intelligence technologies and applications.</data>
      <data key="d3">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GitHub">
      <data key="d0">GitHub</data>
      <data key="d1">organization</data>
      <data key="d2">GitHub is a platform for version control and collaboration that allows developers to share and work on code.&lt;SEP&gt;GitHub is a web-based platform for version control and collaboration, widely used for software development and managing code repositories.</data>
      <data key="d3">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DocumentUrl">
      <data key="d0">DocumentUrl</data>
      <data key="d1">category</data>
      <data key="d2">DocumentUrl handles links to document resources, supporting the incorporation of document content in inputs.&lt;SEP&gt;DocumentUrl is a category of input that allows users to provide URL references for documents to be processed by AI.&lt;SEP&gt;DocumentUrl is a class that encapsulates a URL to a document, providing functionality to retrieve its media type.&lt;SEP&gt;DocumentUrl is a data class that represents a URL pointing to documents, facilitating the retrieval of the document's media type.&lt;SEP&gt;DocumentUrl is a type of content that points to documents referred to within the user prompts.&lt;SEP&gt;DocumentUrl refers to a method of providing a direct URL link to a document, which can be processed by AI models.&lt;SEP&gt;DocumentUrl refers to a type of input item representing a link or reference to an external document, though its implementation is marked as not supported in the context provided.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-53688e690a1714927cd95fd846af7f81&lt;SEP&gt;chunk-fbac2cd26b16d89a2ad3c129160b997b&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BinaryContent">
      <data key="d0">BinaryContent</data>
      <data key="d1">category</data>
      <data key="d2">BinaryContent is a method of inputting raw binary data directly into AI systems, enabling the processing of various file types.&lt;SEP&gt;BinaryContent manages binary data types like images and documents, providing means to handle various formats effectively.&lt;SEP&gt;BinaryContent refers to a dataclass representing binary data such as audio, images, or documents, characterized by attributes that describe its data and media type.&lt;SEP&gt;BinaryContent refers to a method of input used for directly passing binary data, such as document files, into the AI model.&lt;SEP&gt;BinaryContent represents any non-textual data formats, such as documents or images, utilized in the AI interaction model.&lt;SEP&gt;BinaryContent signifies data that is encoded and passed as a part of the UserPromptPart for processing.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-fbac2cd26b16d89a2ad3c129160b997b&lt;SEP&gt;chunk-cfb555b3d68851a2fa259151f0745e2a&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Installation Process">
      <data key="d0">Installation Process</data>
      <data key="d1">event</data>
      <data key="d2">The installation process covers steps to install PydanticAI on Python, enabling users to utilize its features for AI-related tasks.</data>
      <data key="d3">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Installation">
      <data key="d0">Installation</data>
      <data key="d1">event</data>
      <data key="d2">The installation process of PydanticAI involves steps to install and set up the library in a Python environment for use.</data>
      <data key="d3">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="main.py">
      <data key="d0">main.py</data>
      <data key="d1">category</data>
      <data key="d2">main.py is a sample script demonstrating how to use PydanticAI to interact with AI models using DocumentUrl and BinaryContent.</data>
      <data key="d3">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Logfire Setup">
      <data key="d0">Logfire Setup</data>
      <data key="d1">event</data>
      <data key="d2">Logfire Setup refers to the configuration steps required to integrate Pydantic Logfire with PydanticAI for enhanced functionality.</data>
      <data key="d3">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PyPI">
      <data key="d0">PyPI</data>
      <data key="d1">organization</data>
      <data key="d2">PyPI is a comprehensive repository for Python packages, where users can find, install, and manage Python libraries and dependencies.&lt;SEP&gt;PyPI is a repository for Python packages, where users can install and manage Python libraries and dependencies.</data>
      <data key="d3">chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Cohere">
      <data key="d0">Cohere</data>
      <data key="d1">organization</data>
      <data key="d2">Cohere is a company that provides AI language models and tools for businesses and developers.&lt;SEP&gt;Cohere is a company that provides AI model solutions, specializing in natural language processing.&lt;SEP&gt;Cohere is a company that provides machine learning models and APIs, and is available for installation via PyPI.&lt;SEP&gt;Cohere is a company that provides natural language processing models and APIs, facilitating different AI functions.&lt;SEP&gt;Cohere is a company that provides powerful machine learning models and APIs, which can be installed via the PyPI repository.&lt;SEP&gt;Cohere specializes in AI language processing solutions and provides access to their models via an API.&lt;SEP&gt;Cohere specializes in providing AI language processing solutions and offers access to their models through an API for various applications.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d&lt;SEP&gt;chunk-803ad293de9341cf22215ab0b0f22dbe&lt;SEP&gt;chunk-96f0c03aabc444033deba6ca7c09ac6a&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Weather Agent">
      <data key="d0">Weather Agent</data>
      <data key="d1">event</data>
      <data key="d2">The Weather Agent is an example application in Pydantic Logfire that demonstrates the platform's capabilities in monitoring and debugging machine learning models.&lt;SEP&gt;The Weather Agent is an example application that showcases the capabilities of Logfire in monitoring and debugging AI runs.</data>
      <data key="d3">chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Pydantic AI">
      <data key="d0">Pydantic AI</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic AI is a library that facilitates the use of Python data classes for building AI models and applications, equipped with observability functionalities.&lt;SEP&gt;Pydantic AI is an organization involved in developing and providing AI models and tools, focusing on efficient request handling and data validation in programming.&lt;SEP&gt;Pydantic AI is presumably behind the development of the Agent framework used to handle prompt and conversation management.</data>
      <data key="d3">chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77&lt;SEP&gt;chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HTTPX">
      <data key="d0">HTTPX</data>
      <data key="d1">category</data>
      <data key="d2">HTTPX is a category of HTTP clients used for making requests in Python applications, which can be instrumented for monitoring purposes.&lt;SEP&gt;HTTPX is a fully featured HTTP client for Python 3, offering synchronization and asynchronous APIs and useful for making HTTP requests.</data>
      <data key="d3">chunk-459acdb5bfa20be2d698a80bc830b084&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="100m Sprint Record">
      <data key="d0">100m Sprint Record</data>
      <data key="d1">event</data>
      <data key="d2">The 100m sprint record refers to the benchmark in athletics that is often targeted by sprinters.</data>
      <data key="d3">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Capital of France">
      <data key="d0">Capital of France</data>
      <data key="d1">geo</data>
      <data key="d2">The capital of France is Paris, which is an important geographical reference in the context of the document.</data>
      <data key="d3">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HTTPX Instrumentation">
      <data key="d0">HTTPX Instrumentation</data>
      <data key="d1">event</data>
      <data key="d2">HTTPX Instrumentation refers to the process of adding monitoring capabilities to HTTPX requests in an application.</data>
      <data key="d3">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Logfire SDK">
      <data key="d0">Logfire SDK</data>
      <data key="d1">organization</data>
      <data key="d2">The Logfire SDK provides tools to integrate monitoring capabilities into applications, utilizing OpenTelemetry for performance insights.</data>
      <data key="d3">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="InstrumentationSettings">
      <data key="d0">InstrumentationSettings</data>
      <data key="d1">category</data>
      <data key="d2">InstrumentationSettings are configuration settings used in PydanticAI for customizing the instrumentation of the AI models.&lt;SEP&gt;InstrumentationSettings are configurations related to monitoring and instrumenting the operating settings of the agents.&lt;SEP&gt;InstrumentationSettings is a configuration class used to set up options for instrumenting requests in the Pydantic model.&lt;SEP&gt;InstrumentationSettings is defined to provide options for instrumenting models and agents with OpenTelemetry for monitoring and debugging.&lt;SEP&gt;InstrumentationSettings provides options for instrumenting models and agents with OpenTelemetry for monitoring and debugging.&lt;SEP&gt;InstrumentationSettings provides settings for instrumenting the agent, often for monitoring and debugging purposes.&lt;SEP&gt;InstrumentationSettings refers to a configuration structure that determines how tracing and monitoring are applied in an application, specifically for OpenTelemetry instrumentation.&lt;SEP&gt;InstrumentationSettings relate to settings for tracking and monitoring performance metrics within the Agent.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-5b7a596ee9422b565de815722b0e31dc&lt;SEP&gt;chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-23dd09bcb6c976f2167345bb77e402ff&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="JSON Array">
      <data key="d0">JSON Array</data>
      <data key="d1">category</data>
      <data key="d2">JSON Array refers to a data format used to capture events in PydanticAI runs, impacting how monitored data is processed.</data>
      <data key="d3">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RunResult">
      <data key="d0">RunResult</data>
      <data key="d1">category</data>
      <data key="d2">RunResult is a data structure that encapsulates the outcome of executing commands within the Agent framework, holding key methods for message management.&lt;SEP&gt;RunResult is a data structure that stores the outcome of executing an agent's command, including various methods for accessing messages from prior runs.&lt;SEP&gt;RunResult is an output returned by the Agent when executing tasks, which includes messages exchanged during a run.</data>
      <data key="d3">chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="StreamedRunResult">
      <data key="d0">StreamedRunResult</data>
      <data key="d1">category</data>
      <data key="d2">StreamedRunResult is a dataclass in pydantic_ai_slim that encapsulates the result of a streamed run returning structured data via a tool call.&lt;SEP&gt;StreamedRunResult is a specific class that handles continuous output from the agent, providing methods for accessing partial messages during execution.&lt;SEP&gt;StreamedRunResult is a specific data structure that manages continuous output from an agent run, providing methods to access interim messages until the final result is computed.&lt;SEP&gt;StreamedRunResult is an event occurring in the agent's execution flow, representing the aggregation of messages and processing outcomes after the final results are streamed.&lt;SEP&gt;StreamedRunResult represents the outcome of processing a stream of responses from an agent, encapsulating messages, context, and other dependencies.&lt;SEP&gt;StreamedRunResult represents the result of a streamed run in an application, providing structured data and handling messages.&lt;SEP&gt;StreamedRunResult represents the result of an agent's operation, specifically designed for handling streamed responses in an asynchronous way.</data>
      <data key="d3">chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-08a4d218da7ec53e693bd2773bdb87b2&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelRequest">
      <data key="d0">ModelRequest</data>
      <data key="d1">category</data>
      <data key="d2">ModelRequest defines the overall structure and requirements of a request made to the model, including any parameters or associated tools.&lt;SEP&gt;ModelRequest defines the structure for requests made to the agent, encompassing both system instructions and user prompts.&lt;SEP&gt;ModelRequest encompasses the structure of a request sent to the agent, which includes all parts of the request such as system prompts and user prompts.&lt;SEP&gt;ModelRequest is a category that refers to structured requests made to the AI model for processing user messages.&lt;SEP&gt;ModelRequest is a data structure representing a request generated by PydanticAI to a model for processing user messages.&lt;SEP&gt;ModelRequest is a structured format that conveys user messages to the AI model for processing, resulting in an appropriate output.&lt;SEP&gt;ModelRequest is an event that encapsulates user requests for weather forecasts, including associated messages.&lt;SEP&gt;ModelRequest is an event that represents a request to the Groq model for processing data or analytics.&lt;SEP&gt;ModelRequest is the structure that encapsulates an AI request made to the instrumental models.&lt;SEP&gt;ModelRequest refers to a request event in the OpenAI framework, used for creating messages for the AI model.&lt;SEP&gt;ModelRequest refers to a request sent to the model for processing messages and generating responses.&lt;SEP&gt;ModelRequest refers to the structured request sent to the AI model, detailing the components necessary for processing.&lt;SEP&gt;ModelRequest represents a request sent to the AI model, incorporating both user content and system prompts.&lt;SEP&gt;ModelRequest signifies the request made to the model, which includes user prompts and system instructions.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SystemPromptPart">
      <data key="d0">SystemPromptPart</data>
      <data key="d1">category</data>
      <data key="d2">SystemPromptPart denotes the instructions or contextual information provided to the AI model to shape its understanding and responses.&lt;SEP&gt;SystemPromptPart holds the system's instructions or context for processing model requests during message exchange.&lt;SEP&gt;SystemPromptPart is a category that denotes instructions or settings provided to the AI model for context during message processing.&lt;SEP&gt;SystemPromptPart is a class designed to manage parts of a system prompt, encapsulating attributes such as content, timestamp, and dynamic references to provide structured data for prompts.&lt;SEP&gt;SystemPromptPart is a class used to structure parts of a system prompt in the application, detailing timestamps and dynamic references.&lt;SEP&gt;SystemPromptPart is a component of ModelRequest that contains system instructions for the agent to follow.&lt;SEP&gt;SystemPromptPart is a component of messages that provides the initial instructions or context for the AI model.&lt;SEP&gt;SystemPromptPart is a component within ModelRequest that specifies instructions and guidelines for the agent's responses and actions.&lt;SEP&gt;SystemPromptPart is a data structure that defines a system prompt giving context and guidance for model responses.&lt;SEP&gt;SystemPromptPart is a data structure within pydantic_ai that defines system prompts offering context and guidance to the model for generating responses.&lt;SEP&gt;SystemPromptPart is a part of messages designed to encapsulate system prompts within the model's architecture.&lt;SEP&gt;SystemPromptPart is a segment of a message that contains initial instructions or context provided to the model.</data>
      <data key="d3">chunk-f73ad8c376a9fcf91ca2d50decf5ccc8&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UserPromptPart">
      <data key="d0">UserPromptPart</data>
      <data key="d1">category</data>
      <data key="d2">UserPromptPart encapsulates parts of a user prompt in the message flow, containing user-related content.&lt;SEP&gt;UserPromptPart encapsulates user input within the messages sent to the AI model.&lt;SEP&gt;UserPromptPart is a category that represents messages sent by users that prompt responses from the AI model.&lt;SEP&gt;UserPromptPart is a class that represents parts of user prompts, facilitating the management of user input content.&lt;SEP&gt;UserPromptPart is a component of ModelRequest that represents the user's input prompt for the agent.&lt;SEP&gt;UserPromptPart is a component representing user input within the AI interaction framework, providing context for the AI's response.&lt;SEP&gt;UserPromptPart is a dataclass that stores user prompts, including the content, timestamp, and type identifier, meant for interaction within an agent framework.&lt;SEP&gt;UserPromptPart is a part of a conversational interface where a user submits a request or question to an AI model.&lt;SEP&gt;UserPromptPart is a specific part of the user's message that carries the content intended for processing by the Groq model.&lt;SEP&gt;UserPromptPart is an element of ModelRequest that captures the user's input, guiding the agent on how to respond.&lt;SEP&gt;UserPromptPart is another component of pydantic_ai that represents user input and requests in the model message structure.&lt;SEP&gt;UserPromptPart represents a part of the user input that is processed and mapped within the Gemini model.&lt;SEP&gt;UserPromptPart represents a specific type of message that originates from a user, signaling a request for information or action from the AI model.&lt;SEP&gt;UserPromptPart represents parts of the user input message, detailing the content that users provide to the Groq model.&lt;SEP&gt;UserPromptPart represents the messages or inputs provided by users to the AI model.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-cfb555b3d68851a2fa259151f0745e2a&lt;SEP&gt;chunk-0517903d60beb732d23023e1a1755b2e&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TextPart">
      <data key="d0">TextPart</data>
      <data key="d1">category</data>
      <data key="d2">TextPart is a category that includes textual content fragments within messages sent to or generated by the AI model.&lt;SEP&gt;TextPart is a component of ModelResponse that holds the textual response content provided by the agent.&lt;SEP&gt;TextPart is a component of ModelResponse that specifically holds text data returned by the AI model in response to a prompt.&lt;SEP&gt;TextPart is a component of the response that contains plain text content, typically representing a message from the AI model.&lt;SEP&gt;TextPart is a component representing text content within the response structure, facilitating the passage of textual information.&lt;SEP&gt;TextPart is a component that contains the text content returned as part of the model's response.&lt;SEP&gt;TextPart is a data structure that represents a plain text response from a model in the PydanticAI system.&lt;SEP&gt;TextPart is a section of the ModelResponse that contains the actual text output provided by the agent after processing the request.&lt;SEP&gt;TextPart is a segment of the model's output that contains the textual content of the AI's response.&lt;SEP&gt;TextPart is a specific type of content block that includes plain text as a response by the AI.&lt;SEP&gt;TextPart is a structure within the messages.py file that defines a portion of text content within an AI message response.&lt;SEP&gt;TextPart is a type of message part that contains textual content within the ModelMessage structure.&lt;SEP&gt;TextPart is a type of response part that contains a text output generated by the model.&lt;SEP&gt;TextPart refers to a category of content that is generated as part of the response from the model, specifically containing written text.&lt;SEP&gt;TextPart represents a portion of text that serves as the model's output in a structured format.&lt;SEP&gt;TextPart represents a segment of text within a message, often used in model responses to convey information.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-0517903d60beb732d23023e1a1755b2e&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="all_messages()">
      <data key="d0">all_messages()</data>
      <data key="d1">category</data>
      <data key="d2">all_messages() is a method in RunResult that retrieves all messages, including those from previous runs, allowing users to access complete interaction history.</data>
      <data key="d3">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="new_messages()">
      <data key="d0">new_messages()</data>
      <data key="d1">category</data>
      <data key="d2">new_messages() is a method in RunResult that fetches only the messages generated during the most recent execution of a command.</data>
      <data key="d3">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="stream()">
      <data key="d0">stream()</data>
      <data key="d1">category</data>
      <data key="d2">stream() is a coroutine method in StreamedRunResult that manages continuous output, providing real-time access to messages as they are generated.</data>
      <data key="d3">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="stream_text()">
      <data key="d0">stream_text()</data>
      <data key="d1">category</data>
      <data key="d2">stream_text() is a coroutine method in StreamedRunResult that streams the text responses from the agent, allowing users to see results progressively.</data>
      <data key="d3">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_data()">
      <data key="d0">get_data()</data>
      <data key="d1">category</data>
      <data key="d2">get_data() is a method in StreamedRunResult that retrieves the compiled data after a streamed execution has completed.</data>
      <data key="d3">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Samuel Colvin">
      <data key="d0">Samuel Colvin</data>
      <data key="d1">person</data>
      <data key="d2">Samuel Colvin is an individual credited with inventing a joke that is notable enough to be mentioned as needing no explanation.&lt;SEP&gt;Samuel Colvin is identified as the inventor of a particular joke, noted for its simplicity and humor.</data>
      <data key="d3">chunk-0517903d60beb732d23023e1a1755b2e&lt;SEP&gt;chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Toothpaste Scandal">
      <data key="d0">Toothpaste Scandal</data>
      <data key="d1">event</data>
      <data key="d2">The toothpaste scandal refers to the humorous premise of a joke involving Colgate toothpaste, symbolizing a lighthearted take on serious topics.</data>
      <data key="d3">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result2">
      <data key="d0">result2</data>
      <data key="d1">organization</data>
      <data key="d2">Result2 refers to the output of the model that provides response details regarding the joke and explanation.</data>
      <data key="d3">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Colgate">
      <data key="d0">Colgate</data>
      <data key="d1">category</data>
      <data key="d2">Colgate is a brand associated with oral care products, referenced in the joke about a scandal.&lt;SEP&gt;Colgate is referenced in a humorous context related to a joke about a toothpaste scandal, illustrating typical brand-related jokes.</data>
      <data key="d3">chunk-6c1f859347bcf0df691e8fe2fde806fa&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o">
      <data key="d0">gpt-4o</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o is an alternative version of GPT-4 focusing on operational efficiency and enhanced usability.&lt;SEP&gt;gpt-4o is an optimized version of the GPT-4 model, featuring enhancements for various use cases.&lt;SEP&gt;gpt-4o is identified as the model used to generate responses in the conversation.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347&lt;SEP&gt;chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="messages history">
      <data key="d0">messages history</data>
      <data key="d1">event</data>
      <data key="d2">Messages history refers to the collection of interactions between the user prompt and the model responses that form part of the conversation.</data>
      <data key="d3">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="explanation">
      <data key="d0">explanation</data>
      <data key="d1">event</data>
      <data key="d2">Explanation refers to the follow-up to the joke, providing context to its humor and adding depth to the conversation.</data>
      <data key="d3">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gemini-1.5-pro">
      <data key="d0">gemini-1.5-pro</data>
      <data key="d1">organization</data>
      <data key="d2">gemini-1.5-pro is the name of the model used to generate responses to user queries, representing an advanced AI technology.</data>
      <data key="d3">chunk-0517903d60beb732d23023e1a1755b2e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAIModel">
      <data key="d0">OpenAIModel</data>
      <data key="d1">organization</data>
      <data key="d2">OpenAIModel is a class that represents models compatible with OpenAI's API within the Pydantic AI framework.&lt;SEP&gt;OpenAIModel is a model developed by OpenAI, functioning through its API to provide various machine learning services.&lt;SEP&gt;OpenAIModel represents a class of models developed by OpenAI that can perform various AI tasks, including language processing and generation.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAIProvider">
      <data key="d0">OpenAIProvider</data>
      <data key="d1">organization</data>
      <data key="d2">OpenAIProvider is a category of implementations that facilitate access to OpenAI's services via an API, enabling various applications.&lt;SEP&gt;OpenAIProvider is a class that provides an interface to interact with the OpenAI API, facilitating requests and handling responses.&lt;SEP&gt;OpenAIProvider is a specific provider used to connect to OpenAI's API with customizable parameters including organization and project settings.&lt;SEP&gt;OpenAIProvider is a specific provider used to connect to OpenAI's API with customizable parameters.&lt;SEP&gt;The OpenAIProvider category relates to the implementations and interactions with OpenAI models via API access.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8&lt;SEP&gt;chunk-233c44dbbafc40133b53d2417bab6371&lt;SEP&gt;chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Base_URL">
      <data key="d0">Base_URL</data>
      <data key="d1">category</data>
      <data key="d2">Base_URL refers to the fundamental endpoint used by OpenAI providers to facilitate API requests, ensuring connectivity.&lt;SEP&gt;Base_URL refers to the fundamental endpoint used by OpenAI providers to facilitate API requests.</data>
      <data key="d3">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAIResponsesModel">
      <data key="d0">OpenAIResponsesModel</data>
      <data key="d1">category</data>
      <data key="d2">OpenAIResponsesModel is a class that allows users to interact seamlessly with OpenAI's Responses API, offering enhanced functionalities for AI interactions.&lt;SEP&gt;OpenAIResponsesModel is a class that allows users to interact with the OpenAI Responses API effectively.</data>
      <data key="d3">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncAzureOpenAI">
      <data key="d0">AsyncAzureOpenAI</data>
      <data key="d1">organization</data>
      <data key="d2">AsyncAzureOpenAI is a client designed for interacting with the Azure OpenAI services.&lt;SEP&gt;AsyncAzureOpenAI is a client that allows integration with the Azure version of the OpenAI API.&lt;SEP&gt;AsyncAzureOpenAI is a client that enables connection to the Azure version of OpenAI's API, providing a customizable interface for cloud services.</data>
      <data key="d3">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf&lt;SEP&gt;chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Responses API">
      <data key="d0">Responses API</data>
      <data key="d1">category</data>
      <data key="d2">Responses API is a tool for extracting responses from models, providing additional functionalities compared to standard APIs.&lt;SEP&gt;Responses API is a tool that allows the extraction of responses from AI models, enhancing the interaction process with built-in functionalities.&lt;SEP&gt;The Responses API is a service provided by OpenAI to generate responses based on user input, utilizing AI models for various tasks.</data>
      <data key="d3">chunk-66833d79e4d36b5a0e73579d383201e2&lt;SEP&gt;chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Web Search Tool">
      <data key="d0">Web Search Tool</data>
      <data key="d1">category</data>
      <data key="d2">Web Search Tool allows AI models to access real-time information from the internet for enhanced responses.&lt;SEP&gt;Web Search Tool enables AI models to access real-time internet data to provide updated responses, enriching the information available for queries.</data>
      <data key="d3">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="File Search Tool">
      <data key="d0">File Search Tool</data>
      <data key="d1">category</data>
      <data key="d2">File Search Tool allows models to search user-uploaded documents for relevant information, enhancing response accuracy and relevance.&lt;SEP&gt;File Search Tool enables models to look for information within user-uploaded files to ensure relevant responses.</data>
      <data key="d3">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Computer Use Tool">
      <data key="d0">Computer Use Tool</data>
      <data key="d1">category</data>
      <data key="d2">Computer Use Tool allows AI models to perform tasks on behalf of the user, enhancing interactivity.&lt;SEP&gt;Computer Use Tool empowers AI models to perform tasks directly on behalf of users, increasing interactivity and usability.</data>
      <data key="d3">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Anthropic">
      <data key="d0">Anthropic</data>
      <data key="d1">organization</data>
      <data key="d2">Anthropic is a company that offers AI models and services, requiring specific configurations for API use.&lt;SEP&gt;Anthropic is a company that provides AI models and techniques, requiring specific configurations for effective API integration.&lt;SEP&gt;Anthropic is an organization focused on developing AI technologies and ensuring their safe use.&lt;SEP&gt;Anthropic is an organization that specializes in AI safety and research, contributing models like Claude for natural language processing.</data>
      <data key="d3">chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf&lt;SEP&gt;chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Response API Documentation">
      <data key="d0">Response API Documentation</data>
      <data key="d1">category</data>
      <data key="d2">Response API Documentation serves as a comprehensive guide to understanding the functionalities and distinctions between different OpenAI APIs.&lt;SEP&gt;Response API Documentation serves as a resource for understanding the functionalities and differences of the OpenAI APIs.</data>
      <data key="d3">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AnthropicModel">
      <data key="d0">AnthropicModel</data>
      <data key="d1">organization</data>
      <data key="d2">AnthropicModel represents a line of AI models developed by Anthropic, available for various applications through Pydantic AI.&lt;SEP&gt;AnthropicModel represents a series of AI models provided by Anthropic, such as 'claude-3-5-sonnet-latest'.</data>
      <data key="d3">chunk-a4e01bd25dcff46059903d23d9198862</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="httpx.AsyncClient">
      <data key="d0">httpx.AsyncClient</data>
      <data key="d1">organization</data>
      <data key="d2">The httpx.AsyncClient is a library for making HTTP requests in an asynchronous manner, used within the GeminiModel for API communication.&lt;SEP&gt;httpx.AsyncClient is a Python library for making asynchronous HTTP requests, commonly used in web applications.&lt;SEP&gt;httpx.AsyncClient is an HTTP client library that supports asynchronous requests, used within the GoogleVertexProvider.&lt;SEP&gt;httpx.AsyncClient is an asynchronous HTTP client designed for making fast network requests, utilized in the GeminiModel for communicating with the API.&lt;SEP&gt;httpx.AsyncClient is an asynchronous HTTP client that can be customized for making requests to APIs in Pydantic AI applications.&lt;SEP&gt;httpx.AsyncClient is an asynchronous HTTP client that can be used to customize requests in the Pydantic AI framework.&lt;SEP&gt;httpx.AsyncClient refers to an asynchronous HTTP client used for sending requests to web services, facilitating non-blocking communication in Python applications.</data>
      <data key="d3">chunk-4789175c72630811bc7e624447f539f5&lt;SEP&gt;chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-a4e01bd25dcff46059903d23d9198862&lt;SEP&gt;chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiModel">
      <data key="d0">GeminiModel</data>
      <data key="d1">organization</data>
      <data key="d2">GeminiModel allows users to access Google's Gemini models through the Generative Language API for various AI applications.&lt;SEP&gt;GeminiModel allows users to access and utilize Google's Gemini models through the Generative Language API, providing capabilities for numerous AI applications.&lt;SEP&gt;GeminiModel is a specific data model that interfaces with the Gemini API for generative language tasks and provides capabilities for handling response types.&lt;SEP&gt;GeminiModel refers to a model within the PydanticAI framework that can utilize VertexAI for running AI applications.&lt;SEP&gt;GeminiModel refers to advanced AI models provided by PydanticAI and used with VertexAI for various AI tasks.&lt;SEP&gt;The GeminiModel is a data structure that enables the interaction with the Gemini API for AI models, allowing users to send requests and receive responses.&lt;SEP&gt;The GeminiModel is a structure used to interact with the Gemini API for model deployment and usage in AI applications.</data>
      <data key="d3">chunk-9ff315bedb1e055a20af27b9db87b652&lt;SEP&gt;chunk-c85826bcf2c124ee6da90aa381dfff25&lt;SEP&gt;chunk-a4e01bd25dcff46059903d23d9198862&lt;SEP&gt;chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Generative Language API">
      <data key="d0">Generative Language API</data>
      <data key="d1">organization</data>
      <data key="d2">The Generative Language API is provided by Google, allowing for interaction with generative AI models like Gemini.</data>
      <data key="d3">chunk-a4e01bd25dcff46059903d23d9198862</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="VertexAI API">
      <data key="d0">VertexAI API</data>
      <data key="d1">organization</data>
      <data key="d2">The VertexAI API is a Google service that offers enterprise readiness and allows users to provision throughput and authenticate for AI applications.</data>
      <data key="d3">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GCP">
      <data key="d0">GCP</data>
      <data key="d1">geo</data>
      <data key="d2">Google Cloud Platform (GCP) is a cloud computing service that provides infrastructure for deploying and managing applications and services.&lt;SEP&gt;Google Cloud Platform (GCP) is a cloud provider that facilitates the deployment and management of applications and services, including those using VertexAI.</data>
      <data key="d3">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="service account">
      <data key="d0">service account</data>
      <data key="d1">category</data>
      <data key="d2">A service account in GCP is a special account that enables applications to authenticate and interact with other Google Cloud services.&lt;SEP&gt;A service account is a special account that allows applications to access resources within GCP, often used for authenticating applications.</data>
      <data key="d3">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Groq">
      <data key="d0">Groq</data>
      <data key="d1">organization</data>
      <data key="d2">Groq is a company specializing in AI hardware and software solutions that enhance computational speed and efficiency.&lt;SEP&gt;Groq is a company that develops advanced AI models for various predictive analytics applications.&lt;SEP&gt;Groq is a technology company providing a model and development tools for AI, accessible via their API.&lt;SEP&gt;Groq is a technology company that offers AI and machine learning models through an accessible API, enabling various applications and integrations.&lt;SEP&gt;Groq is a technology company that provides an AI model and has an API for users to generate an API key for access.&lt;SEP&gt;Groq provides AI and machine learning models and is accessible via an API, allowing for various integrations and applications.</data>
      <data key="d3">chunk-96f0c03aabc444033deba6ca7c09ac6a&lt;SEP&gt;chunk-9ff315bedb1e055a20af27b9db87b652&lt;SEP&gt;chunk-62b30762bc4e6dc84db8c5fa1d88d2de&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="VertexAI">
      <data key="d0">VertexAI</data>
      <data key="d1">organization</data>
      <data key="d2">VertexAI is a Google service that provides a comprehensive API for developing machine learning applications with enterprise readiness.</data>
      <data key="d3">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="application default credentials">
      <data key="d0">application default credentials</data>
      <data key="d1">category</data>
      <data key="d2">Application default credentials are a way to authenticate applications running on GCP without manual setup, leveraging existing credentials in the environment.</data>
      <data key="d3">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="API key">
      <data key="d0">API key</data>
      <data key="d1">category</data>
      <data key="d2">An API key is a code passed to an API for authentication, allowing users to access the services provided by the API.</data>
      <data key="d3">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GoogleVertexProvider">
      <data key="d0">GoogleVertexProvider</data>
      <data key="d1">category</data>
      <data key="d2">GoogleVertexProvider is a component used within PydanticAI to interface with VertexAI, facilitating model access and configuration.&lt;SEP&gt;GoogleVertexProvider is a specific implementation of a provider class that interacts with the Vertex AI API for Google services.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="region">
      <data key="d0">region</data>
      <data key="d1">category</data>
      <data key="d2">Region refers to the geographical location where Google Cloud resources are hosted and accessed.&lt;SEP&gt;Region refers to the specific geographical area where cloud resources are deployed to improve latency and comply with regulatory standards.&lt;SEP&gt;region specifies the geographic zone where cloud computing resources are deployed within Google Cloud, affecting latency and availability.&lt;SEP&gt;region specifies the geographical location for the Vertex AI service and defaults to 'us-central1'.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-9ff315bedb1e055a20af27b9db87b652&lt;SEP&gt;chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="llama-3.3-70b-versatile">
      <data key="d0">llama-3.3-70b-versatile</data>
      <data key="d1">category</data>
      <data key="d2">The llama-3.3-70b-versatile is a specific model offered by Groq, focusing on versatility in tasks.</data>
      <data key="d3">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mistral">
      <data key="d0">Mistral</data>
      <data key="d1">organization</data>
      <data key="d2">Mistral is a company focusing on AI innovation, particularly in natural language processing.&lt;SEP&gt;Mistral is a company that focuses on AI innovation, particularly in natural language processing.&lt;SEP&gt;Mistral is a program or tool used for processing and generating responses to user inputs, particularly in a chat format.&lt;SEP&gt;Mistral is a provider associated with AI model services, specifically designed for tasks like message mapping and model request handling.&lt;SEP&gt;Mistral is a provider of AI models that can be accessed through APIs, facilitating the development of applications.&lt;SEP&gt;Mistral is an AI model provider that focuses on processing user queries and generating responses using various model architectures.&lt;SEP&gt;Mistral is an organization that provides AI models and services, specifically focused on creating and maintaining various AI model architectures.&lt;SEP&gt;Mistral is an organization that provides a client and API for various services, notably authentication and HTTP communication.&lt;SEP&gt;Mistral provides AI models that are accessible via APIs, facilitating the development of applications based on advanced language processing.&lt;SEP&gt;Mistral refers to models accessible through the instrumentation settings for executing AI requests.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-08a4d218da7ec53e693bd2773bdb87b2&lt;SEP&gt;chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-49dda393c384d6eedda81d9cf452a9c8&lt;SEP&gt;chunk-96f0c03aabc444033deba6ca7c09ac6a&lt;SEP&gt;chunk-62b30762bc4e6dc84db8c5fa1d88d2de&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mistral-large-latest">
      <data key="d0">mistral-large-latest</data>
      <data key="d1">category</data>
      <data key="d2">The mistral-large-latest is the latest version of a large model from Mistral, aimed at comprehensive language processing.</data>
      <data key="d3">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="CohereModel">
      <data key="d0">CohereModel</data>
      <data key="d1">category</data>
      <data key="d2">CohereModel is a class representing a model that interacts with the Cohere API, intended for various AI applications and requests.&lt;SEP&gt;CohereModel is a model that interacts with the Cohere API, designed for various applications and functionalities in AI.&lt;SEP&gt;CohereModel refers to the specific AI models offered by Cohere, which can be used in various applications.&lt;SEP&gt;CohereModel represents the specific AI models available from Cohere, which can be employed for a range of language processing tasks.</data>
      <data key="d3">chunk-43f708cf2c1ed088f9752946682da243&lt;SEP&gt;chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GroqModelName">
      <data key="d0">GroqModelName</data>
      <data key="d1">category</data>
      <data key="d2">GroqModelName is a classification that includes all recognized names for models used within the Groq system.&lt;SEP&gt;GroqModelName refers to the list of available models provided by Groq, allowing developers to choose among various AI capabilities.&lt;SEP&gt;GroqModelName represents a model specification used within the Groq framework for defining different machine learning models.&lt;SEP&gt;GroqModelName represents the designation of the specific AI model being utilized for processing requests and generating responses.&lt;SEP&gt;GroqModelName represents the name of the model being used for responses in the system.</data>
      <data key="d3">chunk-23dd09bcb6c976f2167345bb77e402ff&lt;SEP&gt;chunk-96f0c03aabc444033deba6ca7c09ac6a&lt;SEP&gt;chunk-15fdf584bfe078df410fd6c110374e1e&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="API Key">
      <data key="d0">API Key</data>
      <data key="d1">category</data>
      <data key="d2">An API Key is a unique identifier used to authenticate requests made to Groq's API, ensuring secure access to their services.</data>
      <data key="d3">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Environment Variable">
      <data key="d0">Environment Variable</data>
      <data key="d1">category</data>
      <data key="d2">Environment Variable is a setting that is configured to store important information, such as API Keys, for applications to use.</data>
      <data key="d3">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralModelNames">
      <data key="d0">MistralModelNames</data>
      <data key="d1">category</data>
      <data key="d2">MistralModelNames is a list that includes popular and available models from Mistral for developers to utilize.</data>
      <data key="d3">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic-ai">
      <data key="d0">pydantic-ai</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic-AI is a library that facilitates the integration and utilization of various AI models, including those from Groq, Mistral, and Cohere.&lt;SEP&gt;Pydantic-ai is a library that utilizes OpenTelemetry for creating instrumentation options and logging events.&lt;SEP&gt;pydantic-ai is a framework for building applications with integrated artificial intelligence models, simplifying the interaction with various AI services.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Cohere API">
      <data key="d0">Cohere API</data>
      <data key="d1">organization</data>
      <data key="d2">Cohere API is an interface that facilitates interactions with Cohere's models and services.&lt;SEP&gt;Cohere API is the application programming interface that facilitates access to various services and models provided by Cohere.&lt;SEP&gt;The Cohere API allows users to interact with Cohere's language models, enabling features such as text generation and analysis.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d&lt;SEP&gt;chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Cohere Model Name">
      <data key="d0">Cohere Model Name</data>
      <data key="d1">category</data>
      <data key="d2">Cohere Model Name consists of various models available through the Cohere platform for different natural language processing tasks.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Bedrock">
      <data key="d0">Bedrock</data>
      <data key="d1">organization</data>
      <data key="d2">Bedrock is a firm offering foundational tools and platforms for building AI applications.&lt;SEP&gt;Bedrock is a service provided by AWS that offers access to machine learning models from various providers, including Cohere.&lt;SEP&gt;Bedrock is a service that provides various models for development and integration, often using API access and custom providers.&lt;SEP&gt;Bedrock is an organization that provides a variety of AI models and related services, integrating cutting-edge technology in machine learning and artificial intelligence.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d&lt;SEP&gt;chunk-280e2293efebc370222ffe9ce64e03c2&lt;SEP&gt;chunk-62b30762bc4e6dc84db8c5fa1d88d2de&lt;SEP&gt;chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Pydantic-ai">
      <data key="d0">Pydantic-ai</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic-ai is a framework for building applications powered by AI models in Python, offering integrations with various AI providers.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Cohere API Key">
      <data key="d0">Cohere API Key</data>
      <data key="d1">category</data>
      <data key="d2">The Cohere API Key is a credential necessary for authenticating and accessing Cohere's services via its API.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AWS Bedrock">
      <data key="d0">AWS Bedrock</data>
      <data key="d1">organization</data>
      <data key="d2">AWS Bedrock is a platform that offers access to multiple machine learning models from different providers, including Cohere.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="API Integration">
      <data key="d0">API Integration</data>
      <data key="d1">category</data>
      <data key="d2">API Integration refers to the method of connecting different software applications via APIs to enhance functionality and services.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Environment Variables">
      <data key="d0">Environment Variables</data>
      <data key="d1">category</data>
      <data key="d2">Environment Variables are key-value pairs that enable developers to manage configuration settings and secrets in applications securely.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Command Model">
      <data key="d0">Command Model</data>
      <data key="d1">category</data>
      <data key="d2">Command Model is one of the model types provided by Cohere, utilized specifically for command-like interactions.</data>
      <data key="d3">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BedrockConverseModel">
      <data key="d0">BedrockConverseModel</data>
      <data key="d1">category</data>
      <data key="d2">BedrockConverseModel is a specific model class within Pydantic AI designed for conversational AI applications.</data>
      <data key="d3">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="boto3">
      <data key="d0">boto3</data>
      <data key="d1">organization</data>
      <data key="d2">Boto3 is an Amazon Web Services (AWS) SDK for Python that allows developers to control AWS services programmatically.&lt;SEP&gt;Boto3 is the Amazon Web Services (AWS) SDK for Python, enabling Python developers to write software that makes use of services like Amazon S3 and EC2.</data>
      <data key="d3">chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Ollama">
      <data key="d0">Ollama</data>
      <data key="d1">organization</data>
      <data key="d2">Ollama is an organization focused on providing models for artificial intelligence and enabling local usage of these models.</data>
      <data key="d3">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DeepSeekProvider">
      <data key="d0">DeepSeekProvider</data>
      <data key="d1">category</data>
      <data key="d2">DeepSeekProvider facilitates integration with the DeepSeek AI models via the Pydantic framework.&lt;SEP&gt;DeepSeekProvider is a class component designed to facilitate integration with DeepSeek's AI models and APIs within the Pydantic AI framework.&lt;SEP&gt;DeepSeekProvider is a class that implements a provider for the DeepSeek API, facilitating access to its functionalities.</data>
      <data key="d3">chunk-72ca9e59f2d2201907ab534202af4af4&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BedrockProvider">
      <data key="d0">BedrockProvider</data>
      <data key="d1">organization</data>
      <data key="d2">BedrockProvider is a class designed to provide integration for the Bedrock runtime services in the Pydantic AI framework.&lt;SEP&gt;BedrockProvider is a class providing integration with AWS Bedrock services, allowing clients to interact with its resources.</data>
      <data key="d3">chunk-72ca9e59f2d2201907ab534202af4af4&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="boto3 client">
      <data key="d0">boto3 client</data>
      <data key="d1">category</data>
      <data key="d2">boto3 client is an instance of the boto3 SDK, enabling AWS service interactions for applications using Pydantic AI.</data>
      <data key="d3">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_name">
      <data key="d0">model_name</data>
      <data key="d1">category</data>
      <data key="d2">Model_name is an attribute of CohereModel indicating the name of the model being utilized for requests.&lt;SEP&gt;Model_name refers to the identifier for different AI models used within the PydanticAI framework, essential for tracking which model is providing a response.&lt;SEP&gt;model_name is a property in an abstract class that returns the name of the model being implemented and is essential for identifying the model.&lt;SEP&gt;model_name is a property in the context of AI model implementations that indicates the specific name of the model being utilized.&lt;SEP&gt;model_name is a property representing the specific name of a model being used in AI processing, critical for defining model interactions.&lt;SEP&gt;model_name is a property that defines the name of a specific model being used within Bedrock.&lt;SEP&gt;model_name is a property that holds the name of the specific Gemini model being initialized.&lt;SEP&gt;model_name is a property that refers to the identifier of the OpenAI model being used in the responses.&lt;SEP&gt;model_name is a property that retrieves the name of the AI model used for generating responses.&lt;SEP&gt;model_name is a property that retrieves the name of the model associated with the response.&lt;SEP&gt;model_name is a reference to the specific AI model being used for processing the requests and generating outputs.&lt;SEP&gt;model_name refers to the specific name of an AI model being used within the Pydantic AI framework.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-43f708cf2c1ed088f9752946682da243&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356&lt;SEP&gt;chunk-3fe1c986ef649646858753879674bde7&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-a9de914755fc3f23e749c15911fa6734&lt;SEP&gt;chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="region_name">
      <data key="d0">region_name</data>
      <data key="d1">category</data>
      <data key="d2">region_name indicates the geographical region for deploying AWS services in the boto3 client configuration.</data>
      <data key="d3">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="base_url">
      <data key="d0">base_url</data>
      <data key="d1">category</data>
      <data key="d2">Base URL is the root URL used for API requests. It defines the endpoint structure for making calls to the service.&lt;SEP&gt;base_url is a property necessary for the Azure provider, indicating the root URL for Azure OpenAI services for API communication.&lt;SEP&gt;base_url is a property that indicates the base URL for the Azure OpenAI services used for authentication and API calls.&lt;SEP&gt;base_url is a property that indicates the base URL for the provider API, an important aspect for making requests.&lt;SEP&gt;base_url is an essential parameter for defining the endpoint for API requests to certain AI service providers.</data>
      <data key="d3">chunk-233c44dbbafc40133b53d2417bab6371&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="api_key">
      <data key="d0">api_key</data>
      <data key="d1">category</data>
      <data key="d2">The api_key is a secret key used to authenticate requests made to the Azure API, ensuring that only authorized users can access it.&lt;SEP&gt;api_key is a credential necessary for authenticating requests to various AI APIs within the Pydantic AI framework.&lt;SEP&gt;api_key is a string required for authentication when using the Cohere Provider service.&lt;SEP&gt;api_key is attribute used for authorization when making requests to the Google services.</data>
      <data key="d3">chunk-f235ce39161a5edb725814748db38df4&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-a0f0b34a0a28fff06a9b6be854290df6&lt;SEP&gt;chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="custom_http_client">
      <data key="d0">custom_http_client</data>
      <data key="d1">category</data>
      <data key="d2">custom_http_client is an optional parameter that allows developers to define their own HTTP client for API interactions.</data>
      <data key="d3">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent Class">
      <data key="d0">Agent Class</data>
      <data key="d1">category</data>
      <data key="d2">Agent Class allows the creation of an intelligent agent that can interact with various AI models in the Pydantic AI library.</data>
      <data key="d3">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Ollama Client">
      <data key="d0">Ollama Client</data>
      <data key="d1">category</data>
      <data key="d2">Ollama Client provides local execution capabilities for AI models downloaded from the Ollama model library.</data>
      <data key="d3">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Azure AI Foundry">
      <data key="d0">Azure AI Foundry</data>
      <data key="d1">organization</data>
      <data key="d2">Azure AI Foundry is a cloud-based platform that offers various AI services, allowing users to deploy and manage AI models effectively.&lt;SEP&gt;Azure AI Foundry is a cloud-based platform that provides access to various AI services and models, enabling deployment and management of AI applications.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AzureProvider">
      <data key="d0">AzureProvider</data>
      <data key="d1">category</data>
      <data key="d2">AzureProvider is an organization responsible for providing the Azure OpenAI API, facilitating access to advanced AI capabilities.&lt;SEP&gt;AzureProvider refers to the specific class used to interface with Azure AI services, facilitating model deployment and management.&lt;SEP&gt;The AzureProvider category refers to the tools and methods used to interact with the Azure AI Foundry services.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8&lt;SEP&gt;chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenRouter">
      <data key="d0">OpenRouter</data>
      <data key="d1">organization</data>
      <data key="d2">OpenRouter is a service that provides access to multiple AI models through its API, allowing for flexible implementation options for developers.&lt;SEP&gt;OpenRouter is an API service that enables users to access various AI models through different providers.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Grok (xAI)">
      <data key="d0">Grok (xAI)</data>
      <data key="d1">organization</data>
      <data key="d2">Grok (xAI) is an AI service provider that offers API access to various AI models for developers.&lt;SEP&gt;Grok (xAI) is an AI service provider that offers access to models and solutions for developers to utilize generative AI technologies.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Perplexity">
      <data key="d0">Perplexity</data>
      <data key="d1">organization</data>
      <data key="d2">Perplexity is an AI-driven information service that provides access to generative AI models through their API.&lt;SEP&gt;Perplexity is an AI-driven service providing users access to generative AI models through an easy-to-use API interface.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Fireworks AI">
      <data key="d0">Fireworks AI</data>
      <data key="d1">organization</data>
      <data key="d2">Fireworks AI is a platform that offers generative AI models, notably allowing for tailored applications and services.&lt;SEP&gt;Fireworks AI is an advanced AI model provider that allows users access to personalize and implement generative AI applications.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Together AI">
      <data key="d0">Together AI</data>
      <data key="d1">organization</data>
      <data key="d2">Together AI is a provider of AI models designed for collaborative and interactive applications in various sectors.&lt;SEP&gt;Together AI is a provider of AI models, aiming to deliver collaborative AI solutions for various applications.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FallbackModel">
      <data key="d0">FallbackModel</data>
      <data key="d1">category</data>
      <data key="d2">FallbackModel describes a strategy used to ensure model request success by attempting multiple AI models sequentially.&lt;SEP&gt;FallbackModel is a data model used in programming, particularly in Python, to provide alternative models in case the default model fails during execution.&lt;SEP&gt;FallbackModel is a design pattern in agent-based systems that allows one model to shift to another when the first fails, enhancing reliability.&lt;SEP&gt;FallbackModel refers to a category of models that tries multiple instances to ensure successful response generation in the event of failure.&lt;SEP&gt;FallbackModel refers to a strategy for attempting requests to multiple models in sequence until one is successful.</data>
      <data key="d3">chunk-c9a99acd51a50f5d69363aefdceadda8&lt;SEP&gt;chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="StreamedResponse">
      <data key="d0">StreamedResponse</data>
      <data key="d1">category</data>
      <data key="d2">StreamedResponse describes the response object that allows for streamed processing of model requests.&lt;SEP&gt;StreamedResponse involves the handling of responses in a continuous stream rather than discrete outputs.&lt;SEP&gt;StreamedResponse is a base class that facilitates the handling of streamed data from models.&lt;SEP&gt;StreamedResponse is a base class that handles streamed responses from various sources in AI systems.&lt;SEP&gt;StreamedResponse is a category of responses characterized by the continuous delivery of data or results as they are generated.&lt;SEP&gt;StreamedResponse is a class responsible for generating and returning data in a streaming manner, often used for larger outputs.&lt;SEP&gt;StreamedResponse is a class that manages the flow of data received from streaming operations.&lt;SEP&gt;StreamedResponse is a class that represents a streamed response from a language model, incorporating methods for handling iterative data processing.&lt;SEP&gt;StreamedResponse is a method for handling responses in the context of the FunctionModel, particularly within the pydantic framework.&lt;SEP&gt;StreamedResponse is a method for handling streamed responses within the FunctionModel in the pydantic library, allowing asynchronous data processing.&lt;SEP&gt;StreamedResponse is a type of response that is transmitted from the model in real-time or near-real-time, allowing for instantaneous data processing.&lt;SEP&gt;StreamedResponse is used to deliver responses from models in a continuous stream, allowing real-time data processing.&lt;SEP&gt;StreamedResponse refers to the asynchronous response object that streams data, allowing for processing parts of the response incrementally as they are received.&lt;SEP&gt;StreamedResponse refers to the format of responses when data is received in chunks during a streaming interaction.&lt;SEP&gt;StreamedResponse represents the format in which Mistral may deliver outputs from model requests in a streaming manner, allowing for real-time interaction.&lt;SEP&gt;StreamedResponse represents the response output for streamed requests, allowing for incremental data delivery.&lt;SEP&gt;StreamedResponse serves as a base class for creating responses that handle streams of data rather than static responses.&lt;SEP&gt;StreamedResponse specifies a method of handling responses from AI models that allows for continuous data output rather than isolated chunks.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209&lt;SEP&gt;chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356&lt;SEP&gt;chunk-c9a99acd51a50f5d69363aefdceadda8&lt;SEP&gt;chunk-23dd09bcb6c976f2167345bb77e402ff&lt;SEP&gt;chunk-49dda393c384d6eedda81d9cf452a9c8&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-1d2c13afaff5bbc08c268a958dff4edb&lt;SEP&gt;chunk-3fe1c986ef649646858753879674bde7&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelHTTPError">
      <data key="d0">ModelHTTPError</data>
      <data key="d1">category</data>
      <data key="d2">ModelHTTPError indicates an HTTP-related error that occurs during the communication with the AI model, usually concerning connectivity or server issues.&lt;SEP&gt;ModelHTTPError indicates an error in the HTTP request made to the model, characterized by a status code greater than or equal to 400.&lt;SEP&gt;ModelHTTPError is an error raised involving HTTP communication issues with the model.&lt;SEP&gt;ModelHTTPError is an error type raised when HTTP requests to the Mistral model encounter issues.&lt;SEP&gt;ModelHTTPError is an exception used to indicate failures related to HTTP requests within the model framework.&lt;SEP&gt;ModelHTTPError is raised when a model provider response has an HTTP status code indicating an error (4xx or 5xx).&lt;SEP&gt;ModelHTTPError represents an error that occurs when the model fails to respond due to an HTTP-related issue, impacting the processing of requests.&lt;SEP&gt;ModelHTTPError signifies errors that occur due to HTTP response issues from the model, affecting the request lifecycle.</data>
      <data key="d3">chunk-93010a3465ed2346e5ca1cbbf11fbc95&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7&lt;SEP&gt;chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="datetime">
      <data key="d0">datetime</data>
      <data key="d1">category</data>
      <data key="d2">Datetime is a data type for managing date and time in computations.&lt;SEP&gt;Datetime is a data type utilized for handling date and time information within programming and applications, particularly important for timestamping events.&lt;SEP&gt;Datetime is a library/module that provides classes for manipulating dates and times in Python, essential for timestamp functionalities.&lt;SEP&gt;Datetime is a module in Python for manipulating dates and times, utilized to timestamp events.&lt;SEP&gt;Datetime is a module in Python used for handling date and time operations, crucial for timestamp management.&lt;SEP&gt;Datetime is a property type used to represent timestamps in the system, tracking the timing of responses.&lt;SEP&gt;datetime is a data type used for managing date and time information within the Groq framework.&lt;SEP&gt;datetime is a data type used to represent both date and time, often utilized for handling timestamps in responses.&lt;SEP&gt;datetime is a module in Python providing classes for manipulating dates and times.&lt;SEP&gt;datetime is a module in Python that provides classes for manipulating dates and times, essential for logging and time-stamping model responses.&lt;SEP&gt;datetime is a module in Python that supplies classes for manipulating dates and times in a comprehensive manner.&lt;SEP&gt;datetime is a module in Python used for handling dates and times, commonly utilized for timestamping messages.&lt;SEP&gt;datetime is a standard Python library used to handle date and time functionalities in applications.&lt;SEP&gt;datetime refers to a module or property that helps manage date and time information.&lt;SEP&gt;datetime refers to the Python library for manipulating dates and times, which is utilized within the model to timestamp responses.</data>
      <data key="d3">chunk-4f4eceed73ea96cd06f2303055d3cd57&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-9a9bc262ebbbdd42a17a84adee4a7f9d&lt;SEP&gt;chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-23dd09bcb6c976f2167345bb77e402ff&lt;SEP&gt;chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-3fe1c986ef649646858753879674bde7&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-a9de914755fc3f23e749c15911fa6734&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="exceptiongroup">
      <data key="d0">exceptiongroup</data>
      <data key="d1">category</data>
      <data key="d2">ExceptionGroup is a mechanism in Python used to handle multiple exceptions simultaneously, enhancing error handling in code execution.</data>
      <data key="d3">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="catch">
      <data key="d0">catch</data>
      <data key="d1">category</data>
      <data key="d2">Catch is a programming construct used to manage exceptions by specifying how to handle them when they occur.</data>
      <data key="d3">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent Delegation">
      <data key="d0">Agent Delegation</data>
      <data key="d1">event</data>
      <data key="d2">Agent Delegation is a process whereby an agent directs work to another agent and regains control post-completion, facilitating efficient workflow management.</data>
      <data key="d3">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="agent_delegation_simple.py">
      <data key="d0">agent_delegation_simple.py</data>
      <data key="d1">category</data>
      <data key="d2">agent_delegation_simple.py is a code example demonstrating how to use agent delegation in a programming context.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="joke_selection_agent">
      <data key="d0">joke_selection_agent</data>
      <data key="d1">organization</data>
      <data key="d2">The joke_selection_agent is an agent designed to select the best joke from a set of generated jokes.&lt;SEP&gt;joke_selection_agent is an agent responsible for selecting jokes based on client requests.&lt;SEP&gt;joke_selection_agent is an agent that manages the selection of jokes based on user requests and interacts with other agents to fulfill its duties.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="joke_generation_agent">
      <data key="d0">joke_generation_agent</data>
      <data key="d1">organization</data>
      <data key="d2">The joke_generation_agent is a delegated agent responsible for generating jokes based on specified prompts.&lt;SEP&gt;joke_generation_agent is a delegate agent specifically programmed to generate jokes and return them to the joke_selection_agent.&lt;SEP&gt;joke_generation_agent is a delegate agent that generates jokes upon request from the joke_selection_agent.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="agent_delegation_deps.py">
      <data key="d0">agent_delegation_deps.py</data>
      <data key="d1">category</data>
      <data key="d2">agent_delegation_deps.py is another code example showcasing how to handle dependencies in agent delegation.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ctx">
      <data key="d0">ctx</data>
      <data key="d1">category</data>
      <data key="d2">Ctx refers to a context variable typically used in asynchronous programming to manage state and dependencies during a database operation.&lt;SEP&gt;ctx is an object that provides access to various dependencies and configuration settings required during the execution of graph nodes.&lt;SEP&gt;ctx refers to the context object that contains information about the current state of an agent run, including usage metrics and other relevant data.&lt;SEP&gt;ctx represents the context object holding operational parameters and dependencies needed for executing the tools in a given environment.&lt;SEP&gt;ctx represents the context object that holds the state and information needed by the agent during its execution.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="monetary cost">
      <data key="d0">monetary cost</data>
      <data key="d1">category</data>
      <data key="d2">Monetary cost refers to the financial implications of operations performed by the agent, particularly in terms of computing resource usage.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async with">
      <data key="d0">async with</data>
      <data key="d1">category</data>
      <data key="d2">async with is a syntax in Python that simplifies the handling of asynchronous context managers, ensuring proper resource management.</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ClientAndKey">
      <data key="d0">ClientAndKey</data>
      <data key="d1">organization</data>
      <data key="d2">ClientAndKey is a system component used for establishing a connection with the API by providing the client and API key.</data>
      <data key="d3">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="toothpaste scandal">
      <data key="d0">toothpaste scandal</data>
      <data key="d1">event</data>
      <data key="d2">The toothpaste scandal refers to a humorous incident involving Colgate that is used as the punchline in a joke.</data>
      <data key="d3">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Usage">
      <data key="d0">Usage</data>
      <data key="d1">category</data>
      <data key="d2">Usage describes the defined limits for the flight search app, managing how the agents interact and retrieve information.&lt;SEP&gt;Usage is a category that encompasses metrics related to the number of requests and tokens used in processing and generating responses within the AI model.&lt;SEP&gt;Usage is a category that tracks the number of requests and tokens used by the agents in their operations.&lt;SEP&gt;Usage is a data structure that keeps track of the token usage statistics associated with a model's input and output.&lt;SEP&gt;Usage is a structure that tracks the resource consumption of the agent over time.&lt;SEP&gt;Usage may refer to metrics or statistics associated with the interaction and operation of a model, such as resource consumption or performance metrics.&lt;SEP&gt;Usage pertains to the tracking and management of how the agent's resources and functionalities are employed during interaction.&lt;SEP&gt;Usage refers to a class or structure that encapsulates information about the resource usage during the operation of the model, typically containing data about execution or API limits.&lt;SEP&gt;Usage refers to the data structure that captures the usage statistics for requests made by users, including token limits.&lt;SEP&gt;Usage refers to the metrics related to the consumption of resources in the context of the StreamedRunResult.&lt;SEP&gt;Usage represents a category that tracks the consumption statistics of API requests, showing how many tokens and requests are used in interactions.&lt;SEP&gt;Usage represents the metrics associated with requests made to the LLM API, including request and response tokens.&lt;SEP&gt;Usage tracks the resource usage information related to requests handled by the AI model.</data>
      <data key="d3">chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc&lt;SEP&gt;chunk-5f42fa22c7c2c65ec3a39c77ddb963a0&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea&lt;SEP&gt;chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Client">
      <data key="d0">Client</data>
      <data key="d1">organization</data>
      <data key="d2">Client is an instantiated object that interacts with external services, specifically designed to handle API requests and responses.</data>
      <data key="d3">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight Search Agent">
      <data key="d0">Flight Search Agent</data>
      <data key="d1">organization</data>
      <data key="d2">The Flight Search Agent is an AI tool designed to assist users in finding flights based on preferences and usage limits.</data>
      <data key="d3">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Seat Preference Agent">
      <data key="d0">Seat Preference Agent</data>
      <data key="d1">organization</data>
      <data key="d2">The Seat Preference Agent is a specialized tool that helps users select their seat preferences when booking a flight.</data>
      <data key="d3">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="find_flight">
      <data key="d0">find_flight</data>
      <data key="d1">event</data>
      <data key="d2">The find_flight function is a key process in the app that prompts the user for flight preferences and searches for suitable flights.</data>
      <data key="d3">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="find_seat">
      <data key="d0">find_seat</data>
      <data key="d1">event</data>
      <data key="d2">The find_seat function interacts with users to determine their seat preferences during the flight booking process.</data>
      <data key="d3">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Box">
      <data key="d0">Box</data>
      <data key="d1">category</data>
      <data key="d2">Box is a class model in Pydantic that represents the dimensions of a container with attributes like width, height, depth, and units.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Union">
      <data key="d0">Union</data>
      <data key="d1">category</data>
      <data key="d2">Union is a type hint from the typing module used in Python to specify that a value can be one of multiple types.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent[None, Union[Box, str]]">
      <data key="d0">Agent[None, Union[Box, str]]</data>
      <data key="d1">category</data>
      <data key="d2">This is an instantiation of the Agent class that can return either a structured Box object or a string, representing the agent's functionality in handling different return types.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="colors_or_sizes.py">
      <data key="d0">colors_or_sizes.py</data>
      <data key="d1">category</data>
      <data key="d2">colors_or_sizes.py is an example script demonstrating how to utilize an Agent to extract colors or sizes from provided input shapes.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sql_gen.py">
      <data key="d0">sql_gen.py</data>
      <data key="d1">category</data>
      <data key="d2">sql_gen.py is an example script showcasing the generation of SQL queries using an Agent that validates the query results before execution.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="colors">
      <data key="d0">colors</data>
      <data key="d1">category</data>
      <data key="d2">Colors are categorical attributes used to describe the visual properties of shapes or objects.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sizes">
      <data key="d0">sizes</data>
      <data key="d1">category</data>
      <data key="d2">Sizes refer to numerical measurements that describe the dimensions of shapes or objects.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="width">
      <data key="d0">width</data>
      <data key="d1">category</data>
      <data key="d2">Width is a spatial dimension of the Box entity, representing its horizontal extent.&lt;SEP&gt;width specifies the horizontal dimension of the diagram, defining its size for better visual representation.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="height">
      <data key="d0">height</data>
      <data key="d1">category</data>
      <data key="d2">Height is a spatial dimension of the Box entity, representing its vertical extent.&lt;SEP&gt;height indicates the vertical dimension of the diagram, also essential for establishing its proportions.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="depth">
      <data key="d0">depth</data>
      <data key="d1">category</data>
      <data key="d2">Depth is a spatial dimension of the Box entity, representing its measurement from front to back.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="units">
      <data key="d0">units</data>
      <data key="d1">category</data>
      <data key="d2">Units are measurement standards that define the scale of dimensions like width, height, and depth of the Box.</data>
      <data key="d3">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="C programming language">
      <data key="d0">C programming language</data>
      <data key="d1">category</data>
      <data key="d2">The C programming language is a high-level programming language that was first recognized with the use of the phrase 'hello, world' in a textbook published in 1974.</data>
      <data key="d3">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="1974 Textbook">
      <data key="d0">1974 Textbook</data>
      <data key="d1">event</data>
      <data key="d2">The 1974 textbook is a significant publication that introduced the phrase 'hello, world', marking its first known use.</data>
      <data key="d3">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Hello World">
      <data key="d0">Hello World</data>
      <data key="d1">category</data>
      <data key="d2">Hello World is a phrase commonly used in programming, especially as the first output lesson for beginners learning how to code.</data>
      <data key="d3">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Textbook">
      <data key="d0">Textbook</data>
      <data key="d1">event</data>
      <data key="d2">The textbook mentioned refers to the specific educational resources published in 1974 that introduced programming concepts, including 'Hello World'.</data>
      <data key="d3">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="1974">
      <data key="d0">1974</data>
      <data key="d1">geo</data>
      <data key="d2">1974 is the year when the phrase 'hello, world' was first documented in a programming textbook, marking a significant point in programming instruction.</data>
      <data key="d3">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Ben">
      <data key="d0">Ben</data>
      <data key="d1">person</data>
      <data key="d2">Ben is a character mentioned multiple times in the text, with attributes including a date of birth and interests that suggest he has a significant role or personality in the narrative.&lt;SEP&gt;Ben is mentioned in multiple instances, with attributes such as his date of birth and interests, suggesting he has a notable presence in the context provided.</data>
      <data key="d3">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="date(1990, 1, 28)">
      <data key="d0">date(1990, 1, 28)</data>
      <data key="d1">category</data>
      <data key="d2">This is a specific date indicating Ben's birthdate, which establishes his age and possibly his life experiences or historical context.</data>
      <data key="d3">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Likes the chain the dog and the pyramid">
      <data key="d0">Likes the chain the dog and the pyramid</data>
      <data key="d1">category</data>
      <data key="d2">This phrase represents a portion of Ben's personal interests or biography, hinting at his preferences or lifestyle.</data>
      <data key="d3">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Likes the chain the dog and the pyr">
      <data key="d0">Likes the chain the dog and the pyr</data>
      <data key="d1">category</data>
      <data key="d2">Similar to the previous entity, this highlights another aspect of Ben's interests, though partially incomplete, reflecting his likes and personality.</data>
      <data key="d3">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="weather_app">
      <data key="d0">weather_app</data>
      <data key="d1">organization</data>
      <data key="d2">The weather_app is a software application designed to provide weather forecasts and related functionalities.&lt;SEP&gt;weather_app is a software application designed to provide weather forecasts based on user inputs and geographical data.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="London">
      <data key="d0">London</data>
      <data key="d1">geo</data>
      <data key="d2">London is a major city in the United Kingdom and is used as a reference location for weather forecasting.&lt;SEP&gt;London is a major city in the United Kingdom, which serves as a location for weather forecasting in this context.&lt;SEP&gt;London is the capital of England, referenced in user queries regarding the weather.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-8ff58ba8cb6e25434138b24e79d59425&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="weather_forecast">
      <data key="d0">weather_forecast</data>
      <data key="d1">event</data>
      <data key="d2">weather_forecast is the main event within the application where users request weather information for specified dates and locations.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TestModel">
      <data key="d0">TestModel</data>
      <data key="d1">organization</data>
      <data key="d2">TestModel is a model specifically designed for testing purposes, allowing interactions with agents in a controlled environment.&lt;SEP&gt;TestModel is a model used in testing within the Pydantic AI framework, showcasing the capability of handling functional requests.&lt;SEP&gt;TestModel is a utility model designed for testing applications built with PydanticAI.&lt;SEP&gt;TestModel is an artificial agent model used for testing and validating the performance of the weather application without making actual requests.&lt;SEP&gt;TestModel is used within the Pydantic framework to test agent capabilities and manage function calls and parameters.&lt;SEP&gt;TestModel refers to a specific model used for testing within the pydantic_ai domain, usable in controlled experiments.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-aeb5e3495054b417710f8e52ebcb151a&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="forecast_date">
      <data key="d0">forecast_date</data>
      <data key="d1">category</data>
      <data key="d2">forecast_date refers to the specific date for which the weather forecast is requested and processed in the application.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pytest">
      <data key="d0">pytest</data>
      <data key="d1">organization</data>
      <data key="d2">pytest is a testing framework that allows for running tests, asserting results, and reporting outcomes in Python applications.&lt;SEP&gt;pytest is a testing framework that enables the writing of simple and scalable test cases for Python applications.&lt;SEP&gt;pytest is a testing framework used for writing and running test cases in Python applications.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Timezone">
      <data key="d0">Timezone</data>
      <data key="d1">category</data>
      <data key="d2">Timezone refers to the specific time zone settings that are used in the application to handle timestamps accurately.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="WeatherService">
      <data key="d0">WeatherService</data>
      <data key="d1">organization</data>
      <data key="d2">WeatherService is the service involved in fetching and providing weather forecasts based on user inquiries.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run_weather_forecast">
      <data key="d0">run_weather_forecast</data>
      <data key="d1">event</data>
      <data key="d2">run_weather_forecast is a function that executes the weather forecasting process, taking user input and providing forecasts.&lt;SEP&gt;run_weather_forecast is a function within the weather application responsible for handling the forecast process given user prompts.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="functions">
      <data key="d0">functions</data>
      <data key="d1">category</data>
      <data key="d2">functions refer to defined operations in the code that carry out specific tasks such as weather forecasting or database interaction.</data>
      <data key="d3">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="call_weather_forecast">
      <data key="d0">call_weather_forecast</data>
      <data key="d1">event</data>
      <data key="d2">call_weather_forecast is a function defined to generate forecasts based on user inputs and dates.</data>
      <data key="d3">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FunctionModel">
      <data key="d0">FunctionModel</data>
      <data key="d1">organization</data>
      <data key="d2">FunctionModel is a class designed for handling function calls, specifically for both streamed and non-streamed requests, which allows for flexible model interactions.&lt;SEP&gt;FunctionModel is a class that initializes and operates either a function or a stream function for handling requests in the Pydantic AI framework.&lt;SEP&gt;FunctionModel is a controlled model type that allows the use of custom functions for tasks, particularly in unit testing scenarios.&lt;SEP&gt;FunctionModel is a model designed to work with function-based responses in the pydantic library.&lt;SEP&gt;FunctionModel is a model that allows for custom functions to be integrated with the weather forecasting process.&lt;SEP&gt;FunctionModel is a part of the Pydantic AI framework that is designed to handle the invocation of functions either streamed or non-streamed, depending on user input.&lt;SEP&gt;FunctionModel is a part of the pydantic_ai_slim framework and facilitates the creation and management of function-based models to handle specific API requests and responses.&lt;SEP&gt;FunctionModel is a specialized model that can execute functions during its operations, enhancing its response capabilities.&lt;SEP&gt;FunctionModel is another type of model used in the pydantic_ai framework, designed for executing functions with associated configurations.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-aeb5e3495054b417710f8e52ebcb151a&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209&lt;SEP&gt;chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-1d2c13afaff5bbc08c268a958dff4edb&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AgentInfo">
      <data key="d0">AgentInfo</data>
      <data key="d1">category</data>
      <data key="d2">AgentInfo is a class that contains information about the agent's identity and capabilities within the weather forecasting application.&lt;SEP&gt;AgentInfo is a class that encapsulates details necessary for processing model requests, including function tools and model settings.&lt;SEP&gt;AgentInfo is a data class that contains information about an agent, including function tools and permissions regarding result types.&lt;SEP&gt;AgentInfo is a dataclass that holds information about an agent, including available function tools, permission settings, and model configurations.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pytestmark">
      <data key="d0">pytestmark</data>
      <data key="d1">category</data>
      <data key="d2">pytestmark is a marker used in pytest for categorizing tests or setting certain testing configurations.</data>
      <data key="d3">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="test_forecast_future">
      <data key="d0">test_forecast_future</data>
      <data key="d1">event</data>
      <data key="d2">test_forecast_future is a test function that validates the weather forecast functionality in the application.</data>
      <data key="d3">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Anne">
      <data key="d0">Anne</data>
      <data key="d1">person</data>
      <data key="d2">Anne is another player who participates in the game and ultimately wins based on her guess.&lt;SEP&gt;Anne is the player in a dice game who successfully guessed the rolled number.</data>
      <data key="d3">chunk-9aa9b9f3160592a6de9590d495a31f97&lt;SEP&gt;chunk-0d5b65b7fc5f3988bd8cbb2a78491eac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dice Game">
      <data key="d0">Dice Game</data>
      <data key="d1">event</data>
      <data key="d2">The Dice Game involves players guessing the outcome of a die roll, with participants striving to achieve the winning result.</data>
      <data key="d3">chunk-0d5b65b7fc5f3988bd8cbb2a78491eac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dice">
      <data key="d0">Dice</data>
      <data key="d1">category</data>
      <data key="d2">Dice are six-sided gaming implements used in various games, including the dice game where players guess the outcome of a roll.</data>
      <data key="d3">chunk-0d5b65b7fc5f3988bd8cbb2a78491eac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Congratulations Message">
      <data key="d0">Congratulations Message</data>
      <data key="d1">category</data>
      <data key="d2">The Congratulations Message is a response given to a player who correctly guesses the outcome of the dice roll, acknowledging their success.</data>
      <data key="d3">chunk-0d5b65b7fc5f3988bd8cbb2a78491eac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-1.5-flash">
      <data key="d0">google-gla:gemini-1.5-flash</data>
      <data key="d1">organization</data>
      <data key="d2">google-gla:gemini-1.5-flash is a model associated with the Agent, utilized for generating responses.&lt;SEP&gt;google-gla:gemini-1.5-flash is a swift variant of the Gemini model, enhancing user interaction speed.</data>
      <data key="d3">chunk-9aa9b9f3160592a6de9590d495a31f97&lt;SEP&gt;chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Yashar">
      <data key="d0">Yashar</data>
      <data key="d1">person</data>
      <data key="d2">Yashar is a participant in the game, expressing a guess during the rolling of the die.</data>
      <data key="d3">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="roll_die">
      <data key="d0">roll_die</data>
      <data key="d1">event</data>
      <data key="d2">roll_die is an event where a die is rolled as part of a guessing game to determine outcomes.&lt;SEP&gt;roll_die is an event where players make guesses about the outcome of a dice roll.</data>
      <data key="d3">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_player_name">
      <data key="d0">get_player_name</data>
      <data key="d1">event</data>
      <data key="d2">get_player_name is an event that retrieves the name of a player based on their input for the game.&lt;SEP&gt;get_player_name is an event that retrieves the name of the player involved in the game.</data>
      <data key="d3">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent A">
      <data key="d0">Agent A</data>
      <data key="d1">organization</data>
      <data key="d2">Agent A is an AI entity that executes tasks and interacts with players during the game.</data>
      <data key="d3">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent B">
      <data key="d0">Agent B</data>
      <data key="d1">organization</data>
      <data key="d2">Agent B is a second AI entity that performs similar functions to Agent A and engages with different players during the game.</data>
      <data key="d3">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tool">
      <data key="d0">Tool</data>
      <data key="d1">category</data>
      <data key="d2">Tool is a class in pydantic_ai that represents a callable tool function that can be executed by an agent.&lt;SEP&gt;Tool is a class representation that encapsulates functionalities needed to perform actions in the agent's ecosystem.&lt;SEP&gt;Tool is a component that offers specific functionalities within the programming framework, enabling various automated processes.&lt;SEP&gt;Tool is a functional structure that encapsulates actions within the framework, allowing for parameterized execution with the help of context.&lt;SEP&gt;Tool refers to functions like roll_die and get_player_name, used by agents to interact in the gameplay.&lt;SEP&gt;Tool refers to functions registered with the Agent that perform specific tasks using the provided context.&lt;SEP&gt;Tool refers to functions that are registered within the Agent framework to perform specific operations when called upon.&lt;SEP&gt;Tool refers to functions that have been registered with the Agent to perform specific tasks, utilizing the provided context efficiently.&lt;SEP&gt;Tool represents a callable entity that performs specific tasks or operations within the agent's framework.&lt;SEP&gt;Tool represents a functional component of the system, being registered and prepared for various steps in a process.</data>
      <data key="d3">chunk-ff513df1fc0c234137e78a2a4fdf00c8&lt;SEP&gt;chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c&lt;SEP&gt;chunk-9aa9b9f3160592a6de9590d495a31f97&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dice_result">
      <data key="d0">dice_result</data>
      <data key="d1">category</data>
      <data key="d2">dice_result is a variable used to store the outcomes of the game rolls for different players.</data>
      <data key="d3">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Foobar">
      <data key="d0">Foobar</data>
      <data key="d1">category</data>
      <data key="d2">Foobar is a data model defined using Pydantic which contains attributes such as integer, string, and float, and provides a structured way to define data.&lt;SEP&gt;Foobar is a model defined using Pydantic that includes certain attributes including integer, string, and float values.</data>
      <data key="d3">chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="function_tools">
      <data key="d0">function_tools</data>
      <data key="d1">category</data>
      <data key="d2">Function tools are mechanisms defined within Pydantic AI that allow actions to be performed based on model-driven parameters.&lt;SEP&gt;Function tools are specialized mechanisms within Pydantic AI that enable actions to be performed based on defined models and their parameters.&lt;SEP&gt;function_tools are specific tools or utilities that facilitate various operations within the agent framework.&lt;SEP&gt;function_tools are the specific tools utilized within Mistral's operations that perform designated functions during processing.&lt;SEP&gt;function_tools denote the set of functionalities or utilities that the Agent can utilize to perform tasks effectively.&lt;SEP&gt;function_tools is an attribute that lists the available tools associated with the agent for execution of functions and responses.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tool_plain">
      <data key="d0">tool_plain</data>
      <data key="d1">category</data>
      <data key="d2">tool_plain is a decorator function in the pydantic AI framework used to register a tool function that does not require a RunContext.&lt;SEP&gt;tool_plain is a decorator in Pydantic AI used to define a tool without additional functionality, primarily for straightforward operations.</data>
      <data key="d3">chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="prepare">
      <data key="d0">prepare</data>
      <data key="d1">category</data>
      <data key="d2">Prepare is a method in Pydantic AI that allows customization of tool definitions before execution, affecting how tools interact during a run.&lt;SEP&gt;prepare is a custom method that allows modification of tool definitions per execution phase, enabling dynamic behavior in tools.</data>
      <data key="d3">chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="hitchhiker">
      <data key="d0">hitchhiker</data>
      <data key="d1">category</data>
      <data key="d2">Hitchhiker is a function defined to respond with a formatted string combining context parameters and an answer, demonstrating the tool functionality.&lt;SEP&gt;hitchhiker is a functional representation that processes context in relation to a specific answer.</data>
      <data key="d3">chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Jupyter Notebook">
      <data key="d0">Jupyter Notebook</data>
      <data key="d1">organization</data>
      <data key="d2">Jupyter Notebook is an open-source web application that allows users to create and share documents containing live code, equations, visualizations, and narrative text.</data>
      <data key="d3">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="nest-asyncio">
      <data key="d0">nest-asyncio</data>
      <data key="d1">category</data>
      <data key="d2">Nest-asyncio is a Python package that allows for nested event loops in asyncio applications, useful for compatibility with environments like Jupyter.</data>
      <data key="d3">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="API Key Configuration">
      <data key="d0">API Key Configuration</data>
      <data key="d1">event</data>
      <data key="d2">API Key Configuration refers to the process of setting up an API key to use with a specific model or service in PydanticAI.</data>
      <data key="d3">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RuntimeError">
      <data key="d0">RuntimeError</data>
      <data key="d1">category</data>
      <data key="d2">RuntimeError is a built-in exception in Python that is raised when the code encounters a runtime error, particularly in the context of model request validation.&lt;SEP&gt;RuntimeError is an error that indicates issues that occur during the execution of a program, such as when an event loop is already running.&lt;SEP&gt;RuntimeError is an exception raised during the execution of a program, often indicating unsupported operations or types in the context of AI model interactions.&lt;SEP&gt;RuntimeError is an exception type that may be raised when model requests are attempted while the requests are disallowed.</data>
      <data key="d3">chunk-aeb5e3495054b417710f8e52ebcb151a&lt;SEP&gt;chunk-459acdb5bfa20be2d698a80bc830b084&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Google Colab">
      <data key="d0">Google Colab</data>
      <data key="d1">organization</data>
      <data key="d2">Google Colab is a cloud-based Jupyter notebook service that allows users to write and execute Python code in the browser, with easy access to GPUs.</data>
      <data key="d3">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="carbon-fiber spikes">
      <data key="d0">carbon-fiber spikes</data>
      <data key="d1">equipment</data>
      <data key="d2">Carbon-fiber spikes are advanced athletic footwear designed to enhance performance in sprinting.</data>
      <data key="d3">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="models">
      <data key="d0">models</data>
      <data key="d1">category</data>
      <data key="d2">Models refer to structured representations or algorithms used by the Agent to perform tasks efficiently.</data>
      <data key="d3">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ResultDataT">
      <data key="d0">ResultDataT</data>
      <data key="d1">category</data>
      <data key="d2">ResultDataT defines the type of data that the Agent will output as results after processing inputs.&lt;SEP&gt;ResultDataT is a generic type representing the data types of results returned by agents during execution.&lt;SEP&gt;ResultDataT is a generic type representing the structure of data returned from asynchronous operations in this context.&lt;SEP&gt;ResultDataT is a predefined type representing the structure of data returned by an agent's operations or methods.&lt;SEP&gt;ResultDataT is a type representing the results produced by agents during their execution process, facilitating the handling of output data.&lt;SEP&gt;ResultDataT is a type that represents the expected structured result after streaming and validation.&lt;SEP&gt;ResultDataT is a type variable defined as a covariant type that represents the result data type for a run.&lt;SEP&gt;ResultDataT is a type variable used in pydantic_ai_slim to denote the result data type of an operation.</data>
      <data key="d3">chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-bd6dfe5e98d926e7e4cb3f17a23e568c&lt;SEP&gt;chunk-08a4d218da7ec53e693bd2773bdb87b2&lt;SEP&gt;chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AgentDepsT">
      <data key="d0">AgentDepsT</data>
      <data key="d1">category</data>
      <data key="d2">AgentDepsT denotes the type of dependencies that can be injected into the Agent for enhanced functionality.&lt;SEP&gt;AgentDepsT encompasses the optional dependencies utilized during the agent's execution.&lt;SEP&gt;AgentDepsT is a generic type defined for the dependencies used by an agent in the context of intelligence processing.&lt;SEP&gt;AgentDepsT is a generic type representing the dependencies that an agent may require for execution.&lt;SEP&gt;AgentDepsT is a type denoting the dependencies or requirements needed for the Agent's operations and task processing.&lt;SEP&gt;AgentDepsT is a type representing the dependencies required for agent execution, crucial for managing the flows in the graph.&lt;SEP&gt;AgentDepsT is a type that defines the dependencies required for an agent's operational context.&lt;SEP&gt;AgentDepsT refers to the type of dependencies related to the agent's operation, used for configuration and context management.&lt;SEP&gt;AgentDepsT represents the type of dependencies used by an agent during its run, specifying various contexts and settings applicable to the agent's operation.</data>
      <data key="d3">chunk-0defe853a1fb0dadf514cce37cdbbd16&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MCPServer">
      <data key="d0">MCPServer</data>
      <data key="d1">organization</data>
      <data key="d2">MCPServer is a base class for creating servers that adhere to the Model Context Protocol specifications.&lt;SEP&gt;MCPServer is a class that represents a generic server for the Model Context Protocol, which facilitates communication between clients and servers.&lt;SEP&gt;MCPServer is a parameter in the Agent that involves the registration of MCP servers for agent connections.&lt;SEP&gt;MCPServer is an organization handling server processes with client streams for communication.&lt;SEP&gt;MCPServer refers to a managed cloud platform that provides various computational services for agents.</data>
      <data key="d3">chunk-570bd1954ac1dec6ff5e11d27332192d&lt;SEP&gt;chunk-209c7ce456d62ec8593bbdf7185e8894&lt;SEP&gt;chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EndStrategy">
      <data key="d0">EndStrategy</data>
      <data key="d1">category</data>
      <data key="d2">EndStrategy refers to the methodology for handling tool calls requested by the Agent alongside producing final results.</data>
      <data key="d3">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MCP Servers">
      <data key="d0">MCP Servers</data>
      <data key="d1">organization</data>
      <data key="d2">MCP Servers refers to a group of servers utilized within the context of processing user prompts and managing interactions across various tools.</data>
      <data key="d3">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tools">
      <data key="d0">Tools</data>
      <data key="d1">category</data>
      <data key="d2">Tools represent various instruments or functions registered with the Agent for executing specified tasks during interactions.</data>
      <data key="d3">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="User Prompt">
      <data key="d0">User Prompt</data>
      <data key="d1">category</data>
      <data key="d2">User Prompt is the initial input provided by the user to the Agent to start or continue a conversation.&lt;SEP&gt;User Prompt is the input provided by users to guide the conversation or query.&lt;SEP&gt;User Prompt is the input provided by users to the Agent, initiating the interaction and influencing the response generated.</data>
      <data key="d3">chunk-5b7a596ee9422b565de815722b0e31dc&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Result Type">
      <data key="d0">Result Type</data>
      <data key="d1">category</data>
      <data key="d2">Result Type refers to the expected output format from the Agent that guides how the results of interactions are structured.</data>
      <data key="d3">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Message History">
      <data key="d0">Message History</data>
      <data key="d1">category</data>
      <data key="d2">Message History captures the record of past interactions between the user and the Agent, informing the current conversation context.</data>
      <data key="d3">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent Run Result">
      <data key="d0">Agent Run Result</data>
      <data key="d1">category</data>
      <data key="d2">Agent Run Result defines the outcome returned by the Agent after processing a user prompt, including the relevant data generated.</data>
      <data key="d3">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAI GPT-4o">
      <data key="d0">OpenAI GPT-4o</data>
      <data key="d1">organization</data>
      <data key="d2">OpenAI GPT-4o refers to a specific instance of the GPT-4 model, developed by OpenAI, used for generating text-based responses in conversations.</data>
      <data key="d3">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Python Code Example">
      <data key="d0">Python Code Example</data>
      <data key="d1">event</data>
      <data key="d2">A demonstration of how the Agent operates using Python code, showcasing the interaction between user prompts and agent response.&lt;SEP&gt;The Python code example demonstrates how to interact with the Agent class and process user prompts to receive responses from the model.</data>
      <data key="d3">chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphAgent">
      <data key="d0">GraphAgent</data>
      <data key="d1">category</data>
      <data key="d2">GraphAgent is a category representing a type of agent that utilizes a graph structure for its operations, managing nodes and tasks in a systematic way.</data>
      <data key="d3">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="CallToolsNode">
      <data key="d0">CallToolsNode</data>
      <data key="d1">event</data>
      <data key="d2">CallToolsNode denotes a stage in the process where the model generates a response based on the input prompt and returns it.&lt;SEP&gt;CallToolsNode is a node that handles the invocation of tools or functions as part of the agent's execution in the graph.&lt;SEP&gt;CallToolsNode is designed to facilitate calls to various tools or methods necessary for the agent's tasks.&lt;SEP&gt;CallToolsNode refers to an event where external tools or functions are called by the agent as part of its processing workflow.&lt;SEP&gt;CallToolsNode represents the event where tools are invoked to receive responses or execute actions as part of the agent's workflow.</data>
      <data key="d3">chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FinalResult">
      <data key="d0">FinalResult</data>
      <data key="d1">category</data>
      <data key="d2">FinalResult denotes the outcome of the agent’s run, which includes the final data returned to the user.&lt;SEP&gt;FinalResult encapsulates the final output of an agent's execution, containing data returned at the end of a processing sequence.&lt;SEP&gt;FinalResult is a class that represents the end output of computations performed by the AI agent, encapsulating the outcome and its metadata.&lt;SEP&gt;FinalResult is a representation of the output data returned at the end of an agent's execution process in the graph.&lt;SEP&gt;FinalResult is the data returned at the end of an agent's run, encapsulating the outcomes of the entire process.&lt;SEP&gt;FinalResult represents the conclusive output generated by the agent after processing a prompt and provides structured details about the outcome.&lt;SEP&gt;FinalResult signifies the completion of an agent run with a defined output.</data>
      <data key="d3">chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model used">
      <data key="d0">model used</data>
      <data key="d1">category</data>
      <data key="d2">Model used refers to the specific language model selected for executing tasks within the agent framework, impacting how results are generated.</data>
      <data key="d3">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="user_prompt">
      <data key="d0">user_prompt</data>
      <data key="d1">category</data>
      <data key="d2">User prompt is the input provided by the user to initiate a conversation or task with the agent.&lt;SEP&gt;User prompt refers to the input given by users to initiate or continue the conversation with the agent.&lt;SEP&gt;user_prompt denotes the initial input provided by the user to the agent, initiating the conversation or task.&lt;SEP&gt;user_prompt is a parameter in the run method that specifies what input the user provides to the agent for processing or conversation continuation.&lt;SEP&gt;user_prompt is the initial input provided by the user to engage with the agent and initiate processing.&lt;SEP&gt;user_prompt is the input provided by the user to initiate or continue a dialogue with the agent.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Run Result">
      <data key="d0">Run Result</data>
      <data key="d1">event</data>
      <data key="d2">Run Result refers to the output generated by the Agent after processing a user prompt.</data>
      <data key="d3">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Model">
      <data key="d0">Model</data>
      <data key="d1">category</data>
      <data key="d2">Model denotes the structure used within the agent framework that defines how data is modeled for operations.&lt;SEP&gt;Model is a foundational concept representing the AI architecture and its interactions with tasks, crucial to OpenAI's tooling.&lt;SEP&gt;Model is a general term used in programming to define a structure that represents data and its behavior within a certain context.&lt;SEP&gt;Model is an abstract base class for a model that defines methods for making requests and handling responses.&lt;SEP&gt;Model is an abstract base class for implementing various models, defining essential methods for making requests and managing responses.&lt;SEP&gt;Model refers to a computational entity that performs specific tasks or represents data processing mechanisms.&lt;SEP&gt;Model refers to a configurable representation of AI capabilities which includes attributes and behaviors tailored for specific functionalities.&lt;SEP&gt;Model refers to an abstract representation within the agent's structure that defines operations and parameters for processing requests.&lt;SEP&gt;Model refers to the algorithm or framework used by the agent to process inputs and generate outputs, essential for the agent's functionality.&lt;SEP&gt;Model refers to the architecture or structure underlying the agent, governing how it processes and responds to user prompts.&lt;SEP&gt;Model refers to the classification used by the agent to generate responses.&lt;SEP&gt;Model refers to the machine learning model that processes input data and generates responses based on its training and design.&lt;SEP&gt;Model refers to the structure that defines how data is represented and manipulated in the operational framework.&lt;SEP&gt;Model refers to the underlying AI systems that process requests and return responses based on input data.&lt;SEP&gt;Model refers to various algorithms or architectures utilized by the Agent for processing data and generating responses.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9&lt;SEP&gt;chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Event Loop">
      <data key="d0">Event Loop</data>
      <data key="d1">category</data>
      <data key="d2">Event Loop is a programming construct that manages and dispatches events or tasks that the Agent needs to handle.</data>
      <data key="d3">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_retries">
      <data key="d0">_retries</data>
      <data key="d1">category</data>
      <data key="d2">_retries is a placeholder that may refer to the number of attempts or retries allowed in the execution of a task by the Agent.</data>
      <data key="d3">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="end_strategy">
      <data key="d0">end_strategy</data>
      <data key="d1">category</data>
      <data key="d2">End strategy determines how the Agent manages tool interactions and final outputs, influencing the decision-making process during execution.&lt;SEP&gt;end_strategy defines the strategy for handling requests that involve tool calls alongside a final result within the Agent's operation.&lt;SEP&gt;end_strategy outlines the method by which an operation determines its conclusion, affecting how tasks are completed.&lt;SEP&gt;end_strategy pertains to the approach or method utilized to conclude processes or tasks within the Agent's operations.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_schema">
      <data key="d0">result_schema</data>
      <data key="d1">category</data>
      <data key="d2">Result schema defines the structure and requirements of the data output expected from the agent's operations.&lt;SEP&gt;result_schema defines the structure or layout of the output data produced by the Agent after processing inputs.</data>
      <data key="d3">chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_tools">
      <data key="d0">result_tools</data>
      <data key="d1">category</data>
      <data key="d2">result_tools define the tools in Mistral that provide output or results after processing requests.&lt;SEP&gt;result_tools is an attribute indicating what tools can be called to deliver the final output of a function run within FunctionModel.&lt;SEP&gt;result_tools refer to the set of tools or functions available for handling results generated by the Agent, aiding in processing and presenting data.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_validators">
      <data key="d0">result_validators</data>
      <data key="d1">category</data>
      <data key="d2">result_validators are mechanisms that ensure the accuracy and validity of the results generated by the Agent.</data>
      <data key="d3">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mcp_servers">
      <data key="d0">mcp_servers</data>
      <data key="d1">category</data>
      <data key="d2">mcp_servers likely refer to the servers that manage the communication and processing tasks of the Agent's operations.&lt;SEP&gt;mcp_servers refers to a sequence of MCPServer instances that the Agent connects to, crucial for its operation and functionality.</data>
      <data key="d3">chunk-4c2a3419dcd475440c12988735eb5e77&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run_span">
      <data key="d0">run_span</data>
      <data key="d1">category</data>
      <data key="d2">run_span denotes the duration or period allocated for the execution of tasks by the Agent, impacting performance and efficiency.</data>
      <data key="d3">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tracer">
      <data key="d0">tracer</data>
      <data key="d1">category</data>
      <data key="d2">tracer is a mechanism used for monitoring and analyzing the execution flow and performance of the agent.&lt;SEP&gt;tracer is a tool or component used for tracking the execution path and performance metrics within the Agent's operations.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="start_node">
      <data key="d0">start_node</data>
      <data key="d1">event</data>
      <data key="d2">start_node is a parameter indicating the initial node in the graph from where execution begins.&lt;SEP&gt;start_node represents the initial point in the process or workflow when the Agent begins executing tasks based on user input or prompts.</data>
      <data key="d3">chunk-4c2a3419dcd475440c12988735eb5e77&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="graph_deps">
      <data key="d0">graph_deps</data>
      <data key="d1">category</data>
      <data key="d2">graph_deps signifies the dependencies associated with the graph structure used in the Agent's operation for processing tasks.</data>
      <data key="d3">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="graph_run">
      <data key="d0">graph_run</data>
      <data key="d1">event</data>
      <data key="d2">graph_run refers to an instance of a graph being executed, managing the flow and state transitions in the defined workflow.&lt;SEP&gt;graph_run represents the execution instance of the Agent within the defined graph structure, managing the flow of tasks and data.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Asynchronous Context Manager">
      <data key="d0">Asynchronous Context Manager</data>
      <data key="d1">event</data>
      <data key="d2">An asynchronous context manager allows the execution of a block of code within a asynchronous framework, managing resource cleanup and state.</data>
      <data key="d3">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_stream">
      <data key="d0">result_stream</data>
      <data key="d1">event</data>
      <data key="d2">Result streams involve the continuous output of data as it is generated, rather than waiting for a complete result.</data>
      <data key="d3">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent Run">
      <data key="d0">Agent Run</data>
      <data key="d1">event</data>
      <data key="d2">Agent Run represents an individual instance of the agent processing a user prompt and providing a response.</data>
      <data key="d3">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Result Data">
      <data key="d0">Result Data</data>
      <data key="d1">category</data>
      <data key="d2">Result Data encompasses the output generated by the agent based on the user prompt and processed through various methods.</data>
      <data key="d3">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_settings">
      <data key="d0">model_settings</data>
      <data key="d1">category</data>
      <data key="d2">Model settings are parameters and configurations specified for the agent to adjust its behavior or output characteristics.&lt;SEP&gt;Model settings are parameters such as maximum tokens and temperature that adjust the behavior and response style of the Gemini model.&lt;SEP&gt;Model settings include any configuration options that adjust how the model operates during processing.&lt;SEP&gt;Model settings provide optional configurations for how an agent interacts with its models during execution.&lt;SEP&gt;ModelSettings encompasses settings that adjust the model's responses, potentially influencing parameters like temperature and token limits.&lt;SEP&gt;model_settings contain configuration parameters and settings specific to the computational model being used.&lt;SEP&gt;model_settings contains the specific configurations passed to the model during the execution of function calls, influencing its behavior.&lt;SEP&gt;model_settings indicates optional settings pertinent to the model's request in the run method, which can influence the output quality or behavior.&lt;SEP&gt;model_settings refers to the settings that govern how the AI model's requests and behavior are configured.&lt;SEP&gt;model_settings represents configurations specific to a model instance within the agent framework.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="asynccontextmanager">
      <data key="d0">asynccontextmanager</data>
      <data key="d1">category</data>
      <data key="d2">Asynccontextmanager is a Python construct used to handle asynchronous context management effectively.&lt;SEP&gt;The asynccontextmanager is a Python construct that allows the definition of an asynchronous context manager, enabling the use of 'async with' statements.&lt;SEP&gt;asynccontextmanager is a Python utility that allows asynchronous functions to be used with context management to handle resources safely.&lt;SEP&gt;asynccontextmanager is a decorator in Python that allows the use of asynchronous context managers, providing a simplified syntax for managing resource allocation and cleanup.</data>
      <data key="d3">chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="currentframe">
      <data key="d0">currentframe</data>
      <data key="d1">category</data>
      <data key="d2">Currentframe refers to the frame object that represents the current context of execution, often used in debugging or inspection.</data>
      <data key="d3">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="inspect">
      <data key="d0">inspect</data>
      <data key="d1">organization</data>
      <data key="d2">Inspect is a Python library module used to retrieve information about live objects, including retrieval of signatures and other attributes related to functions and classes.&lt;SEP&gt;Inspect is a Python module for introspection of live objects, allowing functions to examine the classes, methods, and other attributes.&lt;SEP&gt;Inspect is a Python module that provides access to live objects, allowing introspection of Python programs.&lt;SEP&gt;Inspect is a module in Python that provides introspection capabilities to retrieve information about live objects.&lt;SEP&gt;Inspect is a module in Python that provides the ability to introspect live objects, helping in examining the execution context.&lt;SEP&gt;The 'inspect' module is a standard Python library used for introspection of live objects, retrieving information about their properties and methods.&lt;SEP&gt;inspect is a Python module used to get information about live objects, including functions and classes, aiding in introspection during graph execution.&lt;SEP&gt;inspect is a Python standard library module that provides functions to interact with live objects, including getting insights into modules, classes, and functions.&lt;SEP&gt;inspect is a Python standard library used in the code to analyze live objects, including functions and classes, at runtime.&lt;SEP&gt;inspect is a built-in Python module used to retrieve information about live objects, helping to infer names and debug the execution flow.&lt;SEP&gt;inspect is a module used in the code to provide introspection capabilities, allowing the evaluation of live objects in Python.&lt;SEP&gt;inspect is a standard library in Python used for analyzing live objects, including functions and classes, providing runtime introspection capabilities.&lt;SEP&gt;inspect is a standard library module in Python used to retrieve information about live objects, functions, and code.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb&lt;SEP&gt;chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="token usage">
      <data key="d0">token usage</data>
      <data key="d1">category</data>
      <data key="d2">Token usage refers to the count of tokens consumed during API calls made by the agent, relevant for managing usage limits.</data>
      <data key="d3">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="messages">
      <data key="d0">messages</data>
      <data key="d1">category</data>
      <data key="d2">Messages are a list of ModelMessage objects that contain the conversation data for interaction with the model.&lt;SEP&gt;Messages are structured data that represent communication between components within the tool execution framework.&lt;SEP&gt;Messages refer to the data elements that are being processed and stored in the Chat App, consisting of user inputs and AI responses.&lt;SEP&gt;Messages refer to the data structures that hold exchanges between the system and the user, including requests and responses.&lt;SEP&gt;Messages represent the collection of inputs and instructions sent to the model for processing, including prompts and contextual information.&lt;SEP&gt;messages is a list containing the messages that are sent to the API, used as input for generating model responses.&lt;SEP&gt;messages refers to the list of input messages that are processed by the AI model during requests.</data>
      <data key="d3">chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AgentRunError">
      <data key="d0">AgentRunError</data>
      <data key="d1">person</data>
      <data key="d2">AgentRunError is a base class for errors occurring during an agent run in applications.&lt;SEP&gt;AgentRunError is an exception raised when an agent's execution encounters a critical issue, indicating failure in processing or obtaining results.&lt;SEP&gt;AgentRunError is an exception that indicates an error occurring during the execution cycle of the agent, pointing to issues in process handling.&lt;SEP&gt;AgentRunError is an exception type that indicates an error during the agent's run process, typically related to the expected behavior of the agent.</data>
      <data key="d3">chunk-93010a3465ed2346e5ca1cbbf11fbc95&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_messages.ModelResponse">
      <data key="d0">_messages.ModelResponse</data>
      <data key="d1">category</data>
      <data key="d2">_messages.ModelResponse is a class that manages individual message responses for asynchronous operations, providing structured messaging functionality.&lt;SEP&gt;_messages.ModelResponse is a component involved in encapsulating the model's response to a request.&lt;SEP&gt;_messages.ModelResponse is a component that encapsulates the model's response to a request within the messages structure.&lt;SEP&gt;_messages.ModelResponse is a structure representing the format of messages returned from the streaming process, encapsulating content and metadata.</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_agent_graph">
      <data key="d0">_agent_graph</data>
      <data key="d1">organization</data>
      <data key="d2">The '_agent_graph' is an internal framework within the agent's architecture that manages the flow and logic of agent operations and transitions.&lt;SEP&gt;_agent_graph refers to a collection of classes and methods associated with graph-based agent representations.&lt;SEP&gt;_agent_graph refers to the structural framework that governs the actions and processing of requests within the agent's ecosystem.&lt;SEP&gt;_agent_graph refers to the structure that defines the flow and execution context of actions carried out by the agent.&lt;SEP&gt;_agent_graph serves as the namespace for data structures and functionality related to agent operations, including nodes and graphs.</data>
      <data key="d3">chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="last_message">
      <data key="d0">last_message</data>
      <data key="d1">category</data>
      <data key="d2">last_message is the final message in the messages collection that holds the most recent response from the model.</data>
      <data key="d3">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tool_calls">
      <data key="d0">tool_calls</data>
      <data key="d1">category</data>
      <data key="d2">Tool calls represent instances where the agent invokes external functions or tools as part of executing its tasks.&lt;SEP&gt;tool_calls refers to a list of parts that are classified as tool call parts, generated from the last message.&lt;SEP&gt;tool_calls refers to the various functions invoked within Mistral to process requests and generate responses.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="parts">
      <data key="d0">parts</data>
      <data key="d1">category</data>
      <data key="d2">Parts are the individual segments of content that compose the complete response given by the Gemini model.&lt;SEP&gt;Parts refer to the individual elements within a ModelRequest that contain data and instructions for processing.&lt;SEP&gt;parts are components of the message that may contain content, which can be individually processed during streaming.&lt;SEP&gt;parts is a list that aggregates all the parts of the message request to be processed by the agent.</data>
      <data key="d3">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f&lt;SEP&gt;chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_messages.ToolCallPart">
      <data key="d0">_messages.ToolCallPart</data>
      <data key="d1">category</data>
      <data key="d2">_messages.ToolCallPart represents a category of parts within messages that are related to tool calls made by the agent.</data>
      <data key="d3">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="final_result_details">
      <data key="d0">final_result_details</data>
      <data key="d1">category</data>
      <data key="d2">final_result_details capture the details and metadata related to the final outcomes produced by the agent's execution.</data>
      <data key="d3">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deferreds">
      <data key="d0">deferreds</data>
      <data key="d1">category</data>
      <data key="d2">deferreds are collections of tasks that have not yet been completed, which may be pending actions during the agent's execution.</data>
      <data key="d3">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="StreamedRunResult.usage_limits">
      <data key="d0">StreamedRunResult.usage_limits</data>
      <data key="d1">category</data>
      <data key="d2">StreamedRunResult.usage_limits represent the limitations on resource usage associated with the generation of the result.</data>
      <data key="d3">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="agent.run">
      <data key="d0">agent.run</data>
      <data key="d1">event</data>
      <data key="d2">agent.run is an action that initiates the process for the agent, determining how the model interacts with the provided data.</data>
      <data key="d3">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_validator">
      <data key="d0">result_validator</data>
      <data key="d1">event</data>
      <data key="d2">result_validator is a decorator function in pydantic_ai that registers a result validation function for agents.&lt;SEP&gt;result_validator is a decorator function that registers a validator for the outcomes of an agent's actions in pydantic_ai, helping ensure validation accuracy.&lt;SEP&gt;result_validator is a decorator function that registers a validator for the results of an agent's actions in pydantic_ai.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolFuncContext">
      <data key="d0">ToolFuncContext</data>
      <data key="d1">category</data>
      <data key="d2">ToolFuncContext is a category referring to the context type for tool functions, enabling interaction with runtime data and the agent's dependencies.&lt;SEP&gt;ToolFuncContext is a context class used to handle various parameters and dependencies for tools within the agent.&lt;SEP&gt;ToolFuncContext is a typing category that represents contexts in which tool functions operate within the pydantic_ai framework.&lt;SEP&gt;ToolFuncContext refers to the context provided to functions that are registered as tools within the pydantic_ai library.&lt;SEP&gt;ToolFuncContext refers to the context supplied to functions that have been registered as tools within the pydantic_ai library, aiding in their functionality.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SystemPrompt">
      <data key="d0">SystemPrompt</data>
      <data key="d1">category</data>
      <data key="d2">SystemPrompt encompasses the dynamic and static prompts used in the agent to guide its actions and responses.</data>
      <data key="d3">chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="decorator">
      <data key="d0">decorator</data>
      <data key="d1">category</data>
      <data key="d2">Decorator refers to a programming pattern used within the library to modify functions, adding specific behavior such as validation or context.&lt;SEP&gt;decorator is a function that modifies another function, typically by wrapping it with additional functionality.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="function">
      <data key="d0">function</data>
      <data key="d1">category</data>
      <data key="d2">Function refers to a block of reusable code that performs a specific task within the Mistral framework, utilized in various tool calls and operations.&lt;SEP&gt;Function refers to blocks of reusable code defined within the pydantic_ai that can perform assigned tasks.&lt;SEP&gt;function is a key component in the tool definition, representing the specific functionality that a tool will execute.</data>
      <data key="d3">chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="foobar">
      <data key="d0">foobar</data>
      <data key="d1">event</data>
      <data key="d2">foobar is a sample tool function registered with the Agent, designed to illustrate the functionality of the framework.</data>
      <data key="d3">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="spam">
      <data key="d0">spam</data>
      <data key="d1">event</data>
      <data key="d2">spam is an asynchronous tool function registered with the Agent, demonstrating the handling of asynchronous execution.</data>
      <data key="d3">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="func">
      <data key="d0">func</data>
      <data key="d1">category</data>
      <data key="d2">func is a term often used to refer to a function in Python, representing callable pieces of code that perform specific tasks.&lt;SEP&gt;func is a variable representing a function, which can be either None or a decorated function in the context of this code snippet.&lt;SEP&gt;func refers to any function that can be registered as a tool within the Agent framework, and can operate synchronously or asynchronously.&lt;SEP&gt;func refers to the function being registered as a tool in the context of the pydantic_ai framework, a core component of its functionality.</data>
      <data key="d3">chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-e8b0da52016600c1ab9198b94278d4ae&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="retries">
      <data key="d0">retries</data>
      <data key="d1">category</data>
      <data key="d2">Retries refer to the number of times a tool function can attempt to execute before failing, an adjustable parameter within the Agent framework.&lt;SEP&gt;Retries represent the number of attempts the Agent makes to perform a task before reporting an error, helping to improve reliability.&lt;SEP&gt;Retries specify the number of attempts the tool should make if it fails, which can be customized for individual tool functions.&lt;SEP&gt;retries indicates the number of attempts an operation should make before failing or succeeding.&lt;SEP&gt;retries parameter defines the number of attempts to execute a tool function before failing, providing fault tolerance in executions.&lt;SEP&gt;retries track the number of attempts made to execute a command or process when facing errors.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="name">
      <data key="d0">name</data>
      <data key="d1">category</data>
      <data key="d2">Name is an optional identifier for the task being evaluated, used for reference in reports.&lt;SEP&gt;Name refers to the designated identifier for each tool function, which can either be automatically inferred or manually set.&lt;SEP&gt;name denotes the identifier assigned to a tool for reference and invocation purposes.&lt;SEP&gt;name is a variable representing identifiers used to access and manipulate entries in the sums_by_name data structure.&lt;SEP&gt;name is a variable that represents the parameter to be used for incrementing the metric.&lt;SEP&gt;name parameter indicates the name assigned to the tool, which defaults to the function name if not provided.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284&lt;SEP&gt;chunk-88aa29b286377569bc39ad941b6e9f6a&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deps_type">
      <data key="d0">deps_type</data>
      <data key="d1">category</data>
      <data key="d2">Deps type indicates the type used for dependency injection which facilitates better organization and utilization of various components within the Agent.&lt;SEP&gt;Deps_type defines the expected type for dependencies that tools use, allowing for type safety in their executions.</data>
      <data key="d3">chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolPrepareFunc">
      <data key="d0">ToolPrepareFunc</data>
      <data key="d1">category</data>
      <data key="d2">ToolPrepareFunc defines the preparation logic necessary for configuring tools' definitions before execution.&lt;SEP&gt;ToolPrepareFunc is a customizable function allowing pre-execution preparation for tool definitions.&lt;SEP&gt;ToolPrepareFunc is a function type used in the context of preparing tool definitions, allowing custom behaviors in tool registration.&lt;SEP&gt;ToolPrepareFunc is a type annotation for functions that prepare data or settings before a tool function executes.&lt;SEP&gt;ToolPrepareFunc is a type that encapsulates custom methods to prepare tool definitions during the execution of an agent's function.&lt;SEP&gt;ToolPrepareFunc is a type used to customize how tools are prepared before their execution in the codebase.&lt;SEP&gt;ToolPrepareFunc is the category function that helps in preparing the tool definitions according to specified requirements.</data>
      <data key="d3">chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DocstringFormat">
      <data key="d0">DocstringFormat</data>
      <data key="d1">category</data>
      <data key="d2">DocstringFormat is a category that specifies how the documentation strings are formatted in the code.&lt;SEP&gt;DocstringFormat is an enumeration or set of guidelines that dictate how documentation strings should be formatted in code, enhancing readability and structure.&lt;SEP&gt;DocstringFormat refers to the format used for generating the documentation strings for functions.&lt;SEP&gt;DocstringFormat refers to the various formats that can be applied to tool docstrings, aiding in the clarity and structure of documentation.&lt;SEP&gt;DocstringFormat specifies how the documentation strings within the tool functions are structured and processed.</data>
      <data key="d3">chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-6c55dffdff9c514f2f88b60d9ec9f6c4&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Function Frame">
      <data key="d0">Function Frame</data>
      <data key="d1">event</data>
      <data key="d2">Function Frame refers to the context in which a function is called, relevant for introspection and dynamic operations in programming.</data>
      <data key="d3">chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Function">
      <data key="d0">Function</data>
      <data key="d1">category</data>
      <data key="d2">Function is a block of reusable code designed to perform a particular task, taking parameters and potentially returning a value.&lt;SEP&gt;Function refers to a callable operation that tools are built upon in the pydantic_ai framework.&lt;SEP&gt;Function refers to a specific operation or method defined within the programming code, performing distinct tasks.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-6c55dffdff9c514f2f88b60d9ec9f6c4&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GenerateToolJsonSchema">
      <data key="d0">GenerateToolJsonSchema</data>
      <data key="d1">organization</data>
      <data key="d2">GenerateToolJsonSchema is a class used for creating JSON schemas for tools, ensuring they align with defined structures.&lt;SEP&gt;GenerateToolJsonSchema is a default schema generator used for creating JSON schemas for tool definitions in the pydantic_ai framework.&lt;SEP&gt;GenerateToolJsonSchema is a utility used within pydantic_ai to create JSON schemas for tool definitions automatically.&lt;SEP&gt;GenerateToolJsonSchema refers to a schema generator that creates structured definitions for tools within the Python code base.&lt;SEP&gt;GenerateToolJsonSchema refers to a schema generator used within the Python code for creating tool instances and handling tool definitions.</data>
      <data key="d3">chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dependency Management">
      <data key="d0">Dependency Management</data>
      <data key="d1">category</data>
      <data key="d2">Dependency Management encompasses the strategies and processes used to handle dependencies in programming.</data>
      <data key="d3">chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MCPServerStdio">
      <data key="d0">MCPServerStdio</data>
      <data key="d1">organization</data>
      <data key="d2">MCPServerStdio is a class for running an MCP server as a subprocess and managing input/output streams asynchronously.&lt;SEP&gt;MCPServerStdio is a class that runs an MCP server in a subprocess and communicates over stdin/stdout, implementing the stdio transport as per the MCP specification.&lt;SEP&gt;MCPServerStdio is a type of server used in the context of agent frameworks that facilitates input and output operations.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-209c7ce456d62ec8593bbdf7185e8894&lt;SEP&gt;chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FrameType">
      <data key="d0">FrameType</data>
      <data key="d1">category</data>
      <data key="d2">FrameType is a classification structure typically used in programming to encapsulate specific data or functionality within a system.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="function_frame">
      <data key="d0">function_frame</data>
      <data key="d1">category</data>
      <data key="d2">function_frame is a reference to the current call frame of a function, providing context for execution and variable scope.&lt;SEP&gt;function_frame is an object in Python that provides information about the currently executing function, including its local and global context.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="parent_frame">
      <data key="d0">parent_frame</data>
      <data key="d1">category</data>
      <data key="d2">parent_frame refers to the previous call frame in a stack, enabling access to the hierarchy of function calls.&lt;SEP&gt;parent_frame refers to the prior frame in the call stack, allowing access to the context of the calling function.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self">
      <data key="d0">self</data>
      <data key="d1">person</data>
      <data key="d2">Self refers to the instance of the Usage class within which the methods and attributes operate, encapsulating usage metrics and behaviors.&lt;SEP&gt;The self refers to an instance of the class or context in which methods are called, representing the current object.&lt;SEP&gt;self is a reference to the current instance of a class or method being executed, typically used in object-oriented programming.&lt;SEP&gt;self is a reference used in object-oriented programming to refer to the current instance of a class.&lt;SEP&gt;self refers to an instance of a class that contains methods for tree structure management in the code.&lt;SEP&gt;self refers to the context or current instance of a class or object within a program or method.&lt;SEP&gt;self refers to the current instance of the code or class that is executing, responsible for managing graph run operations.&lt;SEP&gt;self refers to the instance of a class within its own context, often used in methods to access attributes and other methods.&lt;SEP&gt;self refers to the instance of the class that handles streaming and validation of structured responses, managing message flows and results.&lt;SEP&gt;self refers to the instance of the class where the methods and variables belong, conducive to object-oriented programming.&lt;SEP&gt;self represents the instance of the EvaluationReport class that encapsulates the data and methods related to report generation.&lt;SEP&gt;self represents the instance of the class in Python, allowing access to its attributes and methods.&lt;SEP&gt;self typically refers to the instance of the current class in object-oriented programming.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30&lt;SEP&gt;chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-5f42fa22c7c2c65ec3a39c77ddb963a0&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-7024ed9fea1c2b8447084fcacb8e7cfc&lt;SEP&gt;chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="locals">
      <data key="d0">locals</data>
      <data key="d1">category</data>
      <data key="d2">locals refers to the local namespace in a function frame, containing variables that are defined within that function.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="globals">
      <data key="d0">globals</data>
      <data key="d1">category</data>
      <data key="d2">globals refers to the global namespace in a program, housing variables that are accessible throughout the entire codebase.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_tool_name">
      <data key="d0">result_tool_name</data>
      <data key="d1">category</data>
      <data key="d2">Result tool name identifies the specific tool that the Agent utilizes to process and generate results, playing a crucial role in output accuracy.&lt;SEP&gt;result_tool_name denotes the identifier for the final result output tool associated with the agent's operations.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_tool_description">
      <data key="d0">result_tool_description</data>
      <data key="d1">category</data>
      <data key="d2">Result tool description provides information about the functionalities and purposes of the tools employed by the Agent during operation.&lt;SEP&gt;result_tool_description is a parameter used in the initialization of an Agent, describing the final result tool for the agent.&lt;SEP&gt;result_tool_description is an optional string that provides a description for the final result tool used by the Agent in pydantic_ai.&lt;SEP&gt;result_tool_description provides a contextual description for the tool used to generate results from agent activities.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="defer_model_check">
      <data key="d0">defer_model_check</data>
      <data key="d1">category</data>
      <data key="d2">defer_model_check is a boolean that determines whether the model evaluation should be delayed until the first run of the Agent.&lt;SEP&gt;defer_model_check is a setting determining whether model validation should be postponed during execution.</data>
      <data key="d3">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_retries">
      <data key="d0">result_retries</data>
      <data key="d1">category</data>
      <data key="d2">result_retries is a parameter indicating the maximum number of retries allowed for result validation when working with the Agent.&lt;SEP&gt;result_retries is an integer that indicates the number of maximum retries allowed for the Agent's result validation, helping to ensure reliability in results.</data>
      <data key="d3">chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tools">
      <data key="d0">tools</data>
      <data key="d1">category</data>
      <data key="d2">Tools may include customizable functionalities or supporting modules that enhance the model's capabilities during execution.&lt;SEP&gt;tools refers to a sequence of Tool or ToolFuncEither instances that can be registered and used by the Agent for various tasks.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="instrument">
      <data key="d0">instrument</data>
      <data key="d1">category</data>
      <data key="d2">Instrumentation refers to options for tracking and measuring the performance of agents.&lt;SEP&gt;instrument is a parameter that governs whether and how the Agent is instrumented with tracking settings, aimed at debugging and performance monitoring.</data>
      <data key="d3">chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Name">
      <data key="d0">Name</data>
      <data key="d1">category</data>
      <data key="d2">Name is a parameter that specifies the name of the Agent for logging purposes and can be inferred from the call frame if not provided.&lt;SEP&gt;Name refers to a parameter that specifies the name of the tool being created within the pydantic_ai framework.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Type">
      <data key="d0">Type</data>
      <data key="d1">category</data>
      <data key="d2">Type refers to a parameter that indicates the type used for dependency injection within the Agent.</data>
      <data key="d3">chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MCP Server">
      <data key="d0">MCP Server</data>
      <data key="d1">organization</data>
      <data key="d2">MCP Server is a server framework that facilitates communication between the client and various agents, allowing them to execute commands and processes securely.&lt;SEP&gt;MCP Servers are systems that agents can connect to for various functionalities and tasks, enhancing the agent's capabilities.&lt;SEP&gt;The MCP Server is an event where PydanticAI models are deployed and utilized to perform tasks like poem generation.</data>
      <data key="d3">chunk-ca69f7760206a502c8e51fa924646c33&lt;SEP&gt;chunk-f2a50f99aa96dce25696156cf5396887&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model">
      <data key="d0">model</data>
      <data key="d1">category</data>
      <data key="d2">Model refers to the computational or logical constructs that the agent operates upon, which is also managed by the context manager.&lt;SEP&gt;Model represents the type of AI or machine learning model utilized by the agent to process inputs and generate outputs.&lt;SEP&gt;The model refers to the structured representation and algorithms utilized by the Agent for executing tasks and making predictions according to the specified parameters.&lt;SEP&gt;model is an optional parameter in the run method that allows users to specify which AI model to utilize for processing the user prompt.</data>
      <data key="d3">chunk-263f86d77c473effe9073f383e8bfb9e&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_type">
      <data key="d0">result_type</data>
      <data key="d1">category</data>
      <data key="d2">Result type defines the kind of data output expected from the Agent's processes, ensuring that results meet format standards.&lt;SEP&gt;result_type is an optional parameter that allows the specification of a custom result type for the execution of the agent's run method.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="instrument_all">
      <data key="d0">instrument_all</data>
      <data key="d1">event</data>
      <data key="d2">instrument_all is a static method used to set instrumentation options for all agents, indicating how they should be monitored and traced.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="message_history">
      <data key="d0">message_history</data>
      <data key="d1">category</data>
      <data key="d2">Message history is a collection of messages or interactions that have occurred within the context of the agent's operation, often used to maintain continuity.&lt;SEP&gt;Message history maintains a record of the conversation or interactions that have occurred between the user and the agent.&lt;SEP&gt;message_history is a collection of previous messages exchanged during interactions, useful for state management.&lt;SEP&gt;message_history is a parameter that maintains a list of previous messages exchanged in a conversation with the agent, aiding context preservation.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-b0ca3e3a47d636078489a814af89439f&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="infer_name">
      <data key="d0">infer_name</data>
      <data key="d1">category</data>
      <data key="d2">Infer name determines whether the agent will try to deduce its name automatically from the call frame when not explicitly set.&lt;SEP&gt;Infer_name is a parameter that determines whether to automatically deduce the name of the graph from its context.&lt;SEP&gt;infer_name is a boolean parameter in the run method that determines whether the agent should attempt to infer its name based on the call frame.&lt;SEP&gt;infer_name is a boolean parameter indicating whether to auto-generate a name for the graph based on the calling context.</data>
      <data key="d3">chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AgentRunResult">
      <data key="d0">AgentRunResult</data>
      <data key="d1">event</data>
      <data key="d2">AgentRunResult is a class that encapsulates the final result of an agent run, including data and state management for processing messages.&lt;SEP&gt;AgentRunResult is a data structure representing the result of an operation performed by an AI agent.&lt;SEP&gt;AgentRunResult is the output type returned after executing the agent's run method, containing the result of the user's prompt processing.&lt;SEP&gt;AgentRunResult represents the outcome of a single run of an agent within the pydantic_ai framework, containing information about messages and results.&lt;SEP&gt;AgentRunResult represents the output generated by an agent upon completion of a task or user prompt execution.</data>
      <data key="d3">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Async Iterator">
      <data key="d0">Async Iterator</data>
      <data key="d1">category</data>
      <data key="d2">An Async Iterator in the context of the agent facilitates asynchronous processing of tasks and provides a way to iterate over results as they become available.</data>
      <data key="d3">chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="agent_run.data">
      <data key="d0">agent_run.data</data>
      <data key="d1">category</data>
      <data key="d2">agent_run.data holds the final output of the agent's processing after a user prompt has been executed and completed.</data>
      <data key="d3">chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="None">
      <data key="d0">None</data>
      <data key="d1">category</data>
      <data key="d2">None is a built-in constant in programming that represents the absence of a value or a null value in function parameters or variable assignments.&lt;SEP&gt;This is a placeholder entity indicating that there is no content or relevant entities associated with the provided text.</data>
      <data key="d3">chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-1c5ccdde7a3769386d9598c66c9e6650</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UserPrompt">
      <data key="d0">UserPrompt</data>
      <data key="d1">category</data>
      <data key="d2">UserPrompt refers to inputs provided by the user to initiate interaction with the agent.</data>
      <data key="d3">chunk-ba0f6d002d71ff318d304dea37c2feb5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RunResultDataT">
      <data key="d0">RunResultDataT</data>
      <data key="d1">category</data>
      <data key="d2">RunResultDataT is a data structure type used to define the result format for agent executions.&lt;SEP&gt;RunResultDataT is a data type used in the context of the agent's execution results, representing the output from running the agent.&lt;SEP&gt;RunResultDataT is a type indicator for the data returned from the agent's run operations.&lt;SEP&gt;RunResultDataT is a type of data structure used in defining result formats for agent execution.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run_sync">
      <data key="d0">run_sync</data>
      <data key="d1">event</data>
      <data key="d2">run_sync is a method that allows the agent to be executed synchronously based on user input.&lt;SEP&gt;run_sync is a method that runs a graph synchronously, providing a simple interface for executing the graph operations synchronously.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphAgentState">
      <data key="d0">GraphAgentState</data>
      <data key="d1">event</data>
      <data key="d2">GraphAgentState records the internal state of an agent's graph, maintaining necessary information during execution.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tracer.start_span">
      <data key="d0">tracer.start_span</data>
      <data key="d1">event</data>
      <data key="d2">tracer.start_span is a method used to initiate a new tracking span for monitoring the execution of agent processes.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NoOpTracer">
      <data key="d0">NoOpTracer</data>
      <data key="d1">organization</data>
      <data key="d2">NoOpTracer is a specific implementation of a tracer that does not perform any operations.</data>
      <data key="d3">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Async Context Manager">
      <data key="d0">Async Context Manager</data>
      <data key="d1">category</data>
      <data key="d2">Async Context Manager is used to manage the flow of asynchronous operations in the agent's run functions.</data>
      <data key="d3">chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UserContent">
      <data key="d0">UserContent</data>
      <data key="d1">category</data>
      <data key="d2">UserContent is a type for representing information input from users that can be processed by the agent during a session.&lt;SEP&gt;UserContent represents the user input sequences that are processed by the AI agent.</data>
      <data key="d3">chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AbstractAsyncContextManager">
      <data key="d0">AbstractAsyncContextManager</data>
      <data key="d1">category</data>
      <data key="d2">AbstractAsyncContextManager is a class designed to facilitate asynchronous context management by managing state transitions related to async operations.&lt;SEP&gt;AbstractAsyncContextManager is used for managing context during asynchronous operations related to node execution in a graph.</data>
      <data key="d3">chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run_stream">
      <data key="d0">run_stream</data>
      <data key="d1">event</data>
      <data key="d2">run_stream is an event or operation defined in the agent that executes a prompt in an asynchronous context and streams results.</data>
      <data key="d3">chunk-ed10d031435c9386fd353a8330563748</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="override">
      <data key="d0">override</data>
      <data key="d1">method</data>
      <data key="d2">The override method allows temporary changes to an agent's dependencies and model, primarily for testing and evaluation purposes.</data>
      <data key="d3">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Context Manager">
      <data key="d0">Context Manager</data>
      <data key="d1">category</data>
      <data key="d2">A context manager is a programming construct that allows for resource management and setup/teardown actions around code blocks.&lt;SEP&gt;A context manager is a programming construct that allows for resource management through defined entry and exit points in a block of code.</data>
      <data key="d3">chunk-263f86d77c473effe9073f383e8bfb9e&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Testing">
      <data key="d0">Testing</data>
      <data key="d1">event</data>
      <data key="d2">Testing refers to the process of evaluating the functionality and reliability of a system or component, often utilizing context managers for setup.</data>
      <data key="d3">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="override_deps">
      <data key="d0">override_deps</data>
      <data key="d1">category</data>
      <data key="d2">Override_deps is a temporary state indicating modifications to the usual dependencies for specific tasks within the agent.</data>
      <data key="d3">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="override_model">
      <data key="d0">override_model</data>
      <data key="d1">category</data>
      <data key="d2">Override_model is a temporary state indicating changes to the usual model that the agent uses for its operations.</data>
      <data key="d3">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="yield">
      <data key="d0">yield</data>
      <data key="d1">event</data>
      <data key="d2">Yield is a programming construct that allows for pausing execution and transferring control, particularly in the context of managing workflows in context managers.</data>
      <data key="d3">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="func_">
      <data key="d0">func_</data>
      <data key="d1">category</data>
      <data key="d2">func_ refers to a parameter representing a function that is intended to be decorated.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_system_prompt.SystemPromptFunc">
      <data key="d0">_system_prompt.SystemPromptFunc</data>
      <data key="d1">category</data>
      <data key="d2">_system_prompt.SystemPromptFunc is a type definition for functions that create system prompts within the pydantic_ai framework.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="runner">
      <data key="d0">runner</data>
      <data key="d1">category</data>
      <data key="d2">runner is an instance of _system_prompt.SystemPromptRunner for handling the execution of a decorated function.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dynamic">
      <data key="d0">dynamic</data>
      <data key="d1">category</data>
      <data key="d2">dynamic indicates whether the function being decorated should be handled in a dynamic way, influencing the decorator's behavior.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="assert">
      <data key="d0">assert</data>
      <data key="d1">category</data>
      <data key="d2">assert is a keyword used to enforce conditions that must be true at a certain point in code execution.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_system_prompt_dynamic_functions">
      <data key="d0">_system_prompt_dynamic_functions</data>
      <data key="d1">category</data>
      <data key="d2">_system_prompt_dynamic_functions is a collection that holds functions that are handled dynamically by the system prompt.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_system_prompt.SystemPromptRunner">
      <data key="d0">_system_prompt.SystemPromptRunner</data>
      <data key="d1">category</data>
      <data key="d2">_system_prompt.SystemPromptRunner is a class designed to manage the execution flow of system prompts.</data>
      <data key="d3">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tool Prepare Function">
      <data key="d0">Tool Prepare Function</data>
      <data key="d1">category</data>
      <data key="d2">Tool Prepare Function defines the callable that aids in preparing a tool context before execution.&lt;SEP&gt;Tool Prepare Function refers to a customizable method within the Agent framework that prepares tool definitions for execution.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Decorator">
      <data key="d0">Decorator</data>
      <data key="d1">event</data>
      <data key="d2">The Decorator is an event that allows functions to be wrapped with additional functionality, such as registering them as tools.</data>
      <data key="d3">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Docstring Format">
      <data key="d0">Docstring Format</data>
      <data key="d1">category</data>
      <data key="d2">Docstring Format is a specification determining how function docstrings should be processed within the Agent framework.</data>
      <data key="d3">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tool Definition">
      <data key="d0">Tool Definition</data>
      <data key="d1">category</data>
      <data key="d2">Tool Definition refers to the description of a tool function, detailing its parameters, return types, and logic.</data>
      <data key="d3">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Func">
      <data key="d0">Func</data>
      <data key="d1">category</data>
      <data key="d2">Func is a general category referring to functions that may be registered as tools to facilitate various operations in the Agent framework.&lt;SEP&gt;Func refers to a functional programming construct or method that follows specific definitions and configurations in programming language frameworks.</data>
      <data key="d3">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Sync Function">
      <data key="d0">Sync Function</data>
      <data key="d1">category</data>
      <data key="d2">Sync Function refers to functions that are executed in a synchronous manner within the pydantic_ai Agent.</data>
      <data key="d3">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Async Function">
      <data key="d0">Async Function</data>
      <data key="d1">category</data>
      <data key="d2">Async Function denotes a function that operates asynchronously, allowing for non-blocking execution of code through the use of await expressions.&lt;SEP&gt;Async Function refers to functions that allow asynchronous execution within the Agent framework, enabling non-blocking behavior.</data>
      <data key="d3">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="schema_generator">
      <data key="d0">schema_generator</data>
      <data key="d1">category</data>
      <data key="d2">Schema Generator refers to mechanisms used for creating structured representations, like JSON schemas, to describe tools in the Agent framework.&lt;SEP&gt;schema_generator refers to the class used for generating the JSON schema for tools, influencing how tools are structured and validated.</data>
      <data key="d3">chunk-6ca3dfc741d5edc1408783244b6d8d85&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="parameter_descriptions">
      <data key="d0">parameter_descriptions</data>
      <data key="d1">category</data>
      <data key="d2">Parameter Descriptions refer to the documentation provided for each parameter in a function, detailing its purpose and type.</data>
      <data key="d3">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolFuncPlain">
      <data key="d0">ToolFuncPlain</data>
      <data key="d1">category</data>
      <data key="d2">ToolFuncPlain defines a type for plain tool functions registered without requiring a RunContext, streamlining use.&lt;SEP&gt;ToolFuncPlain is a type that indicates a function that can be registered as a tool within an agent's framework.</data>
      <data key="d3">chunk-74d8bed4a268265e628208d04e7ee018&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="docstring_format">
      <data key="d0">docstring_format</data>
      <data key="d1">category</data>
      <data key="d2">docstring_format specifies how the documentation string of the tool should be structured, affecting how users understand the tool function.</data>
      <data key="d3">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="require_parameter_descriptions">
      <data key="d0">require_parameter_descriptions</data>
      <data key="d1">category</data>
      <data key="d2">require_parameter_descriptions is a boolean setting determining if missing parameter descriptions should trigger an error, promoting thorough documentation.</data>
      <data key="d3">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="strict">
      <data key="d0">strict</data>
      <data key="d1">category</data>
      <data key="d2">strict defines whether JSON schema compliance is strictly enforced, impacting how tools are executed within the agent's framework.&lt;SEP&gt;strict is a boolean parameter that determines whether JSON schema compliance should be enforced during tool generation.</data>
      <data key="d3">chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AgentNode">
      <data key="d0">AgentNode</data>
      <data key="d1">class</data>
      <data key="d2">AgentNode is a class that represents nodes within the agent's computational graph, allowing for decision-making and processing.&lt;SEP&gt;AgentNode is a fundamental type within the agent graph, representing individual nodes that can perform actions or hold state information during the execution of agents.&lt;SEP&gt;AgentNode represents a component in a computational graph that executes agents, where each node handles specific parts of the operation.&lt;SEP&gt;AgentNode represents a component in a graph structure that executes agents based on dependencies and results.&lt;SEP&gt;AgentNode serves as a foundational component for building the computation graph used by the AI agent for processing tasks.</data>
      <data key="d3">chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GenerateJsonSchema">
      <data key="d0">GenerateJsonSchema</data>
      <data key="d1">class</data>
      <data key="d2">GenerateJsonSchema is a class responsible for generating JSON schemas to define the structure and validation criteria of tool arguments and outputs.&lt;SEP&gt;GenerateJsonSchema is a class used for generating JSON schema definitions from Pydantic models.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RunContext[int]">
      <data key="d0">RunContext[int]</data>
      <data key="d1">class</data>
      <data key="d2">RunContext[int] is a generic type that holds the context relevant to the execution of tool functions in the agent.</data>
      <data key="d3">chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_agent_graph.CallToolsNode">
      <data key="d0">_agent_graph.CallToolsNode</data>
      <data key="d1">category</data>
      <data key="d2">_agent_graph.CallToolsNode is a type of node within the agent graph structure that handles calls to tools or methods.</data>
      <data key="d3">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_agent_graph.UserPromptNode">
      <data key="d0">_agent_graph.UserPromptNode</data>
      <data key="d1">category</data>
      <data key="d2">_agent_graph.UserPromptNode is a category of node designed to represent prompts given by users in the agent system.</data>
      <data key="d3">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_agent_graph.AgentNode">
      <data key="d0">_agent_graph.AgentNode</data>
      <data key="d1">category</data>
      <data key="d2">_agent_graph.AgentNode serves as a base class for various types of nodes that may represent actions or states in an agent run.</data>
      <data key="d3">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_agent_graph.End">
      <data key="d0">_agent_graph.End</data>
      <data key="d1">category</data>
      <data key="d2">_agent_graph.End signifies the endpoint of an agent run, where the final result of the execution is provided.</data>
      <data key="d3">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.agent">
      <data key="d0">pydantic_ai.agent</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic_ai.agent is a module that defines the core functionalities for running agents, managing dependencies, results, and interactions.</data>
      <data key="d3">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run_mcp_servers">
      <data key="d0">run_mcp_servers</data>
      <data key="d1">event</data>
      <data key="d2">run_mcp_servers is an asynchronous event triggered to manage MCP server operations during the execution of an agent's tasks.</data>
      <data key="d3">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o">
      <data key="d0">openai:gpt-4o</data>
      <data key="d1">organization</data>
      <data key="d2">A denotation for OpenAI's next-generation models focusing on interactive and expansive capabilities.&lt;SEP&gt;OpenAI GPT-4o is an advanced language model capable of processing and generating human-like text, integrated into the PydanticAI system for conversational tasks.&lt;SEP&gt;OpenAI GPT-4o is an advanced language model designed for generating text and datasets based on input parameters.&lt;SEP&gt;openai:gpt-4o is a model identifier for OpenAI's GPT-4 version optimized for various tasks and interactions.</data>
      <data key="d3">chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-391c89bfc96eb1cb4879cf1391cd7e50&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Example">
      <data key="d0">Example</data>
      <data key="d1">organization</data>
      <data key="d2">Example is a hypothetical organization referenced within various contexts.</data>
      <data key="d3">chunk-f05343baae3f62f1bed61aebb48d39ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="France">
      <data key="d0">France</data>
      <data key="d1">geo</data>
      <data key="d2">France is a country in Western Europe known for its rich history and cultural heritage.&lt;SEP&gt;France is a country in Western Europe known for its rich history and cultural influence.</data>
      <data key="d3">chunk-f05343baae3f62f1bed61aebb48d39ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Local Code Example">
      <data key="d0">Local Code Example</data>
      <data key="d1">event</data>
      <data key="d2">A code example demonstrating the usage of the Agent and End nodes in a Python script to retrieve information.</data>
      <data key="d3">chunk-4d3f57edc4c3f799d03bb18401fc8f09</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_response">
      <data key="d0">model_response</data>
      <data key="d1">category</data>
      <data key="d2">model_response describes the output produced by the agent model after processing inputs, containing relevant data for further operations.</data>
      <data key="d3">chunk-4d3f57edc4c3f799d03bb18401fc8f09</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self._graph_run">
      <data key="d0">self._graph_run</data>
      <data key="d1">organization</data>
      <data key="d2">self._graph_run refers to an organizational structure within the code that is likely responsible for managing the state and execution of the agent's graph operations.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai_slim/pydantic_ai/agent.py">
      <data key="d0">pydantic_ai_slim/pydantic_ai/agent.py</data>
      <data key="d1">category</data>
      <data key="d2">pydantic_ai_slim/pydantic_ai/agent.py refers to the source code file where the main functionalities related to agent operations are implemented.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="usage()">
      <data key="d0">usage()</data>
      <data key="d1">event</data>
      <data key="d2">usage() is a method for retrieving usage statistics such as token usage and model requests that have occurred during the agent run.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Next Node">
      <data key="d0">Next Node</data>
      <data key="d1">event</data>
      <data key="d2">Next Node represents the subsequent node in a graph structure that is being processed during an agent run.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent Node">
      <data key="d0">Agent Node</data>
      <data key="d1">category</data>
      <data key="d2">An Agent Node is a type of node within the graph that signifies an agent's operation or action being performed.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="End Node">
      <data key="d0">End Node</data>
      <data key="d1">event</data>
      <data key="d2">End Node marks the termination point of a processing operation within the graph structure, indicating completion.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="assertion">
      <data key="d0">assertion</data>
      <data key="d1">event</data>
      <data key="d2">Assertion is used in the code to ensure that the next node conforms to expected types, contributing to error handling and program stability.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="next_node">
      <data key="d0">next_node</data>
      <data key="d1">category</data>
      <data key="d2">next_node is a variable that holds the reference to the next node retrieved during the graph traversal process, vital for sequential execution.&lt;SEP&gt;next_node represents the current node being processed in the graph run, dictating the sequence of execution.&lt;SEP&gt;next_node signifies the immediately following node in the execution sequence of the graph run as it processes.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_graph_run">
      <data key="d0">_graph_run</data>
      <data key="d1">organization</data>
      <data key="d2">_graph_run indicates a process or operation managing the execution of the graph, maintaining the state and flow.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="node">
      <data key="d0">node</data>
      <data key="d1">category</data>
      <data key="d2">Node is a general reference to any point within the graph structure that may perform or represent various tasks in processing.</data>
      <data key="d3">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_state">
      <data key="d0">_state</data>
      <data key="d1">organization</data>
      <data key="d2">_state is an internal object that manages the state of a program, potentially including tracking usage.</data>
      <data key="d3">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Return Statement">
      <data key="d0">Return Statement</data>
      <data key="d1">category</data>
      <data key="d2">Return Statement refers to a programming command that outputs a value from a function, in this case, the usage of the entire run.</data>
      <data key="d3">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self._state">
      <data key="d0">self._state</data>
      <data key="d1">organization</data>
      <data key="d2">self._state is an instance variable that contains the current state of the program, which includes attributes and methods for managing functionality.</data>
      <data key="d3">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="all_messages">
      <data key="d0">all_messages</data>
      <data key="d1">method</data>
      <data key="d2">all_messages is a method that retrieves the entire history of messages processed, suitable for reviewing the sequence of communications.&lt;SEP&gt;all_messages is a method that retrieves the history of messages associated with the program's execution context.</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085&lt;SEP&gt;chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="result_tool_return_content">
      <data key="d0">result_tool_return_content</data>
      <data key="d1">person</data>
      <data key="d2">result_tool_return_content is a parameter for functions that allows modifying the content of the last message, providing flexibility in communication.&lt;SEP&gt;result_tool_return_content is a parameter that dictates the return content of a tool call, which can be modified for continuing conversations.&lt;SEP&gt;result_tool_return_content is a parameter used in the API to specify what the content of the response should be when the tool is called.</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085&lt;SEP&gt;chunk-7024ed9fea1c2b8447084fcacb8e7cfc&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="new_messages">
      <data key="d0">new_messages</data>
      <data key="d1">method</data>
      <data key="d2">new_messages is a method that generates new messages based on the interaction or result from an agent's operation.&lt;SEP&gt;new_messages is a method that returns a list of messages that are newly created or associated with a run of the program.</data>
      <data key="d3">chunk-7024ed9fea1c2b8447084fcacb8e7cfc&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="new_messages_json">
      <data key="d0">new_messages_json</data>
      <data key="d1">method</data>
      <data key="d2">new_messages_json is a method in pydantic_ai that returns new messages as JSON bytes, typically used to facilitate interactions with AI components.&lt;SEP&gt;new_messages_json is a method that outputs new messages as JSON bytes, often used in programming for data interchange.</data>
      <data key="d3">chunk-7024ed9fea1c2b8447084fcacb8e7cfc&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tracer">
      <data key="d0">Tracer</data>
      <data key="d1">category</data>
      <data key="d2">Tracer is a component used for recording and managing traces of execution in systems, essential for performance and observability.&lt;SEP&gt;Tracer is a component used for tracing execution paths and recording telemetry data, essential for monitoring performance and observability.&lt;SEP&gt;Tracer is part of the instrumentation settings within pydantic_ai, used for tracking and logging events.</data>
      <data key="d3">chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EventLogger">
      <data key="d0">EventLogger</data>
      <data key="d1">category</data>
      <data key="d2">EventLogger is used in pydantic_ai for logging events during AI operation.</data>
      <data key="d3">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="JSON bytes">
      <data key="d0">JSON bytes</data>
      <data key="d1">category</data>
      <data key="d2">JSON bytes refer to data in a structured format used for communication within the pydantic_ai framework, particularly for message transfer.</data>
      <data key="d3">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai/pydantic_ai/agent.py">
      <data key="d0">pydantic_ai/pydantic_ai/agent.py</data>
      <data key="d1">geo</data>
      <data key="d2">pydantic_ai/pydantic_ai/agent.py is the source code file where the agent functionality is implemented within the pydantic_ai library.</data>
      <data key="d3">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TracerProvider">
      <data key="d0">TracerProvider</data>
      <data key="d1">category</data>
      <data key="d2">TracerProvider is a class used to provide access to tracer instances that are utilized for distributed tracing in OpenTelemetry.&lt;SEP&gt;TracerProvider is a component in OpenTelemetry that facilitates the creation and management of tracers for observability.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EventLoggerProvider">
      <data key="d0">EventLoggerProvider</data>
      <data key="d1">category</data>
      <data key="d2">EventLoggerProvider is a class responsible for providing event logger instances to log events in OpenTelemetry.&lt;SEP&gt;EventLoggerProvider is a component in OpenTelemetry that manages event logging for observability.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="logfire.configure()">
      <data key="d0">logfire.configure()</data>
      <data key="d1">event</data>
      <data key="d2">logfire.configure() is a function used to set the global tracer and event logger providers in OpenTelemetry.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="logs">
      <data key="d0">logs</data>
      <data key="d1">category</data>
      <data key="d2">Logs are structured records emitted by systems that track events and states, providing a trail of operations performed by programs.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="attributes">
      <data key="d0">attributes</data>
      <data key="d1">category</data>
      <data key="d2">Attributes are data points or properties associated with an event that provide additional context and meaning.&lt;SEP&gt;Attributes are key-value pairs that include various properties associated with the task run, reflecting contextual information.&lt;SEP&gt;Attributes refer to the properties and parameters that configure the behavior and features of the AI models and their operations.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558&lt;SEP&gt;chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="event_mode">
      <data key="d0">event_mode</data>
      <data key="d1">category</data>
      <data key="d2">Event mode refers to the operational context in which events are emitted, which can include options like 'attributes' and 'logs'.&lt;SEP&gt;event_mode is a configuration setting that determines how events are emitted, either as attributes or logs in an OpenTelemetry span.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="attributes mode">
      <data key="d0">attributes mode</data>
      <data key="d1">category</data>
      <data key="d2">Attributes mode is a configuration setting where events are attached directly to spans as attributes.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="logs mode">
      <data key="d0">logs mode</data>
      <data key="d1">category</data>
      <data key="d2">Logs mode is a configuration setting where events are emitted as log-based events in OpenTelemetry.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_tracer_provider()">
      <data key="d0">get_tracer_provider()</data>
      <data key="d1">event</data>
      <data key="d2">get_tracer_provider() is a function used to retrieve the current tracer provider for managing traces.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_event_logger_provider()">
      <data key="d0">get_event_logger_provider()</data>
      <data key="d1">event</data>
      <data key="d2">get_event_logger_provider() is a function utilized to retrieve the current event logger provider for logging purposes.</data>
      <data key="d3">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="message">
      <data key="d0">message</data>
      <data key="d1">category</data>
      <data key="d2">The message attribute is used to return a string message to the model, indicating a response or feedback.&lt;SEP&gt;message is a variable that holds the current messaging information from the streaming response.</data>
      <data key="d3">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UserError">
      <data key="d0">UserError</data>
      <data key="d1">category</data>
      <data key="d2">UserError is a class that represents errors caused by usage mistakes by application developers.&lt;SEP&gt;UserError is a type of error that might be raised in the context of user interactions, indicating problems encountered during operations.&lt;SEP&gt;UserError is a type of exception raised when a required API key is not provided, indicating an issue with user input during the initialization of Mistral.&lt;SEP&gt;UserError is a type of exception raised when there are issues with user inputs, such as missing required arguments.&lt;SEP&gt;UserError is an exception that indicates an error occurred related to user input or actions, specifically in the context of the GroqProvider's functionality.&lt;SEP&gt;UserError is an exception that is raised when there is an issue with user input or parameters within the Bedrock provider.&lt;SEP&gt;UserError represents a specific type of exception raised when the API key is not set properly, indicating issues in user input or configuration.&lt;SEP&gt;UserError represents an event that occurs when mandatory configurations for initializing providers are not met, indicating issues in setup.&lt;SEP&gt;UserError represents an event that signifies an improper configuration or lack of necessary API credentials in the context of initializing the Groq provider.</data>
      <data key="d3">chunk-93010a3465ed2346e5ca1cbbf11fbc95&lt;SEP&gt;chunk-f235ce39161a5edb725814748db38df4&lt;SEP&gt;chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad&lt;SEP&gt;chunk-a0f0b34a0a28fff06a9b6be854290df6&lt;SEP&gt;chunk-3daa082fe580b04c6ec4f3234e7a073b&lt;SEP&gt;chunk-08a4d218da7ec53e693bd2773bdb87b2&lt;SEP&gt;chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FallbackExceptionGroup">
      <data key="d0">FallbackExceptionGroup</data>
      <data key="d1">category</data>
      <data key="d2">FallbackExceptionGroup consists of exceptions raised when all fallback models fail.&lt;SEP&gt;FallbackExceptionGroup is an exception type that aggregates multiple exceptions that occur when all model fallback attempts fail.</data>
      <data key="d3">chunk-93010a3465ed2346e5ca1cbbf11fbc95&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Fallback Models">
      <data key="d0">Fallback Models</data>
      <data key="d1">category</data>
      <data key="d2">Fallback models refer to alternative systems or backups that are activated when primary systems fail, ensuring operational continuity.</data>
      <data key="d3">chunk-4379cd84952d0fee03cfcca822fde7ed</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MemoryObjectReceiveStream">
      <data key="d0">MemoryObjectReceiveStream</data>
      <data key="d1">category</data>
      <data key="d2">MemoryObjectReceiveStream is a category for streams that receive JSONRPC messages or exceptions.&lt;SEP&gt;MemoryObjectReceiveStream is a class that defines a stream for receiving messages within the context of MCP communication.&lt;SEP&gt;MemoryObjectReceiveStream is utilized for receiving messages in a memory-efficient way during communications with the MCP server.</data>
      <data key="d3">chunk-209c7ce456d62ec8593bbdf7185e8894&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MemoryObjectSendStream">
      <data key="d0">MemoryObjectSendStream</data>
      <data key="d1">category</data>
      <data key="d2">MemoryObjectSendStream is a category for streams that send JSONRPC messages.&lt;SEP&gt;MemoryObjectSendStream is a class that defines a stream for sending messages as part of the MCP communication protocol.&lt;SEP&gt;MemoryObjectSendStream is utilized for sending messages efficiently in the context of MCP communication.</data>
      <data key="d3">chunk-209c7ce456d62ec8593bbdf7185e8894&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncExitStack">
      <data key="d0">AsyncExitStack</data>
      <data key="d1">organization</data>
      <data key="d2">AsyncExitStack is a context management tool in asynchronous programming that simplifies resource management and cleanup operations.&lt;SEP&gt;AsyncExitStack is a context manager used for asynchronous programming to manage exit events.&lt;SEP&gt;AsyncExitStack is a context manager used for managing the exit or cleanup tasks in asynchronous programming, particularly when dealing with resources.&lt;SEP&gt;AsyncExitStack is a utility that manages asynchronous exit conditions and resources in Python.&lt;SEP&gt;AsyncExitStack is a utility that manages resources asynchronously, allowing for controlled exits.&lt;SEP&gt;AsyncExitStack is an asynchronous context manager that allows for multiple exit operations to be handled elegantly and efficiently.</data>
      <data key="d3">chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-1874d189c1d13783a0a35c4fe1c8d046&lt;SEP&gt;chunk-209c7ce456d62ec8593bbdf7185e8894&lt;SEP&gt;chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="client_streams">
      <data key="d0">client_streams</data>
      <data key="d1">event</data>
      <data key="d2">client_streams is an abstract method meant to create client streams for the MCP server.</data>
      <data key="d3">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="list_tools">
      <data key="d0">list_tools</data>
      <data key="d1">event</data>
      <data key="d2">list_tools is an asynchronous method that retrieves tools currently active on the server.</data>
      <data key="d3">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="call_tool">
      <data key="d0">call_tool</data>
      <data key="d1">event</data>
      <data key="d2">call_tool is an asynchronous method used to call a specific tool on the server with given arguments.</data>
      <data key="d3">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ClientSession">
      <data key="d0">ClientSession</data>
      <data key="d1">category</data>
      <data key="d2">ClientSession is a category representing a session that manages communication between a client and the MCP server, handling read and write streams.</data>
      <data key="d3">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="JSONRPCMessage">
      <data key="d0">JSONRPCMessage</data>
      <data key="d1">category</data>
      <data key="d2">JSONRPCMessage is a category for messages conforming to the JSON-RPC protocol, used for remote procedure calls.&lt;SEP&gt;JSONRPCMessage is a message format used in the context of JSON-RPC communication between the client and server.&lt;SEP&gt;JSONRPCMessage is the message format used in JSON-RPC communication, which defines a standard way to communicate between clients and servers.</data>
      <data key="d3">chunk-209c7ce456d62ec8593bbdf7185e8894&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Exception">
      <data key="d0">Exception</data>
      <data key="d1">category</data>
      <data key="d2">Exception is a category representing error events that can occur during the operation of the server and its clients.</data>
      <data key="d3">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MCPServerHTTP">
      <data key="d0">MCPServerHTTP</data>
      <data key="d1">organization</data>
      <data key="d2">MCPServerHTTP is a class that implements an MCP server connecting over streamable HTTP connections.&lt;SEP&gt;MCPServerHTTP is a specific implementation of the MCP server that connects over streamable HTTP connections and utilizes the SSE transport protocol.&lt;SEP&gt;MCPServerHTTP is an implementation of an MCP server connecting over streamable HTTP connections, focusing on the SSE transport from the MCP specification.</data>
      <data key="d3">chunk-570bd1954ac1dec6ff5e11d27332192d&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MCP">
      <data key="d0">MCP</data>
      <data key="d1">category</data>
      <data key="d2">MCP refers to the Model Context Protocol, which is a specification for managing communications between servers and clients.</data>
      <data key="d3">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async context manager">
      <data key="d0">async context manager</data>
      <data key="d1">category</data>
      <data key="d2">An async context manager is a programming construct that allows for asynchronous management of resources, ensuring proper setup and teardown.</data>
      <data key="d3">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="stdio">
      <data key="d0">stdio</data>
      <data key="d1">category</data>
      <data key="d2">Stdio refers to standard input and output in programming, often used for inter-process communication.</data>
      <data key="d3">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="subprocess">
      <data key="d0">subprocess</data>
      <data key="d1">category</data>
      <data key="d2">A subprocess is a separate process created by an executing program, often used to perform tasks concurrently.</data>
      <data key="d3">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="localhost">
      <data key="d0">localhost</data>
      <data key="d1">geo</data>
      <data key="d2">localhost is a standard hostname used to refer to the local computer, commonly employed for testing during development.&lt;SEP&gt;localhost refers to the local computer on which a program is running, often used for testing and development purposes.</data>
      <data key="d3">chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolReturnPart">
      <data key="d0">ToolReturnPart</data>
      <data key="d1">category</data>
      <data key="d2">ToolReturnPart is a data structure that encodes the result of running a tool, containing details such as tool name, content, and timestamps.&lt;SEP&gt;ToolReturnPart is a part of the message that includes the response of a tool call from the model.&lt;SEP&gt;ToolReturnPart is a result type that encapsulates the response from a function tool, including both successful and retry prompts for API calls.&lt;SEP&gt;ToolReturnPart is a structured response type that delivers outcomes from executed tools, including various metadata associated with the call.&lt;SEP&gt;ToolReturnPart refers to a category of messages containing responses from specific tools used by the AI model, indicating the outcome of tool executions.&lt;SEP&gt;ToolReturnPart represents the part of a model message that conveys the output or response of a tool being used in the pydantic_ai context.&lt;SEP&gt;ToolReturnPart represents the response received when a tool is called by the weather agent, containing the results of a weather query.&lt;SEP&gt;ToolReturnPart signifies a part of the response that indicates the return of a result from a tool execution.</data>
      <data key="d3">chunk-4f4eceed73ea96cd06f2303055d3cd57&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-8ff58ba8cb6e25434138b24e79d59425&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelRequestPart">
      <data key="d0">ModelRequestPart</data>
      <data key="d1">category</data>
      <data key="d2">ModelRequestPart is a composite structure that holds various parts of data related to a request being sent to the model.&lt;SEP&gt;ModelRequestPart is a data structure representing messages sent to AI models, encapsulating various message types including prompts and responses.&lt;SEP&gt;ModelRequestPart serves as a base class for different types of elements that can be included in a model request.</data>
      <data key="d3">chunk-6917f262ab39c9184d0d42aaa934095b&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de&lt;SEP&gt;chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelResponsePart">
      <data key="d0">ModelResponsePart</data>
      <data key="d1">category</data>
      <data key="d2">ModelResponsePart is a classification for parts of a response generated by a model, which can be either text or tool calls.&lt;SEP&gt;ModelResponsePart is a part of the message structure returned by a model that can either represent text output or tool calls for various functionalities.&lt;SEP&gt;ModelResponsePart is a part of the overall ModelResponse structure that can encapsulate different types of elements like text or tool use.&lt;SEP&gt;ModelResponsePart is a structure that contains the response data generated by the model after processing a request.&lt;SEP&gt;ModelResponsePart is a structured format that is used to define various components in model responses.&lt;SEP&gt;ModelResponsePart is a structured format used to define various components in model responses.&lt;SEP&gt;ModelResponsePart represents a part of the output from a model response, encapsulating various types of parts based on their content.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc&lt;SEP&gt;chunk-88a4268ed0561dee36cedfe0e8bce930&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de&lt;SEP&gt;chunk-16a247913aead6b056519aa63f310789&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sse_client">
      <data key="d0">sse_client</data>
      <data key="d1">category</data>
      <data key="d2">sse_client is a function or utility that creates a server-sent events connection to facilitate real-time communication over HTTP.</data>
      <data key="d3">chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AudioUrl">
      <data key="d0">AudioUrl</data>
      <data key="d1">category</data>
      <data key="d2">AudioUrl is a data class representing a URL that points to an audio file, allowing determination of the file's media type.&lt;SEP&gt;AudioUrl is a data class used to represent URLs of audio files and includes functionality to determine the media type based on the file extension.&lt;SEP&gt;AudioUrl is a type of content representation for audio files that may be utilized in interactions, currently not implemented.&lt;SEP&gt;AudioUrl is a type of content that could be linked in user prompts, representing audio resources.&lt;SEP&gt;AudioUrl is responsible for managing links to audio files, ensuring the system can process sound content.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ImageUrl">
      <data key="d0">ImageUrl</data>
      <data key="d1">category</data>
      <data key="d2">ImageUrl is a data class that structures the representation of image URLs, providing methods for identifying the media type and format based on the URL extension.&lt;SEP&gt;ImageUrl is a data class used for URLs of images, with methods to determine the media type and format of the image.&lt;SEP&gt;ImageUrl is a type of content associated with images that may be referenced in user prompts.&lt;SEP&gt;ImageUrl represents a link to an image resource, allowing the system to handle visual content in prompts.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai_slim/pydantic_ai/messages.py">
      <data key="d0">pydantic_ai_slim/pydantic_ai/messages.py</data>
      <data key="d1">category</data>
      <data key="d2">This file path indicates the location of the source code that defines various data classes for handling system prompts, audio, image, and document URLs within the pydantic_ai_slim library.</data>
      <data key="d3">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="content">
      <data key="d0">content</data>
      <data key="d1">category</data>
      <data key="d2">Content encompasses the textual or data input provided by users, which forms the basis for interaction with the AI.&lt;SEP&gt;Content refers to the actual data transmitted in the response, which may include generated text or information.&lt;SEP&gt;The content attribute is a string that holds the actual text of a message or prompt, providing the main information that is conveyed.&lt;SEP&gt;content represents the main text or information included in the Gemini response, detailing various segments and their attributes.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72&lt;SEP&gt;chunk-4f4eceed73ea96cd06f2303055d3cd57&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f&lt;SEP&gt;chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="timestamp">
      <data key="d0">timestamp</data>
      <data key="d1">category</data>
      <data key="d2">Timestamp is a data attribute representing the time at which a particular event or response was created, crucial for tracking changes over time.&lt;SEP&gt;Timestamp is an attribute that records the date and time when a certain message or prompt was created or generated, supporting time-based functionalities.&lt;SEP&gt;Timestamp is an indicator of the exact moment when an event occurs, crucial for tracking user interactions with the AI.&lt;SEP&gt;timestamp captures the time at which the streaming response is received.&lt;SEP&gt;timestamp is a property indicating the date and time when a response was finalized in MistralStreamedResponse.&lt;SEP&gt;timestamp is a property indicating the precise time of an event or response, essential for tracking and managing temporal aspects of data.&lt;SEP&gt;timestamp is a property that retrieves the time at which the response was generated.&lt;SEP&gt;timestamp is a property that retrieves the timestamp indicating when the response was generated by the AI model.</data>
      <data key="d3">chunk-4f4eceed73ea96cd06f2303055d3cd57&lt;SEP&gt;chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-9a9bc262ebbbdd42a17a84adee4a7f9d&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356&lt;SEP&gt;chunk-6dec771bf122777d549352881e0fea72&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-a9de914755fc3f23e749c15911fa6734&lt;SEP&gt;chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dynamic_ref">
      <data key="d0">dynamic_ref</data>
      <data key="d1">category</data>
      <data key="d2">Dynamic_ref is an optional attribute that links to functions that generate dynamic system prompts, enhancing flexibility in prompt handling.</data>
      <data key="d3">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="part_kind">
      <data key="d0">part_kind</data>
      <data key="d1">category</data>
      <data key="d2">Part_kind is an attribute that acts as an identifier for the type of part represented within the system prompt, facilitating differentiation of various components.&lt;SEP&gt;Part_kind specifies the type of data structure present in messages, useful for identifying the context of the prompt.&lt;SEP&gt;part_kind is a designation used to identify different types of component parts within data models, such as tool calls or other elements.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc&lt;SEP&gt;chunk-4f4eceed73ea96cd06f2303055d3cd57&lt;SEP&gt;chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="document-url">
      <data key="d0">document-url</data>
      <data key="d1">literal</data>
      <data key="d2">The document-url is a type identifier indicating that the associated data pertains to a document accessible via a URL.</data>
      <data key="d3">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="media_type">
      <data key="d0">media_type</data>
      <data key="d1">category</data>
      <data key="d2">media_type is a property that defines the type of content (such as audio, image, or document) associated with binary data.&lt;SEP&gt;media_type is a property that determines the type of content contained within a document or binary data, based on the URL or encoding.&lt;SEP&gt;media_type is an attribute defining the type of media content, governing how the content is fetched and processed in the document context.</data>
      <data key="d3">chunk-cfb555b3d68851a2fa259151f0745e2a&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="document">
      <data key="d0">document</data>
      <data key="d1">category</data>
      <data key="d2">A data structure that describes a collection of information, typically stored in various formats and accessed via URLs for digital documents and content.</data>
      <data key="d3">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="kind">
      <data key="d0">kind</data>
      <data key="d1">category</data>
      <data key="d2">kind is a class-attribute used as a discriminator across various data structures, primarily to categorize the nature of the content.</data>
      <data key="d3">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="url">
      <data key="d0">url</data>
      <data key="d1">category</data>
      <data key="d2">URL indicates the endpoint where the request is sent for processing, determining the model's function to execute.&lt;SEP&gt;url is a method utilized to derive unique URLs for accessing specific documentation sections based on their paths.&lt;SEP&gt;url is a string variable that constructs the endpoint URL for the image generation based on provided parameters.&lt;SEP&gt;url is an instance-attribute representing the web address of a document, essential for accessing online resources.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c&lt;SEP&gt;chunk-f4ca8586ecb34c1cc087f025313179ba&lt;SEP&gt;chunk-cfb555b3d68851a2fa259151f0745e2a&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="format">
      <data key="d0">format</data>
      <data key="d1">category</data>
      <data key="d2">format is a property that identifies the specific file format of the content, helping in distinguishing data types across various representations.</data>
      <data key="d3">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="data">
      <data key="d0">data</data>
      <data key="d1">category</data>
      <data key="d2">data refers to the actual binary content held within a BinaryContent instance, storing various forms of data such as images or audio recordings.&lt;SEP&gt;data refers to the information that is processed and modified throughout the execution of the graph run, ultimately leading to the final output.</data>
      <data key="d3">chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="user-prompt">
      <data key="d0">user-prompt</data>
      <data key="d1">category</data>
      <data key="d2">The user-prompt category indicates a part type identifier associated with user-generated prompts in the context of interaction with AI models.&lt;SEP&gt;User-prompt signifies the origin of input from users intended to interact with AI systems or tools.</data>
      <data key="d3">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Event">
      <data key="d0">Event</data>
      <data key="d1">event</data>
      <data key="d2">An Event represents an actionable occurrence, specifically in the context of messaging between users and the AI system.&lt;SEP&gt;Event refers to a logged occurrence in OpenTelemetry that can represent various telemetry data points for performance monitoring.&lt;SEP&gt;Event represents a message type that encapsulates user actions or interactions with the AI model.&lt;SEP&gt;Events in OpenTelemetry represent a semantic grouping of signals that describe the performance or behavior of an application.</data>
      <data key="d3">chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dataclass">
      <data key="d0">dataclass</data>
      <data key="d1">category</data>
      <data key="d2">Dataclass is a Python feature used to create classes that are primarily used for storing data without needing to write boilerplate code.&lt;SEP&gt;Dataclass is a decorator in Python that automatically generates special methods like __init__() for classes, enhancing data handling.&lt;SEP&gt;The dataclass is a decorator that automatically generates special methods for user-defined classes, especially useful in managing simple data structures.&lt;SEP&gt;dataclass is a Python decorator that automatically generates special methods for classes, like __init__ and __repr__.</data>
      <data key="d3">chunk-43f708cf2c1ed088f9752946682da243&lt;SEP&gt;chunk-4f4eceed73ea96cd06f2303055d3cd57&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ValidationError">
      <data key="d0">ValidationError</data>
      <data key="d1">event</data>
      <data key="d2">ValidationError is a condition raised when a dataset cannot be parsed due to schema mismatches or format issues.&lt;SEP&gt;ValidationError is an error that is raised when the dataset validation fails, indicating issues with the provided data.&lt;SEP&gt;ValidationError is an exception class used to indicate errors during validation in the context of data handling.&lt;SEP&gt;ValidationError is an exception raised by Pydantic when the validation of input data fails, indicating that the data provided does not conform to the expected model structure.&lt;SEP&gt;ValidationError is an exception raised by Pydantic when the validation of input data fails.&lt;SEP&gt;ValidationError is an exception raised when the dataset cannot be parsed as valid data according to its schema.&lt;SEP&gt;ValidationError occurs when there is an issue with the dataset's response that prevents it from being correctly parsed or validated against the expected schema.&lt;SEP&gt;ValidationError represents an exception that indicates issues with input data validation, typically arising during parsing or processing.</data>
      <data key="d3">chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-a58389fcd1596d9d04e1ed8f3cd54773&lt;SEP&gt;chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-6917f262ab39c9184d0d42aaa934095b&lt;SEP&gt;chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ErrorDetails">
      <data key="d0">ErrorDetails</data>
      <data key="d1">category</data>
      <data key="d2">ErrorDetails is a classification describing specific validation errors encountered during the processing of data with Pydantic, detailing the reasons for failure.&lt;SEP&gt;ErrorDetails refers to the information related to validation errors, detailing why input data failed to validate.</data>
      <data key="d3">chunk-6917f262ab39c9184d0d42aaa934095b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="messages.py">
      <data key="d0">messages.py</data>
      <data key="d1">category</data>
      <data key="d2">messages.py is a Python file within the pydantic_ai_slim module that defines the structure, management, and processing of messages utilized in AI responses.&lt;SEP&gt;messages.py is a source code file within pydantic_ai_slim that encapsulates the definitions and manipulations of message structures used in AI responses.&lt;SEP&gt;messages.py is the source code file in which the implementation of the Pydantic AI message handling and validation mechanisms are defined.</data>
      <data key="d3">chunk-6917f262ab39c9184d0d42aaa934095b&lt;SEP&gt;chunk-3c9b6b4ee61bee314208883b07d282a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RetryPromptPart">
      <data key="d0">RetryPromptPart</data>
      <data key="d1">category</data>
      <data key="d2">RetryPromptPart indicates a component within the response that prompts for a retry of a prior tool call under certain conditions.&lt;SEP&gt;RetryPromptPart is a message category that indicates an attempt to resend a user message to the AI after an initial failure or timeout.&lt;SEP&gt;RetryPromptPart is a specific type of response indicating the need to retry a tool call, often including an ID for matching the result.&lt;SEP&gt;RetryPromptPart is a structured message type in Pydantic AI that indicates a request for the model to attempt an operation again due to prior failures.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-6917f262ab39c9184d0d42aaa934095b&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelRequestPart Kind">
      <data key="d0">ModelRequestPart Kind</data>
      <data key="d1">category</data>
      <data key="d2">ModelRequestPart Kind is a specific classification of parts that indicates the nature or role of the part within a ModelRequest.</data>
      <data key="d3">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="discriminator">
      <data key="d0">discriminator</data>
      <data key="d1">category</data>
      <data key="d2">Discriminator is a type identifier that helps differentiate between various part kinds in a message structure.</data>
      <data key="d3">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="args_as_dict">
      <data key="d0">args_as_dict</data>
      <data key="d1">method</data>
      <data key="d2">args_as_dict is a method that returns the arguments of a model as a Python dictionary for user convenience.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="args_as_json_str">
      <data key="d0">args_as_json_str</data>
      <data key="d1">method</data>
      <data key="d2">args_as_json_str is a method that returns the arguments of a model as a JSON string for ease of use.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="has_content">
      <data key="d0">has_content</data>
      <data key="d1">method</data>
      <data key="d2">has_content is a method that checks if the provided arguments contain any data, returning True or False.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="args">
      <data key="d0">args</data>
      <data key="d1">attribute</data>
      <data key="d2">args refers to the arguments associated with model methods, allowing for customized inputs in model generation.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="args_as_dict()">
      <data key="d0">args_as_dict()</data>
      <data key="d1">method</data>
      <data key="d2">args_as_dict() is a callable method that converts the model's input arguments into a dictionary format for ease of use in Python applications.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="args_as_json_str()">
      <data key="d0">args_as_json_str()</data>
      <data key="d1">method</data>
      <data key="d2">args_as_json_str() is a callable method that takes the model's input arguments and converts them into a JSON string, facilitating data interchange.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="has_content()">
      <data key="d0">has_content()</data>
      <data key="d1">method</data>
      <data key="d2">has_content() is a callable method that checks if the model's arguments contain any data, improving data validation within the framework.</data>
      <data key="d3">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ConfigDict">
      <data key="d0">ConfigDict</data>
      <data key="d1">category</data>
      <data key="d2">ConfigDict enables customization of how data classes interact with data types and validation during runtime.&lt;SEP&gt;ConfigDict is a configuration data structure used within the pydantic_ai_slim framework to manage settings and options for serialization and deserialization.&lt;SEP&gt;ConfigDict is a structure used in the Pydantic library for configuring settings and options for model behavior.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e&lt;SEP&gt;chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TypeAdapter">
      <data key="d0">TypeAdapter</data>
      <data key="d1">category</data>
      <data key="d2">TypeAdapter is a component in the pydantic_ai_slim framework that is responsible for converting between Python data types and structured data formats.</data>
      <data key="d3">chunk-3c9b6b4ee61bee314208883b07d282a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="class-attribute">
      <data key="d0">class-attribute</data>
      <data key="d1">category</data>
      <data key="d2">class-attributes are variables that hold data specific to a class in programming, determining the state of instances of that class.</data>
      <data key="d3">chunk-1c5ccdde7a3769386d9598c66c9e6650</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tool_call_id">
      <data key="d0">tool_call_id</data>
      <data key="d1">category</data>
      <data key="d2">Tool_call_id is a unique identifier used to correlate details regarding a tool call.&lt;SEP&gt;tool_call_id is an optional variable meant to identify tool calls, aiding in tracking and organization of function usages across different contexts.&lt;SEP&gt;tool_call_id refers to an optional identifier used by some models to uniquely identify a tool call part.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789&lt;SEP&gt;chunk-1c5ccdde7a3769386d9598c66c9e6650&lt;SEP&gt;chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="str">
      <data key="d0">str</data>
      <data key="d1">category</data>
      <data key="d2">str is a built-in data type in programming used to represent string values, often utilized in class attributes and function arguments.&lt;SEP&gt;str represents a string data type in Python, commonly used for storing text.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e&lt;SEP&gt;chunk-1c5ccdde7a3769386d9598c66c9e6650</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Literal">
      <data key="d0">Literal</data>
      <data key="d1">category</data>
      <data key="d2">Literal is a type hint in Python that allows for defining a variable that can only take on specific, predefined values.&lt;SEP&gt;Literal is a type hint in programming that constrains a value to a specific set of literal types or values.</data>
      <data key="d3">chunk-1c5ccdde7a3769386d9598c66c9e6650&lt;SEP&gt;chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="args_delta">
      <data key="d0">args_delta</data>
      <data key="d1">category</data>
      <data key="d2">args_delta is a variable that can hold a string or a dictionary, used to manage incremental data additions to tool arguments, indicating its flexibility in content type.</data>
      <data key="d3">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="part_delta_kind">
      <data key="d0">part_delta_kind</data>
      <data key="d1">category</data>
      <data key="d2">part_delta_kind is a constant that identifies the type of part delta, ensuring the correct interpretation of data changes in the context of tool calls.</data>
      <data key="d3">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="as_part">
      <data key="d0">as_part</data>
      <data key="d1">category</data>
      <data key="d2">as_part is a method that converts a delta to a fully formed ToolCallPart if applicable, showcasing the adaptability of the tool's response management.</data>
      <data key="d3">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="apply">
      <data key="d0">apply</data>
      <data key="d1">category</data>
      <data key="d2">apply is a method that updates existing model response parts or deltas by incorporating changes, ensuring accurate and dynamic data handling in tool operations.</data>
      <data key="d3">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="part_start">
      <data key="d0">part_start</data>
      <data key="d1">event</data>
      <data key="d2">Part_start denotes the beginning of a response part in a communication model.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="index">
      <data key="d0">index</data>
      <data key="d1">category</data>
      <data key="d2">Index is an integer attribute representing the position of a part within a list of response parts.&lt;SEP&gt;Index is an integer attribute that represents the position of a part within a list of response parts.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="event_kind">
      <data key="d0">event_kind</data>
      <data key="d1">category</data>
      <data key="d2">Event_kind indicates the type of event being represented, serving as a discriminator in the model.&lt;SEP&gt;Event_kind indicates the type of event being represented, serving as a discriminator.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="delta">
      <data key="d0">delta</data>
      <data key="d1">category</data>
      <data key="d2">Delta represents the changes that are to be applied to a specific part within the model response.&lt;SEP&gt;Delta represents the changes to be applied to a specific part within the model response.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tool_name">
      <data key="d0">tool_name</data>
      <data key="d1">category</data>
      <data key="d2">Tool_name refers to the name of the result tool that was invoked during the model response process.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelResponseStreamEvent">
      <data key="d0">ModelResponseStreamEvent</data>
      <data key="d1">category</data>
      <data key="d2">ModelResponseStreamEvent captures the occurrence of either starting a new part or applying changes to an existing one.&lt;SEP&gt;ModelResponseStreamEvent captures the occurrence of either starting a new part or applying changes to an existing part.&lt;SEP&gt;ModelResponseStreamEvent is an event type representing a streamed response from a model during the processing of a request.&lt;SEP&gt;ModelResponseStreamEvent represents individual events or segments of data within a streamed response from the model, facilitating detailed tracking of output.</data>
      <data key="d3">chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-16a247913aead6b056519aa63f310789&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FunctionToolCallEvent">
      <data key="d0">FunctionToolCallEvent</data>
      <data key="d1">event</data>
      <data key="d2">FunctionToolCallEvent indicates the initiation of a call to a function tool with a specified part.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FunctionToolResultEvent">
      <data key="d0">FunctionToolResultEvent</data>
      <data key="d1">event</data>
      <data key="d2">FunctionToolResultEvent indicates the outcome of a call to a function tool, detailing its result.&lt;SEP&gt;FunctionToolResultEvent indicates the outcome of a call to a function tool.</data>
      <data key="d3">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.providers">
      <data key="d0">pydantic_ai.providers</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic_ai.providers is a module that provides different providers for interacting with APIs, particularly focused on AI interfaces.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="service_account_file">
      <data key="d0">service_account_file</data>
      <data key="d1">category</data>
      <data key="d2">Service account file refers to a file used for authentication with cloud services, which may contain credentials for API access.&lt;SEP&gt;The service account file refers to a security file used to authenticate and authorize access to Google's cloud services, allowing applications to securely interact with Google APIs.&lt;SEP&gt;service_account_file is a file containing credentials required for authenticating applications with Google Cloud services, crucial for secure API access.&lt;SEP&gt;service_account_file is a parameter for initializing providers that specifies the path to a service account file for authentication.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-233c44dbbafc40133b53d2417bab6371&lt;SEP&gt;chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="project_id">
      <data key="d0">project_id</data>
      <data key="d1">category</data>
      <data key="d2">Project ID is a unique identifier for a project within Google Cloud, used to manage resources and permissions.&lt;SEP&gt;Project ID is an identifier for a project within cloud services, allowing for resource organization and management.&lt;SEP&gt;project_id is a parameter required by providers to identify the Google Cloud project being used.&lt;SEP&gt;project_id uniquely identifies a specific project within the Google Cloud ecosystem, used for resource organization and access controls.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-233c44dbbafc40133b53d2417bab6371&lt;SEP&gt;chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_publisher">
      <data key="d0">model_publisher</data>
      <data key="d1">category</data>
      <data key="d2">Model publisher refers to an entity or component responsible for publishing machine learning models for deployment.&lt;SEP&gt;model_publisher indicates the publisher of the AI model, which defaults to 'google' in this context.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="http_client">
      <data key="d0">http_client</data>
      <data key="d1">category</data>
      <data key="d2">Http client refers to an instance used for making HTTP requests, which in this context is asynchronous.&lt;SEP&gt;Httpx.AsyncClient is an existing HTTP client used for making asynchronous HTTP requests within the OpenAI framework.&lt;SEP&gt;The http_client is an asynchronous HTTP client used for making requests to web services, enabling interaction with APIs in a non-blocking manner.&lt;SEP&gt;The http_client refers to the AsyncClient that facilitates making HTTP requests to the Azure API, allowing for interaction with its services.&lt;SEP&gt;http_client is an optional parameter that allows the use of an existing HTTP client for API requests.&lt;SEP&gt;http_client refers to an existing client instance for making HTTP requests used by the Cohere Provider.&lt;SEP&gt;http_client refers to an optional parameter to specify the HTTP client to use for making asynchronous requests in the context of the Azure provider.</data>
      <data key="d3">chunk-72ca9e59f2d2201907ab534202af4af4&lt;SEP&gt;chunk-4789175c72630811bc7e624447f539f5&lt;SEP&gt;chunk-f235ce39161a5edb725814748db38df4&lt;SEP&gt;chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad&lt;SEP&gt;chunk-a0f0b34a0a28fff06a9b6be854290df6&lt;SEP&gt;chunk-233c44dbbafc40133b53d2417bab6371&lt;SEP&gt;chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai_slim/pydantic_ai/providers/__init__.py">
      <data key="d0">pydantic_ai_slim/pydantic_ai/providers/__init__.py</data>
      <data key="d1">organization</data>
      <data key="d2">This file defines the Provider abstract class and its role in providing authenticated clients to various AI interfaces, forming the base for all providers.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai_slim/pydantic_ai/providers/google_vertex.py">
      <data key="d0">pydantic_ai_slim/pydantic_ai/providers/google_vertex.py</data>
      <data key="d1">organization</data>
      <data key="d2">This file contains the GoogleVertexProvider class, which specifically handles API interactions with Google's Vertex AI.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Provider">
      <data key="d0">Provider</data>
      <data key="d1">organization</data>
      <data key="d2">Provider is a generic term denoting an interface or entity that can manage different types of asynchronous clients in the context of AI services.&lt;SEP&gt;Provider is an entity responsible for managing authentication and API access within the Gemini framework.&lt;SEP&gt;Provider is an entity that manages the authentication and API access procedures within the Groq platform.&lt;SEP&gt;Provider is the abstract class that represents AI providers, containing essential methods and properties for all subclasses to implement.&lt;SEP&gt;Provider refers to a system or service that facilitates authentication and API access in Bedrock's context.&lt;SEP&gt;Provider refers to the service entity responsible for offering access to the Gemini API, including necessary authentication mechanisms.&lt;SEP&gt;Provider represents various methods of authentication and settings needed to access the Gemini services.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad&lt;SEP&gt;chunk-23dd09bcb6c976f2167345bb77e402ff&lt;SEP&gt;chunk-3fe1c986ef649646858753879674bde7&lt;SEP&gt;chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncClient">
      <data key="d0">AsyncClient</data>
      <data key="d1">category</data>
      <data key="d2">AsyncClient is a class used to handle asynchronous HTTP requests to various APIs, facilitating data retrieval in the logging process.&lt;SEP&gt;AsyncClient is a type of HTTP client utilized within the GoogleVertexProvider to manage asynchronous API requests.&lt;SEP&gt;AsyncClient is an asynchronous HTTP client utilized in the weather agent to handle API requests efficiently.&lt;SEP&gt;AsyncClient is an instance used for making asynchronous HTTP requests in the context of the Gemini framework.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-990ca6b93e3572bb93527fb4f06bad10&lt;SEP&gt;chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="service_account_info">
      <data key="d0">service_account_info</data>
      <data key="d1">category</data>
      <data key="d2">Service account info is the data extracted from the service account file that contains credentials for authentication with Google services.&lt;SEP&gt;Service account info refers to authentication credentials used to access cloud resources securely, typically containing JSON data.&lt;SEP&gt;service_account_info contains the parsed authentication details from a service account file, used to access Google Cloud services.&lt;SEP&gt;service_account_info is an alternative to service_account_file, containing credential data for authenticating API calls.</data>
      <data key="d3">chunk-795b05e67738f70446b444b9153346b5&lt;SEP&gt;chunk-233c44dbbafc40133b53d2417bab6371&lt;SEP&gt;chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google">
      <data key="d0">google</data>
      <data key="d1">organization</data>
      <data key="d2">Google is a multinational technology company specializing in Internet-related services and products, including a variety of online tools and platforms, such as the Google Cloud Platform and Vertex AI.</data>
      <data key="d3">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncOpenAI">
      <data key="d0">AsyncOpenAI</data>
      <data key="d1">organization</data>
      <data key="d2">AsyncOpenAI is a client for interacting with OpenAI's API allowing asynchronous requests and operations.&lt;SEP&gt;AsyncOpenAI is a library or service that facilitates interactions with OpenAI's API, particularly for embedding creation and AI functionalities.&lt;SEP&gt;AsyncOpenAI is a reference to OpenAI's asynchronous client handling, facilitating non-blocking API calls for enhanced performance in applications using OpenAI's models.&lt;SEP&gt;AsyncOpenAI is an asynchronous client for interacting with the OpenAI API, allowing for non-blocking calls to the service.&lt;SEP&gt;AsyncOpenAI is an entity that operates as part of OpenAI's operational framework, enabling asynchronous communications with their models.&lt;SEP&gt;AsyncOpenAI signifies a provider that offers asynchronous capabilities for interacting with OpenAI's model APIs, enhancing the user experience by allowing non-blocking operations.</data>
      <data key="d3">chunk-72ca9e59f2d2201907ab534202af4af4&lt;SEP&gt;chunk-53688e690a1714927cd95fd846af7f81&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9&lt;SEP&gt;chunk-233c44dbbafc40133b53d2417bab6371&lt;SEP&gt;chunk-7ba9f90f4ef9c80fa2a116ad4984222c&lt;SEP&gt;chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="VertexAIAuth">
      <data key="d0">VertexAIAuth</data>
      <data key="d1">organization</data>
      <data key="d2">VertexAIAuth is a class used for authenticating access to Vertex AI services using a service account.</data>
      <data key="d3">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_client">
      <data key="d0">_client</data>
      <data key="d1">category</data>
      <data key="d2">_client is an instance variable representing the client used to communicate with the OpenAI service.</data>
      <data key="d3">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai_client">
      <data key="d0">openai_client</data>
      <data key="d1">organization</data>
      <data key="d2">OpenAI client is an existing client for making asynchronous requests to OpenAI's API, essential for interacting with AI models.&lt;SEP&gt;The openai_client is an instance of the AsyncAzureOpenAI client designed for making API calls to OpenAI services through Azure.</data>
      <data key="d3">chunk-72ca9e59f2d2201907ab534202af4af4&lt;SEP&gt;chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BaseClient">
      <data key="d0">BaseClient</data>
      <data key="d1">organization</data>
      <data key="d2">BaseClient is a foundational class in the boto3 library from which specific service clients are built.&lt;SEP&gt;BaseClient is a standard client class used for establishing connections to various services, including AWS Bedrock.&lt;SEP&gt;BaseClient serves as a foundational class for clients that interact with various components of the Bedrock service.</data>
      <data key="d3">chunk-3fe1c986ef649646858753879674bde7&lt;SEP&gt;chunk-72ca9e59f2d2201907ab534202af4af4&lt;SEP&gt;chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Bedrock Provider">
      <data key="d0">Bedrock Provider</data>
      <data key="d1">organization</data>
      <data key="d2">The Bedrock Provider is an implementation that initializes a connection to the Bedrock Runtime API, facilitating interactions via AWS.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AWS">
      <data key="d0">AWS</data>
      <data key="d1">organization</data>
      <data key="d2">AWS, or Amazon Web Services, is a subsidiary of Amazon providing on-demand cloud computing platforms and APIs to individuals, companies, and governments.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GroqProvider">
      <data key="d0">GroqProvider</data>
      <data key="d1">organization</data>
      <data key="d2">GroqProvider is a class that serves as a provider for the Groq API, creating a connection for applications to interact with the API services and functionalities.&lt;SEP&gt;GroqProvider is an API provider that allows interaction with the Groq API and is mentioned in the context of an implementation in Python.&lt;SEP&gt;The GroqProvider is a provider implementation that interacts with the Groq API, handling asynchronous communication.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae&lt;SEP&gt;chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Bedrock Runtime">
      <data key="d0">Bedrock Runtime</data>
      <data key="d1">category</data>
      <data key="d2">Bedrock Runtime is an API offered by AWS that allows developers to build and deploy machine learning models.&lt;SEP&gt;Bedrock Runtime is likely a computing or software framework mentioned in a development context, possibly related to gaming or application development.&lt;SEP&gt;Bedrock Runtime is likely a computing or software framework mentioned in the context of client applications or platforms.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae&lt;SEP&gt;chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Config">
      <data key="d0">Config</data>
      <data key="d1">organization</data>
      <data key="d2">Config is a class within the boto3 library that manages configuration settings for AWS service clients.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AWS Region">
      <data key="d0">AWS Region</data>
      <data key="d1">geo</data>
      <data key="d2">AWS Region refers to the geographical areas where AWS data centers are located, providing low-latency and high-availability services.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="aws_access_key_id">
      <data key="d0">aws_access_key_id</data>
      <data key="d1">category</data>
      <data key="d2">aws_access_key_id is a parameter used in AWS configurations to authenticate requests made to AWS services.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="aws_secret_access_key">
      <data key="d0">aws_secret_access_key</data>
      <data key="d1">category</data>
      <data key="d2">aws_secret_access_key is a parameter used in AWS configurations alongside the access key ID to provide secure access to AWS services.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="aws_session_token">
      <data key="d0">aws_session_token</data>
      <data key="d1">category</data>
      <data key="d2">aws_session_token is a temporary security token used in AWS to validate requests for authenticated sessions.</data>
      <data key="d3">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncGroq">
      <data key="d0">AsyncGroq</data>
      <data key="d1">organization</data>
      <data key="d2">AsyncGroq is an asynchronous client designed to interact with the Groq API, providing methods for making non-blocking requests.&lt;SEP&gt;AsyncGroq is an asynchronous client for the Groq API, facilitating the communication and data retrieval processes.&lt;SEP&gt;AsyncGroq is an organization providing an asynchronous client for the Groq service.&lt;SEP&gt;AsyncGroq is an organization that provides an asynchronous client for the Groq service, enabling efficient API interactions.&lt;SEP&gt;AsyncGroq refers to the asynchronous aspect of Groq models, allowing for non-blocking operations during model execution.</data>
      <data key="d3">chunk-23dd09bcb6c976f2167345bb77e402ff&lt;SEP&gt;chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad&lt;SEP&gt;chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncHTTPClient">
      <data key="d0">AsyncHTTPClient</data>
      <data key="d1">organization</data>
      <data key="d2">AsyncHTTPClient is a class that represents an asynchronous HTTP client used for making non-blocking requests.&lt;SEP&gt;AsyncHTTPClient is an asynchronous HTTP client that allows for making non-blocking HTTP requests to various services, including the Groq API.&lt;SEP&gt;AsyncHTTPClient refers to an asynchronous HTTP client used for making HTTP requests in a non-blocking manner.&lt;SEP&gt;AsyncHTTPClient refers to an asynchronous client used for making HTTP requests in a non-blocking manner.</data>
      <data key="d3">chunk-f235ce39161a5edb725814748db38df4&lt;SEP&gt;chunk-08a4d218da7ec53e693bd2773bdb87b2&lt;SEP&gt;chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GROQ_BASE_URL">
      <data key="d0">GROQ_BASE_URL</data>
      <data key="d1">category</data>
      <data key="d2">GROQ_BASE_URL is an environment variable that specifies the base URL for the Groq API, important for establishing the connection.</data>
      <data key="d3">chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GROQ_API_KEY">
      <data key="d0">GROQ_API_KEY</data>
      <data key="d1">category</data>
      <data key="d2">GROQ_API_KEY is an environment variable containing the API key required for authentication when accessing the Groq API.&lt;SEP&gt;GROQ_API_KEY is an environment variable needed for authentication when using the Groq provider.</data>
      <data key="d3">chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad&lt;SEP&gt;chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Azure Provider">
      <data key="d0">Azure Provider</data>
      <data key="d1">organization</data>
      <data key="d2">The Azure Provider is a service offered by Microsoft that provides a range of cloud computing services, including the ability to manage API requests using Azure's OpenAI capabilities.</data>
      <data key="d3">chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Cohere Provider">
      <data key="d0">Cohere Provider</data>
      <data key="d1">organization</data>
      <data key="d2">Cohere Provider is a service that utilizes API keys for authentication and integrates various client types to facilitate asynchronous operations.&lt;SEP&gt;The Cohere Provider is an API service that specializes in machine learning and natural language processing instruments provided by Cohere Inc.</data>
      <data key="d3">chunk-f235ce39161a5edb725814748db38df4&lt;SEP&gt;chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="azure_endpoint">
      <data key="d0">azure_endpoint</data>
      <data key="d1">category</data>
      <data key="d2">The azure_endpoint is a URL specifying the endpoint for Azure services, used for authentication in API calls.</data>
      <data key="d3">chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="api_version">
      <data key="d0">api_version</data>
      <data key="d1">category</data>
      <data key="d2">The api_version indicates the version of the API being used, necessary for ensuring compatibility with various features and functionalities.</data>
      <data key="d3">chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncClientV2">
      <data key="d0">AsyncClientV2</data>
      <data key="d1">organization</data>
      <data key="d2">AsyncClientV2 is a client used for asynchronous API communications with the Cohere services.&lt;SEP&gt;AsyncClientV2 is a client used for making asynchronous requests to the Cohere API, allowing for non-blocking communication.&lt;SEP&gt;AsyncClientV2 is a client used within the Cohere Provider framework for making asynchronous requests.&lt;SEP&gt;AsyncClientV2 refers to the asynchronous client used for API access with Cohere.</data>
      <data key="d3">chunk-f235ce39161a5edb725814748db38df4&lt;SEP&gt;chunk-43f708cf2c1ed088f9752946682da243&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mistral Provider">
      <data key="d0">Mistral Provider</data>
      <data key="d1">organization</data>
      <data key="d2">Mistral Provider is an API service that connects users to the Mistral API, providing functionalities specific to that service.</data>
      <data key="d3">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="CO_API_KEY">
      <data key="d0">CO_API_KEY</data>
      <data key="d1">category</data>
      <data key="d2">CO_API_KEY is an environment variable used to store the API key for authentication purposes.</data>
      <data key="d3">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MISTRAL_API_KEY">
      <data key="d0">MISTRAL_API_KEY</data>
      <data key="d1">category</data>
      <data key="d2">MISTRAL_API_KEY is an environment variable that stores the API key needed for authentication with the Mistral provider.</data>
      <data key="d3">chunk-08a4d218da7ec53e693bd2773bdb87b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralProvider">
      <data key="d0">MistralProvider</data>
      <data key="d1">organization</data>
      <data key="d2">MistralProvider is a provider class that interacts with Mistral services and requires an API key for operations.</data>
      <data key="d3">chunk-08a4d218da7ec53e693bd2773bdb87b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai_slim/pydantic_ai/result.py">
      <data key="d0">pydantic_ai_slim/pydantic_ai/result.py</data>
      <data key="d1">geo</data>
      <data key="d2">pydantic_ai_slim/pydantic_ai/result.py is the source code file where the StreamedRunResult class is defined and implemented.</data>
      <data key="d3">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Generic">
      <data key="d0">Generic</data>
      <data key="d1">category</data>
      <data key="d2">Generic is a class that allows the creation of parameterized classes, enabling the definition of types that are specified later.&lt;SEP&gt;Generic is a concept in programming that allows defining classes with type parameters, enabling code reusability and type safety.&lt;SEP&gt;Generic is a type hint used to indicate that the StreamedRunResult can work with various data types.&lt;SEP&gt;Generic refers to a programming concept that allows classes and methods to operate on different types without committing to a specific data type.</data>
      <data key="d3">chunk-0defe853a1fb0dadf514cce37cdbbd16&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Callable">
      <data key="d0">Callable</data>
      <data key="d1">organization</data>
      <data key="d2">Callable is a type hint referring to a callable function that can be assigned to a variable in Python.&lt;SEP&gt;Callable refers to a function or method that can be invoked in programming contexts.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ResultSchema">
      <data key="d0">ResultSchema</data>
      <data key="d1">category</data>
      <data key="d2">ResultSchema describes the structure and validation rules for the result data of the StreamedRunResult.</data>
      <data key="d3">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TypeVar">
      <data key="d0">TypeVar</data>
      <data key="d1">organization</data>
      <data key="d2">TypeVar is a function in Python's typing module used to create a variable type.</data>
      <data key="d3">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="awaitable">
      <data key="d0">awaitable</data>
      <data key="d1">category</data>
      <data key="d2">Awaitable refers to a type in Python that can be used with 'await'; typically involves asynchronous programming.&lt;SEP&gt;Awaitable refers to an object in asynchronous programming that can be awaited using the await keyword.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_messages.ModelMessage">
      <data key="d0">_messages.ModelMessage</data>
      <data key="d1">organization</data>
      <data key="d2">_messages.ModelMessage represents a model of messages that are involved in the communication within the StreamedRunResult.</data>
      <data key="d3">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="stream">
      <data key="d0">stream</data>
      <data key="d1">event</data>
      <data key="d2">Stream is a method within StreamedRunResult that allows for asynchronous iteration of results.&lt;SEP&gt;stream refers to the process of delivering responses in a continuous flow, allowing for real-time data handling.</data>
      <data key="d3">chunk-34aaffaa470a7a741f62a704e48832ea&lt;SEP&gt;chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="stream_structured">
      <data key="d0">stream_structured</data>
      <data key="d1">event</data>
      <data key="d2">The stream_structured function provides an async iterable of structured responses with debouncing options to manage message flows.&lt;SEP&gt;stream_structured is a function that streams a response as an asynchronous iterable of structured messages.&lt;SEP&gt;stream_structured is a method within StreamedRunResult to stream structured data asynchronously.</data>
      <data key="d3">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea&lt;SEP&gt;chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="stream_text">
      <data key="d0">stream_text</data>
      <data key="d1">function</data>
      <data key="d2">The stream_text function allows text results to be yielded as an async iterable, with options for delta streaming and debouncing.&lt;SEP&gt;stream_text is an asynchronous process that yields text results as they are received, allowing for real-time interaction with data.</data>
      <data key="d3">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c&lt;SEP&gt;chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="debounce_by">
      <data key="d0">debounce_by</data>
      <data key="d1">category</data>
      <data key="d2">debounce_by is a parameter that controls the grouping of response chunks to reduce overhead during streaming.&lt;SEP&gt;debounce_by is a parameter that could be used to control the timing of the streaming response.&lt;SEP&gt;debounce_by is a parameter that determines the delay for grouping response chunks, ensuring efficient processing.</data>
      <data key="d3">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-bd6dfe5e98d926e7e4cb3f17a23e568c&lt;SEP&gt;chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="validate_structured_result">
      <data key="d0">validate_structured_result</data>
      <data key="d1">event</data>
      <data key="d2">The validate_structured_result function checks and validates structured result messages according to defined schemas and validators.&lt;SEP&gt;validate_structured_result is a function designed to verify the accuracy and structure of the data received during asynchronous operations.&lt;SEP&gt;validate_structured_result is an event in the programming context that validates the result structured message received.</data>
      <data key="d3">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-bd6dfe5e98d926e7e4cb3f17a23e568c&lt;SEP&gt;chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_data">
      <data key="d0">get_data</data>
      <data key="d1">function</data>
      <data key="d2">The get_data function streams, validates, and returns the complete response data after ensuring all constraints are met.</data>
      <data key="d3">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="validate_text_result">
      <data key="d0">validate_text_result</data>
      <data key="d1">function</data>
      <data key="d2">The validate_text_result function validates the text result of the stream against specified validators before yielding.</data>
      <data key="d3">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_stream_response">
      <data key="d0">_stream_response</data>
      <data key="d1">organization</data>
      <data key="d2">_stream_response is a part of the asynchronous programming environment responsible for handling the streaming of messages from a source.&lt;SEP&gt;_stream_response is an internal attribute of the class that represents the streaming response object, facilitating the retrieval of message parts.</data>
      <data key="d3">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e&lt;SEP&gt;chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_result_schema">
      <data key="d0">_result_schema</data>
      <data key="d1">organization</data>
      <data key="d2">_result_schema is an internal attribute that holds the schema used for validating structured responses to ensure they conform to expected formats.</data>
      <data key="d3">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_result_tool_name">
      <data key="d0">_result_tool_name</data>
      <data key="d1">organization</data>
      <data key="d2">_result_tool_name is an internal attribute that specifies the name of the result tool associated with the validations for the structured responses.</data>
      <data key="d3">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_result_validators">
      <data key="d0">_result_validators</data>
      <data key="d1">category</data>
      <data key="d2">_result_validators is a collection of validators applied to structured results to ensure data quality and adherence to defined standards.</data>
      <data key="d3">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="exceptions.UserError">
      <data key="d0">exceptions.UserError</data>
      <data key="d1">event</data>
      <data key="d2">exceptions.UserError is an event that indicates an error in using the functions or methods, particularly in the context of streaming text results.</data>
      <data key="d3">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_utils.group_by_temporal">
      <data key="d0">_utils.group_by_temporal</data>
      <data key="d1">organization</data>
      <data key="d2">_utils.group_by_temporal is a utility function that organizes messages based on time, facilitating smoother streaming of message responses.</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="stream_response">
      <data key="d0">stream_response</data>
      <data key="d1">event</data>
      <data key="d2">stream_response refers to an event that yields messages in a streaming manner, enabling real-time processing of message content.</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_stream_response_text">
      <data key="d0">_stream_response_text</data>
      <data key="d1">event</data>
      <data key="d2">_stream_response_text is an event handler that processes and yields response text asynchronously as it is received from the stream.</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="is_complete">
      <data key="d0">is_complete</data>
      <data key="d1">attribute</data>
      <data key="d2">is_complete is a class attribute that denotes whether the streaming process has finished receiving messages, influencing the behavior of the asynchronous flow.</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deltas">
      <data key="d0">deltas</data>
      <data key="d1">data</data>
      <data key="d2">deltas is a list that accumulates chunks of text from streamed responses, optimizing the handling of streaming data.</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Global Tech Index">
      <data key="d0">Global Tech Index</data>
      <data key="d1">index</data>
      <data key="d2">The Global Tech Index tracks the performance of major technology stocks and experienced a 3.4% decline today.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Market Selloff">
      <data key="d0">Market Selloff</data>
      <data key="d1">market_trend</data>
      <data key="d2">Market selloff refers to the significant decline in stock values due to investor concerns over interest rates and regulations.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Federal Reserve Policy Announcement">
      <data key="d0">Federal Reserve Policy Announcement</data>
      <data key="d1">economic_policy</data>
      <data key="d2">The Federal Reserve's upcoming policy announcement is expected to impact investor confidence and market stability.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Stock Markets">
      <data key="d0">Stock Markets</data>
      <data key="d1">category</data>
      <data key="d2">Stock markets are financial marketplaces where shares of publicly-held companies are bought and sold, and they experienced a downturn in the described context.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Investor Concerns">
      <data key="d0">Investor Concerns</data>
      <data key="d1">category</data>
      <data key="d2">Investor concerns encompass the worries and uncertainties that affect investment decisions in financial markets.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Interest Rates">
      <data key="d0">Interest Rates</data>
      <data key="d1">category</data>
      <data key="d2">Interest rates are the cost of borrowing money, which can significantly impact financial markets and investors' behavior.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Regulatory Uncertainty">
      <data key="d0">Regulatory Uncertainty</data>
      <data key="d1">category</data>
      <data key="d2">Regulatory uncertainty refers to the lack of clarity regarding government rules and regulations that can affect business operations and market dynamics.</data>
      <data key="d3">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="structured response">
      <data key="d0">structured response</data>
      <data key="d1">category</data>
      <data key="d2">structured response refers to data returned in a predefined format, suitable for validation and easy manipulation.</data>
      <data key="d3">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncIterator[ResultDataT]">
      <data key="d0">AsyncIterator[ResultDataT]</data>
      <data key="d1">category</data>
      <data key="d2">AsyncIterator[ResultDataT] represents an async iterable that produces instances of ResultDataT, enabling the handling of response data in a structured manner.</data>
      <data key="d3">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Result">
      <data key="d0">Result</data>
      <data key="d1">category</data>
      <data key="d2">Result refers to the output generated from an operation, which can be yielded or processed further in a structured form.</data>
      <data key="d3">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Validator">
      <data key="d0">Validator</data>
      <data key="d1">category</data>
      <data key="d2">Validator is a component responsible for ensuring that data adheres to predefined formats and constraints before further processing.&lt;SEP&gt;Validator is a mechanism that validates the data schema when loading datasets.</data>
      <data key="d3">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="debounce_by parameter">
      <data key="d0">debounce_by parameter</data>
      <data key="d1">category</data>
      <data key="d2">debounce_by parameter defines the delay between processing data chunks to optimize performance in response handling.</data>
      <data key="d3">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="msg">
      <data key="d0">msg</data>
      <data key="d1">category</data>
      <data key="d2">msg is a variable representing the message object that contains parts to be processed in the streaming response.</data>
      <data key="d3">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="usage_checking_stream">
      <data key="d0">usage_checking_stream</data>
      <data key="d1">category</data>
      <data key="d2">usage_checking_stream is responsible for monitoring the usage limits of the asynchronous streaming response.</data>
      <data key="d3">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Gemini">
      <data key="d0">Gemini</data>
      <data key="d1">organization</data>
      <data key="d2">Gemini is a company involved in providing services or products related to AI technology.&lt;SEP&gt;Gemini is a model framework designed for sophisticated AI functions, handling user inputs and generating outputs.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Timeout">
      <data key="d0">Timeout</data>
      <data key="d1">category</data>
      <data key="d2">Timeout refers to the maximum time allowed for a request to be processed by the AI model, ensuring efficient operations.</data>
      <data key="d3">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="max_tokens">
      <data key="d0">max_tokens</data>
      <data key="d1">category</data>
      <data key="d2">max_tokens is an attribute that defines the limit of tokens to be generated in a response by the AI model.</data>
      <data key="d3">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="temperature">
      <data key="d0">temperature</data>
      <data key="d1">category</data>
      <data key="d2">temperature is a parameter that controls the randomness of the AI's outputs, influencing the variety of responses.</data>
      <data key="d3">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="top_p">
      <data key="d0">top_p</data>
      <data key="d1">category</data>
      <data key="d2">top_p is an alternative parameter for controlling the randomness of AI responses, focusing on the probability mass of tokens.</data>
      <data key="d3">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RunContext Initialization">
      <data key="d0">RunContext Initialization</data>
      <data key="d1">event</data>
      <data key="d2">RunContext Initialization is the process of creating a new instance of RunContext with specified arguments for a given execution environment.</data>
      <data key="d3">chunk-0defe853a1fb0dadf514cce37cdbbd16</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolParams">
      <data key="d0">ToolParams</data>
      <data key="d1">category</data>
      <data key="d2">ToolParams is a parameter specification that defines the expected parameters for tool functions, determining how tools interact with the context.</data>
      <data key="d3">chunk-0defe853a1fb0dadf514cce37cdbbd16</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolInjectable">
      <data key="d0">ToolInjectable</data>
      <data key="d1">category</data>
      <data key="d2">ToolInjectable refers to types or functions that can be injected as tools within the framework's architecture.</data>
      <data key="d3">chunk-0defe853a1fb0dadf514cce37cdbbd16</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="answer">
      <data key="d0">answer</data>
      <data key="d1">category</data>
      <data key="d2">answer is a placeholder for the value returned by the function defined within the Tool, representing the output of its operation.</data>
      <data key="d3">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolFuncEither">
      <data key="d0">ToolFuncEither</data>
      <data key="d1">category</data>
      <data key="d2">ToolFuncEither denotes a type that can represent either a regular function or an asynchronous one for tool execution.&lt;SEP&gt;ToolFuncEither represents a type that can be either a callable function or a tool definition, utilized in configuring tools.&lt;SEP&gt;ToolFuncEither represents a type that can be either a callable function or a tool definition.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GenenerateJsonSchema">
      <data key="d0">GenenerateJsonSchema</data>
      <data key="d1">organization</data>
      <data key="d2">GenerateJsonSchema is a utility class used for generating JSON schemas for the tool parameters.</data>
      <data key="d3">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="description">
      <data key="d0">description</data>
      <data key="d1">category</data>
      <data key="d2">description provides narrative details about the tool's purpose and functionality in the framework.</data>
      <data key="d3">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="max_retries">
      <data key="d0">max_retries</data>
      <data key="d1">category</data>
      <data key="d2">max_retries holds the value indicating the maximum number of attempts allowed for executing a tool before failure.</data>
      <data key="d3">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Takes Context">
      <data key="d0">Takes Context</data>
      <data key="d1">category</data>
      <data key="d2">Takes Context refers to a parameter indicating whether a function should receive contextual information during its execution, affecting how it operates within the framework.</data>
      <data key="d3">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Max Retries">
      <data key="d0">Max Retries</data>
      <data key="d1">category</data>
      <data key="d2">Max Retries defines the limit on the number of retry attempts allowed for a tool's execution before failure.&lt;SEP&gt;Max Retries is a configuration setting that determines the number of attempts allowed for a function to execute successfully before declaring a failure.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Schema Generator">
      <data key="d0">Schema Generator</data>
      <data key="d1">category</data>
      <data key="d2">Schema Generator is a class or utility used in the framework to create JSON schemas based on the definition of tools or functions, assisting in data validation and structure.</data>
      <data key="d3">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Parameters Json Schema">
      <data key="d0">Parameters Json Schema</data>
      <data key="d1">category</data>
      <data key="d2">Parameters Json Schema outlines the structure and expected data types for parameters required by a function, ensuring correct data formats during execution.</data>
      <data key="d3">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Prepare Tool Definition">
      <data key="d0">Prepare Tool Definition</data>
      <data key="d1">category</data>
      <data key="d2">Prepare Tool Definition is a method that creates or prepares the definition of a tool, ensuring it is properly configured before use.</data>
      <data key="d3">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Description">
      <data key="d0">Description</data>
      <data key="d1">category</data>
      <data key="d2">Description is a parameter that provides details about the functionality and purpose of a tool in the framework.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Prepare Method">
      <data key="d0">Prepare Method</data>
      <data key="d1">category</data>
      <data key="d2">Prepare Method refers to a custom method that allows for custom preparation of tool definitions before execution.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DeprecationWarning">
      <data key="d0">DeprecationWarning</data>
      <data key="d1">category</data>
      <data key="d2">DeprecationWarning is a signal indicating that a certain feature or function in the framework is obsolete and may be removed in future versions.</data>
      <data key="d3">chunk-3c16ab7b122ed13c1236f5062ceed453</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="my_tool">
      <data key="d0">my_tool</data>
      <data key="d1">person</data>
      <data key="d2">my_tool is a sample Python function defined to demonstrate the use of a tool in the agent's context.&lt;SEP&gt;my_tool is a sample Python function used as an example of how to define and register a tool within the agent framework.</data>
      <data key="d3">chunk-8dbbf042d22f24ab47fdb61c76c368c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="prepare_tool_def">
      <data key="d0">prepare_tool_def</data>
      <data key="d1">function</data>
      <data key="d2">prepare_tool_def is an asynchronous method that generates and returns the tool definition based on the provided context.</data>
      <data key="d3">chunk-8dbbf042d22f24ab47fdb61c76c368c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="json">
      <data key="d0">json</data>
      <data key="d1">category</data>
      <data key="d2">JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and is often used in APIs and configuration files.&lt;SEP&gt;JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write.&lt;SEP&gt;json is a data format that is commonly used for storing and exchanging structured data, particularly in web applications.&lt;SEP&gt;json is a library in Python used to work with JSON data, enabling encoding and decoding of messages sent through the chat app.&lt;SEP&gt;json is a lightweight data interchange format that is easy for humans to read and write, and for machines to parse and generate.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ObjectJsonSchema">
      <data key="d0">ObjectJsonSchema</data>
      <data key="d1">category</data>
      <data key="d2">ObjectJsonSchema is a type alias used in pydantic to define the schema structure of JSON objects, facilitating configuration for tool parameters.</data>
      <data key="d3">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="requests">
      <data key="d0">requests</data>
      <data key="d1">instance-attribute</data>
      <data key="d2">Requests are the total number of calls made to the LLM API, initiated by the Usage class, and are initialized at zero.&lt;SEP&gt;Requests is a class attribute that counts the number of requests made to the LLM API and initializes at zero.&lt;SEP&gt;Requests made to the Gemini model encapsulate user prompts or system instructions to process content generation tasks.&lt;SEP&gt;The 'requests' library is a popular HTTP library in Python that facilitates making HTTP requests and handling responses.</data>
      <data key="d3">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="request_tokens">
      <data key="d0">request_tokens</data>
      <data key="d1">instance-attribute</data>
      <data key="d2">Request_tokens is an instance attribute indicating the number of tokens used when processing requests.&lt;SEP&gt;Request_tokens refers to the number of tokens utilized during the processing of user requests to the LLM API.</data>
      <data key="d3">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="response_tokens">
      <data key="d0">response_tokens</data>
      <data key="d1">instance-attribute</data>
      <data key="d2">Response_tokens indicates the number of tokens consumed while generating responses from the LLM API for user requests.&lt;SEP&gt;Response_tokens is an instance attribute indicating the number of tokens used in generating responses.</data>
      <data key="d3">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="total_tokens">
      <data key="d0">total_tokens</data>
      <data key="d1">instance-attribute</data>
      <data key="d2">Total_tokens captures the overall count of tokens used during an entire run, typically the sum of request_tokens and response_tokens.&lt;SEP&gt;Total_tokens represents the sum of request_tokens and response_tokens, indicating the overall token usage during a session.</data>
      <data key="d3">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="details">
      <data key="d0">details</data>
      <data key="d1">instance-attribute</data>
      <data key="d2">Details is an optional attribute that may contain additional metrics returned by the model for analysis.&lt;SEP&gt;Details may contain additional information or metrics provided by the PydanticAI model, enhancing the understanding of the usage metrics.</data>
      <data key="d3">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="incr">
      <data key="d0">incr</data>
      <data key="d1">method</data>
      <data key="d2">Incr is a method of the Usage class that increments the usage metrics with new values, adjusting the current totals accordingly.&lt;SEP&gt;Incr is a method within the Usage class that updates the usage metrics when new data is accumulated, allowing for real-time adjustments.</data>
      <data key="d3">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="__add__">
      <data key="d0">__add__</data>
      <data key="d1">method</data>
      <data key="d2">__Add__ is a method that allows for the summation of two Usage instances, facilitating the aggregation of usage metrics across different requests.&lt;SEP&gt;__add__ is a method that allows for the addition of two Usage objects, facilitating the summation of metrics.</data>
      <data key="d3">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="opentelemetry_attributes">
      <data key="d0">opentelemetry_attributes</data>
      <data key="d1">method</data>
      <data key="d2">Opentelemetry_attributes is a method that formats and returns the token limits and usage data as OpenTelemetry attributes for monitoring purposes.&lt;SEP&gt;Opentelemetry_attributes is a method that retrieves usage metrics as OpenTelemetry attributes for monitoring and debugging.</data>
      <data key="d3">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="token limits">
      <data key="d0">token limits</data>
      <data key="d1">category</data>
      <data key="d2">Token limits represent constraints placed on the number of tokens used in requests and responses, which helps manage service efficiency and resource allocation.</data>
      <data key="d3">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model requests">
      <data key="d0">model requests</data>
      <data key="d1">event</data>
      <data key="d2">Model requests refer to the instances where a user submits a query to the artificial intelligence model, triggering a response process.</data>
      <data key="d3">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="request count">
      <data key="d0">request count</data>
      <data key="d1">category</data>
      <data key="d2">Request count is a metric that tracks the number of requests made to the AI model, ensuring compliance with usage limits.</data>
      <data key="d3">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="request limit">
      <data key="d0">request limit</data>
      <data key="d1">category</data>
      <data key="d2">Request limit establishes the maximum number of requests allowed to be made to the AI model, preventing overuse.</data>
      <data key="d3">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="token management">
      <data key="d0">token management</data>
      <data key="d1">category</data>
      <data key="d2">Token management involves overseeing the limits set for tokens in each request and response to ensure that the model's functionality works effectively.</data>
      <data key="d3">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.models.anthropic">
      <data key="d0">pydantic_ai.models.anthropic</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic_ai.models.anthropic is a component of the pydantic_ai library dedicated to the integration of Anthropic models.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="check_tokens">
      <data key="d0">check_tokens</data>
      <data key="d1">event</data>
      <data key="d2">check_tokens is a function that assesses whether the token usage meets predefined limits, raising exceptions when exceeded.&lt;SEP&gt;check_tokens is a function that verifies if the token usage exceeds the specified limits, raising exceptions as necessary.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai_slim/pydantic_ai/usage.py">
      <data key="d0">pydantic_ai_slim/pydantic_ai/usage.py</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic_ai_slim/pydantic_ai/usage.py is a source file that contains the implementation of usage tracking and token limits for the pydantic_ai library.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="has_token_limits">
      <data key="d0">has_token_limits</data>
      <data key="d1">event</data>
      <data key="d2">has_token_limits is a method that checks if there are any token limitations for a specific instance.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="check_before_request">
      <data key="d0">check_before_request</data>
      <data key="d1">event</data>
      <data key="d2">check_before_request is a function that checks user request limits before processing subsequent requests, raising exceptions if limits are exceeded.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="request_tokens_limit">
      <data key="d0">request_tokens_limit</data>
      <data key="d1">category</data>
      <data key="d2">request_tokens_limit refers to the maximum number of tokens allowed per request in the pydantic_ai library's configuration settings.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="response_tokens_limit">
      <data key="d0">response_tokens_limit</data>
      <data key="d1">category</data>
      <data key="d2">response_tokens_limit specifies the upper limit for tokens in the response generated by the pydantic_ai library.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="total_tokens_limit">
      <data key="d0">total_tokens_limit</data>
      <data key="d1">category</data>
      <data key="d2">total_tokens_limit is the maximum threshold for combined token usage across requests and responses in the pydantic_ai library.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UsageLimitExceeded Exception">
      <data key="d0">UsageLimitExceeded Exception</data>
      <data key="d1">event</data>
      <data key="d2">UsageLimitExceeded Exception is an error raised when token or request limits set in the pydantic_ai library are exceeded, preventing further processing.</data>
      <data key="d3">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Anthropic API">
      <data key="d0">Anthropic API</data>
      <data key="d1">organization</data>
      <data key="d2">The Anthropic API allows users to interact with AI models developed by Anthropic, providing capabilities for text generation and processing.</data>
      <data key="d3">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncAnthropic">
      <data key="d0">AsyncAnthropic</data>
      <data key="d1">organization</data>
      <data key="d2">AsyncAnthropic indicates a provider class for handling asynchronous interactions with Anthropic models.&lt;SEP&gt;AsyncAnthropic is an asynchronous client for the Anthropic API that facilitates interaction with its features without blocking execution.</data>
      <data key="d3">chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelRequestParameters">
      <data key="d0">ModelRequestParameters</data>
      <data key="d1">category</data>
      <data key="d2">ModelRequestParameters are parameters that dictate settings for API requests, including constraints and configurations for model behavior.&lt;SEP&gt;ModelRequestParameters are parameters used to configure requests made to models for obtaining specific types of responses.&lt;SEP&gt;ModelRequestParameters are the specific settings and arguments provided when making a request to the model, determining how the model should respond.&lt;SEP&gt;ModelRequestParameters contain information about the function and result tools available during request handling in the agent.&lt;SEP&gt;ModelRequestParameters contains information about the various tools available during request handling, affecting how a model processes requests.&lt;SEP&gt;ModelRequestParameters define the specific attributes or settings for requests made to the OpenAI models, impacting output.&lt;SEP&gt;ModelRequestParameters defines the parameters involved in a request to the AI model, including tools and result configurations.&lt;SEP&gt;ModelRequestParameters encompasses parameters that define how requests are made to the model, including tools and preferences.&lt;SEP&gt;ModelRequestParameters encompasses the parameters and configurations used in making requests to the Groq AI model.&lt;SEP&gt;ModelRequestParameters holds the parameters necessary for making requests to a model, including function tools and result tools.&lt;SEP&gt;ModelRequestParameters includes parameters for requests sent to the model and is crucial for processing and generating responses.&lt;SEP&gt;ModelRequestParameters is a dataclass that contains the configuration for an agent's request to a model, specifically regarding tools and how results are handled.&lt;SEP&gt;ModelRequestParameters is a dataclass that contains the configuration for an agent's request to a model, specifically related to tools and result handling.&lt;SEP&gt;ModelRequestParameters is a set of parameters used to define the request made to the model for generating completions.&lt;SEP&gt;ModelRequestParameters refers to a set of parameters that define how a model should process requests in an AI or machine learning context.&lt;SEP&gt;ModelRequestParameters refers to the configuration settings passed to the Mistral model for processing requests.&lt;SEP&gt;ModelRequestParameters specify the criteria for the request made to the Gemini API, influencing the model's behavior and output.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-c85826bcf2c124ee6da90aa381dfff25&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="provider">
      <data key="d0">provider</data>
      <data key="d1">category</data>
      <data key="d2">Provider denotes the service mechanism that delivers access to the model, either through a literal string or an instance of AsyncAnthropic.&lt;SEP&gt;provider indicates the various external sources or services that can be used to interact with OpenAI models.&lt;SEP&gt;provider is a property that determines the authentication and API access method used with the Gemini model.&lt;SEP&gt;provider is an entity that indicates a source or service for acquiring AI functionalities, often referring to an AI model provider.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Model Name">
      <data key="d0">Model Name</data>
      <data key="d1">category</data>
      <data key="d2">Model Name refers to the specific identifier for an AI model within the Anthropic framework, distinguishing it from other models.</data>
      <data key="d3">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Model Settings">
      <data key="d0">Model Settings</data>
      <data key="d1">category</data>
      <data key="d2">Model Settings encompass various configurations that dictate how an AI model should behave during interactions, influencing aspects like temperature and max tokens.</data>
      <data key="d3">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Streamed Response">
      <data key="d0">Streamed Response</data>
      <data key="d1">category</data>
      <data key="d2">Streamed Response refers to the process or event where a model's response to a request is provided in a continuous data stream format.&lt;SEP&gt;Streamed Response refers to the real-time delivery of output from the model as it processes input messages, allowing for uninterrupted interaction.</data>
      <data key="d3">chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Raw Message Stream Event">
      <data key="d0">Raw Message Stream Event</data>
      <data key="d1">category</data>
      <data key="d2">Raw Message Stream Event is an event that occurs during the streaming of responses, providing real-time feedback to the user.</data>
      <data key="d3">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tool Choice Param">
      <data key="d0">Tool Choice Param</data>
      <data key="d1">category</data>
      <data key="d2">Tool Choice Param refers to the parameters that determine how tools are selected and utilized during model interactions, impacting the response generation.</data>
      <data key="d3">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="client">
      <data key="d0">client</data>
      <data key="d1">category</data>
      <data key="d2">Client represents the interface or method through which requests are made to the model, facilitating communication with the AI service.&lt;SEP&gt;client represents the interface or connection that invokes requests to the AI model from the provider.</data>
      <data key="d3">chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AnthropicMessage">
      <data key="d0">AnthropicMessage</data>
      <data key="d1">category</data>
      <data key="d2">AnthropicMessage is a type that encompasses messages received from the Anthropic API, designed for processing responses from an AI model.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TextBlock">
      <data key="d0">TextBlock</data>
      <data key="d1">category</data>
      <data key="d2">TextBlock is a specific type of ContentBlock that contains textual data in the processed responses.&lt;SEP&gt;TextBlock is a type of message part specifically for conveying textual content within a response.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolUseBlock">
      <data key="d0">ToolUseBlock</data>
      <data key="d1">category</data>
      <data key="d2">ToolUseBlock represents parts of responses which indicate the use of specific tools within a conversation model.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="timezone">
      <data key="d0">timezone</data>
      <data key="d1">category</data>
      <data key="d2">Timezone is a concept used in programming to manage time in different geographical regions, essential for accurate timestamp generation.&lt;SEP&gt;Timezone is a module in Python that provides classes for handling time zones effectively.&lt;SEP&gt;timezone is a setting that determines the time offset for timestamps, which may affect how responses are interpreted based on location.</data>
      <data key="d3">chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolParam">
      <data key="d0">ToolParam</data>
      <data key="d1">category</data>
      <data key="d2">ToolParam encompasses parameters relevant to tool initialization and usage in AI applications.&lt;SEP&gt;ToolParam is a parameter representing a tool used in model requests, facilitating functionality during processed communications.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MessageParam">
      <data key="d0">MessageParam</data>
      <data key="d1">category</data>
      <data key="d2">MessageParam represents a structured part of messages exchanged between users and an AI model, containing roles and content.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Base64PDFSourceParam">
      <data key="d0">Base64PDFSourceParam</data>
      <data key="d1">category</data>
      <data key="d2">Base64PDFSourceParam is a structure designed to handle PDF documents in a base64 encoded format for AI communication.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_process_response">
      <data key="d0">_process_response</data>
      <data key="d1">category</data>
      <data key="d2">_process_response is a method defined for processing non-streamed responses from an AI model, formatting the response accordingly.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="response">
      <data key="d0">response</data>
      <data key="d1">category</data>
      <data key="d2">Response refers to the output obtained from the server, which includes detailed information about the request's outcome.&lt;SEP&gt;response is the object that receives and manages the HTTP response after an image request is made.&lt;SEP&gt;response refers to an input parameter for the _process_response method, which is expected to be of type AnthropicMessage.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncStream">
      <data key="d0">AsyncStream</data>
      <data key="d1">category</data>
      <data key="d2">AsyncStream is a representation for handling streamed responses from the model, allowing for incremental data reception.&lt;SEP&gt;AsyncStream is a type representing a streamed asynchronous response from the AI model, allowing for real-time data handling.</data>
      <data key="d3">chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PeekableAsyncStream">
      <data key="d0">PeekableAsyncStream</data>
      <data key="d1">category</data>
      <data key="d2">PeekableAsyncStream is a utility designed to allow peeking at the first element of a stream without consuming it.&lt;SEP&gt;PeekableAsyncStream is a utility that wraps around asynchronous streams, allowing for peeking functionality which facilitates better control over stream consumption.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AnthropicStreamedResponse">
      <data key="d0">AnthropicStreamedResponse</data>
      <data key="d1">category</data>
      <data key="d2">AnthropicStreamedResponse is a specific format for responses received as a stream from the Anthropic model.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_guard_tool_call_id">
      <data key="d0">_guard_tool_call_id</data>
      <data key="d1">category</data>
      <data key="d2">_guard_tool_call_id is a utility function that validates and retrieves the ID associated with a tool call component.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolResultBlockParam">
      <data key="d0">ToolResultBlockParam</data>
      <data key="d1">category</data>
      <data key="d2">ToolResultBlockParam is a structure representing the result output from a tool that has been called in the context of a model response.</data>
      <data key="d3">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AnthropicModelName">
      <data key="d0">AnthropicModelName</data>
      <data key="d1">category</data>
      <data key="d2">AnthropicModelName refers to a specific model name that belongs to the Anthropic suite, which can be utilized for various artificial intelligence applications.&lt;SEP&gt;AnthropicModelName represents the model names used in the system, indicating various versions of language models utilized for AI tasks.</data>
      <data key="d3">chunk-a9de914755fc3f23e749c15911fa6734&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DocumentBlockParam">
      <data key="d0">DocumentBlockParam</data>
      <data key="d1">organization</data>
      <data key="d2">DocumentBlockParam is a class that handles parameters related to document blocks in the context of AI, organizing information for processing.</data>
      <data key="d3">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PlainTextSourceParam">
      <data key="d0">PlainTextSourceParam</data>
      <data key="d1">organization</data>
      <data key="d2">PlainTextSourceParam is used to retrieve and process plain text sources in document handling within AI models.</data>
      <data key="d3">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RawMessageStreamEvent">
      <data key="d0">RawMessageStreamEvent</data>
      <data key="d1">category</data>
      <data key="d2">RawMessageStreamEvent represents events that are part of the raw message streaming process in AI model interactions.</data>
      <data key="d3">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ContentBlock">
      <data key="d0">ContentBlock</data>
      <data key="d1">category</data>
      <data key="d2">ContentBlock refers to a structure that encapsulates various types of content within AI model responses, such as text or tool usage.</data>
      <data key="d3">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="JSONDecodeError">
      <data key="d0">JSONDecodeError</data>
      <data key="d1">category</data>
      <data key="d2">JSONDecodeError is an error type that occurs when parsing JSON data fails, typical in data processing tasks.</data>
      <data key="d3">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Item">
      <data key="d0">Item</data>
      <data key="d1">category</data>
      <data key="d2">Item refers to a generic structure designed to represent various elements in a document source, encapsulating metadata for usage.</data>
      <data key="d3">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RawContentBlockStopEvent">
      <data key="d0">RawContentBlockStopEvent</data>
      <data key="d1">event</data>
      <data key="d2">RawContentBlockStopEvent is an event type that signifies the stopping point of processing raw content blocks within the system.</data>
      <data key="d3">chunk-a9de914755fc3f23e749c15911fa6734</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RawMessageStopEvent">
      <data key="d0">RawMessageStopEvent</data>
      <data key="d1">event</data>
      <data key="d2">RawMessageStopEvent is another event type indicating the cessation of raw message processing in the communication system.</data>
      <data key="d3">chunk-a9de914755fc3f23e749c15911fa6734</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.models">
      <data key="d0">pydantic_ai.models</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic_ai.models is a module that contains logic related to making requests to a language model, providing a common interface for different LLMs.</data>
      <data key="d3">chunk-a9de914755fc3f23e749c15911fa6734</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="llama3-3-70b-instruct-v1">
      <data key="d0">llama3-3-70b-instruct-v1</data>
      <data key="d1">category</data>
      <data key="d2">llama3-3-70b-instruct-v1 is a version of the LLaMA (Large Language Model Meta AI) model designed for instruction-based tasks.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="bedrock:mistral.mistral-7b-instruct-v0">
      <data key="d0">bedrock:mistral.mistral-7b-instruct-v0</data>
      <data key="d1">category</data>
      <data key="d2">bedrock:mistral.mistral-7b-instruct-v0 is a variant of the Mistral model designed for instruction-based applications.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-1.0-pro">
      <data key="d0">google-gla:gemini-1.0-pro</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-1.0-pro is a version of the Gemini model from Google designed for various tasks with a professional focus.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-3.5-turbo">
      <data key="d0">gpt-3.5-turbo</data>
      <data key="d1">category</data>
      <data key="d2">gpt-3.5-turbo is a variant of the GPT-3.5 model optimized for speed, making it suitable for interactive applications.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4">
      <data key="d0">gpt-4</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4 is an advanced generative AI model capable of understanding and producing human-like text.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="bedrock:mistral.mistral-large-2402-v1">
      <data key="d0">bedrock:mistral.mistral-large-2402-v1</data>
      <data key="d1">category</data>
      <data key="d2">bedrock:mistral.mistral-large-2402-v1 is a large version of the Mistral model designed for complex tasks and high-performance applications.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="bedrock:mistral.mistral-large-2407-v1">
      <data key="d0">bedrock:mistral.mistral-large-2407-v1</data>
      <data key="d1">category</data>
      <data key="d2">bedrock:mistral.mistral-large-2407-v1 is another large variant of the Mistral model, optimized for specific instructive capabilities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="claude-3-5-sonnet-latest">
      <data key="d0">claude-3-5-sonnet-latest</data>
      <data key="d1">category</data>
      <data key="d2">claude-3-5-sonnet-latest is the latest version of the Claude model by Anthropic focused on conversational AI.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="claude-3-opus-latest">
      <data key="d0">claude-3-opus-latest</data>
      <data key="d1">category</data>
      <data key="d2">claude-3-opus-latest is a versatile variant of the Claude model, aimed at a broader range of AI applications.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:c4ai-aya-expanse-32b">
      <data key="d0">cohere:c4ai-aya-expanse-32b</data>
      <data key="d1">category</data>
      <data key="d2">cohere:c4ai-aya-expanse-32b represents a large AI model developed by Cohere, optimized for expansive language understanding.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:c4ai-aya-expanse-8b">
      <data key="d0">cohere:c4ai-aya-expanse-8b</data>
      <data key="d1">category</data>
      <data key="d2">cohere:c4ai-aya-expanse-8b is a smaller variant of the Cohere AI offerings, focusing on efficient language processing capabilities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command">
      <data key="d0">cohere:command</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command is a model aimed at command-based tasks, allowing for specific instructions and optimal task execution.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-light">
      <data key="d0">cohere:command-light</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-light is a lighter version of the command model, designed for quicker responses and efficient processing.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-light-nightly">
      <data key="d0">cohere:command-light-nightly</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-light-nightly is an updated variant of the command-light model, incorporating nightly improvements and updates.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-nightly">
      <data key="d0">cohere:command-nightly</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-nightly is another model update that focuses on command-based tasks with nightly adjustments.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-r">
      <data key="d0">cohere:command-r</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-r is designed for robust command processing, ideal for more intensive language tasks.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-r-03-2024">
      <data key="d0">cohere:command-r-03-2024</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-r-03-2024 is an updated version of the command-r model, tailored for improvements expected by March 2024.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-r-08-2024">
      <data key="d0">cohere:command-r-08-2024</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-r-08-2024 is a future version projected for August 2024, enhancing functionalities based on user feedback.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-r-plus">
      <data key="d0">cohere:command-r-plus</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-r-plus is an advanced version of the command-r model, featuring additional capabilities for complex task execution.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-r-plus-04-2024">
      <data key="d0">cohere:command-r-plus-04-2024</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-r-plus-04-2024 is scheduled for release in April 2024, promising enhanced features.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-r-plus-08-2024">
      <data key="d0">cohere:command-r-plus-08-2024</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-r-plus-08-2024 is set for an August 2024 release, expected to offer further improvements.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cohere:command-r7b-12-2024">
      <data key="d0">cohere:command-r7b-12-2024</data>
      <data key="d1">category</data>
      <data key="d2">cohere:command-r7b-12-2024 represents a more specialized version planned for late 2024.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deepseek:deepseek-chat">
      <data key="d0">deepseek:deepseek-chat</data>
      <data key="d1">category</data>
      <data key="d2">deepseek:deepseek-chat is a conversational AI model designed for more interactive chatting capabilities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deepseek:deepseek-reasoner">
      <data key="d0">deepseek:deepseek-reasoner</data>
      <data key="d1">category</data>
      <data key="d2">deepseek:deepseek-reasoner focuses on reasoning tasks, providing structured answers to complex queries.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-1.5-flash-8b">
      <data key="d0">google-gla:gemini-1.5-flash-8b</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-1.5-flash-8b is another high-performance variant of Gemini designed for quick processing.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-1.5-pro">
      <data key="d0">google-gla:gemini-1.5-pro</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-1.5-pro focuses on professional applications using the Gemini technology for varied tasks.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-2.0-flash-exp">
      <data key="d0">google-gla:gemini-2.0-flash-exp</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-2.0-flash-exp represents an experimental version of the Gemini 2.0, focusing on innovative functionalities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-2.0-flash-thinking-exp-01-21">
      <data key="d0">google-gla:gemini-2.0-flash-thinking-exp-01-21</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-2.0-flash-thinking-exp-01-21 is an experimental variant that includes advanced thinking capabilities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-exp-1206">
      <data key="d0">google-gla:gemini-exp-1206</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-exp-1206 is a performance-enhanced version of the Gemini technology designed for user experiments.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-2.0-flash">
      <data key="d0">google-gla:gemini-2.0-flash</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-2.0-flash is a higher-performance version of the Gemini model focusing on quick responses.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-2.0-flash-lite-preview-02-05">
      <data key="d0">google-gla:gemini-2.0-flash-lite-preview-02-05</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-2.0-flash-lite-preview-02-05 is a lighter preview version of the Gemini model for testing.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-2.0-pro-exp-02-05">
      <data key="d0">google-gla:gemini-2.0-pro-exp-02-05</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-2.0-pro-exp-02-05 is a professional experimental version of Gemini expected to enhance AI capabilities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-gla:gemini-2.5-pro-exp-03-25">
      <data key="d0">google-gla:gemini-2.5-pro-exp-03-25</data>
      <data key="d1">category</data>
      <data key="d2">google-gla:gemini-2.5-pro-exp-03-25 aims to introduce innovative features in the Gemini line-up by March 2025.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-1.0-pro">
      <data key="d0">google-vertex:gemini-1.0-pro</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-1.0-pro is another professional AI model variant by Google Vertex featuring powerful processing.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-1.5-flash">
      <data key="d0">google-vertex:gemini-1.5-flash</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-1.5-flash offers enhanced speed in processing tasks compared to its predecessors.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-1.5-flash-8b">
      <data key="d0">google-vertex:gemini-1.5-flash-8b</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-1.5-flash-8b represents a robust version of Gemini focusing on rapid task completion.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-1.5-pro">
      <data key="d0">google-vertex:gemini-1.5-pro</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-1.5-pro aims at professional and business applications, utilizing advanced AI techniques.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-2.0-flash-exp">
      <data key="d0">google-vertex:gemini-2.0-flash-exp</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-2.0-flash-exp is focused on experimental implementations to bring cutting-edge features.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-2.0-flash-thinking-exp-01-21">
      <data key="d0">google-vertex:gemini-2.0-flash-thinking-exp-01-21</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-2.0-flash-thinking-exp-01-21 targets innovative thinking advancements in AI.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-exp-1206">
      <data key="d0">google-vertex:gemini-exp-1206</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-exp-1206 enhances user interaction through experimental adjustments.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-2.0-flash">
      <data key="d0">google-vertex:gemini-2.0-flash</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-2.0-flash focuses on delivering quicker responses and real-time interactions.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-2.0-flash-lite-preview-02-05">
      <data key="d0">google-vertex:gemini-2.0-flash-lite-preview-02-05</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-2.0-flash-lite-preview-02-05 provides early testing features for the lightweight model.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-2.0-pro-exp-02-05">
      <data key="d0">google-vertex:gemini-2.0-pro-exp-02-05</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-2.0-pro-exp-02-05 emphasizes professional-grade AI capabilities across its applications.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="google-vertex:gemini-2.5-pro-exp-03-25">
      <data key="d0">google-vertex:gemini-2.5-pro-exp-03-25</data>
      <data key="d1">category</data>
      <data key="d2">google-vertex:gemini-2.5-pro-exp-03-25 is an advanced version aiming for deployment by March 2025.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-0125-preview">
      <data key="d0">gpt-4-0125-preview</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-0125-preview presents a preview of the GPT-4 model showcasing new features.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-0314">
      <data key="d0">gpt-4-0314</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-0314 is a subsequent version of the GPT-4 model expected to enhance functionalities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-0613">
      <data key="d0">gpt-4-0613</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-0613 introduces further improvements and updates to the GPT-4 AI model.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-1106-preview">
      <data key="d0">gpt-4-1106-preview</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-1106-preview is a preview variant of GPT-4 with insights into upcoming features.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-32k">
      <data key="d0">gpt-4-32k</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-32k is an advanced version of GPT-4 supporting larger input sizes of up to 32k tokens.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-32k-0314">
      <data key="d0">gpt-4-32k-0314</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-32k-0314 is a specific release iteration of the 32k version, offering targeted improvements.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-32k-0613">
      <data key="d0">gpt-4-32k-0613</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-32k-0613 updates the capabilities and performance metrics for the model supporting larger contexts.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-turbo">
      <data key="d0">gpt-4-turbo</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-turbo is an optimized version of GPT-4 designed for speed and efficiency.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-turbo-2024-04-09">
      <data key="d0">gpt-4-turbo-2024-04-09</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-turbo-2024-04-09 represents a future version optimized for specific updates and enhancements.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-turbo-preview">
      <data key="d0">gpt-4-turbo-preview</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-turbo-preview allows users to experience upcoming features in an early testing phase.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4-vision-preview">
      <data key="d0">gpt-4-vision-preview</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4-vision-preview enables visual input, allowing for interactions involving images.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-2024-05-13">
      <data key="d0">gpt-4o-2024-05-13</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-2024-05-13 signifies an updated release expected in May 2024.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-2024-08-06">
      <data key="d0">gpt-4o-2024-08-06</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-2024-08-06 is another update planned for August 2024, indicating continuous improvements.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-2024-11-20">
      <data key="d0">gpt-4o-2024-11-20</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-2024-11-20 represents a scheduled release highlighting the ongoing development of the GPT-4o model.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-audio-preview">
      <data key="d0">gpt-4o-audio-preview</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-audio-preview introduces audio features, expanding the model's interaction capabilities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-audio-preview-2024-10-01">
      <data key="d0">gpt-4o-audio-preview-2024-10-01</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-audio-preview-2024-10-01 showcases improvements aimed for audio processing.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-audio-preview-2024-12-17">
      <data key="d0">gpt-4o-audio-preview-2024-12-17</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-audio-preview-2024-12-17 introduces further audio advancements expected in December 2024.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-mini">
      <data key="d0">gpt-4o-mini</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-mini is a compact version of GPT-4o designed for efficiency on lighter applications.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-mini-2024-07-18">
      <data key="d0">gpt-4o-mini-2024-07-18</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-mini-2024-07-18 is a release aimed at mid-2024, emphasizing lightweight capabilities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-mini-audio-preview">
      <data key="d0">gpt-4o-mini-audio-preview</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-mini-audio-preview offers audio options tailored for the mini version.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-mini-audio-preview-2024-12-17">
      <data key="d0">gpt-4o-mini-audio-preview-2024-12-17</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-mini-audio-preview-2024-12-17 showcases audio improvements planned for the mini version.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-mini-search-preview">
      <data key="d0">gpt-4o-mini-search-preview</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-mini-search-preview introduces search capabilities for the mini version.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-mini-search-preview-2025-03-11">
      <data key="d0">gpt-4o-mini-search-preview-2025-03-11</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-mini-search-preview-2025-03-11 is projected for March 2025, enhancing search functionalities.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-search-preview">
      <data key="d0">gpt-4o-search-preview</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-search-preview highlights search features tailored for the GPT-4o model.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gpt-4o-search-preview-2025-03-11">
      <data key="d0">gpt-4o-search-preview-2025-03-11</data>
      <data key="d1">category</data>
      <data key="d2">gpt-4o-search-preview-2025-03-11 indicates enhancements focused on spring 2025.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:distil-whisper-large-v3-en">
      <data key="d0">groq:distil-whisper-large-v3-en</data>
      <data key="d1">category</data>
      <data key="d2">This entry refers to a specific model developed by Groq for language processing or audio applications.&lt;SEP&gt;This entry refers to a specific model or application used in AI-related tasks for processing language or audio.&lt;SEP&gt;groq:distil-whisper-large-v3-en is a large model version by Groq focusing on language processing in various contexts.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347&lt;SEP&gt;chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:gemma2-9b-it">
      <data key="d0">groq:gemma2-9b-it</data>
      <data key="d1">category</data>
      <data key="d2">This entry denotes an AI model developed by Groq, specifically designed for tasks in the Italian language.&lt;SEP&gt;This entry refers to a model or technology related to AI, specifically tuned for Italian language tasks.&lt;SEP&gt;groq:gemma2-9b-it is a specialized model aimed at specific tasks in natural language understanding.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347&lt;SEP&gt;chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama-3.3-70b-versatile">
      <data key="d0">groq:llama-3.3-70b-versatile</data>
      <data key="d1">category</data>
      <data key="d2">This is a versatile AI model capable of handling various tasks, focusing on language processing.&lt;SEP&gt;This model represents a highly versatile AI architecture from Groq, suitable for varied language processing tasks.&lt;SEP&gt;groq:llama-3.3-70b-versatile combines flexibility and versatility in language tasks across various domains.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347&lt;SEP&gt;chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama-3.1-8b-instant">
      <data key="d0">groq:llama-3.1-8b-instant</data>
      <data key="d1">category</data>
      <data key="d2">A quick and efficient AI model designed for instant responses in language applications.&lt;SEP&gt;This model is engineered for rapid responses in AI applications, emphasizing speed and efficiency.&lt;SEP&gt;groq:llama-3.1-8b-instant is a quick-response variant of the LLaMA model focusing on immediate interactions.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347&lt;SEP&gt;chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama-guard-3-8b">
      <data key="d0">groq:llama-guard-3-8b</data>
      <data key="d1">category</data>
      <data key="d2">This entry refers to a model designed to ensure the safety and reliability of AI-generated content.&lt;SEP&gt;This model is designed by Groq to focus on ensuring content safety and reliability in AI-generated outputs.&lt;SEP&gt;groq:llama-guard-3-8b emphasizes safety features while interacting in conversational AI environments.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347&lt;SEP&gt;chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama3-70b-8192">
      <data key="d0">groq:llama3-70b-8192</data>
      <data key="d1">category</data>
      <data key="d2">groq:llama3-70b-8192 is a high-performance variant designed for intensive language applications.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama3-8b">
      <data key="d0">groq:llama3-8b</data>
      <data key="d1">category</data>
      <data key="d2">groq:llama3-8b serves as a versatile option for varied language tasks with a focus on efficiency.</data>
      <data key="d3">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:chatgpt-4o-latest">
      <data key="d0">openai:chatgpt-4o-latest</data>
      <data key="d1">category</data>
      <data key="d2">The latest variant of OpenAI's ChatGPT model, designed for a wide range of conversational applications.&lt;SEP&gt;This entry indicates the latest version of the ChatGPT model developed by OpenAI for conversational AI applications.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-3.5-turbo">
      <data key="d0">openai:gpt-3.5-turbo</data>
      <data key="d1">category</data>
      <data key="d2">A popular and efficient GPT model designed for fast and responsive language tasks.&lt;SEP&gt;An efficient model from OpenAI that offers rapid performance for effective conversational AI.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4">
      <data key="d0">openai:gpt-4</data>
      <data key="d1">category</data>
      <data key="d2">OpenAI's fourth generation of language models, emphasizing advanced generative capabilities.&lt;SEP&gt;This entry refers to the fourth generation of OpenAI's model, focusing on advanced language capabilities and versatility.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:o1">
      <data key="d0">openai:o1</data>
      <data key="d1">category</data>
      <data key="d2">A specific identifier for feature or model versions related to OpenAI's development initiatives.&lt;SEP&gt;This entry refers to a specific version or aspect of OpenAI's technology offering, potentially related to their API or deployment options.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:whisper-large-v3">
      <data key="d0">groq:whisper-large-v3</data>
      <data key="d1">category</data>
      <data key="d2">This is a large model developed by Groq for speech recognition and language processing applications.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:whisper-large-v3-turbo">
      <data key="d0">groq:whisper-large-v3-turbo</data>
      <data key="d1">category</data>
      <data key="d2">An optimized version of the Whisper model, enhancing speed and performance for real-time applications.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:playai-tts">
      <data key="d0">groq:playai-tts</data>
      <data key="d1">category</data>
      <data key="d2">This refers to a text-to-speech technology developed by Groq for converting written text into spoken words.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:qwen-qwq-32b">
      <data key="d0">groq:qwen-qwq-32b</data>
      <data key="d1">category</data>
      <data key="d2">An AI model provided by Groq, possibly focusing on natural language understanding and generation.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:mistral-saba-24b">
      <data key="d0">groq:mistral-saba-24b</data>
      <data key="d1">category</data>
      <data key="d2">This is another AI model from Groq, likely designed for large-scale language processing tasks.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:qwen-2.5-coder-32b">
      <data key="d0">groq:qwen-2.5-coder-32b</data>
      <data key="d1">category</data>
      <data key="d2">This model specializes in programming-related tasks and code generation within AI frameworks.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:qwen-2.5-32b">
      <data key="d0">groq:qwen-2.5-32b</data>
      <data key="d1">category</data>
      <data key="d2">A model that represents Groq's focus on improving conversational AI and language tasks.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:deepseek-r1-distill-qwen-32b">
      <data key="d0">groq:deepseek-r1-distill-qwen-32b</data>
      <data key="d1">category</data>
      <data key="d2">This entry refers to a distilled version of a model from Groq aimed at efficient language understanding.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:deepseek-r1-distill-llama-70b">
      <data key="d0">groq:deepseek-r1-distill-llama-70b</data>
      <data key="d1">category</data>
      <data key="d2">A distilled model variant from Groq focused on enhancing the core capabilities of the Llama architecture.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama-3.3-70b-specdec">
      <data key="d0">groq:llama-3.3-70b-specdec</data>
      <data key="d1">category</data>
      <data key="d2">This model focuses on specialized decision tasks, improving processing efficiency in its assigned applications.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama-3.2-1b-preview">
      <data key="d0">groq:llama-3.2-1b-preview</data>
      <data key="d1">category</data>
      <data key="d2">A preview version of an upcoming model from Groq, indicating advancements in AI technology.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama-3.2-3b-preview">
      <data key="d0">groq:llama-3.2-3b-preview</data>
      <data key="d1">category</data>
      <data key="d2">Another preview release that showcases Groq's continuous improvements in AI model development.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama-3.2-11b-vision-preview">
      <data key="d0">groq:llama-3.2-11b-vision-preview</data>
      <data key="d1">category</data>
      <data key="d2">A model that incorporates visual capabilities alongside language processing, indicating multi-modal AI advancements.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="groq:llama-3.2-90b-vision-preview">
      <data key="d0">groq:llama-3.2-90b-vision-preview</data>
      <data key="d1">category</data>
      <data key="d2">This entry showcases a more advanced version with enhanced visual processing capabilities in addition to language tasks.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mistral:codestral-latest">
      <data key="d0">mistral:codestral-latest</data>
      <data key="d1">category</data>
      <data key="d2">This model represents the latest in Mistral's offerings, highlighting their advancements in AI technology.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mistral:mistral-large-latest">
      <data key="d0">mistral:mistral-large-latest</data>
      <data key="d1">category</data>
      <data key="d2">A large AI model that exemplifies Mistral's commitment to high-performance natural language processing.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mistral:mistral-moderation-latest">
      <data key="d0">mistral:mistral-moderation-latest</data>
      <data key="d1">category</data>
      <data key="d2">This model is designed to enhance content moderation capabilities within AI applications.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mistral:mistral-small-latest">
      <data key="d0">mistral:mistral-small-latest</data>
      <data key="d1">category</data>
      <data key="d2">A smaller variant model by Mistral focused on efficiency while maintaining language processing capabilities.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="o1">
      <data key="d0">o1</data>
      <data key="d1">category</data>
      <data key="d2">A model identifier relating to Groq's series of applications or features within their development environment.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="o1-2024-12-17">
      <data key="d0">o1-2024-12-17</data>
      <data key="d1">category</data>
      <data key="d2">This entry likely refers to a scheduled release or update to an AI model or application from Groq.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="o1-mini">
      <data key="d0">o1-mini</data>
      <data key="d1">category</data>
      <data key="d2">A compact version of the model, aimed at lightweight applications or deployments.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="o1-mini-2024-09-12">
      <data key="d0">o1-mini-2024-09-12</data>
      <data key="d1">category</data>
      <data key="d2">This entry indicates a specific version or update of the O1 Mini model, potentially detailing new features.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="o1-preview">
      <data key="d0">o1-preview</data>
      <data key="d1">category</data>
      <data key="d2">A preview version indicating upcoming features or capabilities within the O1 model line.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="o1-preview-2024-09-12">
      <data key="d0">o1-preview-2024-09-12</data>
      <data key="d1">category</data>
      <data key="d2">A date-stamped preview version suggests enhancements slated for future release.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="o3-mini">
      <data key="d0">o3-mini</data>
      <data key="d1">category</data>
      <data key="d2">Another small variant from Groq focused on specific applications with reduced size but functional capacity.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="o3-mini-2025-01-31">
      <data key="d0">o3-mini-2025-01-31</data>
      <data key="d1">category</data>
      <data key="d2">A date for a new iteration or particularly enhanced version within the O3 Mini series.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-3.5-turbo-0125">
      <data key="d0">openai:gpt-3.5-turbo-0125</data>
      <data key="d1">category</data>
      <data key="d2">This entry indicates a version of the GPT-3.5 Turbo model with specific updates or functionalities.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-3.5-turbo-0301">
      <data key="d0">openai:gpt-3.5-turbo-0301</data>
      <data key="d1">category</data>
      <data key="d2">Another version of the GPT-3.5 Turbo model that showcases incremental updates in AI performance.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-3.5-turbo-0613">
      <data key="d0">openai:gpt-3.5-turbo-0613</data>
      <data key="d1">category</data>
      <data key="d2">A dated iteration of GPT-3.5 Turbo with specific enhancements in conversational capabilities.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-3.5-turbo-1106">
      <data key="d0">openai:gpt-3.5-turbo-1106</data>
      <data key="d1">category</data>
      <data key="d2">A specific version of the Turbo model released by OpenAI that may include added features or improvements.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-3.5-turbo-16k">
      <data key="d0">openai:gpt-3.5-turbo-16k</data>
      <data key="d1">category</data>
      <data key="d2">A variant of the Turbo model that supports extended processing capabilities for longer conversations.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-3.5-turbo-16k-0613">
      <data key="d0">openai:gpt-3.5-turbo-16k-0613</data>
      <data key="d1">category</data>
      <data key="d2">This entry suggests a specific version iterating on the extended capabilities of the GPT-3.5 Turbo for conversational AI.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-0125-preview">
      <data key="d0">openai:gpt-4-0125-preview</data>
      <data key="d1">category</data>
      <data key="d2">A preview version highlighting new functionalities and improvements in the GPT-4 model.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-0314">
      <data key="d0">openai:gpt-4-0314</data>
      <data key="d1">category</data>
      <data key="d2">This entry indicates another version or update of the GPT-4 model with possible enhancements.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-0613">
      <data key="d0">openai:gpt-4-0613</data>
      <data key="d1">category</data>
      <data key="d2">Another iteration of the GPT-4 model, potentially focused on optimizing performance and accuracy.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-1106-preview">
      <data key="d0">openai:gpt-4-1106-preview</data>
      <data key="d1">category</data>
      <data key="d2">This preview indicates upcoming enhancements in the GPT-4 series, emphasizing new capabilities.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-32k">
      <data key="d0">openai:gpt-4-32k</data>
      <data key="d1">category</data>
      <data key="d2">A variant of GPT-4 designed for high-capacity processing, suitable for extensive language tasks.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-32k-0314">
      <data key="d0">openai:gpt-4-32k-0314</data>
      <data key="d1">category</data>
      <data key="d2">This entry suggests a specific version of the GPT-4-32k model with targeted updates.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-32k-0613">
      <data key="d0">openai:gpt-4-32k-0613</data>
      <data key="d1">category</data>
      <data key="d2">Another time-stamped version of the GPT-4-32k series showcasing development within high-processing AI.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-turbo">
      <data key="d0">openai:gpt-4-turbo</data>
      <data key="d1">category</data>
      <data key="d2">A turbocharged iteration of GPT-4 focusing on increased processing speed for interactive applications.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-turbo-2024-04-09">
      <data key="d0">openai:gpt-4-turbo-2024-04-09</data>
      <data key="d1">category</data>
      <data key="d2">This specific release date highlights planned updates or enhancements for the GPT-4 Turbo.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-turbo-preview">
      <data key="d0">openai:gpt-4-turbo-preview</data>
      <data key="d1">category</data>
      <data key="d2">A preview of the upcoming features and capabilities for future iterations of the GPT-4 Turbo model.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-vision-preview">
      <data key="d0">openai:gpt-4-vision-preview</data>
      <data key="d1">category</data>
      <data key="d2">An adaptation of GPT-4 that integrates visual processing capabilities alongside language tasks.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-2024-05-13">
      <data key="d0">openai:gpt-4o-2024-05-13</data>
      <data key="d1">category</data>
      <data key="d2">This entry points to a future version of the GPT-4o focused on implementing next-gen enhancements.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-2024-08-06">
      <data key="d0">openai:gpt-4o-2024-08-06</data>
      <data key="d1">category</data>
      <data key="d2">An anticipated update for the GPT-4o model expected to feature cutting-edge advancements.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-2024-11-20">
      <data key="d0">openai:gpt-4o-2024-11-20</data>
      <data key="d1">category</data>
      <data key="d2">A forward-looking version, predicting improvements in functionality for the GPT-4o model.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-audio-preview">
      <data key="d0">openai:gpt-4o-audio-preview</data>
      <data key="d1">category</data>
      <data key="d2">An early look at audio processing features planned for integration in future GPT-4o versions.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-audio-preview-2024-10-01">
      <data key="d0">openai:gpt-4o-audio-preview-2024-10-01</data>
      <data key="d1">category</data>
      <data key="d2">This entry signifies a version focused on audio capabilities set for release on a specific date.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-mini">
      <data key="d0">openai:gpt-4o-mini</data>
      <data key="d1">category</data>
      <data key="d2">A compact version of the GPT-4o model optimized for smaller, more efficient applications.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-mini-2024-07-18">
      <data key="d0">openai:gpt-4o-mini-2024-07-18</data>
      <data key="d1">category</data>
      <data key="d2">This entry indicates a date-specific launch for the Mini version of the GPT-4o model.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-mini-audio-preview">
      <data key="d0">openai:gpt-4o-mini-audio-preview</data>
      <data key="d1">category</data>
      <data key="d2">An audio-focused version of the GPT-4o Mini, aimed at integrating speech capabilities.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-mini-audio-preview-2024-12-17">
      <data key="d0">openai:gpt-4o-mini-audio-preview-2024-12-17</data>
      <data key="d1">category</data>
      <data key="d2">This entry suggests planned improvements or releases focused on audio capabilities in the Mini version.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-mini-search-preview">
      <data key="d0">openai:gpt-4o-mini-search-preview</data>
      <data key="d1">category</data>
      <data key="d2">A preview of search capabilities being developed within the GPT-4o Mini model.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-mini-search-preview-2025-03-11">
      <data key="d0">openai:gpt-4o-mini-search-preview-2025-03-11</data>
      <data key="d1">category</data>
      <data key="d2">A specific date highlighting the expected advances in search functionalities for the GPT-4o Mini.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-search-preview">
      <data key="d0">openai:gpt-4o-search-preview</data>
      <data key="d1">category</data>
      <data key="d2">An anticipated preview of upcoming search features being incorporated into the GPT-4o model.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4o-search-preview-2025-03-11">
      <data key="d0">openai:gpt-4o-search-preview-2025-03-11</data>
      <data key="d1">category</data>
      <data key="d2">This indicates a future-focused release centered around search enhancements in the GPT-4o model line.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:o1-2024-12-17">
      <data key="d0">openai:o1-2024-12-17</data>
      <data key="d1">category</data>
      <data key="d2">Designates an upcoming release or specification for the O1 model within OpenAI's offerings.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:o1-mini">
      <data key="d0">openai:o1-mini</data>
      <data key="d1">category</data>
      <data key="d2">A smaller variant of the O1 model optimized for lighter processing tasks.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:o1-mini-2024-09-12">
      <data key="d0">openai:o1-mini-2024-09-12</data>
      <data key="d1">category</data>
      <data key="d2">This entry suggests a July launch of a smaller O1 model tailored to efficient applications.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:o1-preview">
      <data key="d0">openai:o1-preview</data>
      <data key="d1">category</data>
      <data key="d2">A preview version to showcase upcoming features within the O1 model line.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:o1-preview-2024-09-12">
      <data key="d0">openai:o1-preview-2024-09-12</data>
      <data key="d1">category</data>
      <data key="d2">This entry indicates a specific update to the preview version of the O1 model with slated improvements.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:o3-mini">
      <data key="d0">openai:o3-mini</data>
      <data key="d1">category</data>
      <data key="d2">Another compact model aimed at optimized functioning within OpenAI's range of technologies.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:o3-mini-2025-01-31">
      <data key="d0">openai:o3-mini-2025-01-31</data>
      <data key="d1">category</data>
      <data key="d2">Designates a date for new features or updates in the O3 Mini offering.</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="abstractmethod">
      <data key="d0">abstractmethod</data>
      <data key="d1">category</data>
      <data key="d2">The abstractmethod is a method defined in a base class that must be overridden in derived classes, integral to defining an interface in object-oriented programming.</data>
      <data key="d3">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="system">
      <data key="d0">system</data>
      <data key="d1">category</data>
      <data key="d2">System is an attribute within CohereModel that indicates the system or model provider being used.&lt;SEP&gt;The system refers to the model provider, such as OpenAI, which delivers the AI capabilities for the Bedrock models.&lt;SEP&gt;system is a property in an abstract class that provides the model provider's name, crucial for API integrations and tracking.&lt;SEP&gt;system is a property representing the provider or model system that Gemini operates on.&lt;SEP&gt;system is a property that describes the model provider used in the OpenAI Responses API.&lt;SEP&gt;system refers to the model provider, typically indicating the source or framework facilitating the AI model's operations.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-43f708cf2c1ed088f9752946682da243&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_request_parameters">
      <data key="d0">model_request_parameters</data>
      <data key="d1">category</data>
      <data key="d2">Model request parameters are the specific settings and inputs provided to AI models when making a request.&lt;SEP&gt;ModelRequestParameters holds configuration options for model requests, impacting how messages are processed and responses are generated.&lt;SEP&gt;model_request_parameters define the parameters required to make a request to the model, allowing for customization and ensuring proper interaction with the language model.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelResponsePartsManager">
      <data key="d0">ModelResponsePartsManager</data>
      <data key="d1">organization</data>
      <data key="d2">ModelResponsePartsManager handles the different parts of a response from the model, coordinating the assembly of individual responses during streaming.</data>
      <data key="d3">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ABC">
      <data key="d0">ABC</data>
      <data key="d1">organization</data>
      <data key="d2">ABC is a base class in Python that allows for the creation of abstract base classes, enabling the definition of abstract methods that must be implemented by derived classes.</data>
      <data key="d3">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NotImplementedError">
      <data key="d0">NotImplementedError</data>
      <data key="d1">category</data>
      <data key="d2">NotImplementedError is an exception in Python that is raised to indicate that a method or operation has not been implemented, often used in abstract methods.</data>
      <data key="d3">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.models.bedrock">
      <data key="d0">pydantic_ai.models.bedrock</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic_ai.models.bedrock refers to the Python package that contains various model definitions and functionalities related to AI models.</data>
      <data key="d3">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ALLOW_MODEL_REQUESTS">
      <data key="d0">ALLOW_MODEL_REQUESTS</data>
      <data key="d1">category</data>
      <data key="d2">ALLOW_MODEL_REQUESTS is a global boolean setting that determines whether requests to various models are allowed or restricted.&lt;SEP&gt;ALLOW_MODEL_REQUESTS is a global setting that determines whether requests to models are allowed or not.</data>
      <data key="d3">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="check_allow_model_requests">
      <data key="d0">check_allow_model_requests</data>
      <data key="d1">event</data>
      <data key="d2">check_allow_model_requests is a function designed to verify if model requests are permitted, potentially raising an error if not.&lt;SEP&gt;check_allow_model_requests is a function used to validate whether model requests can be made based on the global setting.</data>
      <data key="d3">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="override_allow_model_requests">
      <data key="d0">override_allow_model_requests</data>
      <data key="d1">event</data>
      <data key="d2">override_allow_model_requests is a context manager that temporarily changes the ALLOW_MODEL_REQUESTS settings, enabling or disabling model requests during its scope.&lt;SEP&gt;override_allow_model_requests is a context manager that temporarily changes the state of ALLOW_MODEL_REQUESTS during its execution.</data>
      <data key="d3">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Model.request">
      <data key="d0">Model.request</data>
      <data key="d1">event</data>
      <data key="d2">Model.request is a method intended to send requests to underlying models for processing, which may be affected by the ALLOW_MODEL_REQUESTS setting.</data>
      <data key="d3">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Model.request_stream">
      <data key="d0">Model.request_stream</data>
      <data key="d1">event</data>
      <data key="d2">Model.request_stream is similar to Model.request but designed for streaming requests to models, impacted by the same global settings.</data>
      <data key="d3">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Llama3-1-8b-instruct">
      <data key="d0">Llama3-1-8b-instruct</data>
      <data key="d1">organization</data>
      <data key="d2">Llama3-1-8b-instruct is a version of the Llama AI model developed by Meta, utilized for various AI tasks and applications.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Meta">
      <data key="d0">Meta</data>
      <data key="d1">organization</data>
      <data key="d2">Meta is the parent organization behind the development of the Llama AI models and various other artificial intelligence technologies.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Llama3-1-70b-instruct">
      <data key="d0">Llama3-1-70b-instruct</data>
      <data key="d1">organization</data>
      <data key="d2">Llama3-1-70b-instruct is another version of the Llama AI model provided by Meta, designed for advanced AI functionalities and instruction-based tasks.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Llama3-1-405b-instruct">
      <data key="d0">Llama3-1-405b-instruct</data>
      <data key="d1">organization</data>
      <data key="d2">Llama3-1-405b-instruct refers to a specific iteration of the Llama AI model, offering enhanced capabilities for instructional tasks.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mistral-7b-instruct">
      <data key="d0">Mistral-7b-instruct</data>
      <data key="d1">organization</data>
      <data key="d2">Mistral-7b-instruct is an AI model produced by Mistral, focusing on providing instructive capabilities in AI applications.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mixtral-8x7b-instruct">
      <data key="d0">Mixtral-8x7b-instruct</data>
      <data key="d1">organization</data>
      <data key="d2">Mixtral-8x7b-instruct is a specialized version of the Mistral AI model that integrates multiple AI features for enhanced performance.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mistral-Large-2402">
      <data key="d0">Mistral-Large-2402</data>
      <data key="d1">organization</data>
      <data key="d2">Mistral-Large-2402 is a large AI model developed by Mistral that demonstrates advanced capabilities in several AI domains.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mistral-Large-2407">
      <data key="d0">Mistral-Large-2407</data>
      <data key="d1">organization</data>
      <data key="d2">Mistral-Large-2407 is an iterative version of the Mistral AI model, showcasing further enhancements in performance metrics.</data>
      <data key="d3">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BedrockStreamedResponse">
      <data key="d0">BedrockStreamedResponse</data>
      <data key="d1">organization</data>
      <data key="d2">BedrockStreamedResponse is a stream-based response wrapper utilized in the Bedrock AI framework for handling model responses asynchronously.&lt;SEP&gt;BedrockStreamedResponse is an implementation of StreamedResponse tailored for Bedrock models, handling streamed events effectively.</data>
      <data key="d3">chunk-3fe1c986ef649646858753879674bde7&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ConverseResponseTypeDef">
      <data key="d0">ConverseResponseTypeDef</data>
      <data key="d1">category</data>
      <data key="d2">ConverseResponseTypeDef is the data structure that defines the expected format of responses from a conversational AI interface.</data>
      <data key="d3">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="inference_config">
      <data key="d0">inference_config</data>
      <data key="d1">category</data>
      <data key="d2">inference_config is a configuration setting that defines parameters like max tokens and temperature impacting the model behavior.</data>
      <data key="d3">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tool_choice">
      <data key="d0">tool_choice</data>
      <data key="d1">category</data>
      <data key="d2">tool_choice denotes the selection criteria applied for choosing which tools to utilize during model processing.</data>
      <data key="d3">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="params">
      <data key="d0">params</data>
      <data key="d1">category</data>
      <data key="d2">params is a dictionary that stores parameters used for configuring image generation requests within the code base.&lt;SEP&gt;params refers to the parameters object that encapsulates configurations necessary for making model invoke requests.</data>
      <data key="d3">chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Bedrock Model">
      <data key="d0">Bedrock Model</data>
      <data key="d1">organization</data>
      <data key="d2">The Bedrock Model is a specific AI model used for various tasks, developed by the provider mentioned in the text.</data>
      <data key="d3">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ContentBlockOutputTypeDef">
      <data key="d0">ContentBlockOutputTypeDef</data>
      <data key="d1">category</data>
      <data key="d2">ContentBlockOutputTypeDef is a type definition that outlines the structure of messages and content blocks produced by the AI model.</data>
      <data key="d3">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MessageUnionTypeDef">
      <data key="d0">MessageUnionTypeDef</data>
      <data key="d1">category</data>
      <data key="d2">MessageUnionTypeDef is a type that aggregates different shapes of messages that can be sent or received within the AI framework.</data>
      <data key="d3">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="bedrock_messages">
      <data key="d0">bedrock_messages</data>
      <data key="d1">category</data>
      <data key="d2">bedrock_messages is a collection of structured messages exchanged between the user and the AI, encapsulating user prompts and AI responses.</data>
      <data key="d3">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ConverseStreamOutputTypeDef">
      <data key="d0">ConverseStreamOutputTypeDef</data>
      <data key="d1">category</data>
      <data key="d2">ConverseStreamOutputTypeDef defines the expected output types from conversational model streams.&lt;SEP&gt;ConverseStreamOutputTypeDef defines the output types expected from models using conversational streams.</data>
      <data key="d3">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncIteratorWrapper">
      <data key="d0">AsyncIteratorWrapper</data>
      <data key="d1">category</data>
      <data key="d2">AsyncIteratorWrapper is a utility for handling iterations over asynchronous data streams.</data>
      <data key="d3">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EventStream">
      <data key="d0">EventStream</data>
      <data key="d1">category</data>
      <data key="d2">EventStream can refer to the flow of events generated by the model's interactions, potentially in real-time.</data>
      <data key="d3">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="CohereModelSettings">
      <data key="d0">CohereModelSettings</data>
      <data key="d1">organization</data>
      <data key="d2">CohereModelSettings extends ModelSettings and includes specific configurations required for requests to Cohere's model.&lt;SEP&gt;CohereModelSettings is a set of settings used for making requests to the Cohere model, associated with model configurations.</data>
      <data key="d3">chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Cohere Python Client">
      <data key="d0">Cohere Python Client</data>
      <data key="d1">organization</data>
      <data key="d2">Cohere Python Client is the official Python library designed for easier interaction and integration with the Cohere API in Python applications.&lt;SEP&gt;Cohere Python Client is the official Python library for connecting and communicating with the Cohere API.</data>
      <data key="d3">chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="field">
      <data key="d0">field</data>
      <data key="d1">category</data>
      <data key="d2">Field is a function in the context of dataclasses used to define the attributes of a dataclass and their defaults.</data>
      <data key="d3">chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Cohere Model">
      <data key="d0">Cohere Model</data>
      <data key="d1">category</data>
      <data key="d2">Cohere Models are AI models used for various applications in natural language processing.</data>
      <data key="d3">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolV2">
      <data key="d0">ToolV2</data>
      <data key="d1">category</data>
      <data key="d2">ToolV2 refers to the representation of a tool used within the model for various functionalities.</data>
      <data key="d3">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolV2Function">
      <data key="d0">ToolV2Function</data>
      <data key="d1">category</data>
      <data key="d2">ToolV2Function defines the structure and behavior of functions associated with tools in the model.</data>
      <data key="d3">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Parameters">
      <data key="d0">Parameters</data>
      <data key="d1">category</data>
      <data key="d2">Parameters represent the configuration details necessary for model functions and features.</data>
      <data key="d3">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="CohereModelName">
      <data key="d0">CohereModelName</data>
      <data key="d1">category</data>
      <data key="d2">CohereModelName defines the various AI model names available for use within the Cohere system.</data>
      <data key="d3">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="KnownModelName">
      <data key="d0">KnownModelName</data>
      <data key="d1">category</data>
      <data key="d2">KnownModelName is a specific designation used within the programming context to refer to a recognized model name in the framework.&lt;SEP&gt;KnownModelName represents an organization related to machine learning and model generation, notably appearing as part of software or technology development.</data>
      <data key="d3">chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="infer_model">
      <data key="d0">infer_model</data>
      <data key="d1">category</data>
      <data key="d2">infer_model is a function used for determining or instantiating models based on specified names or conditions.&lt;SEP&gt;infer_model is a function within the framework that determines and returns a model based on the given input parameters.</data>
      <data key="d3">chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HTTPError">
      <data key="d0">HTTPError</data>
      <data key="d1">category</data>
      <data key="d2">HTTPError refers to an error type that occurs in web communications, specifically during HTTP requests, indicating issues in processing the request.</data>
      <data key="d3">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="fallback model instance">
      <data key="d0">fallback model instance</data>
      <data key="d1">category</data>
      <data key="d2">A fallback model instance is a configuration that allows the system to switch to alternate models in case of an error during the initial model request.</data>
      <data key="d3">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_default_fallback_condition_factory">
      <data key="d0">_default_fallback_condition_factory</data>
      <data key="d1">category</data>
      <data key="d2">_default_fallback_condition_factory is a utility that creates conditions which trigger fallback mechanisms upon encountering exceptions.</data>
      <data key="d3">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="raise FallbackExceptionGroup">
      <data key="d0">raise FallbackExceptionGroup</data>
      <data key="d1">category</data>
      <data key="d2">raise FallbackExceptionGroup is an operation that signals multiple exceptions grouped together, typically indicating that all attempts at execution have failed.</data>
      <data key="d3">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelResponse, Usage">
      <data key="d0">ModelResponse, Usage</data>
      <data key="d1">category</data>
      <data key="d2">ModelResponse and Usage are output types returned from model calls, containing the generated response and usage statistics for the model.</data>
      <data key="d3">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FunctionDef">
      <data key="d0">FunctionDef</data>
      <data key="d1">category</data>
      <data key="d2">FunctionDef defines a type alias for functions that generate non-streamed responses, detailing their inputs and outputs.&lt;SEP&gt;FunctionDef is a type alias that defines a function used to generate non-streamed responses in the context of AI models.&lt;SEP&gt;FunctionDef serves as a type definition for callable functions, used within function models for processing requests.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="StreamFunctionDef">
      <data key="d0">StreamFunctionDef</data>
      <data key="d1">category</data>
      <data key="d2">StreamFunctionDef is a type alias for functions that provide streamed responses to requests, enabling asynchronous operations.&lt;SEP&gt;StreamFunctionDef is a type alias for functions used to generate streamed responses, indicating their asynchronous nature.&lt;SEP&gt;StreamFunctionDef serves as a type definition for functions that handle streaming requests, enhancing the FunctionModel capabilities.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TypeError">
      <data key="d0">TypeError</data>
      <data key="d1">category</data>
      <data key="d2">TypeError is a common error in Python that occurs when an operation or function is applied to an object of inappropriate type, signaling a misuse of types.&lt;SEP&gt;TypeError is an exception raised when an operation or function is applied to an object of inappropriate type, indicating a programming error.</data>
      <data key="d3">chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DeltaToolCall">
      <data key="d0">DeltaToolCall</data>
      <data key="d1">event</data>
      <data key="d2">DeltaToolCall represents a specific incremental change to a tool call, detailing modifications or updates in the context of function execution.&lt;SEP&gt;DeltaToolCall represents an incremental change to a tool call used in streaming responses, tracking changes in tool attributes over time.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DeltaToolCalls">
      <data key="d0">DeltaToolCalls</data>
      <data key="d1">category</data>
      <data key="d2">DeltaToolCalls is a mapping of tool call IDs to their respective incremental changes, allowing for tracking of various modifications.&lt;SEP&gt;DeltaToolCalls is a type alias for maintaining a mapping of tool call IDs to corresponding DeltaToolCall instances, enabling tracking of changes.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="allow_text_result">
      <data key="d0">allow_text_result</data>
      <data key="d1">category</data>
      <data key="d2">allow_text_result is a boolean attribute that indicates whether plain text output is permitted from a function call.</data>
      <data key="d3">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.models.function">
      <data key="d0">pydantic_ai.models.function</data>
      <data key="d1">category</data>
      <data key="d2">This category represents the models and functionalities related to handling function-based responses in the pydantic_ai_slim framework.</data>
      <data key="d3">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.models.gemini">
      <data key="d0">pydantic_ai.models.gemini</data>
      <data key="d1">category</data>
      <data key="d2">This category encompasses models and interfaces for interacting with the Gemini API, focusing on generative language capabilities.</data>
      <data key="d3">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="function.py">
      <data key="d0">function.py</data>
      <data key="d1">category</data>
      <data key="d2">function.py is a module file within the pydantic_ai_slim library that defines the implementation details of function models and their responses.</data>
      <data key="d3">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiModelSettings">
      <data key="d0">GeminiModelSettings</data>
      <data key="d1">category</data>
      <data key="d2">GeminiModelSettings contains configurations for Gemini models, including safety settings relevant to the model's operation.</data>
      <data key="d3">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_model_name">
      <data key="d0">_model_name</data>
      <data key="d1">property</data>
      <data key="d2">_model_name is a private attribute that stores the name of the AI model being used, ensuring it is encapsulated within a class.&lt;SEP&gt;_model_name is a property of the GeminiModel that retrieves the name of the model in use for API interactions.</data>
      <data key="d3">chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_timestamp">
      <data key="d0">_timestamp</data>
      <data key="d1">property</data>
      <data key="d2">_timestamp is a property of the StreamedResponse that records the time at which the response was generated.</data>
      <data key="d3">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_get_event_iterator">
      <data key="d0">_get_event_iterator</data>
      <data key="d1">method</data>
      <data key="d2">_get_event_iterator is a method within StreamedResponse that asynchronously yields model response stream events based on incoming data.</data>
      <data key="d3">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiModelName">
      <data key="d0">GeminiModelName</data>
      <data key="d1">category</data>
      <data key="d2">GeminiModelName refers to the name of the model being initialized for use with the Gemini framework.&lt;SEP&gt;GeminiModelName refers to the specific name of the AI model to be used with the Gemini architecture.&lt;SEP&gt;GeminiModelName represents the identifier for a specific version of the Gemini AI model, which defines its capabilities and behaviors.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiRequest">
      <data key="d0">GeminiRequest</data>
      <data key="d1">category</data>
      <data key="d2">GeminiRequest is a structure that holds the data needed for a request to the Gemini model, including user instructions and configuration settings.&lt;SEP&gt;GeminiRequest represents the payload format used to make requests to the Gemini API, including message contents and optional configurations.</data>
      <data key="d3">chunk-c85826bcf2c124ee6da90aa381dfff25&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiTextContent">
      <data key="d0">GeminiTextContent</data>
      <data key="d1">category</data>
      <data key="d2">GeminiTextContent is a structure used to represent text parts in messages sent to the Gemini API, facilitating clear communication.</data>
      <data key="d3">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiGenerationConfig">
      <data key="d0">GeminiGenerationConfig</data>
      <data key="d1">category</data>
      <data key="d2">GeminiGenerationConfig holds the specifics regarding the generation settings for responses from the model, including aspects like temperature and max tokens.</data>
      <data key="d3">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="User-Agent">
      <data key="d0">User-Agent</data>
      <data key="d1">person</data>
      <data key="d2">User-Agent is a field present in the request headers that identifies the application type, operating system, and software used by the requesting user.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Gemini Generation Config">
      <data key="d0">Gemini Generation Config</data>
      <data key="d1">category</data>
      <data key="d2">Gemini Generation Config includes settings to control the output of the Gemini model, such as maximum tokens and temperature.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HTTPResponse">
      <data key="d0">HTTPResponse</data>
      <data key="d1">event</data>
      <data key="d2">HTTPResponse refers to the structured response sent back from the server after processing a request, indicating the status and content.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiStreamedResponse">
      <data key="d0">GeminiStreamedResponse</data>
      <data key="d1">organization</data>
      <data key="d2">GeminiStreamedResponse handles streamed responses from the Gemini model, allowing for continuous data processing as content is received.&lt;SEP&gt;GeminiStreamedResponse processes streaming outputs from the Gemini model, allowing real-time interaction and data handling.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_GeminiRequest">
      <data key="d0">_GeminiRequest</data>
      <data key="d1">organization</data>
      <data key="d2">_GeminiRequest is a data structure designed to encapsulate request information sent to the Gemini model, including system instructions and tools.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sys_prompt_parts">
      <data key="d0">sys_prompt_parts</data>
      <data key="d1">category</data>
      <data key="d2">System prompt parts refer to the instructions given to the model that guide its behavior and responses during interaction.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tool_config">
      <data key="d0">tool_config</data>
      <data key="d1">category</data>
      <data key="d2">Tool configuration consists of specific settings that define how external tools interact with the Gemini model during processing.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="generation_config">
      <data key="d0">generation_config</data>
      <data key="d1">category</data>
      <data key="d2">Generation config specifies the parameters that control how the Gemini model generates content, impacting output characteristics.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="headers">
      <data key="d0">headers</data>
      <data key="d1">category</data>
      <data key="d2">Headers are key-value pairs sent in HTTP requests that provide necessary information to the server regarding the request.&lt;SEP&gt;headers is a method that returns authentication headers necessary for making API requests using the model.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="request_json">
      <data key="d0">request_json</data>
      <data key="d1">category</data>
      <data key="d2">Request JSON is the formatted data structure containing all parameters and instructions for the request to the Gemini model.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="r">
      <data key="d0">r</data>
      <data key="d1">person</data>
      <data key="d2">R is an instance representing the HTTP response object obtained from the server after the request has been processed.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="status_code">
      <data key="d0">status_code</data>
      <data key="d1">event</data>
      <data key="d2">Status code provides the HTTP response status indicating the success or failure of the request to the Gemini model.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="candidates">
      <data key="d0">candidates</data>
      <data key="d1">category</data>
      <data key="d2">Candidates represent the potential responses provided by the model for consideration before final output.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="unexpected_model_behavior">
      <data key="d0">unexpected_model_behavior</data>
      <data key="d1">event</data>
      <data key="d2">Unexpected model behavior occurs when the response from the model deviates from expected norms or formats.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="gemini_safety_settings">
      <data key="d0">gemini_safety_settings</data>
      <data key="d1">category</data>
      <data key="d2">Gemini safety settings are parameters aimed at moderating the content generated by the Gemini model for safety and compliance.</data>
      <data key="d3">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Google API Key">
      <data key="d0">Google API Key</data>
      <data key="d1">category</data>
      <data key="d2">The Google API Key is a credential used for authenticating requests to Google's services.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Gemini Streamed Response">
      <data key="d0">Gemini Streamed Response</data>
      <data key="d1">event</data>
      <data key="d2">Gemini Streamed Response is an implementation detail of the Gemini model used to manage streamed responses from API requests.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Response">
      <data key="d0">Response</data>
      <data key="d1">event</data>
      <data key="d2">Response refers to the output generated after processing requests in the Gemini model, typically presented to the user.</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiPartUnion">
      <data key="d0">GeminiPartUnion</data>
      <data key="d1">category</data>
      <data key="d2">GeminiPartUnion is a category that includes various types of responses and their handling in the system.&lt;SEP&gt;GeminiPartUnion is a conceptual category that consists of various parts of a response that are handled by the Gemini system.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GeminiSafetySettings">
      <data key="d0">GeminiSafetySettings</data>
      <data key="d1">category</data>
      <data key="d2">GeminiSafetySettings outlines the safety settings options for Gemini model requests, including categories and thresholds for filtering concerns.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="category">
      <data key="d0">category</data>
      <data key="d1">instance-attribute</data>
      <data key="d2">category denotes safety settings that specify the type of harm to filter against in the Gemini model requests.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="threshold">
      <data key="d0">threshold</data>
      <data key="d1">instance-attribute</data>
      <data key="d2">threshold is an attribute that determines the severity level of harm that will trigger safety filters in the Gemini model.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="parts_manager">
      <data key="d0">parts_manager</data>
      <data key="d1">organization</data>
      <data key="d2">parts_manager is responsible for handling and managing the different components or parts of the responses generated in the Gemini system.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="function_call">
      <data key="d0">function_call</data>
      <data key="d1">category</data>
      <data key="d2">function_call refers to a specific type of part within the Gemini response that indicates a function triggered within the system.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="function_response">
      <data key="d0">function_response</data>
      <data key="d1">category</data>
      <data key="d2">function_response is a type of part that represents the output or answer returned by a function call made within the Gemini framework.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async_iterator">
      <data key="d0">async_iterator</data>
      <data key="d1">category</data>
      <data key="d2">async_iterator is a concept used to enable asynchronous handling of responses within the Gemini model processing system.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="uuid4">
      <data key="d0">uuid4</data>
      <data key="d1">category</data>
      <data key="d2">uuid4 is a method to generate a universally unique identifier within the Gemini system for tracking function call parts.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="validate_json">
      <data key="d0">validate_json</data>
      <data key="d1">category</data>
      <data key="d2">validate_json is a function that checks the integrity and validity of JSON data received in Gemini responses.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_gemini_streamed_response_ta">
      <data key="d0">_gemini_streamed_response_ta</data>
      <data key="d1">organization</data>
      <data key="d2">_gemini_streamed_response_ta is a component or module that ensures the handling of streamed responses from the Gemini API architecture.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="properties">
      <data key="d0">properties</data>
      <data key="d1">category</data>
      <data key="d2">properties refer to attributes or characteristics associated with different parts of the responses generated by the Gemini system.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="safety settings">
      <data key="d0">safety settings</data>
      <data key="d1">category</data>
      <data key="d2">safety settings encompass the controls and criteria defined to manage content safety and compliance in responses generated by the Gemini model.</data>
      <data key="d3">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Safety Settings Category">
      <data key="d0">Safety Settings Category</data>
      <data key="d1">category</data>
      <data key="d2">The Safety Settings Category encompasses various safety parameters and thresholds that govern the behavior of systems to ensure secure operation.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Threshold Settings">
      <data key="d0">Threshold Settings</data>
      <data key="d1">category</data>
      <data key="d2">Threshold settings define specific levels of operation for safety protocols, including a range of predefined options for handling safety risks.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.models.groq">
      <data key="d0">pydantic_ai.models.groq</data>
      <data key="d1">organization</data>
      <data key="d2">The pydantic_ai.models.groq organization provides a framework for managing and interacting with Groq models, offering settings and structures for model requests.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ProductionGroqModelNames">
      <data key="d0">ProductionGroqModelNames</data>
      <data key="d1">category</data>
      <data key="d2">ProductionGroqModelNames includes a list of various production models that can be utilized within the Groq API framework.&lt;SEP&gt;ProductionGroqModelNames is a class that specifies different production models available for use with the Groq API.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PreviewGroqModelNames">
      <data key="d0">PreviewGroqModelNames</data>
      <data key="d1">category</data>
      <data key="d2">PreviewGroqModelNames is a class that outlines the various preview models available within Groq, subject to change.&lt;SEP&gt;PreviewGroqModelNames outlines possible Groq models in the preview stage that can be accessed for experimental or developmental use.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GroqModel">
      <data key="d0">GroqModel</data>
      <data key="d1">organization</data>
      <data key="d2">GroqModel serves as the foundational class for interacting with Groq API for model management and functionality.&lt;SEP&gt;The GroqModel is a robust structure used for implementing Groq models, serving as the base for actions performed by the Groq API.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GroqModelSettings">
      <data key="d0">GroqModelSettings</data>
      <data key="d1">organization</data>
      <data key="d2">GroqModelSettings defines specific settings that can modify the behavior of interactions with the Groq model.&lt;SEP&gt;GroqModelSettings defines the configuration and settings required to properly interact with Groq models in requests.&lt;SEP&gt;GroqModelSettings outlines the configuration settings required for a Groq model request, focusing on merging settings effectively with other model types.&lt;SEP&gt;GroqModelSettings refers to settings specific to the Groq model that can influence its behavior during requests.</data>
      <data key="d3">chunk-77d1c9fabe1883697171dedd7266ffd7&lt;SEP&gt;chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Authentication Settings">
      <data key="d0">Authentication Settings</data>
      <data key="d1">event</data>
      <data key="d2">Authentication Settings detail the necessary configurations for secure access to the Groq API and its models.&lt;SEP&gt;Authentication settings are necessary for establishing secure connections and interaction with the Groq models.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Safety Settings">
      <data key="d0">Safety Settings</data>
      <data key="d1">category</data>
      <data key="d2">Safety Settings encompass the various parameters and thresholds designed to ensure secure operation and compliance within systems.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HARM_BLOCK_THRESHOLD_UNSPECIFIED">
      <data key="d0">HARM_BLOCK_THRESHOLD_UNSPECIFIED</data>
      <data key="d1">category</data>
      <data key="d2">HARM_BLOCK_THRESHOLD_UNSPECIFIED is a specific threshold that denotes no harm blocking criteria specified, allowing all actions.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BLOCK_LOW_AND_ABOVE">
      <data key="d0">BLOCK_LOW_AND_ABOVE</data>
      <data key="d1">category</data>
      <data key="d2">BLOCK_LOW_AND_ABOVE indicates a threshold setting that allows actions above a low harm level to be blocked.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BLOCK_MEDIUM_AND_ABOVE">
      <data key="d0">BLOCK_MEDIUM_AND_ABOVE</data>
      <data key="d1">category</data>
      <data key="d2">BLOCK_MEDIUM_AND_ABOVE signifies a safety threshold that prohibits actions classified as medium harm and above.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BLOCK_ONLY_HIGH">
      <data key="d0">BLOCK_ONLY_HIGH</data>
      <data key="d1">category</data>
      <data key="d2">BLOCK_ONLY_HIGH is a threshold that applies strict blocking only for actions identified as high harm.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BLOCK_NONE">
      <data key="d0">BLOCK_NONE</data>
      <data key="d1">category</data>
      <data key="d2">BLOCK_NONE is a threshold option that allows all actions without blocking any, thus posing full operational freedom.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OFF">
      <data key="d0">OFF</data>
      <data key="d1">category</data>
      <data key="d2">OFF signifies a threshold state where all harm blocking is disabled, allowing unrestricted activity.</data>
      <data key="d3">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="chat.ChatCompletion">
      <data key="d0">chat.ChatCompletion</data>
      <data key="d1">category</data>
      <data key="d2">chat.ChatCompletion pertains to the completion generated by the chat model after processing input messages.&lt;SEP&gt;chat.ChatCompletion refers to the response object that the chat model produces after processing an input message.</data>
      <data key="d3">chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="APIStatusError">
      <data key="d0">APIStatusError</data>
      <data key="d1">category</data>
      <data key="d2">APIStatusError is a category of errors that occur when there is a problem with API requests, specifically related to status responses.&lt;SEP&gt;APIStatusError is an exception raised when a request to the API encounters a problem, often related to an unsuccessful status code.&lt;SEP&gt;APIStatusError refers to an error raised when there is a failed API status in the communication with the model.&lt;SEP&gt;APIStatusError represents errors related to API status, reflecting issues encountered during requests to the model.</data>
      <data key="d3">chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="timezone.utc">
      <data key="d0">timezone.utc</data>
      <data key="d1">category</data>
      <data key="d2">timezone.utc is used to represent Coordinated Universal Time in datetime functionalities.&lt;SEP&gt;timezone.utc specifies Coordinated Universal Time and is used to manage time data appropriately in datetime operations.</data>
      <data key="d3">chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self.client">
      <data key="d0">self.client</data>
      <data key="d1">organization</data>
      <data key="d2">self.client represents the client instance used to interact with the chat model API for generating responses.</data>
      <data key="d3">chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Groq Model">
      <data key="d0">Groq Model</data>
      <data key="d1">organization</data>
      <data key="d2">Groq Model refers to a predictive analytics model developed by Groq, used for various data-driven tasks.</data>
      <data key="d3">chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ChatCompletionMessageParam">
      <data key="d0">ChatCompletionMessageParam</data>
      <data key="d1">category</data>
      <data key="d2">ChatCompletionMessageParam is used to format messages for the chat completion functionality in the Groq model.</data>
      <data key="d3">chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="chat.ChatCompletionMessageParam">
      <data key="d0">chat.ChatCompletionMessageParam</data>
      <data key="d1">category</data>
      <data key="d2">chat.ChatCompletionMessageParam describes the structure of messages exchanged in a chat completion setup between users and the model.&lt;SEP&gt;chat.ChatCompletionMessageParam is a structured format used for messages exchanged within the chat completion interface of the Groq model.</data>
      <data key="d3">chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolCall">
      <data key="d0">ToolCall</data>
      <data key="d1">event</data>
      <data key="d2">ToolCall is a specific instance of invoking a tool within the Groq model, carrying parameters and requirements.</data>
      <data key="d3">chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GroqStreamedResponse">
      <data key="d0">GroqStreamedResponse</data>
      <data key="d1">organization</data>
      <data key="d2">GroqStreamedResponse is a specialized response class designed to handle streamed outputs from Groq models in a structured way.</data>
      <data key="d3">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncIterable">
      <data key="d0">AsyncIterable</data>
      <data key="d1">category</data>
      <data key="d2">AsyncIterable allows for asynchronous iteration over data streams, enabling efficient data processing in asynchronous programming environments.</data>
      <data key="d3">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="chat.ChatCompletionChunk">
      <data key="d0">chat.ChatCompletionChunk</data>
      <data key="d1">category</data>
      <data key="d2">chat.ChatCompletionChunk represents a discrete chunk of generated text or data from a chat completion process in the Groq framework.</data>
      <data key="d3">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="InstrumentedModel">
      <data key="d0">InstrumentedModel</data>
      <data key="d1">class</data>
      <data key="d2">InstrumentedModel is a wrapper class that enables instrumentation for requests made to wrapped models, leveraging OpenTelemetry features.&lt;SEP&gt;InstrumentedModel is an organization related to AI model instrumentation, facilitating the collection and processing of data for AI requests.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="__init__">
      <data key="d0">__init__</data>
      <data key="d1">event</data>
      <data key="d2">The __init__ method initializes settings for the instrumentation model, including event mode and provider options.</data>
      <data key="d3">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="request">
      <data key="d0">request</data>
      <data key="d1">event</data>
      <data key="d2">The request event is a function that initiates a communication to make a non-streaming request to the model, processing input messages and returning a response.&lt;SEP&gt;The request method processes incoming messages and retrieves a response, instrumented for observability.</data>
      <data key="d3">chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_instrument">
      <data key="d0">_instrument</data>
      <data key="d1">event</data>
      <data key="d2">The _instrument method sets up the instrumentation environment for requests, managing the observability aspects.</data>
      <data key="d3">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GEN_AI_REQUEST_MODEL_ATTRIBUTE">
      <data key="d0">GEN_AI_REQUEST_MODEL_ATTRIBUTE</data>
      <data key="d1">category</data>
      <data key="d2">GEN_AI_REQUEST_MODEL_ATTRIBUTE is a key attribute representing the requested model in AI operations.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="operation">
      <data key="d0">operation</data>
      <data key="d1">category</data>
      <data key="d2">Operation refers to the specific task being executed within the AI system, in this case, a chat operation using the model.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="span_name">
      <data key="d0">span_name</data>
      <data key="d1">category</data>
      <data key="d2">Span name identifies the operation being performed along with the model name to track specific instances of execution in monitoring.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="span">
      <data key="d0">span</data>
      <data key="d1">category</data>
      <data key="d2">Span acts as a context for the operation, allowing for tracing and monitoring of the ongoing processes.&lt;SEP&gt;span refers to a time interval or structure used for performance monitoring or tracing during graph execution.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="events">
      <data key="d0">events</data>
      <data key="d1">category</data>
      <data key="d2">Events represent logs and occurrences tracked during model requests and responses, providing insights into their execution.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="finish">
      <data key="d0">finish</data>
      <data key="d1">event</data>
      <data key="d2">Finish is a function that finalizes the tracking of events and metrics following the completion of a model response.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelResponse.body">
      <data key="d0">ModelResponse.body</data>
      <data key="d1">category</data>
      <data key="d2">The body of ModelResponse contains the actual content or results returned by the AI model after processing a request.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self.settings.event_logger">
      <data key="d0">self.settings.event_logger</data>
      <data key="d1">organization</data>
      <data key="d2">The event logger is a component of the system responsible for recording and logging events that occur during operations.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self.model_attributes">
      <data key="d0">self.model_attributes</data>
      <data key="d1">category</data>
      <data key="d2">Model attributes encapsulate the configuration details related to a specific AI model instance.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self.messages_to_otel_events">
      <data key="d0">self.messages_to_otel_events</data>
      <data key="d1">category</data>
      <data key="d2">Messages to OTEL events refer to the transformation of message data into a format suitable for observability tracking.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mistral models">
      <data key="d0">Mistral models</data>
      <data key="d1">organization</data>
      <data key="d2">Mistral models are a collection of AI models that are monitored and configured through the InstrumentedModel framework.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self._emit_events">
      <data key="d0">self._emit_events</data>
      <data key="d1">category</data>
      <data key="d2">Emit events function is responsible for sending tracked events either to logs or another monitoring system.</data>
      <data key="d3">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralModel">
      <data key="d0">MistralModel</data>
      <data key="d1">category</data>
      <data key="d2">MistralModel refers to a category of AI models developed by Mistral that uses certain settings for requests to the Mistral API.</data>
      <data key="d3">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralModelSettings">
      <data key="d0">MistralModelSettings</data>
      <data key="d1">category</data>
      <data key="d2">MistralModelSettings defines the configuration settings used in requests to Mistral models, ensuring all fields are appropriately prefixed with 'mistral_' to facilitate integration with other model types.&lt;SEP&gt;MistralModelSettings defines the configuration settings used in requests to Mistral models, ensuring all fields are appropriately prefixed.&lt;SEP&gt;MistralModelSettings encompasses the configuration settings specific to the model being used by Mistral, influencing response generation.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mistral Python Client">
      <data key="d0">Mistral Python Client</data>
      <data key="d1">organization</data>
      <data key="d2">The Mistral Python Client is a software library that enables users to interact with Mistral's API for managing and working with AI models.</data>
      <data key="d3">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="API Documentation">
      <data key="d0">API Documentation</data>
      <data key="d1">event</data>
      <data key="d2">API Documentation provides detailed guidelines and information on how to use the Mistral API effectively, including endpoints and data structures.</data>
      <data key="d3">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralModelName">
      <data key="d0">MistralModelName</data>
      <data key="d1">category</data>
      <data key="d2">MistralModelName defines the identifiers assigned to specific models used within the Mistral organization, facilitating model selection.&lt;SEP&gt;MistralModelName is a category that defines the names assigned to specific models within the Mistral organization.&lt;SEP&gt;MistralModelName is a type that specifies allowable names for Mistral models, including union types for greater flexibility.</data>
      <data key="d3">chunk-49dda393c384d6eedda81d9cf452a9c8&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SDKError">
      <data key="d0">SDKError</data>
      <data key="d1">category</data>
      <data key="d2">SDKError is an error type indicating problems that occur during the software development kit operations.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralTool">
      <data key="d0">MistralTool</data>
      <data key="d1">category</data>
      <data key="d2">MistralTool refers to the tools defined for Mistral's operation, including functions and their parameters.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralEventStreamAsync">
      <data key="d0">MistralEventStreamAsync</data>
      <data key="d1">category</data>
      <data key="d2">MistralEventStreamAsync is a type of async response stream provided by Mistral, generating outputs in real-time based on user input.&lt;SEP&gt;MistralEventStreamAsync is an organization that provides an asynchronous event streaming service for Python applications, facilitating real-time data processing.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralCompletionEvent">
      <data key="d0">MistralCompletionEvent</data>
      <data key="d1">category</data>
      <data key="d2">MistralCompletionEvent refers to an event triggered during the completion of tasks in the Mistral asynchronous framework, providing updates and results.&lt;SEP&gt;MistralCompletionEvent refers to events generated during the completion phase of processing messages in Mistral.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralChatCompletionResponse">
      <data key="d0">MistralChatCompletionResponse</data>
      <data key="d1">category</data>
      <data key="d2">MistralChatCompletionResponse is the response structure returned by Mistral after processing a chat request.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="timeout_ms">
      <data key="d0">timeout_ms</data>
      <data key="d1">category</data>
      <data key="d2">timeout_ms indicates the maximum permissible time for a request before it times out in Mistral operations.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ydantic">
      <data key="d0">ydantic</data>
      <data key="d1">organization</data>
      <data key="d2">Yadantic is a library used for data validation and settings management in Python, commonly utilized in applications that require data modeling.</data>
      <data key="d3">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralStreamedResponse">
      <data key="d0">MistralStreamedResponse</data>
      <data key="d1">organization</data>
      <data key="d2">MistralStreamedResponse is a class that implements streaming responses specifically for Mistral models, handling real-time data transmission during requests.&lt;SEP&gt;MistralStreamedResponse is a tool that validates the required parameters in a JSON schema to ensure compliance, especially for stream-based return types.&lt;SEP&gt;MistralStreamedResponse is an organization/tool responsible for validating JSON schemas and ensuring required parameters are respected, particularly for stream-based return types.&lt;SEP&gt;MistralStreamedResponse is part of the Mistral framework, representing responses that are streamed to the client in real-time.</data>
      <data key="d3">chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-9a9bc262ebbbdd42a17a84adee4a7f9d&lt;SEP&gt;chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="first_chunk">
      <data key="d0">first_chunk</data>
      <data key="d1">category</data>
      <data key="d2">First_chunk represents the initial piece of data retrieved from a stream response, used to check the content of the response before processing.</data>
      <data key="d3">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralToolCall">
      <data key="d0">MistralToolCall</data>
      <data key="d1">category</data>
      <data key="d2">MistralToolCall encapsulates a request to perform a function, including its identity and the arguments required for execution.</data>
      <data key="d3">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MistralFunctionCall">
      <data key="d0">MistralFunctionCall</data>
      <data key="d1">category</data>
      <data key="d2">MistralFunctionCall represents the definition of a function being called, including its name and associated arguments within the Mistral framework.</data>
      <data key="d3">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="json_mode_schema_prompt">
      <data key="d0">json_mode_schema_prompt</data>
      <data key="d1">category</data>
      <data key="d2">json_mode_schema_prompt is a variable that likely contains a prompt or template for structuring requests in JSON format within the AI model context.</data>
      <data key="d3">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="infer_provider">
      <data key="d0">infer_provider</data>
      <data key="d1">event</data>
      <data key="d2">infer_provider is a function that determines and returns the appropriate provider based on input parameters, playing a crucial role in the request handling process.</data>
      <data key="d3">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async">
      <data key="d0">async</data>
      <data key="d1">category</data>
      <data key="d2">async is a keyword in Python that defines asynchronous functions which allow for non-blocking code execution.&lt;SEP&gt;async is a keyword indicating asynchronous programming capabilities that allow for non-blocking operations, especially in the context of requests and response handling.</data>
      <data key="d3">chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="VALID_JSON_TYPE_MAPPING">
      <data key="d0">VALID_JSON_TYPE_MAPPING</data>
      <data key="d1">category</data>
      <data key="d2">VALID_JSON_TYPE_MAPPING is a mapping that translates JSON types into corresponding Python types for validation purposes.</data>
      <data key="d3">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_result.py">
      <data key="d0">_result.py</data>
      <data key="d1">category</data>
      <data key="d2">_result.py is a script that handles the process of validating the output JSON to ensure it conforms to a defined schema.</data>
      <data key="d3">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="output_json">
      <data key="d0">output_json</data>
      <data key="d1">category</data>
      <data key="d2">output_json refers to the JSON object generated as output by processes involving validation and parameter checks.</data>
      <data key="d3">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="json_dict">
      <data key="d0">json_dict</data>
      <data key="d1">category</data>
      <data key="d2">json_dict represents a dictionary in Python that holds key-value pairs for JSON data being validated.</data>
      <data key="d3">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="json_schema">
      <data key="d0">json_schema</data>
      <data key="d1">category</data>
      <data key="d2">json_schema denotes a schema defining the structure and requirements that a JSON object must fulfill.</data>
      <data key="d3">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TOKEN">
      <data key="d0">TOKEN</data>
      <data key="d1">category</data>
      <data key="d2">TOKEN pertains to the quantity of compute resource utilized during the processing of validation and models.</data>
      <data key="d3">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="LS">
      <data key="d0">LS</data>
      <data key="d1">event</data>
      <data key="d2">LS refers to an unspecified event or context within the provided text, possibly indicating a local or system-related situation.</data>
      <data key="d3">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FileSearchToolParam">
      <data key="d0">FileSearchToolParam</data>
      <data key="d1">category</data>
      <data key="d2">FileSearchToolParam is a category representing a specific parameter used for searching files within OpenAI's tools.</data>
      <data key="d3">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="WebSearchToolParam">
      <data key="d0">WebSearchToolParam</data>
      <data key="d1">category</data>
      <data key="d2">WebSearchToolParam is a category representing parameters related to web searching within OpenAI's tools.</data>
      <data key="d3">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ComputerToolParam">
      <data key="d0">ComputerToolParam</data>
      <data key="d1">category</data>
      <data key="d2">ComputerToolParam is a category representing parameters related to computational tasks in OpenAI's tools.</data>
      <data key="d3">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAI Python Client">
      <data key="d0">OpenAI Python Client</data>
      <data key="d1">organization</data>
      <data key="d2">The OpenAI Python Client is a library used to interact with OpenAI's API, enabling various functionalities and integrations.</data>
      <data key="d3">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai_builtin_tools">
      <data key="d0">openai_builtin_tools</data>
      <data key="d1">category</data>
      <data key="d2">openai_builtin_tools is a category encompassing various tools provided by OpenAI for specific computational tasks and functionalities.</data>
      <data key="d3">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai_reasoning_generate_summary">
      <data key="d0">openai_reasoning_generate_summary</data>
      <data key="d1">category</data>
      <data key="d2">openai_reasoning_generate_summary is a parameter used to define the type of reasoning summary to be generated by the OpenAI model, with options for detailed or concise.</data>
      <data key="d3">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai_truncation">
      <data key="d0">openai_truncation</data>
      <data key="d1">category</data>
      <data key="d2">openai_truncation refers to the strategy determining how responses are truncated based on the model's context size, ensuring efficient communication.</data>
      <data key="d3">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAIModelSettings">
      <data key="d0">OpenAIModelSettings</data>
      <data key="d1">category</data>
      <data key="d2">OpenAIModelSettings defines parameters related to model behavior such as temperature, max tokens, and presence penalty.</data>
      <data key="d3">chunk-3d1c7209debb23a47e4399b20a981057</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAIModelName">
      <data key="d0">OpenAIModelName</data>
      <data key="d1">category</data>
      <data key="d2">OpenAIModelName refers to a type that encapsulates the names of different models provided by OpenAI for various applications in AI.&lt;SEP&gt;OpenAIModelName refers to the identifier of the specific model being used for generating responses.</data>
      <data key="d3">chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ChatCompletion">
      <data key="d0">ChatCompletion</data>
      <data key="d1">category</data>
      <data key="d2">ChatCompletion is a type of response that contains text completions generated by the model based on the provided messages.</data>
      <data key="d3">chunk-3d1c7209debb23a47e4399b20a981057</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAIStreamedResponse">
      <data key="d0">OpenAIStreamedResponse</data>
      <data key="d1">organization</data>
      <data key="d2">OpenAIStreamedResponse is a part of a response processing framework that manages how response data is streamed and handled in an AI model context.</data>
      <data key="d3">chunk-561b3b3cda17d16517ba963b544fdd01</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async Iterable">
      <data key="d0">async Iterable</data>
      <data key="d1">category</data>
      <data key="d2">async Iterable is a programming construct facilitating asynchronous iteration over collections, often used in processing data streams in AI applications.</data>
      <data key="d3">chunk-561b3b3cda17d16517ba963b544fdd01</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="chat.ChatCompletionToolParam">
      <data key="d0">chat.ChatCompletionToolParam</data>
      <data key="d1">organization</data>
      <data key="d2">chat.ChatCompletionToolParam denotes the structure that defines a tool's parameters in the context of AI chat completions.</data>
      <data key="d3">chunk-561b3b3cda17d16517ba963b544fdd01</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ChatCompletionContentPartInputAudioParam">
      <data key="d0">ChatCompletionContentPartInputAudioParam</data>
      <data key="d1">category</data>
      <data key="d2">ChatCompletionContentPartInputAudioParam is a component used to manage input audio parameters within the chat completion functionalities of OpenAI's API.</data>
      <data key="d3">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="InputAudio">
      <data key="d0">InputAudio</data>
      <data key="d1">category</data>
      <data key="d2">InputAudio is a data structure that encapsulates audio input data along with its format for processing in AI chat applications.</data>
      <data key="d3">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cached_async_http_client">
      <data key="d0">cached_async_http_client</data>
      <data key="d1">category</data>
      <data key="d2">cached_async_http_client is a utility that manages asynchronous HTTP client requests while providing caching capabilities to optimize performance.&lt;SEP&gt;cached_async_http_client is an instance of an HTTP client designed for asynchronous operations, aimed at optimizing resource usage.</data>
      <data key="d3">chunk-53688e690a1714927cd95fd846af7f81&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai.exceptions.ModelHTTPError">
      <data key="d0">pydantic_ai.exceptions.ModelHTTPError</data>
      <data key="d1">category</data>
      <data key="d2">ModelHTTPError is an exception type defined within the Pydantic AI framework, triggered by issues related to HTTP requests in AI models.</data>
      <data key="d3">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAISystemPromptRole">
      <data key="d0">OpenAISystemPromptRole</data>
      <data key="d1">category</data>
      <data key="d2">OpenAISystemPromptRole categorizes the roles assigned to system prompts within the OpenAI framework, guiding the behavior of AI responses.</data>
      <data key="d3">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="response.content">
      <data key="d0">response.content</data>
      <data key="d1">category</data>
      <data key="d2">response.content refers to the data returned by HTTP requests in the context of handling AI interactions, which may include audio or text content.</data>
      <data key="d3">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="File">
      <data key="d0">File</data>
      <data key="d1">category</data>
      <data key="d2">File represents a data structure in Pydantic AI used for managing and processing file data within AI applications, ensuring compatibility with OpenAI models.</data>
      <data key="d3">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Chat Completions API">
      <data key="d0">Chat Completions API</data>
      <data key="d1">category</data>
      <data key="d2">The Chat Completions API allows for conversational interactions with AI models, focusing on dialogue and response generation.</data>
      <data key="d3">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAI Responses API">
      <data key="d0">OpenAI Responses API</data>
      <data key="d1">category</data>
      <data key="d2">The OpenAI Responses API is a state-of-the-art tool designed to create responses from AI models based on user inputs, facilitating automated conversations and other AI applications.</data>
      <data key="d3">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Responses API documentation">
      <data key="d0">Responses API documentation</data>
      <data key="d1">category</data>
      <data key="d2">The Responses API documentation provides detailed guidelines and information on how to effectively use the OpenAI Responses API and its capabilities.</data>
      <data key="d3">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Pydantic AI Slim">
      <data key="d0">Pydantic AI Slim</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic AI Slim refers to the library/toolset that utilizes Pydantic for structuring and validating data models in AI applications.</data>
      <data key="d3">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OpenAI API docs">
      <data key="d0">OpenAI API docs</data>
      <data key="d1">category</data>
      <data key="d2">The OpenAI API docs encompass the comprehensive resources that guide users on how to interact with OpenAI's various API services, including the Responses API and Chat Completions API.</data>
      <data key="d3">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tool call">
      <data key="d0">tool call</data>
      <data key="d1">category</data>
      <data key="d2">Tool call refers to an API feature where a tool is invoked to perform a specific task or response generation in the context of the OpenAI services.</data>
      <data key="d3">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FunctionToolParam">
      <data key="d0">FunctionToolParam</data>
      <data key="d1">category</data>
      <data key="d2">FunctionToolParam is a category that pertains to the parameters associated with function tools in the OpenAI framework.</data>
      <data key="d3">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ResponseStreamEvent">
      <data key="d0">ResponseStreamEvent</data>
      <data key="d1">event</data>
      <data key="d2">ResponseStreamEvent represents a stream event generated in response to messages processed by the OpenAI model.</data>
      <data key="d3">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelRequest Parameters">
      <data key="d0">ModelRequest Parameters</data>
      <data key="d1">category</data>
      <data key="d2">ModelRequest Parameters refer to the specification and parameters used when creating requests for the OpenAI model.</data>
      <data key="d3">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelResponse Parameters">
      <data key="d0">ModelResponse Parameters</data>
      <data key="d1">category</data>
      <data key="d2">ModelResponse Parameters outline the specifications for the responses generated from the model in response to user requests.</data>
      <data key="d3">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Reasoning">
      <data key="d0">Reasoning</data>
      <data key="d1">category</data>
      <data key="d2">Reasoning pertains to the logic or process by which the model generates responses or handles requests.</data>
      <data key="d3">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FunctionCallOutput">
      <data key="d0">FunctionCallOutput</data>
      <data key="d1">category</data>
      <data key="d2">FunctionCallOutput denotes the output generated by calling a specific function within the framework during model interactions.</data>
      <data key="d3">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_init_">
      <data key="d0">_init_</data>
      <data key="d1">event</data>
      <data key="d2">_init_ is a method that initializes instances of the OpenAI Responses model with specific parameters.</data>
      <data key="d3">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="responses.ResponseFunctionToolCallParam">
      <data key="d0">responses.ResponseFunctionToolCallParam</data>
      <data key="d1">category</data>
      <data key="d2">ResponseFunctionToolCallParam is a structure used to encapsulate the parameters for a response function tool call, including arguments and identifiers.</data>
      <data key="d3">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="responses.EasyInputMessageParam">
      <data key="d0">responses.EasyInputMessageParam</data>
      <data key="d1">category</data>
      <data key="d2">EasyInputMessageParam is a category for structured input messages that simplify the representation of user requests in the system.</data>
      <data key="d3">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="responses.ResponseInputContentParam">
      <data key="d0">responses.ResponseInputContentParam</data>
      <data key="d1">category</data>
      <data key="d2">ResponseInputContentParam categorizes different types of input data for responses, facilitating message management in the API.</data>
      <data key="d3">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="responses.ResponseInputTextParam">
      <data key="d0">responses.ResponseInputTextParam</data>
      <data key="d1">category</data>
      <data key="d2">ResponseInputTextParam handles textual input data for responses, encapsulating user-provided text in the system.</data>
      <data key="d3">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="responses.ResponseInputImageParam">
      <data key="d0">responses.ResponseInputImageParam</data>
      <data key="d1">category</data>
      <data key="d2">ResponseInputImageParam manages image input data in responses, encoding image information for processing.</data>
      <data key="d3">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="responses.ResponseInputFileParam">
      <data key="d0">responses.ResponseInputFileParam</data>
      <data key="d1">category</data>
      <data key="d2">ResponseInputFileParam is used for handling file input data, providing a structure for document management in responses.</data>
      <data key="d3">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="my_agent">
      <data key="d0">my_agent</data>
      <data key="d1">organization</data>
      <data key="d2">my_agent refers to an agent that is used in conjunction with the TestModel to run tests and manage requests.</data>
      <data key="d3">chunk-ba870a242fd1468b0176d028dc0c47b3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Unit Testing">
      <data key="d0">Unit Testing</data>
      <data key="d1">category</data>
      <data key="d2">Unit Testing is a software testing method where individual units/components of a software are tested in isolation to ensure correctness.</data>
      <data key="d3">chunk-ba870a242fd1468b0176d028dc0c47b3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_core">
      <data key="d0">pydantic_core</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic_core is a library used for data validation and settings management in Python, often utilized in conjunction with models.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FunctionToolResult">
      <data key="d0">FunctionToolResult</data>
      <data key="d1">category</data>
      <data key="d2">FunctionToolResult represents the outcome of executing a function tool, delivering results back to the model.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TextResult">
      <data key="d0">TextResult</data>
      <data key="d1">category</data>
      <data key="d2">TextResult encapsulates a textual output that is generated by the model, usually as part of a response.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_request">
      <data key="d0">_request</data>
      <data key="d1">function</data>
      <data key="d2">The _request function processes incoming messages and manages tool calls, result retrieval, and response generation based on model parameters.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_get_tool_calls">
      <data key="d0">_get_tool_calls</data>
      <data key="d1">function</data>
      <data key="d2">The _get_tool_calls function determines the tools that need to be called based on the given request parameters.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_get_result">
      <data key="d0">_get_result</data>
      <data key="d1">function</data>
      <data key="d2">The _get_result function fetches the result of the model processing, returning the appropriate response objects.</data>
      <data key="d3">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="WrapperModel">
      <data key="d0">WrapperModel</data>
      <data key="d1">organization</data>
      <data key="d2">WrapperModel is a class that serves as a base structure for encapsulating another model and managing requests.</data>
      <data key="d3">chunk-7574296d70c6b864b4a5f29f2b14afe1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Iterable">
      <data key="d0">Iterable</data>
      <data key="d1">category</data>
      <data key="d2">Iterable is a core Python concept representing a collection of items that can be iterated over, often used in various programming contexts.</data>
      <data key="d3">chunk-7574296d70c6b864b4a5f29f2b14afe1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="test case">
      <data key="d0">test case</data>
      <data key="d1">event</data>
      <data key="d2">A test case is an instance used in the evaluation process that includes inputs and expected outputs for a specific task.</data>
      <data key="d3">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="inputs">
      <data key="d0">inputs</data>
      <data key="d1">category</data>
      <data key="d2">Inputs are the data or parameters provided to the task in order to carry out the evaluations.&lt;SEP&gt;Inputs refer to the data provided to a task that is being evaluated; this is crucial for case evaluation.&lt;SEP&gt;inputs are parameters representing the input data used in the evaluation process to assess outputs against expected results.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="expected_output">
      <data key="d0">expected_output</data>
      <data key="d1">category</data>
      <data key="d2">The expected output is the anticipated result for the evaluation task which serves as a reference.</data>
      <data key="d3">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="InputsT">
      <data key="d0">InputsT</data>
      <data key="d1">category</data>
      <data key="d2">InputsT denotes a generic type for the inputs that a task evaluation will require.&lt;SEP&gt;InputsT denotes the type of inputs used in evaluating the task, specifying the expected structure and data required.&lt;SEP&gt;InputsT is a type placeholder used to specify the type of input data that the Dataset class can handle.&lt;SEP&gt;InputsT is a type that represents the input data structure for the evaluation case, providing necessary information for task execution.&lt;SEP&gt;InputsT is a type variable representing the expected input type for an evaluation, allowing for flexibility in function definitions.&lt;SEP&gt;InputsT is a type variable representing the input type for the Evaluator class in the pydantic_evals library.&lt;SEP&gt;InputsT refers to the type of data that is provided as input to the dataset generation function, forming a crucial part of the overall dataset schema.&lt;SEP&gt;InputsT refers to the type of input data used in the dataset model, serving as the foundation for evaluation and processing. This generic type is often replaced with more specific types during implementation.&lt;SEP&gt;InputsT represents the type of inputs that are provided to a task function within the context of the dataset evaluation.&lt;SEP&gt;InputsT represents the type specification for the input data processed by the Evaluator.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb&lt;SEP&gt;chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-2b642c0eb3f8e30082fb1c02c90b38ee&lt;SEP&gt;chunk-a7db06d94811ecc4dc37c02ebe2a82c3&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196&lt;SEP&gt;chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-b88722767613f27ba54bd4b6245204cd&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MetadataT">
      <data key="d0">MetadataT</data>
      <data key="d1">category</data>
      <data key="d2">MetadataT encompasses additional information related to the dataset or its cases, providing context and attributes that aid in the understanding and management of the dataset.&lt;SEP&gt;MetadataT includes additional contextual information about the test cases or the evaluation process, aiding in understanding the test results.&lt;SEP&gt;MetadataT is a generic type representing optional metadata associated with test cases in an evaluation.&lt;SEP&gt;MetadataT is a type placeholder that represents any additional metadata that may be associated with a dataset.&lt;SEP&gt;MetadataT is a type specifying additional contextual information about the case, which can be utilized by evaluators to assess performance.&lt;SEP&gt;MetadataT is a type variable representing the metadata type that can be used with the Evaluator class within the pydantic_evals library.&lt;SEP&gt;MetadataT is a type variable that represents metadata associated with the evaluation, which may provide contextual information during evaluation.&lt;SEP&gt;MetadataT provides additional context or metadata associated with the evaluation in pydantic_evals.&lt;SEP&gt;MetadataT refers to the type of metadata associated with the test case, providing context and details to enhance evaluation.&lt;SEP&gt;MetadataT represents additional information associated with the dataset, enhancing understanding and context for the generated test cases.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb&lt;SEP&gt;chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-2b642c0eb3f8e30082fb1c02c90b38ee&lt;SEP&gt;chunk-a7db06d94811ecc4dc37c02ebe2a82c3&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196&lt;SEP&gt;chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-b88722767613f27ba54bd4b6245204cd&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OutputT">
      <data key="d0">OutputT</data>
      <data key="d1">category</data>
      <data key="d2">OutputT defines the expected output type resulting from the evaluation process in the Evaluator.&lt;SEP&gt;OutputT denotes the expected output type associated with each case in the dataset model, representing the outcomes that evaluators will validate against.&lt;SEP&gt;OutputT denotes the type of data that is expected from the dataset generation function, specifically designed to ensure the output conforms to the desired format.&lt;SEP&gt;OutputT designates the type of expected output for a task evaluation, outlining what results are anticipated from the inputs.&lt;SEP&gt;OutputT is a type designating the expected output data structure from the evaluation case, which is essential for performance comparison.&lt;SEP&gt;OutputT is a type placeholder that designates the structure or format of output data generated by the Dataset class.&lt;SEP&gt;OutputT is a type variable representing the output type for the Evaluator class in the pydantic_evals library.&lt;SEP&gt;OutputT is referenced in the context of a task output, possibly signifying a system or platform related to the evaluation.&lt;SEP&gt;OutputT represents a generic type for the expected outputs from a task evaluation.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb&lt;SEP&gt;chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-2b642c0eb3f8e30082fb1c02c90b38ee&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-a7db06d94811ecc4dc37c02ebe2a82c3&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196&lt;SEP&gt;chunk-b3a62dd1e4feda3a9c3f07deba46161f&lt;SEP&gt;chunk-b88722767613f27ba54bd4b6245204cd&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Expected Output">
      <data key="d0">Expected Output</data>
      <data key="d1">category</data>
      <data key="d2">Expected Output refers to the outcome that is anticipated from the execution of a particular task or function.</data>
      <data key="d3">chunk-c7b339013d51cc610e38dd15ec7332e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluators">
      <data key="d0">Evaluators</data>
      <data key="d1">category</data>
      <data key="d2">Evaluators are a category of entities used to assess the performance of test cases against expected outcomes, enhancing the evaluation process.</data>
      <data key="d3">chunk-c7b339013d51cc610e38dd15ec7332e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="OutputsT">
      <data key="d0">OutputsT</data>
      <data key="d1">category</data>
      <data key="d2">OutputsT signifies the expected outputs that the task function is meant to produce based on the given inputs.</data>
      <data key="d3">chunk-c7b339013d51cc610e38dd15ec7332e2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="test cases">
      <data key="d0">test cases</data>
      <data key="d1">category</data>
      <data key="d2">Test cases are structured scenarios used for validating the behavior of a system or application.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="evaluator">
      <data key="d0">evaluator</data>
      <data key="d1">person</data>
      <data key="d2">An evaluator is a person who assesses the output of the test cases against expected results.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluation Report">
      <data key="d0">Evaluation Report</data>
      <data key="d1">event</data>
      <data key="d2">An Evaluation Report summarizes the results of the evaluations performed on test cases.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluationDataset">
      <data key="d0">EvaluationDataset</data>
      <data key="d1">organization</data>
      <data key="d2">EvaluationDataset is a structure that manages a collection of test cases and evaluators for performance assessments.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cases">
      <data key="d0">cases</data>
      <data key="d1">category</data>
      <data key="d2">Cases are specific scenarios or situations used in evaluations to test the behavior and performance of a system or application.&lt;SEP&gt;Cases refer to individual instances within the report that are evaluated for their performance based on predefined criteria.&lt;SEP&gt;cases is a collection of instances that are assessed during the evaluation process, forming the basis for averaged results.&lt;SEP&gt;cases is a parameter of the average method representing a list of ReportCase instances that are processed to compute averages.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b&lt;SEP&gt;chunk-ef4c7193cda16c30962e01194bc308c7&lt;SEP&gt;chunk-5fba341bc749309a69f25c6f2f47a284&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="task">
      <data key="d0">task</data>
      <data key="d1">category</data>
      <data key="d2">A task refers to a specific function or operation that is being evaluated against the test cases.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="max_concurrency">
      <data key="d0">max_concurrency</data>
      <data key="d1">category</data>
      <data key="d2">Max concurrency defines the maximum number of simultaneous tasks that can be evaluated.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async def evaluate">
      <data key="d0">async def evaluate</data>
      <data key="d1">event</data>
      <data key="d2">The event corresponds to the evaluation of tasks defined within an asynchronous function context.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="evaluator's name">
      <data key="d0">evaluator's name</data>
      <data key="d1">person</data>
      <data key="d2">The evaluator's name is associated with the task being assessed, allowing identification in reports.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluationReport">
      <data key="d0">EvaluationReport</data>
      <data key="d1">organization</data>
      <data key="d2">An EvaluationReport encapsulates results from evaluating test cases against a task in a dataset, presenting outcomes and statistics.&lt;SEP&gt;An EvaluationReport encapsulates results from evaluating test cases against a task in a dataset.&lt;SEP&gt;EvaluationReport is a class in pydantic_evals designed to generate, manage, and manipulate evaluation reports that summarize performance metrics.&lt;SEP&gt;EvaluationReport is a class within the pydantic_evals library designed to generate and manage reports on evaluation metrics.&lt;SEP&gt;EvaluationReport is a data structure that holds results and assessments from evaluations, utilized by the EvaluationRenderer.&lt;SEP&gt;EvaluationReport is a structured document that contains assessments of various cases and metrics, used for comparative analysis.&lt;SEP&gt;EvaluationReport serves as an instance of the Report focused on specific evaluations, including metrics and cases involved in the assessment.&lt;SEP&gt;The Evaluation Report contains results of evaluations on a set of test cases and associated metrics.&lt;SEP&gt;The EvaluationReport is a structured report created to communicate the results of evaluating a model on a set of test cases.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-5fba341bc749309a69f25c6f2f47a284&lt;SEP&gt;chunk-25346d17202fa22ebc450f7f7382c828&lt;SEP&gt;chunk-93245afbea546c456fe18a9e7a924d07&lt;SEP&gt;chunk-b88722767613f27ba54bd4b6245204cd&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d&lt;SEP&gt;chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="concurrent evaluations">
      <data key="d0">concurrent evaluations</data>
      <data key="d1">category</data>
      <data key="d2">Concurrent evaluations refer to the ability to run multiple evaluations at the same time within specified limits.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dataset">
      <data key="d0">dataset</data>
      <data key="d1">category</data>
      <data key="d2">The dataset is the collection of test cases, evaluators, and their associated metadata used for evaluations.</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="yaml">
      <data key="d0">yaml</data>
      <data key="d1">category</data>
      <data key="d2">YAML (YAML Ain't Markup Language) is a human-readable data serialization format often used for configuration files.&lt;SEP&gt;YAML is a human-readable data serialization format often used for configuration files and data exchange, which can be utilized in saving datasets for machine learning applications.</data>
      <data key="d3">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Path(">
      <data key="d0">Path(</data>
      <data key="d1">category</data>
      <data key="d2">Path is a representation of file system paths in Python, used for locating files and directories within the Dataset class.</data>
      <data key="d3">chunk-6c87e8862a83ae6d7b637969dba767a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="from_file">
      <data key="d0">from_file</data>
      <data key="d1">event</data>
      <data key="d2">The from_file function enables the loading of a dataset from a file, supporting formats like YAML and JSON while managing custom evaluators.&lt;SEP&gt;from_file is a method within the Dataset class that loads dataset content from a specified file path, supporting different formats.</data>
      <data key="d3">chunk-2b642c0eb3f8e30082fb1c02c90b38ee&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="from_text">
      <data key="d0">from_text</data>
      <data key="d1">event</data>
      <data key="d2">from_text is a class method that enables loading a Dataset instance from text by determining the format of the string (YAML or JSON).&lt;SEP&gt;from_text is a method that loads a dataset from a string by selecting the appropriate processing depending on its format.&lt;SEP&gt;from_text is a method within the Dataset class that parses dataset content directly from a string input.</data>
      <data key="d3">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="from_dict">
      <data key="d0">from_dict</data>
      <data key="d1">event</data>
      <data key="d2">from_dict is a class method that creates a Dataset instance from a dictionary representation of structured data.&lt;SEP&gt;from_dict is a method that loads a dataset from a dictionary representation.&lt;SEP&gt;from_dict is a method within the Dataset class that creates a dataset instance from a given dictionary representation.</data>
      <data key="d3">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dataset Model">
      <data key="d0">Dataset Model</data>
      <data key="d1">category</data>
      <data key="d2">Dataset Model serves as a structured representation of a dataset, containing specifications for data inputs, outputs, and associated metadata.</data>
      <data key="d3">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluator Registry">
      <data key="d0">Evaluator Registry</data>
      <data key="d1">organization</data>
      <data key="d2">Evaluator Registry is a system for managing and loading custom evaluator classes, facilitating integration and usage in dataset models.</data>
      <data key="d3">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ExceptionGroup">
      <data key="d0">ExceptionGroup</data>
      <data key="d1">organization</data>
      <data key="d2">ExceptionGroup is a construct that captures multiple exceptions, allowing for more complex error handling when loading evaluators and datasets.</data>
      <data key="d3">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Case Evaluator">
      <data key="d0">Case Evaluator</data>
      <data key="d1">organization</data>
      <data key="d2">Case Evaluators are functions or classes that assess individual cases, providing validation or output based on the specified criteria and expected outcomes.</data>
      <data key="d3">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Default Schema Path Template">
      <data key="d0">Default Schema Path Template</data>
      <data key="d1">category</data>
      <data key="d2">Default Schema Path Template is a predefined template for saving schemas of the dataset, providing a consistent structure for descriptions and validation.</data>
      <data key="d3">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TypedDict">
      <data key="d0">TypedDict</data>
      <data key="d1">category</data>
      <data key="d2">TypedDict is a built-in class in Python that allows for type-safe dictionaries, used for handling structured data.&lt;SEP&gt;TypedDict is a feature in Python used for creating dictionaries with a specific structure, primarily for static type checking purposes.&lt;SEP&gt;TypedDict is a structure in Python used to define dictionaries with a fixed set of keys, where allowing for types on the values of those keys.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e&lt;SEP&gt;chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="JSON Schema">
      <data key="d0">JSON Schema</data>
      <data key="d1">event</data>
      <data key="d2">JSON Schema is a vocabulary that allows you to annotate and validate JSON documents, often used in APIs and data interchange.</data>
      <data key="d3">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Any">
      <data key="d0">Any</data>
      <data key="d1">category</data>
      <data key="d2">Any is a generic placeholder type indicating that the value can be of any data type, used in the context of the Evaluator&lt;SEP&gt;Any is a special type hint in Python that can represent any type, providing flexibility in type definitions.&lt;SEP&gt;Any is a type hint in Python indicating that a value can be of any type, offering flexibility in type annotations.</data>
      <data key="d3">chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-c0417af0fa24429ddd11fe9cfa92e39e&lt;SEP&gt;chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Sequence">
      <data key="d0">Sequence</data>
      <data key="d1">category</data>
      <data key="d2">Sequence is a generic type hint in Python representing a collection of ordered items, often used in type annotations.</data>
      <data key="d3">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="functools">
      <data key="d0">functools</data>
      <data key="d1">organization</data>
      <data key="d2">functools is a module in Python that provides higher-order functions and operations on callable objects.</data>
      <data key="d3">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_json_schema">
      <data key="d0">model_json_schema</data>
      <data key="d1">event</data>
      <data key="d2">model_json_schema is a function within Pydantic that generates the JSON schema for a given model.</data>
      <data key="d3">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="extra">
      <data key="d0">extra</data>
      <data key="d1">category</data>
      <data key="d2">extra is a configuration option in Pydantic that specifies how to handle unrecognized fields in a model.</data>
      <data key="d3">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="union">
      <data key="d0">union</data>
      <data key="d1">category</data>
      <data key="d2">Union is a type hint in Python that allows for defining a variable that can be one of several types.</data>
      <data key="d3">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SerializerFunctionWrapHandler">
      <data key="d0">SerializerFunctionWrapHandler</data>
      <data key="d1">organization</data>
      <data key="d2">The SerializerFunctionWrapHandler is a component responsible for wrapping serializers in a context for JSON schema operations.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SerializationInfo">
      <data key="d0">SerializationInfo</data>
      <data key="d1">category</data>
      <data key="d2">SerializationInfo holds information relevant for the serialization of an Evaluator into a JSON-compatible format.&lt;SEP&gt;SerializationInfo is a component used for providing context during the serialization of Evaluators to a JSON-serializable form.&lt;SEP&gt;SerializationInfo provides contextual information for serializing data in an application, including schema paths.</data>
      <data key="d3">chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-ce77d28e25c8e076c1a08f2eb9cfc746&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Context">
      <data key="d0">Context</data>
      <data key="d1">category</data>
      <data key="d2">Context in the application carries configuration information and potentially a JSON schema.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Schema">
      <data key="d0">Schema</data>
      <data key="d1">category</data>
      <data key="d2">Schema denotes structural definitions for design and validation of data formats.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_serializer">
      <data key="d0">model_serializer</data>
      <data key="d1">organization</data>
      <data key="d2">The model_serializer is a component designed to manage the serialization of models into specific formats, facilitating structured data processing.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_add_json_schema">
      <data key="d0">_add_json_schema</data>
      <data key="d1">event</data>
      <data key="d2">The _add_json_schema method is an event that enhances serialized output by incorporating a JSON schema into the data structure.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="nxt">
      <data key="d0">nxt</data>
      <data key="d1">person</data>
      <data key="d2">Nxt represents a handler or participant in the serialization process, referenced in the context of adding schema information.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="info">
      <data key="d0">info</data>
      <data key="d1">category</data>
      <data key="d2">Info is an object that provides contextual information necessary for the serialization operation, particularly concerning the schema.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="schema">
      <data key="d0">schema</data>
      <data key="d1">category</data>
      <data key="d2">Schema refers to the JSON schema that outlines the structure and validation rules for serialized data.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="serialize_output">
      <data key="d0">serialize_output</data>
      <data key="d1">category</data>
      <data key="d2">Serialize_output describes the result of the serialization process, which incorporates the formatted data with the applied schema.</data>
      <data key="d3">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_evals">
      <data key="d0">pydantic_evals</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic Evals is a library that provides utilities for evaluating and working with data structures in Python.&lt;SEP&gt;Pydantic_evals is an organizational entity that comprises the codebase and functionalities related to span management in the application.&lt;SEP&gt;Pydantic_evals is the context in which the SpanNode and its related functionalities are implemented.&lt;SEP&gt;pydantic_evals is a Python library designed for data validation and settings management using Python type annotations.&lt;SEP&gt;pydantic_evals is a Python library for data validation and settings management that utilizes Pydantic models for handling structured data.&lt;SEP&gt;pydantic_evals is a Python library that allows for the evaluation of data through different evaluators, promoting structured and safe data handling.&lt;SEP&gt;pydantic_evals is a code library that includes functionality for evaluating span trees in the OpenTelemetry context, facilitating analysis of tracing data.&lt;SEP&gt;pydantic_evals is a framework for evaluating Python-based tasks with context-aware execution capabilities, enabling validators and evaluators.&lt;SEP&gt;pydantic_evals is a library designed for evaluating tasks using datasets, providing structured reporting.&lt;SEP&gt;pydantic_evals is a library used for data validation and settings management in Python, often utilizing Pydantic models.&lt;SEP&gt;pydantic_evals is a library used for model validation and settings management using Python data classes.&lt;SEP&gt;pydantic_evals is a module or package name that encompasses functionalities related to evaluations and reporting.&lt;SEP&gt;pydantic_evals is a package that provides evaluations and serialization for Python data models, focusing on ease of validation and data handling.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb&lt;SEP&gt;chunk-0d258f09bea208a8ab728ad08c68706f&lt;SEP&gt;chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196&lt;SEP&gt;chunk-93245afbea546c456fe18a9e7a924d07&lt;SEP&gt;chunk-d3dca449323eaaba6c6952db29fc9336&lt;SEP&gt;chunk-48b44901b89a7237e9bbe8f5c3d40d5a&lt;SEP&gt;chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-b88722767613f27ba54bd4b6245204cd&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_event_loop">
      <data key="d0">get_event_loop</data>
      <data key="d1">function</data>
      <data key="d2">get_event_loop is a function that retrieves the current event loop for asynchronous tasks.&lt;SEP&gt;get_event_loop retrieves the current asyncio event loop for managing asynchronous tasks effectively.</data>
      <data key="d3">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="lambda">
      <data key="d0">lambda</data>
      <data key="d1">category</data>
      <data key="d2">A lambda function is an anonymous function defined with the lambda keyword to implement quick, single-use operations.&lt;SEP&gt;A lambda function is an inline, anonymous function used for quick operations, especially in callbacks and data processing.</data>
      <data key="d3">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="task_group_gather">
      <data key="d0">task_group_gather</data>
      <data key="d1">function</data>
      <data key="d2">task_group_gather is a function used to execute multiple asynchronous tasks concurrently and collect their results.</data>
      <data key="d3">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="evaluate">
      <data key="d0">evaluate</data>
      <data key="d1">event</data>
      <data key="d2">evaluate is an abstract method that must be implemented by subclasses, functioning as the main logic for comparing outputs to expected results.&lt;SEP&gt;evaluate is an event function that runs evaluations of test cases against a specified task with detailed reporting.</data>
      <data key="d3">chunk-b88722767613f27ba54bd4b6245204cd&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="limiter">
      <data key="d0">limiter</data>
      <data key="d1">organization</data>
      <data key="d2">limiter is a rate-limiting utility that controls the maximum number of concurrent evaluations of tasks allowed.</data>
      <data key="d3">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self.evaluators">
      <data key="d0">self.evaluators</data>
      <data key="d1">category</data>
      <data key="d2">self.evaluators refer to the evaluators associated with a dataset, used to assess the results of test cases.</data>
      <data key="d3">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="averages">
      <data key="d0">averages</data>
      <data key="d1">category</data>
      <data key="d2">averages attribute stores average values derived from the evaluation results for reporting purposes.</data>
      <data key="d3">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="add_evaluator">
      <data key="d0">add_evaluator</data>
      <data key="d1">function</data>
      <data key="d2">The add_evaluator function allows users to attach evaluators to a dataset or a specific case, assisting in the assessment of task performances.</data>
      <data key="d3">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Self">
      <data key="d0">Self</data>
      <data key="d1">organization</data>
      <data key="d2">Self is a reference to the instance of the Dataset class, used within class methods to implement functionality related to the dataset's operations.&lt;SEP&gt;Self is a type hint representing the instance of the class itself, ensuring methods can accurately refer to the class's own type.</data>
      <data key="d3">chunk-365decc56ad5f314b2b86848e8a892ec&lt;SEP&gt;chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self.cases">
      <data key="d0">self.cases</data>
      <data key="d1">organization</data>
      <data key="d2">self.cases is a list that holds multiple case instances within the Dataset, organizing them for evaluation tasks.</data>
      <data key="d3">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="case.name">
      <data key="d0">case.name</data>
      <data key="d1">person</data>
      <data key="d2">case.name refers to the name identifier of an individual case that helps in distinguishing and accessing specific cases in the dataset.</data>
      <data key="d3">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="YAML">
      <data key="d0">YAML</data>
      <data key="d1">category</data>
      <data key="d2">YAML is a human-readable data serialization format, often used for configuration files and data exchange.</data>
      <data key="d3">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="JSON">
      <data key="d0">JSON</data>
      <data key="d1">category</data>
      <data key="d2">JSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate.&lt;SEP&gt;JSON is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate.</data>
      <data key="d3">chunk-a58389fcd1596d9d04e1ed8f3cd54773&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="to_file">
      <data key="d0">to_file</data>
      <data key="d1">event</data>
      <data key="d2">to_file is a method that saves a dataset instance to a file in a specified format.&lt;SEP&gt;to_file is a method that saves the dataset instance to a specified file format, allowing for data persistence.&lt;SEP&gt;to_file is a method that saves the dataset to a specified file path in a chosen format, either 'yaml' or 'json'.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb&lt;SEP&gt;chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="contents">
      <data key="d0">contents</data>
      <data key="d1">category</data>
      <data key="d2">Contents refer to the string data that the methods of the Dataset class will process for loading.</data>
      <data key="d3">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="custom_evaluator_types">
      <data key="d0">custom_evaluator_types</data>
      <data key="d1">category</data>
      <data key="d2">Custom evaluator types are additional classes specified to customize how the dataset is deserialized beyond the default behavior.</data>
      <data key="d3">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="fmt">
      <data key="d0">fmt</data>
      <data key="d1">category</data>
      <data key="d2">Fmt specifies the format of the content to be processed by methods, indicating whether it is YAML or JSON.</data>
      <data key="d3">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dataset_model">
      <data key="d0">dataset_model</data>
      <data key="d1">category</data>
      <data key="d2">dataset_model represents the structure of a dataset and is used during the validation and transformation processes.</data>
      <data key="d3">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dataset_model_type">
      <data key="d0">dataset_model_type</data>
      <data key="d1">category</data>
      <data key="d2">dataset_model_type denotes the class type that defines the structure and validation rules of the dataset being processed.</data>
      <data key="d3">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DEFAULT_SCHEMA_PATH_TEMPLATE">
      <data key="d0">DEFAULT_SCHEMA_PATH_TEMPLATE</data>
      <data key="d1">category</data>
      <data key="d2">DEFAULT_SCHEMA_PATH_TEMPLATE is a predefined constant that represents the default schema file path template used for saving schema files.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_json_schema_with_evaluators">
      <data key="d0">model_json_schema_with_evaluators</data>
      <data key="d1">event</data>
      <data key="d2">model_json_schema_with_evaluators is a method that generates a JSON schema for the dataset type, including details about custom evaluators.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_dump">
      <data key="d0">model_dump</data>
      <data key="d1">event</data>
      <data key="d2">model_dump is a method that transforms the model's data into a specific format, usually for serialization purposes.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="model_dump_json">
      <data key="d0">model_dump_json</data>
      <data key="d1">event</data>
      <data key="d2">model_dump_json is a method that serializes the model's data to JSON format, including options for including schema references.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="required_type_hints">
      <data key="d0">required_type_hints</data>
      <data key="d1">category</data>
      <data key="d2">required_type_hints is a dictionary that holds the required type hints for parameters in the evaluator's initialization.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="signature">
      <data key="d0">signature</data>
      <data key="d1">category</data>
      <data key="d2">signature is an object that represents the callable signature of a Python function, including its parameters and return type.</data>
      <data key="d3">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="registry">
      <data key="d0">registry</data>
      <data key="d1">organization</data>
      <data key="d2">Registry is a system that holds various evaluators and their corresponding classes, functioning as a database for evaluators in the programming context.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="evaluator_class">
      <data key="d0">evaluator_class</data>
      <data key="d1">category</data>
      <data key="d2">Evaluator class is a template for creating evaluators in the registry with specific behavior and attributes.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="eval_attribute">
      <data key="d0">eval_attribute</data>
      <data key="d1">category</data>
      <data key="d2">eval_attribute describes a method to set specific attributes for the current task run, allowing for the customization of evaluations.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="increment_eval_metric">
      <data key="d0">increment_eval_metric</data>
      <data key="d1">category</data>
      <data key="d2">increment_eval_metric is a method that updates certain metrics by adding a specified amount, helping track evaluation performance.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="float">
      <data key="d0">float</data>
      <data key="d1">category</data>
      <data key="d2">float is a numeric type in Python representing real numbers that include a decimal point, used for precision.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="int">
      <data key="d0">int</data>
      <data key="d1">category</data>
      <data key="d2">int is an integer data type in Python representing whole numbers without a fractional component.</data>
      <data key="d3">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_CURRENT_TASK_RUN">
      <data key="d0">_CURRENT_TASK_RUN</data>
      <data key="d1">organization</data>
      <data key="d2">_CURRENT_TASK_RUN is a context or environment variable that manages the state and execution of ongoing tasks.</data>
      <data key="d3">chunk-88aa29b286377569bc39ad941b6e9f6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="increment">
      <data key="d0">increment</data>
      <data key="d1">event</data>
      <data key="d2">increment is a method or operation that increases a specified metric associated with the current task.</data>
      <data key="d3">chunk-88aa29b286377569bc39ad941b6e9f6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="current_case">
      <data key="d0">current_case</data>
      <data key="d1">person</data>
      <data key="d2">current_case refers to a specific task or instance that is currently being executed or processed.</data>
      <data key="d3">chunk-88aa29b286377569bc39ad941b6e9f6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="amount">
      <data key="d0">amount</data>
      <data key="d1">category</data>
      <data key="d2">amount is a variable that defines the specific quantity to increment the metric by.</data>
      <data key="d3">chunk-88aa29b286377569bc39ad941b6e9f6a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HasMatchingSpan">
      <data key="d0">HasMatchingSpan</data>
      <data key="d1">dataclass</data>
      <data key="d2">HasMatchingSpan is a component of the evaluation system that checks if the span tree contains a matching span based on a specified query.</data>
      <data key="d3">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="IsInstance">
      <data key="d0">IsInstance</data>
      <data key="d1">dataclass</data>
      <data key="d2">IsInstance evaluates whether the output is an instance of a type with a specific name, serving to validate type appropriateness.</data>
      <data key="d3">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="LLMJudge">
      <data key="d0">LLMJudge</data>
      <data key="d1">dataclass</data>
      <data key="d2">LLMJudge is used to determine whether the output meets the criteria of a provided rubric, highlighting the output quality in relation to expected standards.</data>
      <data key="d3">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MaxDuration">
      <data key="d0">MaxDuration</data>
      <data key="d1">dataclass</data>
      <data key="d2">MaxDuration checks if the execution time is under a specified maximum duration, essential for performance assessment.&lt;SEP&gt;MaxDuration checks if the execution time is within a pre-defined maximum duration, essential for performance assessment.</data>
      <data key="d3">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluatorContext">
      <data key="d0">EvaluatorContext</data>
      <data key="d1">category</data>
      <data key="d2">EvaluatorContext contains the inputs, outputs, and metadata necessary for context during evaluation operations.&lt;SEP&gt;EvaluatorContext is a class that encapsulates all necessary information for evaluating a task execution, including inputs, outputs, and associated metadata.&lt;SEP&gt;EvaluatorContext is a context object containing inputs, outputs, and metadata necessary for evaluating tasks in the Evaluator framework.&lt;SEP&gt;EvaluatorContext provides the context in which evaluation occurs, including the inputs, outputs, and evaluation criteria.&lt;SEP&gt;The EvaluatorContext provides the necessary context for an evaluation, including inputs, outputs, and metadata relevant to the evaluation process.</data>
      <data key="d3">chunk-9ed140ecdab085e2534a8130bc747b5c&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196&lt;SEP&gt;chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="timedelta">
      <data key="d0">timedelta</data>
      <data key="d1">class</data>
      <data key="d2">timedelta is a class in Python that represents a duration, the difference between two dates or times, and is used for calculating time.</data>
      <data key="d3">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="span tree">
      <data key="d0">span tree</data>
      <data key="d1">concept</data>
      <data key="d2">The span tree is a structure containing segments of text that are used for various evaluations, facilitating detailed analysis of text segments.</data>
      <data key="d3">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ExactMatch">
      <data key="d0">ExactMatch</data>
      <data key="d1">category</data>
      <data key="d2">ExactMatch is a subclass of Evaluator that checks if the output matches the expected output in a precise manner.&lt;SEP&gt;ExactMatch is a type of evaluator that checks if the actual output of a task matches the expected output based on the provided context.</data>
      <data key="d3">chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Source Code">
      <data key="d0">Source Code</data>
      <data key="d1">category</data>
      <data key="d2">Source code refers to the written code in the programming language that defines the functions and behaviors of a software application or module.</data>
      <data key="d3">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="common.py">
      <data key="d0">common.py</data>
      <data key="d1">category</data>
      <data key="d2">common.py is a Python script file that likely contains common utility functions and classes utilized across multiple modules within a codebase.</data>
      <data key="d3">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Python Evaluator">
      <data key="d0">Python Evaluator</data>
      <data key="d1">category</data>
      <data key="d2">Python Evaluator is a specific type of evaluator within the pydantic_evals framework that executes Python code expressions while managing context.</data>
      <data key="d3">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluate Method">
      <data key="d0">Evaluate Method</data>
      <data key="d1">category</data>
      <data key="d2">Evaluate method is a function within the Evaluator class that assesses the input provided against expected outputs and generates results based on defined criteria.</data>
      <data key="d3">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Executive Class">
      <data key="d0">Executive Class</data>
      <data key="d1">category</data>
      <data key="d2">Executive Class refers to the abstract representation of classes in the pydantic_evals framework that facilitates the execution of various evaluation tasks.</data>
      <data key="d3">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Integer">
      <data key="d0">Integer</data>
      <data key="d1">category</data>
      <data key="d2">Integer refers to a common data type in programming that represents whole numbers, used in various evaluations and computations within the framework.</data>
      <data key="d3">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluator Context Attributes">
      <data key="d0">Evaluator Context Attributes</data>
      <data key="d1">category</data>
      <data key="d2">Evaluator Context Attributes are specific properties associated with the context of evaluation that provide additional data for processing.</data>
      <data key="d3">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Metrics">
      <data key="d0">Metrics</data>
      <data key="d1">category</data>
      <data key="d2">Metrics are quantifiable measures used to assess the performance of a task or the effectiveness of an evaluation process within the context.</data>
      <data key="d3">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="duration">
      <data key="d0">duration</data>
      <data key="d1">property</data>
      <data key="d2">Duration is a property that indicates the time span represented by the SpanNode, normally defined as a timedelta object.&lt;SEP&gt;Duration is described as a float that specifies the time taken for a task run, indicating performance measurement.&lt;SEP&gt;The duration property indicates the time span of a node, represented as a timedelta object.</data>
      <data key="d3">chunk-b3a62dd1e4feda3a9c3f07deba46161f&lt;SEP&gt;chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="metrics">
      <data key="d0">metrics</data>
      <data key="d1">instance-attribute</data>
      <data key="d2">Metrics are numerical indicators related to the task run, offering insights into performance through statistical measures.&lt;SEP&gt;metrics is a dictionary attribute in ReportCaseAggregate that provides various calculated metrics derived from the cases.</data>
      <data key="d3">chunk-b3a62dd1e4feda3a9c3f07deba46161f&lt;SEP&gt;chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="span_tree">
      <data key="d0">span_tree</data>
      <data key="d1">property</data>
      <data key="d2">SpanTree represents a graph structure that organizes and displays timed spans related to task execution, aiding in performance analysis.</data>
      <data key="d3">chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluationReason">
      <data key="d0">EvaluationReason</data>
      <data key="d1">dataclass</data>
      <data key="d2">EvaluationReason encapsulates the result of an evaluation with an optional explanation, indicating the reasoning behind a specific evaluation score.</data>
      <data key="d3">chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="downcast">
      <data key="d0">downcast</data>
      <data key="d1">category</data>
      <data key="d2">downcast is a method defined within the Evaluator class that allows it to attempt to convert evaluation results into a more specific type based on provided type criteria.</data>
      <data key="d3">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="value_types">
      <data key="d0">value_types</data>
      <data key="d1">category</data>
      <data key="d2">value_types is a parameter of the downcast method that specifies the types to check against when determining the compatibility of evaluation results.</data>
      <data key="d3">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluationResult&lt;T&gt;">
      <data key="d0">EvaluationResult&lt;T&gt;</data>
      <data key="d1">category</data>
      <data key="d2">EvaluationResult&lt;T&gt; is a generic class representing the result of an evaluation, designed to accommodate different types as specified by the evaluator.</data>
      <data key="d3">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self.value">
      <data key="d0">self.value</data>
      <data key="d1">category</data>
      <data key="d2">self.value is an attribute within the Evaluator class that holds the value being evaluated during the evaluation process.</data>
      <data key="d3">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="cast">
      <data key="d0">cast</data>
      <data key="d1">category</data>
      <data key="d2">cast is a function used to convert one type of variable into another, ensuring type safety in the evaluation context.</data>
      <data key="d3">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Awaitable">
      <data key="d0">Awaitable</data>
      <data key="d1">category</data>
      <data key="d2">Awaitable is a type hint in Python indicating that an evaluation will be completed asynchronously, often used in conjunction with synchronous methods.</data>
      <data key="d3">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="to_jsonable_python">
      <data key="d0">to_jsonable_python</data>
      <data key="d1">organization</data>
      <data key="d2">to_jsonable_python is a utility function used to convert Evaluator specifications into JSON-serializable forms.</data>
      <data key="d3">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MISSING">
      <data key="d0">MISSING</data>
      <data key="d1">category</data>
      <data key="d2">MISSING indicates a placeholder for a value that is not provided or is absent in a specific context related to data processing.&lt;SEP&gt;MISSING is a constant indicating the absence of a default value in a field during serialization checks.</data>
      <data key="d3">chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-c5ec0773b9bee4d3c1e47d6c99be1b86</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluatorOutput">
      <data key="d0">EvaluatorOutput</data>
      <data key="d1">category</data>
      <data key="d2">EvaluatorOutput is the result produced by an evaluator, which can either be a scalar value, an evaluation reason, or a mapping of various evaluation names to results.&lt;SEP&gt;EvaluatorOutput represents the result of an evaluation which can either be a scalar value, an EvaluationReason, or a mapping.</data>
      <data key="d3">chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="evaluate_async">
      <data key="d0">evaluate_async</data>
      <data key="d1">event</data>
      <data key="d2">evaluate_async is a method that runs an evaluator asynchronously, managing both sync and async implementations.</data>
      <data key="d3">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="serialize">
      <data key="d0">serialize</data>
      <data key="d1">event</data>
      <data key="d2">serialize is a method that converts the Evaluator into a JSON-serializable form.</data>
      <data key="d3">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="build_serialization_arguments">
      <data key="d0">build_serialization_arguments</data>
      <data key="d1">event</data>
      <data key="d2">build_serialization_arguments constructs a dictionary of arguments for the serialization process of the evaluator.</data>
      <data key="d3">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluatorSpec">
      <data key="d0">EvaluatorSpec</data>
      <data key="d1">category</data>
      <data key="d2">EvaluatorSpec is a structure that represents the specifications of an Evaluator, making it JSON-serializable.</data>
      <data key="d3">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Field">
      <data key="d0">Field</data>
      <data key="d1">category</data>
      <data key="d2">Field refers to a programming or data structure context within which arguments and values are processed, possibly a part of a software system.</data>
      <data key="d3">chunk-c5ec0773b9bee4d3c1e47d6c99be1b86</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Raw Arguments">
      <data key="d0">Raw Arguments</data>
      <data key="d1">category</data>
      <data key="d2">Raw Arguments represent a collection of parameters that have been processed for a specific function or operation in programming.</data>
      <data key="d3">chunk-c5ec0773b9bee4d3c1e47d6c99be1b86</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Value">
      <data key="d0">Value</data>
      <data key="d1">category</data>
      <data key="d2">Value represents the data being evaluated or processed in the context of function parameters and fields.</data>
      <data key="d3">chunk-c5ec0773b9bee4d3c1e47d6c99be1b86</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="generate_dataset">
      <data key="d0">generate_dataset</data>
      <data key="d1">event</data>
      <data key="d2">The generate_dataset function is an event that triggers the creation of a structured dataset by utilizing specified models and configurations for generating test cases.&lt;SEP&gt;The generate_dataset function is an event that triggers the creation of a structured dataset using a specified model and configurations.</data>
      <data key="d3">chunk-dcc0ef06948f95ef73eef5b238e34d40</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SpanNode">
      <data key="d0">SpanNode</data>
      <data key="d1">category</data>
      <data key="d2">SpanNode is a component of a hierarchical structure in tracing systems, representing segments of trace data with attributes like duration, descendants, and ancestors.&lt;SEP&gt;SpanNode is a data structure that represents a node in a span tree, containing attributes like trace_id, span_id, parent_span_id, start_timestamp, and end_timestamp.&lt;SEP&gt;SpanNode is a data structure that represents a node in a span tree, encapsulating attributes such as trace_id, span_id, parent_span_id, start_timestamp, and end_timestamp.&lt;SEP&gt;SpanNode is a structured representation of a node in a tracing system, encompassing properties such as duration, descendants, and ancestors to represent trace data logically.&lt;SEP&gt;SpanNode is an object that represents a node in a hierarchical structure used for organizing spans and their relationships within the tree.&lt;SEP&gt;SpanNode is an object that represents a node in a hierarchical structure used for organizing spans and their relationships.&lt;SEP&gt;SpanNode is an object that represents a node in the span tree, containing various attributes and methods for manipulation.&lt;SEP&gt;SpanNode represents a data structure used for working with hierarchical data, particularly for organizing and querying spans in a tree-like structure.&lt;SEP&gt;SpanNode represents a node in the span tree, which may have parent and child relationships that help structure data hierarchically.&lt;SEP&gt;SpanNode represents an element in the span tree, which can have relationships to other span nodes.&lt;SEP&gt;SpanNode serves as an individual element in a SpanTree, representing a node that can hold spans and supports various query conditions for filtering.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f&lt;SEP&gt;chunk-f7275e9966aa7c1401bb0a2fb82d3fda&lt;SEP&gt;chunk-790b668cee409d289e2371718ffedaa1&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30&lt;SEP&gt;chunk-d3dca449323eaaba6c6952db29fc9336&lt;SEP&gt;chunk-48b44901b89a7237e9bbe8f5c3d40d5a&lt;SEP&gt;chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ReadableSpan">
      <data key="d0">ReadableSpan</data>
      <data key="d1">organization</data>
      <data key="d2">ReadableSpan is an object encapsulating information about a single operation in a tracing system, including its context, start time, end time, and associated attributes.&lt;SEP&gt;ReadableSpan is an object that contains information about a single span including context, start time, end time, and associated attributes.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Trace ID">
      <data key="d0">Trace ID</data>
      <data key="d1">category</data>
      <data key="d2">Trace ID is a unique identifier for a series of operations or events that are being tracked across a distributed system.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Span ID">
      <data key="d0">Span ID</data>
      <data key="d1">category</data>
      <data key="d2">Span ID is a unique identifier for a specific operation within a trace, helping to differentiate between individual spans.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AttributeValue">
      <data key="d0">AttributeValue</data>
      <data key="d1">category</data>
      <data key="d2">AttributeValue represents specific attributes associated with a span, allowing for key-value pairs of metadata to be stored.&lt;SEP&gt;AttributeValue represents specific values associated with attributes in a span, allowing for key-value pairs of metadata to be stored for each span operation.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Parent Node Key">
      <data key="d0">Parent Node Key</data>
      <data key="d1">category</data>
      <data key="d2">Parent Node Key is a unique identifier for the parent node of a SpanNode, formatted as a hex string if there is a parent span, otherwise it returns None.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Children">
      <data key="d0">Children</data>
      <data key="d1">category</data>
      <data key="d2">Children refer to the immediate child nodes of a SpanNode, which are part of the span's hierarchical structure.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Ancestors">
      <data key="d0">Ancestors</data>
      <data key="d1">category</data>
      <data key="d2">Ancestors represent the hierarchical lineage of nodes above the current node in the span tree.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Descendants">
      <data key="d0">Descendants</data>
      <data key="d1">category</data>
      <data key="d2">Descendants are all the direct and indirect child spans of a specified SpanNode, forming a subtree within the larger span tree.</data>
      <data key="d3">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DFS Query">
      <data key="d0">DFS Query</data>
      <data key="d1">event</data>
      <data key="d2">DFS (Depth-First Search) is a traversal algorithm used to explore nodes and their relationships in a hierarchical data structure.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Predicate">
      <data key="d0">Predicate</data>
      <data key="d1">category</data>
      <data key="d2">Predicate is a term used in programming to refer to a function or condition that evaluates to true or false.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SpanQuery">
      <data key="d0">SpanQuery</data>
      <data key="d1">category</data>
      <data key="d2">SpanQuery is a query object that defines the criteria for searching through nodes in a span tree.&lt;SEP&gt;SpanQuery is a serializable query designed to filter SpanNodes based on various optional conditions, utilizing logical combinations and attributes.&lt;SEP&gt;SpanQuery is a type of query utilized to match and filter nodes based on specific conditions within the hierarchical structure.&lt;SEP&gt;SpanQuery is a type used in querying and searching within a tree structure.&lt;SEP&gt;SpanQuery is used to define criteria for searching or filtering nodes within the span tree.</data>
      <data key="d3">chunk-48b44901b89a7237e9bbe8f5c3d40d5a&lt;SEP&gt;chunk-0d258f09bea208a8ab728ad08c68706f&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30&lt;SEP&gt;chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SpanPredicate">
      <data key="d0">SpanPredicate</data>
      <data key="d1">category</data>
      <data key="d2">SpanPredicate is a condition used to determine if a span node matches certain criteria.&lt;SEP&gt;SpanPredicate is a logical condition used to evaluate whether a given span node satisfies particular criteria.&lt;SEP&gt;SpanPredicate is a type used in conjunction with SpanQuery to define conditions for filtering span nodes based on custom logic.&lt;SEP&gt;SpanPredicate is a type used to define conditions for matching nodes in a tree structure.&lt;SEP&gt;SpanPredicate is used to specify conditions that nodes in a span tree must satisfy.</data>
      <data key="d3">chunk-48b44901b89a7237e9bbe8f5c3d40d5a&lt;SEP&gt;chunk-0d258f09bea208a8ab728ad08c68706f&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30&lt;SEP&gt;chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Ancestor Queries">
      <data key="d0">Ancestor Queries</data>
      <data key="d1">event</data>
      <data key="d2">Ancestor queries refer to techniques for traversing the hierarchical structure of span nodes to return an ancestor that meets specific conditions.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DFS (Depth-First Search)">
      <data key="d0">DFS (Depth-First Search)</data>
      <data key="d1">event</data>
      <data key="d2">DFS is an algorithm for traversing or searching through tree or graph data structures, exploring as far as possible along each branch before backtracking.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="matches method">
      <data key="d0">matches method</data>
      <data key="d1">function</data>
      <data key="d2">The matches method defines how a SpanNode evaluates whether it satisfies a given query or predicate condition.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="filter_ancestors method">
      <data key="d0">filter_ancestors method</data>
      <data key="d1">function</data>
      <data key="d2">The filter_ancestors method allows retrieving ancestors of a SpanNode that match a given predicate while applying stopping conditions.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="first_ancestor method">
      <data key="d0">first_ancestor method</data>
      <data key="d1">function</data>
      <data key="d2">The first_ancestor method retrieves the closest ancestor of a SpanNode that meets a specified predicate condition.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="any_ancestor method">
      <data key="d0">any_ancestor method</data>
      <data key="d1">function</data>
      <data key="d2">The any_ancestor method checks if any ancestor of a SpanNode satisfies a given predicate condition.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_matches_query method">
      <data key="d0">_matches_query method</data>
      <data key="d1">function</data>
      <data key="d2">The _matches_query method evaluates whether a span matches the specified query conditions and processes logical combinations.</data>
      <data key="d3">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="add_child">
      <data key="d0">add_child</data>
      <data key="d1">event</data>
      <data key="d2">Add_child is a method that allows for the attachment of a child SpanNode to the current SpanNode, preserving the parent-child relationship in the tree structure.&lt;SEP&gt;The add_child function allows attaching a child node to a parent node's list, ensuring trace consistency and hierarchy integrity.</data>
      <data key="d3">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="find_children">
      <data key="d0">find_children</data>
      <data key="d1">event</data>
      <data key="d2">Find_children is a method used to retrieve immediate child SpanNodes that satisfy a provided predicate, aiding in filtering specific nodes.&lt;SEP&gt;The find_children method retrieves immediate child nodes based on a specified predicate, facilitating targeted data access.</data>
      <data key="d3">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="first_child">
      <data key="d0">first_child</data>
      <data key="d1">event</data>
      <data key="d2">First_child is a method that returns the first child node of the current SpanNode that meets a specific predicate, or None if no match is found.&lt;SEP&gt;The first_child function returns the first child node matching a predicate, aiding in quick navigation of hierarchical structures.&lt;SEP&gt;first_child is a function that returns the first immediate child node that satisfies a given predicate.&lt;SEP&gt;first_child is a method designed to return the first immediate child node that satisfies a specified predicate, which can be useful in navigating hierarchical data structures.</data>
      <data key="d3">chunk-f7275e9966aa7c1401bb0a2fb82d3fda&lt;SEP&gt;chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="descendants">
      <data key="d0">descendants</data>
      <data key="d1">property</data>
      <data key="d2">Descendants is a property that returns a list of all child nodes under the current SpanNode in depth-first search order.&lt;SEP&gt;The descendants property returns all child nodes of a SpanNode, arranged in depth-first search order.</data>
      <data key="d3">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ancestors">
      <data key="d0">ancestors</data>
      <data key="d1">property</data>
      <data key="d2">Ancestors is a property that returns a list of all parent nodes of the current SpanNode, allowing for traversal back up the hierarchy.&lt;SEP&gt;The ancestors property provides a collection of a node's parent nodes, allowing tracing back through the hierarchy.</data>
      <data key="d3">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="any_child">
      <data key="d0">any_child</data>
      <data key="d1">event</data>
      <data key="d2">any_child is a function that checks if there is at least one child node that satisfies a given predicate.&lt;SEP&gt;any_child is a method that checks whether there exists at least one child node that satisfies a specified predicate in the span tree.</data>
      <data key="d3">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="find_descendants">
      <data key="d0">find_descendants</data>
      <data key="d1">event</data>
      <data key="d2">find_descendants is a method that retrieves all descendant nodes of a given parent that satisfy a certain predicate, utilizing depth-first search.&lt;SEP&gt;find_descendants is a recursive function that finds all descendant nodes that satisfy a given predicate.</data>
      <data key="d3">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="first_descendant">
      <data key="d0">first_descendant</data>
      <data key="d1">event</data>
      <data key="d2">first_descendant is a function that returns the first descendant node satisfying a given predicate in depth-first search order.&lt;SEP&gt;first_descendant is a method that retrieves the first descendant node that meets a given predicate in a depth-first traversal of the span tree.</data>
      <data key="d3">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="any_descendant">
      <data key="d0">any_descendant</data>
      <data key="d1">event</data>
      <data key="d2">any_descendant is a function that checks if any descendant node satisfies a given predicate.&lt;SEP&gt;any_descendant is a method that determines if there are any descendant nodes that satisfy a specified predicate.</data>
      <data key="d3">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="find_ancestors">
      <data key="d0">find_ancestors</data>
      <data key="d1">event</data>
      <data key="d2">find_ancestors is a function that returns all ancestors of a node that satisfy a given predicate.&lt;SEP&gt;find_ancestors is a method that returns all ancestor nodes of a specified node that meet a certain predicate.</data>
      <data key="d3">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="first_ancestor">
      <data key="d0">first_ancestor</data>
      <data key="d1">event</data>
      <data key="d2">first_ancestor retrieves the closest ancestor node that satisfies a given predicate.&lt;SEP&gt;first_ancestor returns the closest ancestor that satisfies a given predicate.</data>
      <data key="d3">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="any_ancestor">
      <data key="d0">any_ancestor</data>
      <data key="d1">event</data>
      <data key="d2">any_ancestor checks if any ancestor of a node satisfies a given predicate.&lt;SEP&gt;any_ancestor checks whether at least one ancestor node meets a given predicate condition.&lt;SEP&gt;any_ancestor is a method in a class that checks if any ancestor node satisfies a given predicate condition in a span tree structure.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f&lt;SEP&gt;chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SpanTree">
      <data key="d0">SpanTree</data>
      <data key="d1">organization</data>
      <data key="d2">SpanTree is a container that organizes a hierarchy of SpanNode objects created from completed spans, allowing for searches and assertions through depth-first traversal.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="otel">
      <data key="d0">otel</data>
      <data key="d1">organization</data>
      <data key="d2">otel refers to OpenTelemetry, an observability framework that aids in collecting and analyzing telemetry data from applications.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="matches">
      <data key="d0">matches</data>
      <data key="d1">category</data>
      <data key="d2">matches is a method that determines whether a span node meets specified query conditions or predicates.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="repr_xml">
      <data key="d0">repr_xml</data>
      <data key="d1">category</data>
      <data key="d2">The 'repr_xml' function returns an XML-like string representation of the tree, with customizable options.&lt;SEP&gt;The repr_xml method creates an XML-like string representation of the tree, which can include various node details based on user preferences.&lt;SEP&gt;repr_xml is a method that returns an XML-like string representation of a span node, including options for its children and attributes.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f&lt;SEP&gt;chunk-d3dca449323eaaba6c6952db29fc9336&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="stop_recursing_when">
      <data key="d0">stop_recursing_when</data>
      <data key="d1">category</data>
      <data key="d2">stop_recursing_when is an attribute in SpanQuery that specifies conditions under which the recursion through ancestors or descendants should cease.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="timing conditions">
      <data key="d0">timing conditions</data>
      <data key="d1">category</data>
      <data key="d2">timing conditions refer to the criteria related to the timing attributes of spans, such as duration constraints in SpanQuery.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="logical combinations">
      <data key="d0">logical combinations</data>
      <data key="d1">category</data>
      <data key="d2">logical combinations are structural features in SpanQuery that allow the combination of individual conditions using AND/OR logic.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="children">
      <data key="d0">children</data>
      <data key="d1">category</data>
      <data key="d2">children refers to the nodes that are directly beneath a parent node in the hierarchy of SpanTree, which may be included in various methods.</data>
      <data key="d3">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="root nodes">
      <data key="d0">root nodes</data>
      <data key="d1">category</data>
      <data key="d2">Root nodes are the top-level SpanNode objects in a hierarchy, which do not have parents.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tree structure">
      <data key="d0">tree structure</data>
      <data key="d1">category</data>
      <data key="d2">The tree structure is a method of organizing spans that allows for adding, searching, and iterating through nodes in a hierarchical manner.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DFS">
      <data key="d0">DFS</data>
      <data key="d1">category</data>
      <data key="d2">DFS (Depth-First Search) is a traversal method used to search through the nodes in the tree.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="add_spans">
      <data key="d0">add_spans</data>
      <data key="d1">category</data>
      <data key="d2">Add_spans is a method that allows users to add a list of SpanNode objects to the tree and subsequently rebuild its structure.&lt;SEP&gt;The add_spans function is used to add new spans to the tree, rebuilding the tree structure accordingly.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="find">
      <data key="d0">find</data>
      <data key="d1">category</data>
      <data key="d2">The find function is designed to locate SpanNodes within the tree that meet a specified criterion.&lt;SEP&gt;The find method searches through the tree for all nodes matching a specified predicate, applying a depth-first traversal from each root.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="first">
      <data key="d0">first</data>
      <data key="d1">category</data>
      <data key="d2">The 'first' function is an event in the code that finds the first node matching a predicate in a tree using depth-first search.&lt;SEP&gt;The first function identifies the first SpanNode that matches a given predicate in the tree.&lt;SEP&gt;The first method locates and returns the first SpanNode that satisfies a given predicate while searching in a depth-first manner.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_rebuild_tree">
      <data key="d0">_rebuild_tree</data>
      <data key="d1">category</data>
      <data key="d2">The _rebuild_tree method ensures that all spans maintain correct parent-child relationships and that the tree is ordered.&lt;SEP&gt;The _rebuild_tree method organizes spans by ensuring the correct parent-child relationships in the hierarchy.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="roots">
      <data key="d0">roots</data>
      <data key="d1">category</data>
      <data key="d2">Roots are the top-level SpanNode objects that act as the starting points for traversing the tree structure.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="nodes_by_id">
      <data key="d0">nodes_by_id</data>
      <data key="d1">category</data>
      <data key="d2">Nodes_by_id is a dictionary that maps node keys to their corresponding SpanNode objects, facilitating easy access and management.&lt;SEP&gt;nodes_by_id is a dictionary mapping IDs to nodes within the span tree, allowing for efficient access and iteration.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="any">
      <data key="d0">any</data>
      <data key="d1">category</data>
      <data key="d2">The 'any' function is an event that checks if any node in the tree matches a given predicate.&lt;SEP&gt;The any method checks for the existence of any SpanNode that matches a provided predicate, returning a boolean value.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_filter">
      <data key="d0">_filter</data>
      <data key="d1">category</data>
      <data key="d2">The _filter method assists in searching through nodes in the tree to find matches based on a given predicate.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="__iter__">
      <data key="d0">__iter__</data>
      <data key="d1">category</data>
      <data key="d2">The '__iter__' function allows iteration over all nodes in the tree.&lt;SEP&gt;The __iter__ method provides an iterator over all nodes in the SpanNode tree, enabling easy traversal.</data>
      <data key="d3">chunk-d3dca449323eaaba6c6952db29fc9336&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ReportCase">
      <data key="d0">ReportCase</data>
      <data key="d1">organization</data>
      <data key="d2">A ReportCase represents a single evaluation instance containing results for a specific case in the evaluation report.&lt;SEP&gt;ReportCase is a data model representing a single case in an evaluation report.&lt;SEP&gt;ReportCase is a type of case that is processed and analyzed by the ReportCaseAggregate to derive averages and statistics.&lt;SEP&gt;ReportCase represents individual cases within an evaluation report, containing various attributes for evaluation.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-5fba341bc749309a69f25c6f2f47a284&lt;SEP&gt;chunk-ef4c7193cda16c30962e01194bc308c7&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ReportCaseAggregate">
      <data key="d0">ReportCaseAggregate</data>
      <data key="d1">organization</data>
      <data key="d2">ReportCaseAggregate is a model representing a synthetic case that summarizes a collection of reporting cases, providing average metrics and statistics.&lt;SEP&gt;ReportCaseAggregate is a summary of the results from multiple ReportCases, providing averaged metrics and scores.&lt;SEP&gt;ReportCaseAggregate is a synthetic data model summarizing a set of cases within an evaluation report.&lt;SEP&gt;ReportCaseAggregate is an entity that calculates and aggregates scores from reports and cases for evaluation purposes.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284&lt;SEP&gt;chunk-25346d17202fa22ebc450f7f7382c828&lt;SEP&gt;chunk-ef4c7193cda16c30962e01194bc308c7&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Depth-First Search">
      <data key="d0">Depth-First Search</data>
      <data key="d1">event</data>
      <data key="d2">Depth-First Search is an algorithm for traversing or searching tree or graph data structures.</data>
      <data key="d3">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Tree Structure">
      <data key="d0">Tree Structure</data>
      <data key="d1">category</data>
      <data key="d2">Tree Structure refers to the hierarchical organization of data represented by nodes and edges.</data>
      <data key="d3">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="average">
      <data key="d0">average</data>
      <data key="d1">method</data>
      <data key="d2">average is a static method within ReportCaseAggregate that computes the average of various quantitative attributes from a list of ReportCase instances.</data>
      <data key="d3">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="defaultdict">
      <data key="d0">defaultdict</data>
      <data key="d1">organization</data>
      <data key="d2">defaultdict is a specialized dictionary class from the collections module in Python that provides default values for nonexistent keys.</data>
      <data key="d3">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="task_duration">
      <data key="d0">task_duration</data>
      <data key="d1">category</data>
      <data key="d2">task_duration is an attribute representing the duration of a task associated with a ReportCase.</data>
      <data key="d3">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="total_duration">
      <data key="d0">total_duration</data>
      <data key="d1">category</data>
      <data key="d2">total_duration is an attribute representing the total time taken for processing a ReportCase.</data>
      <data key="d3">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="scores">
      <data key="d0">scores</data>
      <data key="d1">category</data>
      <data key="d2">scores is a dictionary attribute in ReportCaseAggregate that holds various quantitative scores associated with a set of cases.</data>
      <data key="d3">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="labels">
      <data key="d0">labels</data>
      <data key="d1">category</data>
      <data key="d2">labels is a dictionary attribute in ReportCaseAggregate that categorizes and counts different labels from the set of cases.</data>
      <data key="d3">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="assertions">
      <data key="d0">assertions</data>
      <data key="d1">category</data>
      <data key="d2">assertions is an attribute that can contain a float value representing a performance measure or success criteria within a ReportCase.</data>
      <data key="d3">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sums_by_name">
      <data key="d0">sums_by_name</data>
      <data key="d1">organization</data>
      <data key="d2">sums_by_name is a data structure that aggregates values by name, allowing for organized summation of counts associated with different labels.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="label">
      <data key="d0">label</data>
      <data key="d1">category</data>
      <data key="d2">label is a variable used to categorize or describe specific characteristics associated with each entry in the sums_by_name structure.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="average_task_duration">
      <data key="d0">average_task_duration</data>
      <data key="d1">category</data>
      <data key="d2">average_task_duration calculates the mean duration of tasks based on the data from cases evaluated.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="case">
      <data key="d0">case</data>
      <data key="d1">category</data>
      <data key="d2">case refers to an individual evaluation example, containing specific metrics, scores, and assertions associated with it.&lt;SEP&gt;case refers to individual instances or tests within an evaluation report that are evaluated for performance and results.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="average_scores">
      <data key="d0">average_scores</data>
      <data key="d1">category</data>
      <data key="d2">average_scores represents the computed mean of score values across evaluated cases.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="average_labels">
      <data key="d0">average_labels</data>
      <data key="d1">category</data>
      <data key="d2">average_labels aggregates the labeling information of cases to provide a summarized view of labels encountered in the evaluation.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="average_metrics">
      <data key="d0">average_metrics</data>
      <data key="d1">category</data>
      <data key="d2">average_metrics provides a mean of quantitative performance indicators observed across the evaluated cases.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="average_assertions">
      <data key="d0">average_assertions</data>
      <data key="d1">category</data>
      <data key="d2">average_assertions is a calculated value representing the average number of successful assertions among evaluated cases.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="n_assertions">
      <data key="d0">n_assertions</data>
      <data key="d1">category</data>
      <data key="d2">n_assertions denotes the total count of assertions across all cases considered for averaging.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="n_passing">
      <data key="d0">n_passing</data>
      <data key="d1">category</data>
      <data key="d2">n_passing tracks the number of assertions that were evaluated as correct or successful within the cases.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ReportCaseAggregateAverage">
      <data key="d0">ReportCaseAggregateAverage</data>
      <data key="d1">event</data>
      <data key="d2">ReportCaseAggregateAverage is a method that generates a summary report based on the average calculations of the various metrics from evaluated cases.</data>
      <data key="d3">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Report">
      <data key="d0">Report</data>
      <data key="d1">organization</data>
      <data key="d2">The Report is a structured evaluation document that summarizes performance, results, and metrics of a certain evaluation process.</data>
      <data key="d3">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="baseline">
      <data key="d0">baseline</data>
      <data key="d1">category</data>
      <data key="d2">Baseline represents a previous version of the report used for comparison purposes to assess changes in the evaluation.&lt;SEP&gt;baseline represents an optional previous evaluation report used for comparison in generating differences between reports.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_DEFAULT_VALUE_CONFIG">
      <data key="d0">_DEFAULT_VALUE_CONFIG</data>
      <data key="d1">category</data>
      <data key="d2">_DEFAULT_VALUE_CONFIG comprises the default settings and values for the input and metadata configuration used in evaluations.</data>
      <data key="d3">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="output_config">
      <data key="d0">output_config</data>
      <data key="d1">category</data>
      <data key="d2">output_config refers to the configuration settings that dictate how the output will be formatted and displayed in the report.</data>
      <data key="d3">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="score_configs">
      <data key="d0">score_configs</data>
      <data key="d1">category</data>
      <data key="d2">score_configs is an option in the EvaluationRenderer that allows customization of how specific scoring metrics are represented in the evaluation report.&lt;SEP&gt;score_configs represent the configuration settings that define how scores are calculated and presented in the evaluation report.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="label_configs">
      <data key="d0">label_configs</data>
      <data key="d1">category</data>
      <data key="d2">label_configs contains the settings related to the labels used in the evaluation report, which categorize different aspects of the evaluation.&lt;SEP&gt;label_configs provides an option within EvaluationRenderer for customizing the presentation of labels in the evaluation report.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="metric_configs">
      <data key="d0">metric_configs</data>
      <data key="d1">category</data>
      <data key="d2">metric_configs provides the configuration settings that determine which metrics are used and how they are measured in the evaluation.&lt;SEP&gt;metric_configs represents configuration details for defining how various metrics are computed and rendered in the evaluation output.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="duration_config">
      <data key="d0">duration_config</data>
      <data key="d1">category</data>
      <data key="d2">duration_config outlines the configuration for how durations are measured and reported in the evaluation metrics.&lt;SEP&gt;duration_config specifies how duration metrics should be rendered in the evaluation report, influencing the display of timing data.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="console">
      <data key="d0">console</data>
      <data key="d1">organization</data>
      <data key="d2">console refers to the interface or output medium through which reports and relevant data are printed for user interaction.</data>
      <data key="d3">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="renderer">
      <data key="d0">renderer</data>
      <data key="d1">organization</data>
      <data key="d2">renderer is the component responsible for building and formatting tables and reports based on the provided data.</data>
      <data key="d3">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="console_table">
      <data key="d0">console_table</data>
      <data key="d1">event</data>
      <data key="d2">console_table is a method in the EvaluationReport that returns a formatted table including various details from the evaluation report.&lt;SEP&gt;console_table is a method within EvaluationReport that constructs and returns a formatted table displaying data from evaluation reports or differences between reports.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="baseline report">
      <data key="d0">baseline report</data>
      <data key="d1">category</data>
      <data key="d2">The baseline report serves as a reference point for comparison against other evaluation reports to highlight differences.&lt;SEP&gt;The baseline report serves as a reference point within the EvaluationReport for comparing current data against established metrics to highlight discrepancies.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="input and output details">
      <data key="d0">input and output details</data>
      <data key="d1">category</data>
      <data key="d2">Input and output details are optional components in the reporting process, providing crucial context regarding data processed during evaluations.&lt;SEP&gt;Input and output details refer to the optional information included in reports regarding the data processed during evaluation.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluationRenderer">
      <data key="d0">EvaluationRenderer</data>
      <data key="d1">organization</data>
      <data key="d2">EvaluationRenderer is a class designed for rendering evaluation reports and their differences, facilitating clearer presentation of evaluation data.&lt;SEP&gt;EvaluationRenderer is a class responsible for rendering evaluation reports and differences between two evaluations.&lt;SEP&gt;EvaluationRenderer is responsible for rendering various components of the evaluation report, including tables and differences between reports.&lt;SEP&gt;EvaluationRenderer manages the rendering of evaluation reports, formatting tables and handling the presentation of evaluation metrics effectively.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-ced21a7dd02af8eb0205821f3cf77e51&lt;SEP&gt;chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Table">
      <data key="d0">Table</data>
      <data key="d1">category</data>
      <data key="d2">Table is a class that provides methods to build and manage tables for displaying evaluation summaries and differences.&lt;SEP&gt;Table is a data structure representing the formatted results generated by the console_table method, encapsulating evaluation metrics and output details.&lt;SEP&gt;Table is the data structure returned by the console_table method, organizing evaluation metrics and reports.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RenderValueConfig">
      <data key="d0">RenderValueConfig</data>
      <data key="d1">category</data>
      <data key="d2">RenderValueConfig is a configuration class determining how values are rendered in the evaluation report.&lt;SEP&gt;RenderValueConfig is a configuration class that defines how individual values are rendered in the EvaluationReport, including formatting and presentation options.&lt;SEP&gt;RenderValueConfig is a configuration class used for rendering value outputs within the report.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RenderNumberConfig">
      <data key="d0">RenderNumberConfig</data>
      <data key="d1">category</data>
      <data key="d2">RenderNumberConfig defines how specific scores or metrics are formatted and rendered in the evaluation report.&lt;SEP&gt;RenderNumberConfig is a configuration class focused on numerical outputs within evaluation reports, allowing customization of how numbers are displayed.&lt;SEP&gt;RenderNumberConfig specifies how numerical scores and metrics are formatted and displayed in the evaluation reports, influencing clarity and readability.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RenderDurationConfig">
      <data key="d0">RenderDurationConfig</data>
      <data key="d1">category</data>
      <data key="d2">RenderDurationConfig outlines how time durations are represented in reports, ensuring consistency in the reporting of time-related metrics.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="include_input">
      <data key="d0">include_input</data>
      <data key="d1">category</data>
      <data key="d2">include_input is a setting within the EvaluationRenderer that determines whether to include input data details in the evaluation report output.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="include_metadata">
      <data key="d0">include_metadata</data>
      <data key="d1">category</data>
      <data key="d2">include_metadata is an option within the EvaluationRenderer that decides if metadata about the evaluation process will be included in the report.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="include_expected_output">
      <data key="d0">include_expected_output</data>
      <data key="d1">category</data>
      <data key="d2">include_expected_output is a setting in EvaluationReport that indicates whether to display the expected output alongside the actual output in the report.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="include_output">
      <data key="d0">include_output</data>
      <data key="d1">category</data>
      <data key="d2">include_output is a configuration in EvaluationReport that controls whether the actual output of the evaluations is included in the report.</data>
      <data key="d3">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="diff_atol">
      <data key="d0">diff_atol</data>
      <data key="d1">category</data>
      <data key="d2">diff_atol is an attribute that defines the absolute tolerance for considering a difference significant in comparison evaluations.&lt;SEP&gt;diff_atol is an attribute used to define the absolute tolerance threshold for determining whether a difference between two values is significant in evaluation contexts.</data>
      <data key="d3">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="diff_rtol">
      <data key="d0">diff_rtol</data>
      <data key="d1">category</data>
      <data key="d2">diff_rtol is an attribute setting the relative tolerance for assessing the significance of differences, allowing for metrics to be compared in various evaluation scenarios.&lt;SEP&gt;diff_rtol is an attribute that defines the relative tolerance for determining the significance of differences in evaluation reports.</data>
      <data key="d3">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="diff_increase_style">
      <data key="d0">diff_increase_style</data>
      <data key="d1">category</data>
      <data key="d2">diff_increase_style specifies the formatting style for values that show a significant increase in evaluations.&lt;SEP&gt;diff_increase_style specifies the visual styling applied to values that have shown a significant increase in evaluations, enhancing interpretability.</data>
      <data key="d3">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="diff_decrease_style">
      <data key="d0">diff_decrease_style</data>
      <data key="d1">category</data>
      <data key="d2">diff_decrease_style specifies the formatting style for values that show a significant decrease in evaluations.&lt;SEP&gt;diff_decrease_style specifies the visual styling applied to values that have exhibited a significant decrease in evaluations, facilitating clear reporting.</data>
      <data key="d3">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="value_formatter">
      <data key="d0">value_formatter</data>
      <data key="d1">category</data>
      <data key="d2">value_formatter defines how values should be formatted in reports, including options for decimal places and significant figures.&lt;SEP&gt;value_formatter is a specified logic for formatting the numerical outputs in reports, ensuring consistency and clarity in representation.</data>
      <data key="d3">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="diff_formatter">
      <data key="d0">diff_formatter</data>
      <data key="d1">category</data>
      <data key="d2">diff_formatter defines how the difference between old and new values is presented in reports, potentially including percentage changes.&lt;SEP&gt;diff_formatter outlines the logic for detailing the differences between old and new values, potentially including comprehensive changes indicated by absolute or relative measures.</data>
      <data key="d3">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvalReport">
      <data key="d0">EvalReport</data>
      <data key="d1">category</data>
      <data key="d2">EvalReport is a type of evaluation report detailing the performance and results of specific evaluation cases and metrics.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ReportCaseRenderer">
      <data key="d0">ReportCaseRenderer</data>
      <data key="d1">category</data>
      <data key="d2">ReportCaseRenderer is responsible for generating the visual representation of individual report cases in an evaluation report.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_ValueRenderer">
      <data key="d0">_ValueRenderer</data>
      <data key="d1">category</data>
      <data key="d2">_ValueRenderer is a class that assists in rendering values according to the specified configuration for reports.</data>
      <data key="d3">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphSetupError">
      <data key="d0">GraphSetupError</data>
      <data key="d1">error</data>
      <data key="d2">GraphSetupError is an error class that signifies issues related to incorrect graph configuration.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphRuntimeError">
      <data key="d0">GraphRuntimeError</data>
      <data key="d1">exception</data>
      <data key="d2">GraphRuntimeError is a base exception class within the graph framework used for signaling general runtime errors.&lt;SEP&gt;GraphRuntimeError is a general exception class for errors that occur during the execution of a graph, serving as the base for more specific runtime errors.&lt;SEP&gt;GraphRuntimeError is an error class indicating runtime issues that occur during graph execution.</data>
      <data key="d3">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphNodeStatusError">
      <data key="d0">GraphNodeStatusError</data>
      <data key="d1">exception</data>
      <data key="d2">GraphNodeStatusError is a custom error class in the context of graphs, indicating issues with node status during runtime.&lt;SEP&gt;GraphNodeStatusError is a custom error class used to indicate runtime issues related to the status of nodes in a graph, specifically when a node is not in a valid state.&lt;SEP&gt;GraphNodeStatusError is an error class triggered when attempting to run a node that is already in an invalid status.</data>
      <data key="d3">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Evaluation Diff">
      <data key="d0">Evaluation Diff</data>
      <data key="d1">event</data>
      <data key="d2">Evaluation Diff is a process that involves comparing a report with a baseline to identify changes in performance metrics.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Baseline">
      <data key="d0">Baseline</data>
      <data key="d1">category</data>
      <data key="d2">Baseline refers to the original set of data or report used for comparison in the evaluation process.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Case Renderer">
      <data key="d0">Case Renderer</data>
      <data key="d1">organization</data>
      <data key="d2">Case Renderer is responsible for generating formatted displays of report cases, facilitating visual comparisons and evaluations.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Diff Cases">
      <data key="d0">Diff Cases</data>
      <data key="d1">category</data>
      <data key="d2">Diff Cases refer to cases that show differences in metrics or performances between two evaluations.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Added Cases">
      <data key="d0">Added Cases</data>
      <data key="d1">category</data>
      <data key="d2">Added Cases are new entries introduced in an evaluation report that did not exist in the baseline report.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Removed Cases">
      <data key="d0">Removed Cases</data>
      <data key="d1">category</data>
      <data key="d2">Removed Cases are entries that were present in the baseline report but are no longer included in the current report.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Number Renderer">
      <data key="d0">Number Renderer</data>
      <data key="d1">equipment</data>
      <data key="d2">Number Renderer is a tool used to infer and display numerical data in reports based on configurations.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Value Renderer">
      <data key="d0">Value Renderer</data>
      <data key="d1">equipment</data>
      <data key="d2">Value Renderer is a component that visualizes categorical or textual data in evaluation reports based on defined configurations.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Duration Renderer">
      <data key="d0">Duration Renderer</data>
      <data key="d1">equipment</data>
      <data key="d2">Duration Renderer is a specialized number renderer that focuses on displaying time-based metrics in evaluations.</data>
      <data key="d3">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SnapshotStatus">
      <data key="d0">SnapshotStatus</data>
      <data key="d1">category</data>
      <data key="d2">SnapshotStatus is a classification that defines the possible statuses a node can hold during its lifecycle in the graph execution context.&lt;SEP&gt;SnapshotStatus is a set of predefined status labels that represent the execution state of a node in the graph, such as 'created', 'pending', and 'success'.&lt;SEP&gt;SnapshotStatus is an enumeration that represents possible states of a snapshot in the graph runtime environment.</data>
      <data key="d3">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="check">
      <data key="d0">check</data>
      <data key="d1">method</data>
      <data key="d2">check is a class method that verifies whether the status of a node is valid, raising an error if it is not.</data>
      <data key="d3">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="never_42">
      <data key="d0">never_42</data>
      <data key="d1">organization</data>
      <data key="d2">never_42 is a software entity that provides functionalities for managing and running asynchronous graph operations in Python.</data>
      <data key="d3">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BaseStatePersistence">
      <data key="d0">BaseStatePersistence</data>
      <data key="d1">category</data>
      <data key="d2">BaseStatePersistence defines an interface for managing the persistence of state in the graph, allowing it to save and retrieve its state.&lt;SEP&gt;BaseStatePersistence defines an interface for managing the preservation and retrieval of graph states, crucial for maintaining the state across executions.&lt;SEP&gt;BaseStatePersistence defines an interface for persisting the state of the graph across runs.&lt;SEP&gt;BaseStatePersistence is a base class that provides functionalities for persisting the state and managing snapshots within graph operations.&lt;SEP&gt;BaseStatePersistence is a class that defines how the state of a graph is persisted across executions, ensuring that data is retained.&lt;SEP&gt;BaseStatePersistence is a persistence interface that defines how state is saved and restored during graph execution.&lt;SEP&gt;BaseStatePersistence is an abstract base class designed for storing the state of a graph run in a structured manner.&lt;SEP&gt;BaseStatePersistence is an abstract class that provides the foundational structure for state persistence classes within the pydantic_graph framework.&lt;SEP&gt;BaseStatePersistence is an interface for maintaining the state persistently across graph executions, ensuring retrieval of historical data.&lt;SEP&gt;BaseStatePersistence is an interface managing the state persistence for graphs, enabling state restoration effectiveness.&lt;SEP&gt;BaseStatePersistence is an interface that handles maintaining state across graph executions, providing methods for persistence and restoration.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DepsT">
      <data key="d0">DepsT</data>
      <data key="d1">category</data>
      <data key="d2">DepsT defines the type of dependencies that the nodes in the graph can have.&lt;SEP&gt;DepsT denotes a type for specifying dependencies in a node, contributing to type safety in graph structures.&lt;SEP&gt;DepsT denotes dependencies that can be accessed by nodes in the graph, such as database connections or configuration objects.&lt;SEP&gt;DepsT is a generic type parameter representing the dependencies required by nodes within the graph.&lt;SEP&gt;DepsT is a placeholder representing dependencies that may be required by the graph during execution.&lt;SEP&gt;DepsT is the type parameter representing dependencies that the nodes in the graph may require, such as configurations or shared resources.&lt;SEP&gt;DepsT refers to a type that specifies the dependencies required by nodes in the graph for their execution.&lt;SEP&gt;DepsT refers to the dependency type for nodes in a graph, indicating what other nodes or resources a particular node may rely on.&lt;SEP&gt;DepsT represents the dependencies type required for the nodes in the graph, influencing their execution context.&lt;SEP&gt;DepsT specifies the type of dependencies associated with the graph nodes, determining how they interact with each other.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="StateT">
      <data key="d0">StateT</data>
      <data key="d1">category</data>
      <data key="d2">StateT is a generic type parameter representing the state type in the graph framework.&lt;SEP&gt;StateT is a generic type that denotes the state model associated with nodes in the graph.&lt;SEP&gt;StateT is a placeholder representing any type of state used within the graph run process.&lt;SEP&gt;StateT is a placeholder representing the type of state held by a node within the graph, reflecting its current status.&lt;SEP&gt;StateT is a placeholder type representing the state in a node, used for type checking in graph-related implementations.&lt;SEP&gt;StateT is a type parameter representing the state of the graph at various execution points.&lt;SEP&gt;StateT is a type placeholder representing the state within the system, used in conjunction with other types to manage state snapshots.&lt;SEP&gt;StateT is a type representing the current state of a graph at any point during its execution, used for managing and processing runs within the graph.&lt;SEP&gt;StateT is a type that represents the state of a graph within the pydantic_graph library, which can be used to track various attributes of the graph.&lt;SEP&gt;StateT is a type variable representing the state of a graph during its execution, capturing the context and data at any point of the run.&lt;SEP&gt;StateT is the type parameter representing the state data type that is shared and manipulated within the graph during execution.&lt;SEP&gt;StateT represents a generic type for state shared within the context of graph nodes, enabling data flow during execution.&lt;SEP&gt;StateT represents a type for state management in the graph, indicating the current status of nodes.&lt;SEP&gt;StateT represents the state type used within the graph execution framework, allowing for state management throughout the process.&lt;SEP&gt;StateT represents the type for states in graphs, utilized in defining graph behavior and transitions.&lt;SEP&gt;StateT represents the type of state that can be managed and utilized within the nodes of the graph.&lt;SEP&gt;StateT represents the type of state that the graph nodes can manage and operate on.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="LogfireSpan">
      <data key="d0">LogfireSpan</data>
      <data key="d1">category</data>
      <data key="d2">LogfireSpan is a type that is used for monitoring and logging the execution span of graph runs.&lt;SEP&gt;LogfireSpan is a type that manages the tracing of executions within a graph run, used for monitoring performances.</data>
      <data key="d3">chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="nodes">
      <data key="d0">nodes</data>
      <data key="d1">category</data>
      <data key="d2">Nodes refer to the individual components of the graph that execute specific functions and can have dependencies.</data>
      <data key="d3">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ExitStack">
      <data key="d0">ExitStack</data>
      <data key="d1">organization</data>
      <data key="d2">ExitStack is a context manager in Python that manages multiple context managers and handles their cleanup automatically.&lt;SEP&gt;ExitStack is a context manager that allows multiple context managers to be combined and ensures proper resource cleanup.&lt;SEP&gt;ExitStack is a context manager used to manage multiple context managers and ensure proper cleanup after execution.&lt;SEP&gt;ExitStack is a context manager used to manage multiple context managers together, allowing for more efficient resource management during graph runs.</data>
      <data key="d3">chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AbstractContextManager">
      <data key="d0">AbstractContextManager</data>
      <data key="d1">organization</data>
      <data key="d2">AbstractContextManager is a base class for context managers in Python that manage resource allocation and cleanup.</data>
      <data key="d3">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run graph&quot;{graph.name}">
      <data key="d0">run graph"{graph.name}</data>
      <data key="d1">event</data>
      <data key="d2">run graph is an event that initiates the execution of a graph defined by its nodes in the context of a specific workflow.</data>
      <data key="d3">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="enumerate">
      <data key="d0">enumerate</data>
      <data key="d1">event</data>
      <data key="d2">enumerate is a built-in Python function that allows for looping through a sequence while keeping track of the index of the current item.</data>
      <data key="d3">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="logfire_api">
      <data key="d0">logfire_api</data>
      <data key="d1">organization</data>
      <data key="d2">logfire_api is an API used for logging and monitoring purposes, particularly in the context of graph execution for performance tracking.&lt;SEP&gt;logfire_api is an interface or API used for logging and monitoring events within the graph execution environment.</data>
      <data key="d3">chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mermaid">
      <data key="d0">mermaid</data>
      <data key="d1">organization</data>
      <data key="d2">Mermaid is a JavaScript library that enables the generation of diagrams and flowcharts using a simple syntax.&lt;SEP&gt;Mermaid is a free service used to render diagrams representing graph structures, integrated within Pydantic for visual representation.&lt;SEP&gt;Mermaid is a tool that generates diagrams from text descriptions and is used for visual representation of graphs.</data>
      <data key="d3">chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async with graph.iter">
      <data key="d0">async with graph.iter</data>
      <data key="d1">event</data>
      <data key="d2">The event describes using an asynchronous context manager to iterate through graph nodes.</data>
      <data key="d3">chunk-14e53235b034b988f73d8d04cdce068d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="persistence">
      <data key="d0">persistence</data>
      <data key="d1">organization</data>
      <data key="d2">Persistence is responsible for managing the state of nodes and facilitating saving or snapshotting nodes in the graph.</data>
      <data key="d3">chunk-14e53235b034b988f73d8d04cdce068d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mermaid.request_image">
      <data key="d0">mermaid.request_image</data>
      <data key="d1">event</data>
      <data key="d2">Mermaid.request_image is a method that generates an image representation of a graph based on the provided configuration.</data>
      <data key="d3">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mermaid.save_image">
      <data key="d0">mermaid.save_image</data>
      <data key="d1">event</data>
      <data key="d2">Mermaid.save_image is a method that saves the generated diagram image to a specified path.</data>
      <data key="d3">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="typing_extensions">
      <data key="d0">typing_extensions</data>
      <data key="d1">organization</data>
      <data key="d2">Typing_extensions is a Python module that provides backports of features in the typing module, enhancing static type checking.</data>
      <data key="d3">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="exceptions.GraphSetupError">
      <data key="d0">exceptions.GraphSetupError</data>
      <data key="d1">event</data>
      <data key="d2">GraphSetupError is a specific exception raised during the setup of a graph when a node or edge issue is identified.</data>
      <data key="d3">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_utils">
      <data key="d0">_utils</data>
      <data key="d1">organization</data>
      <data key="d2">_utils is a module or package that provides utility functions to support the core functionalities of the graph execution framework.&lt;SEP&gt;_utils is a utility module facilitating various helper functions used within the Pydantic Graph library.&lt;SEP&gt;_utils is a utility module that provides various helper functions used throughout the codebase to maintain efficiency and clarity.</data>
      <data key="d3">chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="f_back">
      <data key="d0">f_back</data>
      <data key="d1">category</data>
      <data key="d2">f_back is an attribute used to navigate back to the caller's frame in the Python call stack.</data>
      <data key="d3">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="f_locals">
      <data key="d0">f_locals</data>
      <data key="d1">category</data>
      <data key="d2">f_locals is an attribute that holds a dictionary of the local variables in the function's context.</data>
      <data key="d3">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="f_globals">
      <data key="d0">f_globals</data>
      <data key="d1">category</data>
      <data key="d2">f_globals is an attribute that contains a dictionary of the global variables in the function's context.</data>
      <data key="d3">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="graph.py">
      <data key="d0">graph.py</data>
      <data key="d1">event</data>
      <data key="d2">graph.py is a source code file in the Pydantic Graph library that defines the structure and behavior of the graph.</data>
      <data key="d3">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="never_42_graph">
      <data key="d0">never_42_graph</data>
      <data key="d1">organization</data>
      <data key="d2">never_42_graph is a specific instance of a graph used in the examples to illustrate the usage of GraphRun.&lt;SEP&gt;never_42_graph is an instance of a graph defined within the pydantic_graph framework to manage specific workflow logic.&lt;SEP&gt;never_42_graph is an organization or module that contains the functionality for running graph computations in an asynchronous manner.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run_never_42.py">
      <data key="d0">run_never_42.py</data>
      <data key="d1">event</data>
      <data key="d2">run_never_42.py is an example event showcasing how to execute a graph run using the never_42 module.</data>
      <data key="d3">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphRunResult[StateT, RunEndT]">
      <data key="d0">GraphRunResult[StateT, RunEndT]</data>
      <data key="d1">category</data>
      <data key="d2">GraphRunResult[StateT, RunEndT] is a data structure containing the results of a graph run, including its final state and execution history.</data>
      <data key="d3">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_graph/pydantic_graph/graph.py">
      <data key="d0">pydantic_graph/pydantic_graph/graph.py</data>
      <data key="d1">event</data>
      <data key="d2">pydantic_graph/pydantic_graph/graph.py is a script that contains the source code implementations relevant to graph management within the Pydantic Graph module.</data>
      <data key="d3">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="iter">
      <data key="d0">iter</data>
      <data key="d1">function</data>
      <data key="d2">iter is a function used to create an async context manager for iterating over graph nodes as they execute.</data>
      <data key="d3">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="state persistence interface">
      <data key="d0">state persistence interface</data>
      <data key="d1">category</data>
      <data key="d2">The state persistence interface provides a mechanism for maintaining state across graph executions.</data>
      <data key="d3">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="contextmanager">
      <data key="d0">contextmanager</data>
      <data key="d1">category</data>
      <data key="d2">contextmanager is a decorator that facilitates the creation of context managers, allowing for resource management in Python.</data>
      <data key="d3">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="iter_from_persistence">
      <data key="d0">iter_from_persistence</data>
      <data key="d1">event</data>
      <data key="d2">iter_from_persistence is an asynchronous context manager event used to iterate over the nodes of a graph during execution with restored state.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="initialize">
      <data key="d0">initialize</data>
      <data key="d1">event</data>
      <data key="d2">initialize is a method that prepares a new graph run in persistence without executing it, allowing for later execution through context management.&lt;SEP&gt;initialize is a method that sets up a new graph run in persistence without executing it immediately, allowing for future execution planning.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncContextManager">
      <data key="d0">AsyncContextManager</data>
      <data key="d1">organization</data>
      <data key="d2">AsyncContextManager is an interface that allows for the management of asynchronous context management, enabling resource management in asynchronous programming environments.</data>
      <data key="d3">chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mermaid_code">
      <data key="d0">mermaid_code</data>
      <data key="d1">event</data>
      <data key="d2">mermaid_code is a function designed to generate a visualization diagram of the graph using Mermaid syntax based on specified parameters.&lt;SEP&gt;mermaid_code is a function that generates a visual representation of the graph in Mermaid syntax, allowing for easy diagramming of the graph's structure and relationships.</data>
      <data key="d3">chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="next">
      <data key="d0">next</data>
      <data key="d1">event</data>
      <data key="d2">next is a method called within the context of a graph run that allows for manual progression to the next node or the End node.&lt;SEP&gt;next is a method that executes a specified node in the graph and determines the subsequent node to run.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeIdent">
      <data key="d0">NodeIdent</data>
      <data key="d1">category</data>
      <data key="d2">NodeIdent is a type alias that defines identifiers for nodes in a graph, supporting various formats including node instances and strings.&lt;SEP&gt;NodeIdent is a type that uniquely identifies a node within a graph.&lt;SEP&gt;NodeIdent refers to a type or identifier used in graphs to represent nodes or vertices.&lt;SEP&gt;NodeIdent represents identifiers for nodes in a graph which helps in linking and referencing them.</data>
      <data key="d3">chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-41cb6d18e75a14fbbb4ecaef7f988d07&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="StateDiagramDirection">
      <data key="d0">StateDiagramDirection</data>
      <data key="d1">category</data>
      <data key="d2">StateDiagramDirection is an enumeration used in Mermaid diagrams to specify the direction of state flow.&lt;SEP&gt;StateDiagramDirection is used to define the flow direction in state diagrams, indicating how states transition.&lt;SEP&gt;StateDiagramDirection refers to a category that specifies the direction of state diagrams.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-41cb6d18e75a14fbbb4ecaef7f988d07&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DEFAULT_HIGHLIGHT_CSS">
      <data key="d0">DEFAULT_HIGHLIGHT_CSS</data>
      <data key="d1">category</data>
      <data key="d2">DEFAULT_HIGHLIGHT_CSS is a predefined style used for highlighting nodes within the Mermaid diagram to distinguish them visually.&lt;SEP&gt;DEFAULT_HIGHLIGHT_CSS is a preset CSS styling rule applied to highlight nodes in diagrams.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="generate_code">
      <data key="d0">generate_code</data>
      <data key="d1">event</data>
      <data key="d2">generate_code is a function defined in the pydantic_graph library that creates Mermaid diagram code based on a specified graph structure and configuration options.&lt;SEP&gt;generate_code is a method that produces code for rendering graphs, such as those compatible with Mermaid.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="highlighted_nodes">
      <data key="d0">highlighted_nodes</data>
      <data key="d1">category</data>
      <data key="d2">highlighted_nodes refers to a selection of nodes that can be made visually distinct in a graph for emphasis.</data>
      <data key="d3">chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="edge_labels">
      <data key="d0">edge_labels</data>
      <data key="d1">category</data>
      <data key="d2">edge_labels are textual descriptions that can be displayed alongside the connections (edges) between nodes in a graph.&lt;SEP&gt;edge_labels is a boolean parameter indicating whether to display labels on the edges of the diagram, providing additional context.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="notes">
      <data key="d0">notes</data>
      <data key="d1">category</data>
      <data key="d2">notes is a parameter that dictates if notes should be included in the diagram, allowing for additional explanations adjacent to nodes.&lt;SEP&gt;notes provide additional information about nodes, often used for clarifying purposes in diagrams.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mermaid.ink">
      <data key="d0">mermaid.ink</data>
      <data key="d1">organization</data>
      <data key="d2">mermaid.ink is a web service that generates Mermaid diagrams from code input to various image formats.&lt;SEP&gt;mermaid.ink is an external service used for rendering diagrams using Mermaid syntax, not affiliated with Pydantic.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba&lt;SEP&gt;chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MermaidConfig">
      <data key="d0">MermaidConfig</data>
      <data key="d1">category</data>
      <data key="d2">MermaidConfig is a class used to customize the format and diagram of Mermaid graphs during image generation.&lt;SEP&gt;MermaidConfig is a configuration category that specifies parameters for generating Mermaid charts, including image type and layout options.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba&lt;SEP&gt;chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mermaid_image">
      <data key="d0">mermaid_image</data>
      <data key="d1">function</data>
      <data key="d2">mermaid_image is a function that generates a diagram representing a graph as an image, using the mermaid.ink service for rendering.</data>
      <data key="d3">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mermaid_save">
      <data key="d0">mermaid_save</data>
      <data key="d1">function</data>
      <data key="d2">mermaid_save is a function that generates a diagram and saves it as an image, utilizing the mermaid.ink service, which allows for customization through kwargs.</data>
      <data key="d3">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_nodes">
      <data key="d0">get_nodes</data>
      <data key="d1">function</data>
      <data key="d2">get_nodes is a function that retrieves the nodes contained within a graph structure.</data>
      <data key="d3">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Check42">
      <data key="d0">Check42</data>
      <data key="d1">organization</data>
      <data key="d2">Check42 is a node that checks if the state number equals 42 based on the provided inputs in the graph.</data>
      <data key="d3">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="State Persistence">
      <data key="d0">State Persistence</data>
      <data key="d1">category</data>
      <data key="d2">State Persistence is a concept in computer science referring to the capability of saving data structures to a storage medium for later retrieval.&lt;SEP&gt;State Persistence is the interface that manages how the state is maintained and accessed throughout the execution of the graph.&lt;SEP&gt;State Persistence refers to the mechanism through which the state of an application or a data structure is saved and restored across executions, particularly relevant in graph processing.</data>
      <data key="d3">chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deepcopy">
      <data key="d0">deepcopy</data>
      <data key="d1">category</data>
      <data key="d2">deepcopy is a method used to create a new object that is a copy of the original object, retaining the structure and data without referencing the original.</data>
      <data key="d3">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async for iteration">
      <data key="d0">async for iteration</data>
      <data key="d1">event</data>
      <data key="d2">async for iteration refers to the asynchronous method of looping over nodes during the graph execution, allowing for non-blocking operations.</data>
      <data key="d3">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async iteration">
      <data key="d0">async iteration</data>
      <data key="d1">event</data>
      <data key="d2">Async iteration refers to the process of sequentially executing graph nodes asynchronously until an End node is reached.</data>
      <data key="d3">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="snapshot_id">
      <data key="d0">snapshot_id</data>
      <data key="d1">category</data>
      <data key="d2">snapshot_id is an identifier used to manage and track the state snapshots associated with nodes during execution.&lt;SEP&gt;snapshot_id is an identifier used to reference a specific state snapshot within the context of a graph execution, allowing for tracking of states over time.&lt;SEP&gt;snapshot_id is an identifier used to track the state and origin of nodes within a graph execution.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="check42">
      <data key="d0">check42</data>
      <data key="d1">event</data>
      <data key="d2">Check42 is a graph node that inspects the state and potentially alters it based on specific conditions during execution.</data>
      <data key="d3">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="database connections">
      <data key="d0">database connections</data>
      <data key="d1">category</data>
      <data key="d2">Database connections are established links to databases that allow nodes in the graph to perform data operations.</data>
      <data key="d3">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="configuration">
      <data key="d0">configuration</data>
      <data key="d1">category</data>
      <data key="d2">Configuration refers to the settings and parameters that define the behavior of graph nodes and their execution environments.</data>
      <data key="d3">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="logging clients">
      <data key="d0">logging clients</data>
      <data key="d1">category</data>
      <data key="d2">Logging clients are tools or libraries utilized within nodes to record operational details during graph execution.</data>
      <data key="d3">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="snapshot_node_if_new">
      <data key="d0">snapshot_node_if_new</data>
      <data key="d1">event</data>
      <data key="d2">snapshot_node_if_new is a method that takes a snapshot only if the given snapshot ID is new, preventing duplicate entries.&lt;SEP&gt;snapshot_node_if_new is a process that saves the current state of a node when it is determined to be new in the graph context.&lt;SEP&gt;snapshot_node_if_new is an abstract method checking if a snapshot ID already exists in persistence before taking a snapshot of the graph state, ensuring atomicity in operations.&lt;SEP&gt;snapshot_node_if_new is an abstract method that snapshots a graph's state only if the provided snapshot ID does not already exist, ensuring atomic operation.&lt;SEP&gt;snapshot_node_if_new is an action executed to save the current state of a node if it differs from a previous snapshot.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="record_run">
      <data key="d0">record_run</data>
      <data key="d1">event</data>
      <data key="d2">record_run is a method that allows for the recording of a graph run status, managing duration and exceptions during the node execution.&lt;SEP&gt;record_run is an abstract method that captures the status and duration of a node's execution, managing the node's state throughout the run lifecycle.&lt;SEP&gt;record_run is an abstract method that manages the recording of a node's execution run, tracking its status and timestamps.&lt;SEP&gt;record_run is an operation that tracks the execution of a node within the graph, preserving its state and results.</data>
      <data key="d3">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="errors">
      <data key="d0">errors</data>
      <data key="d1">category</data>
      <data key="d2">Errors refer to issues that can occur during the execution of graph nodes, which can disrupt the normal flow of processes.</data>
      <data key="d3">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="run method">
      <data key="d0">run method</data>
      <data key="d1">event</data>
      <data key="d2">run method is a function within BaseNode that executes the logic of the node, utilizing the provided context.</data>
      <data key="d3">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="node_id">
      <data key="d0">node_id</data>
      <data key="d1">category</data>
      <data key="d2">node_id is a unique identifier used to reference and interact with specific nodes within the graph structure.</data>
      <data key="d3">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="self._next_node">
      <data key="d0">self._next_node</data>
      <data key="d1">category</data>
      <data key="d2">self._next_node is an internal reference pointing to the next node to be processed during the asynchronous iteration within the graph execution.</data>
      <data key="d3">chunk-e84d9789a2133f11a435754d1aaecda4</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="exceptions">
      <data key="d0">exceptions</data>
      <data key="d1">organization</data>
      <data key="d2">exceptions catalog errors or issues that may arise during the execution of a graph workflow, providing management for those errors.&lt;SEP&gt;exceptions is a module in Python that contains standard exception classes and is used for error handling in code.</data>
      <data key="d3">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Mermaid Diagram">
      <data key="d0">Mermaid Diagram</data>
      <data key="d1">event</data>
      <data key="d2">The Mermaid Diagram is a visual representation created for graph using Mermaid syntax, often used in documentation or presentations.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="request_image">
      <data key="d0">request_image</data>
      <data key="d1">event</data>
      <data key="d2">request_image is a function that generates an image of a Mermaid diagram from the graph data, allowing for visual representation in various formats.&lt;SEP&gt;request_image is a function that handles the request to generate an image from the Mermaid code and configurations.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="node_def">
      <data key="d0">node_def</data>
      <data key="d1">category</data>
      <data key="d2">node_def represents the definition and properties of a node within the graph, including its connections and additional metadata related to it.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="next_node_edges">
      <data key="d0">next_node_edges</data>
      <data key="d1">category</data>
      <data key="d2">next_node_edges refers to the connections or edges that link one node to subsequent nodes in the graph, establishing flow and directionality.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="direction">
      <data key="d0">direction</data>
      <data key="d1">category</data>
      <data key="d2">direction indicates the flow direction of the diagram, specifying how transitions between states are visually represented.&lt;SEP&gt;direction refers to an attribute that determines the orientation of the state diagram, affecting how states are visually organized.</data>
      <data key="d3">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="save_image">
      <data key="d0">save_image</data>
      <data key="d1">event</data>
      <data key="d2">save_image is an event/function in the code that triggers the generation and saving of a Mermaid diagram based on specified parameters.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="code_base64">
      <data key="d0">code_base64</data>
      <data key="d1">category</data>
      <data key="d2">code_base64 is a function that encodes a given code into a base64 format for secure transmission or embedding.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="httpx_client">
      <data key="d0">httpx_client</data>
      <data key="d1">category</data>
      <data key="d2">httpx_client is an instance or client used to make HTTP requests within the code for generating images.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="fit">
      <data key="d0">fit</data>
      <data key="d1">category</data>
      <data key="d2">fit is a flag indicating whether to fit the diagram to the PDF page when generating a PDF image.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pdf_landscape">
      <data key="d0">pdf_landscape</data>
      <data key="d1">category</data>
      <data key="d2">pdf_landscape is a parameter that designates whether the PDF should be generated in landscape orientation.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="scale">
      <data key="d0">scale</data>
      <data key="d1">category</data>
      <data key="d2">scale describes a numeric value that influences the size and zoom level of the diagram, with constraints on its possible values.&lt;SEP&gt;scale is a parameter controlling the scaling of the generated diagram in the final image output.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="image_type">
      <data key="d0">image_type</data>
      <data key="d1">category</data>
      <data key="d2">image_type is a specification of the desired format for the generated image, such as png, svg, or pdf.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="background_color">
      <data key="d0">background_color</data>
      <data key="d1">category</data>
      <data key="d2">background_color defines the color attribute of a diagram's background, allowing customization through hexadecimal color codes or named colors.&lt;SEP&gt;background_color is a parameter that sets the background color of the diagram image during its generation.</data>
      <data key="d3">chunk-f4ca8586ecb34c1cc087f025313179ba&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="theme">
      <data key="d0">theme</data>
      <data key="d1">category</data>
      <data key="d2">In the context of the scripts, the theme represents the subject matter that the Agent generates poetry about, highlighting the flexibility of the server's capabilities.&lt;SEP&gt;theme is a setting that determines the visual style or appearance of the Mermaid diagram being generated.&lt;SEP&gt;theme refers to the visual styling options available for diagrams, such as 'default', 'neutral', 'dark', and 'forest', impacting their overall appearance.</data>
      <data key="d3">chunk-f2a50f99aa96dce25696156cf5396887&lt;SEP&gt;chunk-f4ca8586ecb34c1cc087f025313179ba&lt;SEP&gt;chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Diagram Properties">
      <data key="d0">Diagram Properties</data>
      <data key="d1">category</data>
      <data key="d2">Diagram Properties encompass various parameters such as background color, title, size, and scale necessary for generating a diagram.</data>
      <data key="d3">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="instance-attribute">
      <data key="d0">instance-attribute</data>
      <data key="d1">category</data>
      <data key="d2">Instance attributes are parts of a class that store data related to that particular instance, in this case, 'state' and 'deps' represent the elements that hold the context necessary for graph execution.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Abstract Method">
      <data key="d0">Abstract Method</data>
      <data key="d1">category</data>
      <data key="d2">An abstract method is a declaration in a base class that must be implemented in derived classes. It outlines the structure expected of subclasses.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ClassVar">
      <data key="d0">ClassVar</data>
      <data key="d1">category</data>
      <data key="d2">ClassVar is used to denote class-level attributes that should not be treated as instance variables but shared across all instances of the class.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Generics">
      <data key="d0">Generics</data>
      <data key="d1">category</data>
      <data key="d2">Generics allows classes or methods to operate on types specified at runtime, providing flexibility to manage various types in a type-safe manner.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Edge">
      <data key="d0">Edge</data>
      <data key="d1">organization</data>
      <data key="d2">Edge is a dataclass that represents an annotation applied to an edge in a graph, including a label for that edge.&lt;SEP&gt;Edge represents the relationship between nodes in the graph, defining how data flows from one node to another.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeDef">
      <data key="d0">NodeDef</data>
      <data key="d1">organization</data>
      <data key="d2">NodeDef is a class that defines the structure of a node in a graph, including its ID, description, and edges related to its connections in the graph.&lt;SEP&gt;NodeDef is a definition that includes crucial information about nodes in the graph, such as their identification and characteristics.</data>
      <data key="d3">chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deep_copy">
      <data key="d0">deep_copy</data>
      <data key="d1">method</data>
      <data key="d2">deep_copy is a class attribute that determines whether the state and nodes are deeply copied when taking snapshots. Defaults to True to ensure historical accuracy.&lt;SEP&gt;deep_copy is a method that returns a deep copy of the node using the copy.deepcopy function.</data>
      <data key="d3">chunk-365decc56ad5f314b2b86848e8a892ec&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="docstring_notes">
      <data key="d0">docstring_notes</data>
      <data key="d1">class-attribute</data>
      <data key="d2">docstring_notes is a class attribute that specifies whether to generate mermaid diagram notes from the class's docstring.</data>
      <data key="d3">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_node_id">
      <data key="d0">get_node_id</data>
      <data key="d1">classmethod</data>
      <data key="d2">get_node_id is a class method that retrieves the ID of the node based on its class name.</data>
      <data key="d3">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_note">
      <data key="d0">get_note</data>
      <data key="d1">classmethod</data>
      <data key="d2">get_note is a class method that returns a note about the node for rendering on mermaid charts, based on the class's docstring_notes attribute.</data>
      <data key="d3">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_node_def">
      <data key="d0">get_node_def</data>
      <data key="d1">classmethod</data>
      <data key="d2">get_node_def is a class method that provides the definition of the node including return types and edges for graph traversal.</data>
      <data key="d3">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="copy">
      <data key="d0">copy</data>
      <data key="d1">method</data>
      <data key="d2">copy is a functional method used to create a shallow or deep copy of an object, allowing for duplication without altering the original object.</data>
      <data key="d3">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeRunEndT">
      <data key="d0">NodeRunEndT</data>
      <data key="d1">category</data>
      <data key="d2">NodeRunEndT is a type parameter indicating the ending state of a node operation within the graph context.</data>
      <data key="d3">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="UNSET_SNAPSHOT_ID">
      <data key="d0">UNSET_SNAPSHOT_ID</data>
      <data key="d1">category</data>
      <data key="d2">UNSET_SNAPSHOT_ID is a constant indicating that a snapshot ID has not been explicitly set for an instance.&lt;SEP&gt;UNSET_SNAPSHOT_ID is a constant representing a unique identifier for a snapshot when it is not specifically defined.</data>
      <data key="d3">chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="snapshot_node">
      <data key="d0">snapshot_node</data>
      <data key="d1">category</data>
      <data key="d2">snapshot_node is a method used to create a snapshot of the current state and the next node during the graph execution.&lt;SEP&gt;snapshot_node is an abstract method intended to record the state of a graph by adding a NodeSnapshot to persistence when a specific node is about to run.&lt;SEP&gt;snapshot_node is an abstract method responsible for capturing the state of a graph at a specific point when a node's execution is about to start.</data>
      <data key="d3">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="snapshot_end">
      <data key="d0">snapshot_end</data>
      <data key="d1">category</data>
      <data key="d2">snapshot_end is a method that takes a snapshot of the end state after the graph run, capturing the final results.&lt;SEP&gt;snapshot_end is an abstract method designed to capture the final state of a graph upon its completion, adding the end state to persistence.&lt;SEP&gt;snapshot_end is an abstract method designed to record the final state of a graph when the graph has completed its execution, creating an EndSnapshot.</data>
      <data key="d3">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="load_next">
      <data key="d0">load_next</data>
      <data key="d1">event</data>
      <data key="d2">load_next is a method that attempts to load the next available node snapshot that has not yet been processed.&lt;SEP&gt;load_next is an abstract method for retrieving the next node snapshot with a specific status to continue graph execution.&lt;SEP&gt;load_next is an asynchronous method that retrieves the next node snapshot with status 'created' and sets its status to 'pending'.</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="load_all">
      <data key="d0">load_all</data>
      <data key="d1">event</data>
      <data key="d2">load_all is a method that retrieves all snapshots recorded in the history.&lt;SEP&gt;load_all is an abstract method meant for loading all historical snapshots of a graph from persistence for analysis or review.&lt;SEP&gt;load_all is an asynchronous method that loads the entire history of snapshots from persistence.</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeSnapshot.status">
      <data key="d0">NodeSnapshot.status</data>
      <data key="d1">category</data>
      <data key="d2">NodeSnapshot.status indicates the current state of a node within the graph, such as 'running', 'success', or 'error', which are crucial for tracking the execution lifecycle.&lt;SEP&gt;NodeSnapshot.status refers to the current status of a node snapshot which indicates whether it is 'created', 'pending', 'running', etc.</data>
      <data key="d3">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GraphNodeRunningError">
      <data key="d0">GraphNodeRunningError</data>
      <data key="d1">category</data>
      <data key="d2">GraphNodeRunningError is an error raised when a node is not in the correct state for running.&lt;SEP&gt;GraphNodeRunningError is an error raised when an attempt is made to run a node that is already in progress, ensuring proper management of node states.</data>
      <data key="d3">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="LookupError">
      <data key="d0">LookupError</data>
      <data key="d1">category</data>
      <data key="d2">LookupError is an error raised when a requested snapshot ID cannot be found in the persistence storage, indicating a possible integrity issue in state management.&lt;SEP&gt;LookupError is an error raised when a snapshot ID cannot be found in persistence.</data>
      <data key="d3">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="set_graph_types">
      <data key="d0">set_graph_types</data>
      <data key="d1">event</data>
      <data key="d2">set_graph_types is a method that sets the types of state and run end from a graph.</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="should_set_types">
      <data key="d0">should_set_types</data>
      <data key="d1">event</data>
      <data key="d2">should_set_types is a method that checks if types should be set for snapshots based on the configuration.&lt;SEP&gt;should_set_types is a method that determines whether types need to be set based on implementation logic.</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="set_types">
      <data key="d0">set_types</data>
      <data key="d1">event</data>
      <data key="d2">set_types is a method defined to establish the types for the state and run end within the pydantic_graph framework, facilitating type adaptation.&lt;SEP&gt;set_types is a method that sets the type for state and run end attributes to guide the management of snapshots.&lt;SEP&gt;set_types is a method that sets the types of state and run end, allowing for serialization and deserialization of snapshots.</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeSnapshot.start_ts">
      <data key="d0">NodeSnapshot.start_ts</data>
      <data key="d1">category</data>
      <data key="d2">NodeSnapshot.start_ts denotes the timestamp when the execution of a node is initiated, marking the start of the operation.</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeSnapshot.duration">
      <data key="d0">NodeSnapshot.duration</data>
      <data key="d1">category</data>
      <data key="d2">NodeSnapshot.duration represents the time taken for a node's execution to complete, indicating performance or processing time.</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="build_snapshot_list_type_adapter">
      <data key="d0">build_snapshot_list_type_adapter</data>
      <data key="d1">event</data>
      <data key="d2">build_snapshot_list_type_adapter is a function that creates a type adapter for a list of snapshots, relevant for state management in the pydantic_graph framework.</data>
      <data key="d3">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Snapshot[StateT, RunEndT]">
      <data key="d0">Snapshot[StateT, RunEndT]</data>
      <data key="d1">category</data>
      <data key="d2">Snapshot[StateT, RunEndT] is a data structure that encapsulates both state and run end data, allowing for effective state restoration.</data>
      <data key="d3">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic.TypeAdapter">
      <data key="d0">pydantic.TypeAdapter</data>
      <data key="d1">organization</data>
      <data key="d2">pydantic.TypeAdapter is a feature of the Pydantic library that facilitates the validation and serialization of data types.&lt;SEP&gt;pydantic.TypeAdapter is an organization or utility that can adapt types used within snapshots for validation and manipulation in the history management.&lt;SEP&gt;pydantic.TypeAdapter provides a way to serialize and deserialize data types, supporting the type-safe manipulation of data in Python applications.</data>
      <data key="d3">chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-ad07f2b02c5c5d74bc450b7733d49434&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Graph Run">
      <data key="d0">Graph Run</data>
      <data key="d1">event</data>
      <data key="d2">A Graph Run refers to the process of executing tasks within a graph, during which various snapshots can be taken.</data>
      <data key="d3">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="history">
      <data key="d0">history</data>
      <data key="d1">category</data>
      <data key="d2">history is a list that stores snapshots taken during the graph run, effectively creating a historical record of the state.</data>
      <data key="d3">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="dump_json">
      <data key="d0">dump_json</data>
      <data key="d1">event</data>
      <data key="d2">dump_json is a method that serializes the snapshot history to JSON format for storage or transmission.</data>
      <data key="d3">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="load_json">
      <data key="d0">load_json</data>
      <data key="d1">event</data>
      <data key="d2">load_json is a method that loads snapshots from a JSON input, restoring the history of the graph run.</data>
      <data key="d3">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Self._snapshots_type_adapter">
      <data key="d0">Self._snapshots_type_adapter</data>
      <data key="d1">category</data>
      <data key="d2">Self._snapshots_type_adapter refers to a type adapter in the context of managing types for snapshots in the FileStatePersistence class.</data>
      <data key="d3">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeSnapshot.state">
      <data key="d0">NodeSnapshot.state</data>
      <data key="d1">event</data>
      <data key="d2">NodeSnapshot.state is the attribute representing the current state of the node captured in a snapshot.</data>
      <data key="d3">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PydanticGraph">
      <data key="d0">PydanticGraph</data>
      <data key="d1">organization</data>
      <data key="d2">PydanticGraph provides the framework for managing state persistence, especially in the form of snapshots stored in files.&lt;SEP&gt;PydanticGraph refers to the broader context in which the NodeSnapshot and related classes are used to persist graph states.</data>
      <data key="d3">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="secrets">
      <data key="d0">secrets</data>
      <data key="d1">organization</data>
      <data key="d2">secrets is a library used for generating secure tokens, such as those used for locking files during persistence operations.</data>
      <data key="d3">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="timeout">
      <data key="d0">timeout</data>
      <data key="d1">category</data>
      <data key="d2">Timeout is a parameter that defines how long to wait for certain operations, particularly in locking mechanisms and asynchronous operations.</data>
      <data key="d3">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="graph_utils">
      <data key="d0">graph_utils</data>
      <data key="d1">organization</data>
      <data key="d2">graph_utils is a utility module that provides helper functions for graph-related operations, such as running persistence tasks.</data>
      <data key="d3">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="chat_app.py">
      <data key="d0">chat_app.py</data>
      <data key="d1">event</data>
      <data key="d2">chat_app.py is a script showcasing a simple chat application that leverages the FastAPI framework to manage chat history and streaming responses.&lt;SEP&gt;chat_app.py is a script that runs a simple chat application using FastAPI, demonstrating message history and streaming responses.</data>
      <data key="d3">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="customer_balance">
      <data key="d0">customer_balance</data>
      <data key="d1">event</data>
      <data key="d2">customer_balance refers to the query made by John regarding his current account balance, interacting with the support agent.</data>
      <data key="d3">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="support_advice">
      <data key="d0">support_advice</data>
      <data key="d1">category</data>
      <data key="d2">support_advice encapsulates the guidance provided to customers by the support agent based on their queries.</data>
      <data key="d3">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Database">
      <data key="d0">Database</data>
      <data key="d1">organization</data>
      <data key="d2">Database is a class representing a rudimentary database interface to store chat messages using SQLite.&lt;SEP&gt;Database is a class that represents a rudimentary database that stores chat messages using SQLite.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="fastapi">
      <data key="d0">fastapi</data>
      <data key="d1">organization</data>
      <data key="d2">fastapi is a modern web framework for building APIs with Python 3.6+ based on standard Python type hints.&lt;SEP&gt;fastapi is a modern, fast (high-performance) web framework for building APIs with Python 3.6+ based on standard Python type hints.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="chat_app.html">
      <data key="d0">chat_app.html</data>
      <data key="d1">event</data>
      <data key="d2">chat_app.html is a file serving as the front-end user interface for interacting with the chat application.&lt;SEP&gt;chat_app.html is an HTML file that serves as the front-end interface for the chat application.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="chat_app.ts">
      <data key="d0">chat_app.ts</data>
      <data key="d1">event</data>
      <data key="d2">chat_app.ts is a TypeScript file containing the client-side application logic for the chat application.&lt;SEP&gt;chat_app.ts is a TypeScript file that contains the source code for the chat application, compiled in the browser.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="lifespan">
      <data key="d0">lifespan</data>
      <data key="d1">category</data>
      <data key="d2">lifespan is a context manager that manages the application's lifecycle and database connection within the fastapi framework.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Request">
      <data key="d0">Request</data>
      <data key="d1">category</data>
      <data key="d2">Request is an object used in fastapi to handle HTTP requests and perform dependency injection.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FileResponse">
      <data key="d0">FileResponse</data>
      <data key="d1">category</data>
      <data key="d2">FileResponse is a type of response returned by fastapi to serve files to the client directly.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Annotated">
      <data key="d0">Annotated</data>
      <data key="d1">category</data>
      <data key="d2">Annotated is a utility in Python to add metadata to function arguments, commonly used in dependency injection.</data>
      <data key="d3">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Chat App">
      <data key="d0">Chat App</data>
      <data key="d1">organization</data>
      <data key="d2">The Chat App is an interactive web application that allows users to converse with an AI, facilitating communication and information exchange.</data>
      <data key="d3">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HTML Page">
      <data key="d0">HTML Page</data>
      <data key="d1">event</data>
      <data key="d2">The HTML Page represents the front end of the Chat App, detailing the user interface and features available for user interaction.</data>
      <data key="d3">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="TypeScript">
      <data key="d0">TypeScript</data>
      <data key="d1">category</data>
      <data key="d2">TypeScript is a programming language that is utilized within the Chat App for handling messages and enhancing functionality on the frontend.</data>
      <data key="d3">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sqlite3">
      <data key="d0">sqlite3</data>
      <data key="d1">organization</data>
      <data key="d2">sqlite3 is a lightweight database engine used for storing and managing message data within the Chat App.</data>
      <data key="d3">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="asyncify">
      <data key="d0">asyncify</data>
      <data key="d1">category</data>
      <data key="d2">Asyncify is a method utilized within the Chat App to handle asynchronous operations, facilitating efficient execution of database commands.</data>
      <data key="d3">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="uvicorn">
      <data key="d0">uvicorn</data>
      <data key="d1">organization</data>
      <data key="d2">Uvicorn is a lightning-fast ASGI server that runs the Chat App, allowing for asynchronous web serving capabilities.</data>
      <data key="d3">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HTML Structure">
      <data key="d0">HTML Structure</data>
      <data key="d1">category</data>
      <data key="d2">HTML Structure pertains to the layout and organization of elements within the chat application, designed for user interaction.</data>
      <data key="d3">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelMessagesTypeAdapter">
      <data key="d0">ModelMessagesTypeAdapter</data>
      <data key="d1">organization</data>
      <data key="d2">ModelMessagesTypeAdapter is an interface or utility that validates and adapts message formats for consistency in the Chat App.</data>
      <data key="d3">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="conversation">
      <data key="d0">conversation</data>
      <data key="d1">event</data>
      <data key="d2">The conversation event refers to the interactions taking place in a digital messaging environment, showcasing a user interface for messaging through an application.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Search Agent">
      <data key="d0">Search Agent</data>
      <data key="d1">organization</data>
      <data key="d2">Search Agent is responsible for initiating the flight search process based on user input and preferences.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Extraction Agent">
      <data key="d0">Extraction Agent</data>
      <data key="d1">organization</data>
      <data key="d2">Extraction Agent works in conjunction with the Search Agent to extract relevant flight information based on the user's requirements.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Human Confirm">
      <data key="d0">Human Confirm</data>
      <data key="d1">event</data>
      <data key="d2">Human Confirm is an event where user confirmation is required before moving forward with flight booking decisions.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Find Seat Function">
      <data key="d0">Find Seat Function</data>
      <data key="d1">function</data>
      <data key="d2">Find Seat Function enables users to select specific seating preferences during the flight booking process.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Human Seat Choice">
      <data key="d0">Human Seat Choice</data>
      <data key="d1">event</data>
      <data key="d2">Human Seat Choice refers to the interaction where users make their final decision about seat selection on a flight.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Find Seat Agent">
      <data key="d0">Find Seat Agent</data>
      <data key="d1">organization</data>
      <data key="d2">Find Seat Agent assists in finding suitable seating options for users based on their choices.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Buy Flights">
      <data key="d0">Buy Flights</data>
      <data key="d1">event</data>
      <data key="d2">Buy Flights is the process that completes the transaction for booking selected flights, concluding the booking workflow.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SUCCESS">
      <data key="d0">SUCCESS</data>
      <data key="d1">category</data>
      <data key="d2">SUCCESS denotes the final outcome indicating the successful completion of the flight booking process.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FAILED">
      <data key="d0">FAILED</data>
      <data key="d1">category</data>
      <data key="d2">FAILED signifies an unsuccessful attempt in completing the flight booking process, indicating issues that occurred during the transaction.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="User Input">
      <data key="d0">User Input</data>
      <data key="d1">event</data>
      <data key="d2">User Input refers to the data provided by the user to initiate the flight search, including preferences and requirements.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight Options">
      <data key="d0">Flight Options</data>
      <data key="d1">category</data>
      <data key="d2">Flight Options represent the available flights presented to the user after a search is conducted.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Transaction Process">
      <data key="d0">Transaction Process</data>
      <data key="d1">event</data>
      <data key="d2">Transaction Process encompasses all steps from flight selection to final payment for booking a flight.</data>
      <data key="d3">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="San Francisco International Airport">
      <data key="d0">San Francisco International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">San Francisco International Airport (SFO) is a major airport located in San Francisco, California, serving as a hub for both domestic and international flights.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Ted Stevens Anchorage International Airport">
      <data key="d0">Ted Stevens Anchorage International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Ted Stevens Anchorage International Airport (ANC) is located in Anchorage, Alaska, and serves as a key gateway for flights to and from Alaska.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Fairbanks International Airport">
      <data key="d0">Fairbanks International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Fairbanks International Airport (FAI) is an airport located in Fairbanks, Alaska, providing access to the interior of Alaska.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Juneau International Airport">
      <data key="d0">Juneau International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Juneau International Airport (JNU) serves Juneau, the capital of Alaska, and provides essential access to the region.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Chicago O'Hare International Airport">
      <data key="d0">Chicago O'Hare International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Chicago O'Hare International Airport (ORD) is one of the busiest airports in the United States located in Chicago, Illinois.&lt;SEP&gt;Chicago O'Hare International Airport (ORD) is one of the busiest airports in the United States, located in Chicago, Illinois.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Miami International Airport">
      <data key="d0">Miami International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Miami International Airport (MIA) is an international airport situated in Miami, Florida, pivotal for intercontinental travel.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Boston Logan International Airport">
      <data key="d0">Boston Logan International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Boston Logan International Airport (BOS) is the primary airport serving Boston, Massachusetts, and one of New England's major gateways.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dallas/Fort Worth International Airport">
      <data key="d0">Dallas/Fort Worth International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Dallas/Fort Worth International Airport (DFW) is a major airport located in Texas, serving as a hub for both domestic and international flights.&lt;SEP&gt;Dallas/Fort Worth International Airport (DFW) is a major airport located in Texas, serving as a hub for domestic and international flights.&lt;SEP&gt;Dallas/Fort Worth International Airport (DFW) is one of the largest and busiest airports in the United States, serving the Dallas-Fort Worth metroplex.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51&lt;SEP&gt;chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Denver International Airport">
      <data key="d0">Denver International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Denver International Airport (DEN) is the main airport serving Denver, Colorado, and is known for its vast area and modern facilities.&lt;SEP&gt;Denver International Airport (DEN) is the primary airport serving Denver, Colorado, known for its large size and significant traffic.&lt;SEP&gt;Denver International Airport (DEN) is the primary airport serving Denver, Colorado, known for its large traffic volume and numerous flight options.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51&lt;SEP&gt;chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Hartsfield-Jackson Atlanta International Airport">
      <data key="d0">Hartsfield-Jackson Atlanta International Airport</data>
      <data key="d1">geo</data>
      <data key="d2">Hartsfield-Jackson Atlanta International Airport (ATL) is located in Atlanta, Georgia, and is recognized as one of the busiest airports in the world.&lt;SEP&gt;Hartsfield-Jackson Atlanta International Airport (ATL) is one of the busiest airports in the world, located in Atlanta, Georgia, famous for a high volume of passenger traffic.&lt;SEP&gt;Hartsfield-Jackson Atlanta International Airport (ATL) is one of the busiest airports in the world, located in Atlanta, Georgia.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51&lt;SEP&gt;chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="George Bush Intercontinental Airport">
      <data key="d0">George Bush Intercontinental Airport</data>
      <data key="d1">geo</data>
      <data key="d2">George Bush Intercontinental Airport (IAH) is a major international airport in Houston, Texas, serving as a hub for domestic and international travel.&lt;SEP&gt;George Bush Intercontinental Airport (IAH) is a major international airport located in Houston, Texas, offering numerous domestic and international flights.&lt;SEP&gt;George Bush Intercontinental Airport (IAH) is an airport in Houston, Texas, serving as an important hub for international and domestic flights.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51&lt;SEP&gt;chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight SFO-AK123">
      <data key="d0">Flight SFO-AK123</data>
      <data key="d1">event</data>
      <data key="d2">Flight SFO-AK123 is a specific flight from San Francisco International Airport to Ted Stevens Anchorage International Airport scheduled for January 10, 2025.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight SFO-AK456">
      <data key="d0">Flight SFO-AK456</data>
      <data key="d1">event</data>
      <data key="d2">Flight SFO-AK456 is a flight departing from San Francisco International Airport to Fairbanks International Airport on January 10, 2025.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight SFO-AK789">
      <data key="d0">Flight SFO-AK789</data>
      <data key="d1">event</data>
      <data key="d2">Flight SFO-AK789 is a flight that travels from San Francisco International Airport to Juneau International Airport on January 20, 2025.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight NYC-LA101">
      <data key="d0">Flight NYC-LA101</data>
      <data key="d1">event</data>
      <data key="d2">Flight NYC-LA101 is a flight departing from San Francisco International Airport to Ted Stevens Anchorage International Airport scheduled for January 10, 2025.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight CHI-MIA202">
      <data key="d0">Flight CHI-MIA202</data>
      <data key="d1">event</data>
      <data key="d2">Flight CHI-MIA202 is a flight from Chicago O'Hare International Airport to Miami International Airport scheduled for January 12, 2025.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight BOS-SEA303">
      <data key="d0">Flight BOS-SEA303</data>
      <data key="d1">event</data>
      <data key="d2">Flight BOS-SEA303 is a flight running from Boston Logan International Airport to Ted Stevens Anchorage International Airport on January 12, 2025.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight DFW-DEN404">
      <data key="d0">Flight DFW-DEN404</data>
      <data key="d1">event</data>
      <data key="d2">Flight DFW-DEN404 is a flight from Dallas/Fort Worth International Airport to Denver International Airport scheduled for January 10, 2025.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight ATL-HOU505">
      <data key="d0">Flight ATL-HOU505</data>
      <data key="d1">event</data>
      <data key="d2">Flight ATL-HOU505 is a flight departing from Hartsfield-Jackson Atlanta International Airport to George Bush Intercontinental Airport on January 10, 2025.&lt;SEP&gt;Flight ATL-HOU505 is a scheduled flight from Hartsfield-Jackson Atlanta International Airport to George Bush Intercontinental Airport, taking place on January 10, 2025.&lt;SEP&gt;Flight ATL-HOU505 is a specific flight route from Hartsfield-Jackson Atlanta International Airport to George Bush Intercontinental Airport, scheduled for January 10, 2025.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51&lt;SEP&gt;chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Flight">
      <data key="d0">Flight</data>
      <data key="d1">category</data>
      <data key="d2">A flight refers to the operation of a specific aircraft from one airport to another, at a given time and date, as detailed in the provided flight schedule.</data>
      <data key="d3">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="January 10, 2025">
      <data key="d0">January 10, 2025</data>
      <data key="d1">event</data>
      <data key="d2">January 10, 2025, is the scheduled date for flights and travel events mentioned in this text.&lt;SEP&gt;January 10, 2025, is the specific date on which various flights, including flight ATL-HOU505, are scheduled to occur.</data>
      <data key="d3">chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai">
      <data key="d0">openai</data>
      <data key="d1">organization</data>
      <data key="d2">OpenAI is an artificial intelligence research organization that develops and provides AI models, including the GPT series used in this context.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GPT-4o">
      <data key="d0">GPT-4o</data>
      <data key="d1">category</data>
      <data key="d2">GPT-4o refers to a variant of the GPT-4 language model developed by OpenAI, tailored for specific tasks and applications.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Dataclass">
      <data key="d0">Dataclass</data>
      <data key="d1">category</data>
      <data key="d2">Dataclass is a decorator in Python that automatically generates special methods for classes, such as __init__() and __repr__(), simplifying class definitions.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EvaluateAgent">
      <data key="d0">EvaluateAgent</data>
      <data key="d1">organization</data>
      <data key="d2">EvaluateAgent is a component in the system that processes user responses and checks for correctness against the expected answers.</data>
      <data key="d3">chunk-7f168f5f58a160ed8d5f9ed516fb7e89</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Castigate">
      <data key="d0">Castigate</data>
      <data key="d1">category</data>
      <data key="d2">Castigate is the act of reprimanding or criticizing someone sharply, often implying correction or punishment.</data>
      <data key="d3">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Congratulate">
      <data key="d0">Congratulate</data>
      <data key="d1">category</data>
      <data key="d2">Congratulate is the act of expressing praise for an achievement or success, typically to encourage further accomplishments.</data>
      <data key="d3">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Success">
      <data key="d0">Success</data>
      <data key="d1">category</data>
      <data key="d2">Success is the achievement of desired aims or goals, particularly in a positive outcome or favorable result.</data>
      <data key="d3">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DocsSection">
      <data key="d0">DocsSection</data>
      <data key="d1">category</data>
      <data key="d2">DocsSection is a category that represents sections of documentation which includes various attributes such as path, title, and content.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="database_connect">
      <data key="d0">database_connect</data>
      <data key="d1">function</data>
      <data key="d2">database_connect is a function that establishes a connection to a PostgreSQL database and includes functionality for creating the database if it does not exist.&lt;SEP&gt;database_connect is an asynchronous context manager function used to establish and manage connections to a PostgreSQL database.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c&lt;SEP&gt;chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="build_search_db">
      <data key="d0">build_search_db</data>
      <data key="d1">function</data>
      <data key="d2">build_search_db is an asynchronous function designed to build a search database by fetching document sections and creating embeddings for them.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="insert_doc_section">
      <data key="d0">insert_doc_section</data>
      <data key="d1">function</data>
      <data key="d2">insert_doc_section is a function that manages the insertion of document sections into the database, creating their embeddings via OpenAI.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DOCS_JSON">
      <data key="d0">DOCS_JSON</data>
      <data key="d1">category</data>
      <data key="d2">DOCS_JSON is a JSON structure that appears to contain URLs for accessing documentation or related resources for the project.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sections">
      <data key="d0">sections</data>
      <data key="d1">category</data>
      <data key="d2">sections represent different parts of the document content that are processed for search and embedding functionalities.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="path">
      <data key="d0">path</data>
      <data key="d1">category</data>
      <data key="d2">path is an attribute used to indicate the location or identifier of a document section within the structure.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="embedding">
      <data key="d0">embedding</data>
      <data key="d1">category</data>
      <data key="d2">embedding refers to numerical representations created for segments of text, used in various AI applications, particularly in search aspects.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="DB_SCHEMA">
      <data key="d0">DB_SCHEMA</data>
      <data key="d1">category</data>
      <data key="d2">DB_SCHEMA outlines the structure of the database involving user-defined tables and fields for storing document section data.&lt;SEP&gt;DB_SCHEMA refers to the defined structure of a database, including its tables, types, and relationships, crucial for database operation.</data>
      <data key="d3">chunk-7ba9f90f4ef9c80fa2a116ad4984222c&lt;SEP&gt;chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Docker">
      <data key="d0">Docker</data>
      <data key="d1">organization</data>
      <data key="d2">Docker is a platform used for developing, shipping, and running applications inside containers, enabling easy deployment of applications like PostgreSQL.</data>
      <data key="d3">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SQL Generation Example">
      <data key="d0">SQL Generation Example</data>
      <data key="d1">event</data>
      <data key="d2">SQL Generation Example demonstrates how to use PydanticAI to generate SQL queries based on user input and validates these queries.</data>
      <data key="d3">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="asyncpg">
      <data key="d0">asyncpg</data>
      <data key="d1">organization</data>
      <data key="d2">asyncpg is a database interface library designed specifically for PostgreSQL and is used for executing SQL queries in an asynchronous manner.&lt;SEP&gt;asyncpg is a database interface library designed specifically for PostgreSQL and users of Python's asyncio module.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb&lt;SEP&gt;chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="System Prompt">
      <data key="d0">System Prompt</data>
      <data key="d1">event</data>
      <data key="d2">System Prompt is a dynamic instruction set provided to the model indicating how to handle inputs for generating SQL queries based on the database schema.</data>
      <data key="d3">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SQL Query">
      <data key="d0">SQL Query</data>
      <data key="d1">category</data>
      <data key="d2">SQL Query is a command used to interact with a database, allowing for data retrieval, manipulation, and management.</data>
      <data key="d3">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SQL">
      <data key="d0">SQL</data>
      <data key="d1">category</data>
      <data key="d2">SQL (Structured Query Language) is a standard language for managing and manipulating databases, widely used for querying and managing data.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Postgres">
      <data key="d0">Postgres</data>
      <data key="d1">organization</data>
      <data key="d2">Postgres (PostgreSQL) is an open-source relational database management system emphasizing extensibility and SQL compliance.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="EXPLAIN">
      <data key="d0">EXPLAIN</data>
      <data key="d1">event</data>
      <data key="d2">EXPLAIN is a SQL command used to display the execution plan of a query, providing insights into how the database will execute it.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="sql_query">
      <data key="d0">sql_query</data>
      <data key="d1">category</data>
      <data key="d2">SQL Query represents the command or statement written in SQL to perform operations on a database, such as data retrieval or modification.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="command_line_argument">
      <data key="d0">command_line_argument</data>
      <data key="d1">category</data>
      <data key="d2">Command line arguments are inputs passed to a script via the command line interface, allowing dynamic behavior in program execution.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="database_schema">
      <data key="d0">database_schema</data>
      <data key="d1">category</data>
      <data key="d2">Database schema is the structure that defines the organization of data, including tables, fields, relationships, and constraints.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="deprecation_warning">
      <data key="d0">deprecation_warning</data>
      <data key="d1">category</data>
      <data key="d2">Deprecation warning signifies that a certain feature or code is outdated and may be removed in future versions.</data>
      <data key="d3">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="streaming structured responses">
      <data key="d0">streaming structured responses</data>
      <data key="d1">category</data>
      <data key="d2">Streaming structured responses refer to the output generated by GPT-4 about whales, showcasing a dynamic presentation of data.</data>
      <data key="d3">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="rich">
      <data key="d0">rich</data>
      <data key="d1">organization</data>
      <data key="d2">Rich is a Python library that is used for displaying tables and text in a visually appealing way in the terminal.&lt;SEP&gt;Rich is a Python library used for displaying tables and text in a visually appealing way in the terminal, suitable for streaming outputs.</data>
      <data key="d3">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="whales">
      <data key="d0">whales</data>
      <data key="d1">category</data>
      <data key="d2">Whales are large marine mammals that are the central topic of information being streamed and displayed in the script.&lt;SEP&gt;Whales are large marine mammals that are the central topic of information being streamed, which includes species details and attributes.</data>
      <data key="d3">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ocean">
      <data key="d0">ocean</data>
      <data key="d1">geo</data>
      <data key="d2">Oceans are large bodies of salt water, relevant in the context of whale species information which may include habitats of whales.&lt;SEP&gt;Oceans are the large bodies of salt water where whales typically inhabit, relevant to their ecological context and species distribution.</data>
      <data key="d3">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Deps">
      <data key="d0">Deps</data>
      <data key="d1">category</data>
      <data key="d2">Deps is a class that holds dependencies for the weather agent, including API keys for weather and geo services.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="weather_api_key">
      <data key="d0">weather_api_key</data>
      <data key="d1">category</data>
      <data key="d2">weather_api_key is a variable that stores an API key necessary for accessing weather data services.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="geo_api_key">
      <data key="d0">geo_api_key</data>
      <data key="d1">category</data>
      <data key="d2">geo_api_key is a variable that holds an API key required for geographic data services.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Get Latitude and Longitude Tool">
      <data key="d0">Get Latitude and Longitude Tool</data>
      <data key="d1">event</data>
      <data key="d2">A tool designed to fetch geographical latitude and longitude coordinates based on a location description.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Get Weather Tool">
      <data key="d0">Get Weather Tool</data>
      <data key="d1">event</data>
      <data key="d2">A tool that retrieves current weather data based on latitude and longitude coordinates.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="logfire.configure">
      <data key="d0">logfire.configure</data>
      <data key="d1">event</data>
      <data key="d2">logfire.configure is a method used to set up logging configurations for an application, specifically to send logs to the Logfire service based on the presence of a token.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="weather_agent">
      <data key="d0">weather_agent</data>
      <data key="d1">organization</data>
      <data key="d2">weather_agent is an asynchronous agent that utilizes various tools to request and process weather-related information using API keys for weather data and geography.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_lat_lng">
      <data key="d0">get_lat_lng</data>
      <data key="d1">event</data>
      <data key="d2">get_lat_lng is a tool defined within the weather_agent that retrieves latitude and longitude coordinates based on a given location description.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="get_weather">
      <data key="d0">get_weather</data>
      <data key="d1">event</data>
      <data key="d2">get_weather is a tool within the weather_agent that fetches current weather conditions based on latitude and longitude values.</data>
      <data key="d3">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Gradio">
      <data key="d0">Gradio</data>
      <data key="d1">organization</data>
      <data key="d2">Gradio is a framework for building interactive web applications in Python, providing built-in components for chat and agent support.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Weather Assistant">
      <data key="d0">Weather Assistant</data>
      <data key="d1">event</data>
      <data key="d2">The Weather Assistant is a chat application implemented using Gradio, designed to answer user inquiries about the weather.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="New York City">
      <data key="d0">New York City</data>
      <data key="d1">geo</data>
      <data key="d2">New York City is a major city in the United States known for its diverse weather patterns, mentioned in a user prompt for weather inquiries.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Miami">
      <data key="d0">Miami</data>
      <data key="d1">geo</data>
      <data key="d2">Miami is a coastal city in Florida known for its tropical climate, also mentioned as a potential user inquiry for weather information.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Geocoding API">
      <data key="d0">Geocoding API</data>
      <data key="d1">category</data>
      <data key="d2">The Geocoding API is a tool integrated into the Weather Assistant to enable location-based inquiries.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Weather API">
      <data key="d0">Weather API</data>
      <data key="d1">category</data>
      <data key="d2">The Weather API is a service utilized by the Weather Assistant to provide real-time weather data based on user prompts.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai_examples/weather_agent_gradio.py">
      <data key="d0">pydantic_ai_examples/weather_agent_gradio.py</data>
      <data key="d1">category</data>
      <data key="d2">The file weather_agent_gradio.py contains the code necessary to run a weather agent within the Gradio framework, showcasing advanced functionalities.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="weather agent">
      <data key="d0">weather agent</data>
      <data key="d1">event</data>
      <data key="d2">The weather agent is a specific implementation within the Gradio app that answers user inquiries related to weather.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="WEATHER_API_KEY">
      <data key="d0">WEATHER_API_KEY</data>
      <data key="d1">category</data>
      <data key="d2">WEATHER_API_KEY is an environment variable used to store the API key for accessing weather data through the Weather API.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="GEO_API_KEY">
      <data key="d0">GEO_API_KEY</data>
      <data key="d1">category</data>
      <data key="d2">GEO_API_KEY is an environment variable that stores the key for accessing the Geocoding API, which aids in mapping location data.</data>
      <data key="d3">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Model Context Protocol (MCP)">
      <data key="d0">Model Context Protocol (MCP)</data>
      <data key="d1">category</data>
      <data key="d2">The Model Context Protocol (MCP) is a standardized protocol designed for AI applications to interact seamlessly with external tools and services, facilitating better integration across various platforms.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Deno">
      <data key="d0">Deno</data>
      <data key="d1">organization</data>
      <data key="d2">Deno is a runtime for JavaScript and TypeScript that is used to execute scripts in a secure environment, facilitating the execution of Python code in this context.&lt;SEP&gt;Deno is a runtime for JavaScript and TypeScript, often used to execute code securely outside of web browsers, and is utilized in running MCP server examples.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50&lt;SEP&gt;chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SSE Client">
      <data key="d0">SSE Client</data>
      <data key="d1">category</data>
      <data key="d2">SSE (Server-Sent Events) Client allows asynchronous connections to a server for real-time updates, exemplified in the context of the MCP server implementation.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="chatbot">
      <data key="d0">chatbot</data>
      <data key="d1">organization</data>
      <data key="d2">The chatbot is an AI-driven conversational agent designed to interact with users, providing responses and assistance based on predefined prompts and learned data.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="prompt">
      <data key="d0">prompt</data>
      <data key="d1">category</data>
      <data key="d2">A prompt is an input or instruction provided to the chatbot, which guides its responses and behavior during interactions.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="past_messages">
      <data key="d0">past_messages</data>
      <data key="d1">category</data>
      <data key="d2">Past messages refer to the history of interactions and exchanges between the user and the chatbot, which are utilized for context in ongoing conversations.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="if __name__ == '__main__':">
      <data key="d0">if __name__ == '__main__':</data>
      <data key="d1">event</data>
      <data key="d2">A coding construct used to denote the entry point of a Python program, executing the demo.launch() function when the script is run directly.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="demo.launch()">
      <data key="d0">demo.launch()</data>
      <data key="d1">event</data>
      <data key="d2">The demo.launch() function is an action that initiates the chatbot's interface or application, enabling user interaction.</data>
      <data key="d3">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="January 1, 2000">
      <data key="d0">January 1, 2000</data>
      <data key="d1">event</data>
      <data key="d2">January 1, 2000, marks the start date for calculating the number of days until March 18, 2025.</data>
      <data key="d3">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="March 18, 2025">
      <data key="d0">March 18, 2025</data>
      <data key="d1">event</data>
      <data key="d2">March 18, 2025, is the end date for the calculation of the number of days since January 1, 2000.</data>
      <data key="d3">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="9,208 days">
      <data key="d0">9,208 days</data>
      <data key="d1">category</data>
      <data key="d2">9,208 days is the total duration between January 1, 2000, and March 18, 2025.</data>
      <data key="d3">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Client Session">
      <data key="d0">Client Session</data>
      <data key="d1">event</data>
      <data key="d2">A Client Session is a temporary connection established between the client and the MCP Server for executing commands.</data>
      <data key="d3">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Python Code">
      <data key="d0">Python Code</data>
      <data key="d1">category</data>
      <data key="d2">Python Code refers to the programming language scripts that can be executed in the MCP framework to perform various tasks and calculations.</data>
      <data key="d3">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Connection">
      <data key="d0">Connection</data>
      <data key="d1">category</data>
      <data key="d2">Connection refers to the establishment of communication between the client and the server, allowing data exchange for executing commands.</data>
      <data key="d3">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MCP Run Python">
      <data key="d0">MCP Run Python</data>
      <data key="d1">event</data>
      <data key="d2">MCP Run Python refers to a process that enables running Python code in a managed environment as described in the provided documentation.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="numpy">
      <data key="d0">numpy</data>
      <data key="d1">category</data>
      <data key="d2">NumPy is a core library for scientific computing in Python, essential for handling arrays and mathematical functions.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Python Standard Library">
      <data key="d0">Python Standard Library</data>
      <data key="d1">category</data>
      <data key="d2">The Python Standard Library is a collection of modules and packages that are included with Python for various programming tasks.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="MCP Client">
      <data key="d0">MCP Client</data>
      <data key="d1">category</data>
      <data key="d2">MCP Client refers to the Model Context Protocol client that can interact with servers to execute Python code.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="inline_script_metadata.py">
      <data key="d0">inline_script_metadata.py</data>
      <data key="d1">event</data>
      <data key="d2">inline_script_metadata.py is an example script that demonstrates defining dependencies and running Python code using the MCP framework.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="SSE MCP Transport">
      <data key="d0">SSE MCP Transport</data>
      <data key="d1">category</data>
      <data key="d2">SSE MCP Transport refers to a specific method of communication used to run the server using Server-Sent Events for connections.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="HTTP Server">
      <data key="d0">HTTP Server</data>
      <data key="d1">category</data>
      <data key="d2">An HTTP Server is a software component that serves web content using the Hypertext Transfer Protocol, crucial for running servers locally or remotely.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Client Documentation">
      <data key="d0">Client Documentation</data>
      <data key="d1">category</data>
      <data key="d2">Client Documentation provides guidelines and examples for users to understand how to effectively use client libraries to interact with the server.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Python MCP Client">
      <data key="d0">Python MCP Client</data>
      <data key="d1">organization</data>
      <data key="d2">Python MCP Client is a library that allows developers to communicate with the MCP server and run Python code snippets effectively.&lt;SEP&gt;The Python MCP Client is a library used to communicate with MCP Servers, enabling functionalities like executing tools and processes.&lt;SEP&gt;The Python MCP Client is a set of tools and libraries designed to connect and communicate with MCP Servers, facilitating interaction with various machine learning models.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0&lt;SEP&gt;chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="modelcontextprotocol">
      <data key="d0">modelcontextprotocol</data>
      <data key="d1">organization</data>
      <data key="d2">Model Context Protocol is an initiative aimed at creating a flexible protocol for managing context in Python executions.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mcp_run_python.py">
      <data key="d0">mcp_run_python.py</data>
      <data key="d1">event</data>
      <data key="d2">mcp_run_python.py is a script that demonstrates how to use the MCP client to run Python code via the server.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Standard Output">
      <data key="d0">Standard Output</data>
      <data key="d1">category</data>
      <data key="d2">Standard Output refers to the default output stream where a program sends its output messages, typically displayed on the screen.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Logging">
      <data key="d0">Logging</data>
      <data key="d1">category</data>
      <data key="d2">Logging is a feature that allows capturing of events during the execution of programs to track errors or informational messages.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Denos">
      <data key="d0">Denos</data>
      <data key="d1">category</data>
      <data key="d2">Deno is a runtime for JavaScript and TypeScript that is used in conjunction with MCP to enhance server-side Python execution.</data>
      <data key="d3">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="FastMCP">
      <data key="d0">FastMCP</data>
      <data key="d1">organization</data>
      <data key="d2">FastMCP is a server component designed to run PydanticAI, allowing for various functionalities within the MCP architecture.&lt;SEP&gt;FastMCP serves as the foundational server architecture that facilitates the deployment and execution of tasks related to machine learning applications.</data>
      <data key="d3">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mcp_server.py">
      <data key="d0">mcp_server.py</data>
      <data key="d1">category</data>
      <data key="d2">mcp_server.py is a Python script that hosts the MCP server, integrating PydanticAI for generating responses.&lt;SEP&gt;mcp_server.py is a script that implements an MCP server, allowing it to host various tasks such as generating text through predefined tools or models.</data>
      <data key="d3">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="mcp_client.py">
      <data key="d0">mcp_client.py</data>
      <data key="d1">category</data>
      <data key="d2">mcp_client.py is a Python script designed to interact with the MCP server, showcasing the capabilities of the server.&lt;SEP&gt;mcp_client.py is a script that demonstrates how to use the MCP Client to connect to and utilize the functionalities of an MCP Server.</data>
      <data key="d3">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Poem Generator">
      <data key="d0">Poem Generator</data>
      <data key="d1">event</data>
      <data key="d2">The Poem Generator is an event or function within the MCP Server that allows users to request poems based on specified themes.</data>
      <data key="d3">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Agent">
      <data key="d0">Agent</data>
      <data key="d1">organization</data>
      <data key="d2">The Agent in the context of Pydantic AI is a comprehensive class designed to facilitate the creation, management, and execution of various tools and tasks in a computational environment. Serving as a core component of the Pydantic AI framework, the Agent manages interactions with different AI models, including high-performing models like GPT, Anthropic, and Gemini. This class streamlines the process of executing user-defined commands, handling input prompts, and processing dependencies while maintaining a history of interactions.

The Agent is equipped with functionalities that allow for both synchronous and asynchronous processing, making it capable of interacting with users in real-time and managing responses effectively. It acts as an interface that facilitates communication between users and AI systems, interacting with MCP servers to send and receive messages, thus embedding it into a broader system for automated responses and task execution.

Additionally, the Agent serves as an abstraction that encapsulates various functionalities, enabling developers to create intelligent agents capable of handling specific tasks with defined parameters and handling tools or APIs for varied applications, such as providing weather updates or generating creative responses based on user-provided input.

Overall, the Agent represents a versatile software component that embodies the overarching functionality necessary for managing agent behaviors, executing defined strategies, and orchestrating tool functions within the Pydantic AI environment.</data>
      <data key="d3">chunk-f2a50f99aa96dce25696156cf5396887&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-5b7a596ee9422b565de815722b0e31dc&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60&lt;SEP&gt;chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-ca69f7760206a502c8e51fa924646c33&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-16ca6f7569783f5691e1fd7ca9daf7c0&lt;SEP&gt;chunk-570bd1954ac1dec6ff5e11d27332192d&lt;SEP&gt;chunk-acdd5d00db08de930d2f205385fbf543&lt;SEP&gt;chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-f05343baae3f62f1bed61aebb48d39ae&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018&lt;SEP&gt;chunk-a4e01bd25dcff46059903d23d9198862&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-459acdb5bfa20be2d698a80bc830b084&lt;SEP&gt;chunk-f375a3596539c3931dca74338cc79546&lt;SEP&gt;chunk-efc722ebd98256b20f6a17746e03016e&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8&lt;SEP&gt;chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-263f86d77c473effe9073f383e8bfb9e&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-a03d18658927c60177cdcee467ce42b8&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-729cd2b3c578d9a846adee8336cc05fd&lt;SEP&gt;chunk-990ca6b93e3572bb93527fb4f06bad10&lt;SEP&gt;chunk-9aa9b9f3160592a6de9590d495a31f97&lt;SEP&gt;chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="End">
      <data key="d0">End</data>
      <data key="d1">event</data>
      <data key="d2">End is a specialized node type within the graph framework, specifically used to indicate the termination point of a graph's execution. It defines a terminal node that marks the conclusion of processing, signifying that no further nodes will be executed after this point. End functions as a critical component in both agent workflows and graph runs, where it serves to signal the end of operations, encapsulating the final outputs and results to be returned to the user.

Within the context of agent interactions, End reflects the completion of various processes, including the question-answering experience, delivering final outcomes based on user input. It captures the final state of the graph run, ensuring that the results of computations are made available upon reaching this node. Additionally, End is recognized as a marker for the termination of operations, emphasizing its role in the lifecycle of tasks within programming environments.

Overall, End encapsulates the essential aspect of process conclusion in graph executions, providing a coherent ending to the operational flow while returning the final data from the computation conducted in the graph run.</data>
      <data key="d3">chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f&lt;SEP&gt;chunk-f05343baae3f62f1bed61aebb48d39ae&lt;SEP&gt;chunk-9a99cfa8ff8a41ea240361d13d4e41ec&lt;SEP&gt;chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-7852caa62e172f96d8bc0edb1b849a3f&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-365decc56ad5f314b2b86848e8a892ec&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339&lt;SEP&gt;chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-670369b8b58da5fb06501c822216b094&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="BaseNode">
      <data key="d0">BaseNode</data>
      <data key="d1">category</data>
      <data key="d2">BaseNode is a foundational class designed for creating nodes within various graph structures, particularly in Python applications. It encapsulates essential functionalities that are common across graph nodes, defining the structure and behavior necessary for effective node execution. As the base class from which other node types derive, BaseNode establishes a generic framework that includes methods for processing and state management.

Within the context of the Pydantic framework, BaseNode serves as a critical element, representing individual operations or calculations that can be executed during the runtime of a state machine or a computational graph. It requires an initial state and can have associated dependencies, allowing developers to build complex workflows and manage transitions effectively.

Furthermore, BaseNode is integral to the state management of graphs, particularly in applications like vending machines and asynchronous computation processes. It is versatile, allowing developers to specify parameters, business logic, and execution methods that cater to different graphical workflows. By serving as a foundational component, BaseNode facilitates the creation and execution of nodes that are interconnected, forming a comprehensive and functional graph structure within the given frameworks.</data>
      <data key="d3">chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-871f0637563e9955b756f367ef81e17e&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d&lt;SEP&gt;chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12&lt;SEP&gt;chunk-9a99cfa8ff8a41ea240361d13d4e41ec&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-365decc56ad5f314b2b86848e8a892ec&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339&lt;SEP&gt;chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-670369b8b58da5fb06501c822216b094&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="PydanticAI">
      <data key="d0">PydanticAI</data>
      <data key="d1">organization</data>
      <data key="d2">PydanticAI is a versatile Python framework and library designed to facilitate the development of applications and agents using Generative AI. It provides a comprehensive environment for managing machine learning models and enabling structured interactions with AI systems. As a data validation and settings management framework, PydanticAI assists developers in building robust and maintainable applications by employing type-safe dependency injection and data validation functionalities.

The framework enhances the development of AI agents by allowing developers to define dependencies in a structured manner, manage responses effectively, and interact with various AI service providers. It integrates seamlessly with tools such as the Model Context Protocol (MCP) and is compatible with platforms like Google Cloud Platform (GCP) and VertexAI, enabling efficient use of external tools and services.

PydanticAI is also available as a library through the Python Package Index (PyPI), highlighting its focus on schema validation through the use of Pydantic features, which emphasize type hints for defining data schemas. This library is tailored for structured data handling in asynchronous environments and offers tools for generating SQL queries based on user input, leveraging AI models. Moreover, it is designed to optimize agent performance and adaptability by providing a structure for managing requests and tracking usage metrics in applications that utilize large language model (LLM) APIs.

As an organization, PydanticAI develops tools and libraries for efficient data validation and processing in Python applications, emphasizing an emphasis on type validation to support programmers in building AI-driven solutions. Through its comprehensive offerings, PydanticAI serves as a critical resource for developers aiming to build advanced AI applications and agents.</data>
      <data key="d3">chunk-55b19c469f8836f1d1e39ae4cb918116&lt;SEP&gt;chunk-6b3f0a0a0fae5e6e6d165207998041f0&lt;SEP&gt;chunk-f2a50f99aa96dce25696156cf5396887&lt;SEP&gt;chunk-75b2d3dceba3b2912e53dc8b82dbacd8&lt;SEP&gt;chunk-fbac2cd26b16d89a2ad3c129160b997b&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60&lt;SEP&gt;chunk-871f0637563e9955b756f367ef81e17e&lt;SEP&gt;chunk-9ff315bedb1e055a20af27b9db87b652&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939&lt;SEP&gt;chunk-5f42fa22c7c2c65ec3a39c77ddb963a0&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf&lt;SEP&gt;chunk-b76bef668c33d18b6f44870e86c33a1b&lt;SEP&gt;chunk-459acdb5bfa20be2d698a80bc830b084&lt;SEP&gt;chunk-f375a3596539c3931dca74338cc79546&lt;SEP&gt;chunk-391c89bfc96eb1cb4879cf1391cd7e50&lt;SEP&gt;chunk-a9b9f74a239f46cb684aadb28a77cb76&lt;SEP&gt;chunk-adf88d3c03ef93c71ebadc158c0ef948&lt;SEP&gt;chunk-2eb1c494e4f675bfe12e4e3047f70efc&lt;SEP&gt;chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e&lt;SEP&gt;chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelResponse">
      <data key="d0">ModelResponse</data>
      <data key="d1">category</data>
      <data key="d2">ModelResponse is a comprehensive data structure that encapsulates the output generated by various AI models, including those from the Gemini API and the forecasting model, after processing user prompts or requests. It includes a diverse range of components, such as structured responses, messages, and metadata like model names and timestamps. This output serves as a crucial element in understanding the interactions between users and AI systems, reflecting the results of input messages and model computations.

As a defined category, ModelResponse represents the structured format of responses returned by AI models, providing insights and analyses based on user requests. It encompasses the entire output of the model, which includes not only the content generated but also critical details such as usage statistics and the model's invocation results. Essentially, ModelResponse acts as a container for all output generated by the model, detailing responses and their associated metadata, making it integral to the operations performed within AI-driven systems.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9&lt;SEP&gt;chunk-0517903d60beb732d23023e1a1755b2e&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-ba0f6d002d71ff318d304dea37c2feb5&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-2eb1c494e4f675bfe12e4e3047f70efc&lt;SEP&gt;chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339&lt;SEP&gt;chunk-c85826bcf2c124ee6da90aa381dfff25&lt;SEP&gt;chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-790ebf5be3b16b55c5c47a819e17bb54&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai">
      <data key="d0">pydantic_ai</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic AI is a comprehensive library and organization that provides a robust framework for data validation and settings management using Python type annotations and data classes. It specifically facilitates the use of AI models, including Anthropic models and Gemini models, and is particularly useful in AI-related projects. As a project, Pydantic AI utilizes the Pydantic library to manage data models efficiently within a flexible framework.

Pydantic AI is dedicated to aiding developers by offering tools that enhance the building of applications, focusing on type hints for robust application design. The library allows for the creation and handling of data models, providing functionalities that include data validation, agent configuration, and managing interactions with AI agents and models. It also incorporates features like instrumentation, context management, and tool registration, making it a valuable resource for developers seeking to implement AI in their applications.

Overall, Pydantic AI combines the capabilities of data validation and settings management with the implementation of AI, thereby positioning itself as an essential tool for developers looking to build efficient and effective applications in Python.</data>
      <data key="d3">chunk-0defe853a1fb0dadf514cce37cdbbd16&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc&lt;SEP&gt;chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-f05343baae3f62f1bed61aebb48d39ae&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018&lt;SEP&gt;chunk-a4e01bd25dcff46059903d23d9198862&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-aeb5e3495054b417710f8e52ebcb151a&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-21a3cb379899823f20a4957eba46c558&lt;SEP&gt;chunk-3fe1c986ef649646858753879674bde7&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8&lt;SEP&gt;chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a&lt;SEP&gt;chunk-283bc165fd3b54e2f1d7d98b00bc1b16&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolCallPart">
      <data key="d0">ToolCallPart</data>
      <data key="d1">category</data>
      <data key="d2">ToolCallPart is a comprehensive data structure integral to the processing of tool calls within an AI framework, specifically designed to handle messages that indicate interactions with various tools. It encapsulates essential information, including the name of the tool being called, the arguments passed for execution, and an identifier associated with the call. This structure plays a crucial role in organizing parts of messages related to tool activations, detailing the functionality required for executing specific functions dictated by user requests.

Additionally, ToolCallPart functions within the context of various applications, such as the Groq AI model and the weather agent, which manage calls to external tools like the Geocoding API. It serves as a structured response component that not only records the inputs associated with tool calls but also aids in delivering outputs that conform to validated schemas. In summary, ToolCallPart is fundamentally concerned with managing the intricacies of tool execution, providing clarity and structure to the data exchanged during these interactions within the AI system.</data>
      <data key="d3">chunk-1c5ccdde7a3769386d9598c66c9e6650&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-88a4268ed0561dee36cedfe0e8bce930&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-8ff58ba8cb6e25434138b24e79d59425&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-16a247913aead6b056519aa63f310789&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-b76bef668c33d18b6f44870e86c33a1b&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7&lt;SEP&gt;chunk-9a9bc262ebbbdd42a17a84adee4a7f9d&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="RunContext">
      <data key="d0">RunContext</data>
      <data key="d1">category</data>
      <data key="d2">RunContext is a class within the PydanticAI framework that plays a crucial role in managing the execution context of agents. It encapsulates important details such as dependencies, execution state, and other runtime information critical for the operation of tools and functions. 

As a context management class, RunContext provides access to various elements necessary for executing agent tasks, including model details, usage tracking, prompts, messages, and tool call identifiers. It allows for the efficient tracking of dependencies and operations during tool execution, supporting the overall function of the agent framework.

RunContext serves as a data structure that not only holds the state pertinent to the execution of an agent's tools but also facilitates the passing of dependencies required for successful operation. By providing this structured context, RunContext ensures that agents can effectively manage their tasks and maintain the necessary information throughout their execution lifecycle. 

In summary, RunContext is an essential component of the PydanticAI library, designed to deliver a comprehensive management framework for the execution context of agents, ensuring the seamless functioning of tool execution and dependency management.</data>
      <data key="d3">chunk-0defe853a1fb0dadf514cce37cdbbd16&lt;SEP&gt;chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-6c55dffdff9c514f2f88b60d9ec9f6c4&lt;SEP&gt;chunk-34aaffaa470a7a741f62a704e48832ea&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85&lt;SEP&gt;chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018&lt;SEP&gt;chunk-f375a3596539c3931dca74338cc79546&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-efc722ebd98256b20f6a17746e03016e&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8&lt;SEP&gt;chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-990ca6b93e3572bb93527fb4f06bad10&lt;SEP&gt;chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ModelMessage">
      <data key="d0">ModelMessage</data>
      <data key="d1">category</data>
      <data key="d2">ModelMessage is a comprehensive data structure that defines the schema for messages exchanged with AI models, particularly in the context of the Gemini API, Groq model, and Mistral chat service. It encapsulates various types of messages necessary for facilitating interactions, including requests and responses between users, agents, and the models themselves.

This class serves multiple functions: it structures the messages that consist of both content and context required for processing queries, and it organizes the data format essential for communication between the agent and the user. ModelMessage encompasses structured representations of messages, which can include prompts and responses, and it is vital for maintaining the flow of conversation and task execution between different components of the system.

The ModelMessage class is utilized in various contexts, such as within the pydantic_ai_slim framework, and is particularly significant during the Q&amp;A process, where messages are exchanged based on user inputs and model outputs. Additionally, it outlines the communication principles underlying interactions not only with the model but also among different system nodes, ensuring that messages are conveyed effectively between the user and the AI service.

In summary, ModelMessage plays a crucial role in the overall communication architecture of AI interactions, defining a structured format that supports effective message exchange essential for operational efficiency within typical AI frameworks.</data>
      <data key="d3">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9&lt;SEP&gt;chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-86a9f53d979bbb38ee393142b903fb00&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-49dda393c384d6eedda81d9cf452a9c8&lt;SEP&gt;chunk-c85826bcf2c124ee6da90aa381dfff25&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ToolDefinition">
      <data key="d0">ToolDefinition</data>
      <data key="d1">category</data>
      <data key="d2">ToolDefinition is a comprehensive categorization entity within the Mistral framework that structures the various tools available for effective operation. It serves as a metadata repository, encapsulating the necessary specifications and structure for defining tools within the Agent framework. ToolDefinition integrates essential components of the Pydantic AI framework, detailing the parameters, functionalities, and operational structures of these tools.

As a class definition found in the pydantic_ai_slim library, ToolDefinition includes attributes such as name, description, and a JSON schema for parameters, which collectively describe the nature and capabilities of each tool. It outlines the characteristics and functionalities of different tools, ensuring a structured representation that includes detailed specifications for tools intended for use in model requests.

ToolDefinition further serves as a pivotal framework for creating and managing tools, highlighting their functions and parameter schemas within the context of AI applications. It is instrumental in registering functions as tools, with an emphasis on schema compliance and the specific parameters required for operation.

In summary, ToolDefinition represents a structured approach to defining and managing various tools within programming environments, particularly for model processing and interactions, specifying their behaviors and required parameters across different frameworks, including Mistral and Groq for model interactions.</data>
      <data key="d3">chunk-0defe853a1fb0dadf514cce37cdbbd16&lt;SEP&gt;chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-6c55dffdff9c514f2f88b60d9ec9f6c4&lt;SEP&gt;chunk-209c7ce456d62ec8593bbdf7185e8894&lt;SEP&gt;chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356&lt;SEP&gt;chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="AsyncIterator">
      <data key="d0">AsyncIterator</data>
      <data key="d1">category</data>
      <data key="d2">AsyncIterator is a Python construct designed for asynchronous iteration over data streams, enabling efficient handling of operations that may take time to complete without blocking execution. It serves as a protocol that defines an interface for iterating over asynchronous data sources in a structured manner, particularly useful in the context of I/O-bound operations. The AsyncIterator allows for the non-blocking processing of sequences, which makes it particularly beneficial in real-time applications and scenarios involving streaming responses, such as generating responses from agents or traversing graphs.

Specifically, AsyncIterator is utilized to yield items in a non-blocking manner, enhancing the performance of asynchronous programming. It can iterate over collections of elements, such as nodes in a graph or any other iterable objects, returning items as they become available. This programming structure facilitates a smooth flow of asynchronous iteration over sequences, allowing developers to handle a stream of data that is received over time efficiently. 

Overall, AsyncIterator represents an important concept in Python's asynchronous programming landscape, enabling developers to write robust, non-blocking code that effectively manages asynchronous operations.</data>
      <data key="d3">chunk-77d1c9fabe1883697171dedd7266ffd7&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-26694cbae32bb1e9e7496e96276959ef&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-5b7a596ee9422b565de815722b0e31dc&lt;SEP&gt;chunk-bd6dfe5e98d926e7e4cb3f17a23e568c&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-23dd09bcb6c976f2167345bb77e402ff&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-1d2c13afaff5bbc08c268a958dff4edb&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-bd2bc160d25374fdd8c399ea89d82b1d&lt;SEP&gt;chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_ai_slim">
      <data key="d0">pydantic_ai_slim</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic AI Slim is a lightweight Python library designed for efficient data validation and management within AI applications. Built on the foundations of the Pydantic framework, it simplifies the creation and handling of data models tailored for AI and API interactions. The library focuses on minimizing overhead while maintaining essential functionalities such as settings management and asynchronous operations. 

Pydantic AI Slim provides tools for proper structuring of data and ensures seamless integration with various model-related functionalities, aiding developers in building and managing AI models. It offers a streamlined approach to handling application behavior through exception management and response processing. The library includes a range of classes and methods specifically designed for handling asynchronous programming and result data management.

In addition to being a practical tool for developers, Pydantic AI Slim serves as an organizational resource that focuses on structured data validation and API response handling, facilitating the development of AI-driven tools including agents and advanced model functionalities. Overall, it stands out as a minimalistic implementation of Pydantic, optimizing the performance for users engaged in AI development.</data>
      <data key="d3">chunk-4f4eceed73ea96cd06f2303055d3cd57&lt;SEP&gt;chunk-0defe853a1fb0dadf514cce37cdbbd16&lt;SEP&gt;chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc&lt;SEP&gt;chunk-6917f262ab39c9184d0d42aaa934095b&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356&lt;SEP&gt;chunk-7d1e8771351fdf8b093090b4c0eb88d6&lt;SEP&gt;chunk-53688e690a1714927cd95fd846af7f81&lt;SEP&gt;chunk-4789175c72630811bc7e624447f539f5&lt;SEP&gt;chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209&lt;SEP&gt;chunk-bd6dfe5e98d926e7e4cb3f17a23e568c&lt;SEP&gt;chunk-08a4d218da7ec53e693bd2773bdb87b2&lt;SEP&gt;chunk-1d2c13afaff5bbc08c268a958dff4edb&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-49dda393c384d6eedda81d9cf452a9c8&lt;SEP&gt;chunk-93010a3465ed2346e5ca1cbbf11fbc95&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="pydantic_graph">
      <data key="d0">pydantic_graph</data>
      <data key="d1">organization</data>
      <data key="d2">Pydantic Graph is a comprehensive Python library designed to facilitate the creation, management, and manipulation of graphs and diagrams, particularly in the context of stateful applications. It serves a dual purpose: enabling structured data handling and supporting agent-based programming. The library is tailored for building graphs that feature state persistence, asynchronous computations, and snapshot management, making it a suitable choice for complex state management scenarios.

Key functionalities of Pydantic Graph include the ability to define and manage stateful graphs using Python data classes, as well as providing tools for executing graph nodes and handling type validation efficiently. Pydantic Graph's framework is often used in conjunction with other libraries such as pydantic_ai to enhance graph-based programming patterns. It is particularly effective in managing state transitions within asynchronous workflows, offering a robust structure for both declarative data models and graph executions.

In summary, Pydantic Graph is a multifaceted toolset in Python for constructing and managing directed graphs with a focus on persistence and complex state management, catering to developers who seek to implement graph-based solutions in their applications.</data>
      <data key="d3">chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2&lt;SEP&gt;chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-f05343baae3f62f1bed61aebb48d39ae&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-41cb6d18e75a14fbbb4ecaef7f988d07&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-25346d17202fa22ebc450f7f7382c828&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="confidence">
      <data key="d0">confidence</data>
      <data key="d3">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d2">Confidence Score reflects the level of certainty in the expected outputs, offering insight into the reliability of the answers.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="This is an excellent joke invented by Samuel Colvin">
      <data key="d0">This is an excellent joke invented by Samuel Colvin</data>
      <data key="d3">chunk-0517903d60beb732d23023e1a1755b2e</data>
      <data key="d2">Samuel Colvin is the creator of the joke being discussed, highlighting his role as an innovator in humor.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai_model">
      <data key="d0">openai_model</data>
      <data key="d3">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d2">The openai_model uses the model_name to identify which version of the OpenAI model is being utilized during processing.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="joke_factory">
      <data key="d0">joke_factory</data>
      <data key="d3">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d2">The joke_factory function is defined as an async function to allow for non-blocking execution of joke generation actions.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="context manager">
      <data key="d0">context manager</data>
      <data key="d3">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d2">Yield is used within a context manager to control the execution flow, allowing for setup and teardown around specific code blocks.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="return statement">
      <data key="d0">return statement</data>
      <data key="d3">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d2">The return statement is a command that sends back the result of 'self._state.usage', indicating a relationship of input and output operations."|</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Fallback Systems">
      <data key="d0">Fallback Systems</data>
      <data key="d3">chunk-4379cd84952d0fee03cfcca822fde7ed</data>
      <data key="d2">Fallback models are a subset of fallback systems that serve as backups when primary systems fail.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="async_client">
      <data key="d0">async_client</data>
      <data key="d3">chunk-72ca9e59f2d2201907ab534202af4af4</data>
      <data key="d2">Asynchronous clients like AsyncOpenAI and Httpx.AsyncClient work together to handle API calls efficiently.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="results_tool_return_content">
      <data key="d0">results_tool_return_content</data>
      <data key="d3">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d2">_stream_response_text may provide the result_tool_return_content to modify the last message in the response sequence.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="openai:gpt-4-u-vision-preview">
      <data key="d0">openai:gpt-4-u-vision-preview</data>
      <data key="d3">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d2">These entries indicate OpenAI’s adaptations focusing on combining visual capabilities with their language AI outputs.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="_streamedResponse">
      <data key="d0">_streamedResponse</data>
      <data key="d3">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d2">StreamedResponse may leverage AsyncIterator for handling streams of event data asynchronously, improving performance.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="ApiKeyAuth">
      <data key="d0">ApiKeyAuth</data>
      <data key="d3">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d2">headers method in ApiKeyAuth class provides necessary authorization information when making requests using the Gemini model.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="evaluation">
      <data key="d0">evaluation</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d2">The evaluation process generates a report summarizing the outcomes of the test cases and their tests.&lt;SEP&gt;The report details the results of the evaluations processed during the evaluation effort.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Concurrent Evaluations">
      <data key="d0">Concurrent Evaluations</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d2">Max concurrency limits how many evaluations can take place at once, affecting overall evaluation speed.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="tasks">
      <data key="d0">tasks</data>
      <data key="d3">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d2">The evaluate method is responsible for executing tasks asynchronously as part of the evaluation process.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id=" evaluate_sync">
      <data key="d0"> evaluate_sync</data>
      <data key="d3">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d2">The evaluate_sync method utilizes MetadataT to provide additional contextual information relevant to the evaluation process.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="NodeSnapshot(start_ts)">
      <data key="d0">NodeSnapshot(start_ts)</data>
      <data key="d3">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d2">The status and start timestamp are properties of the NodeSnapshot, reflecting its changing state during execution.</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Atlanta, Georgia">
      <data key="d0">Atlanta, Georgia</data>
      <data key="d3">chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d2">Hartsfield-Jackson Atlanta International Airport is located in Atlanta, Georgia, linking the airport to its geographical context.".</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <node id="Houston, Texas">
      <data key="d0">Houston, Texas</data>
      <data key="d3">chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d2">George Bush Intercontinental Airport is situated in Houston, Texas, establishing its geographical identity.".</data>
      <data key="d1">UNKNOWN</data>
      <data key="d4">unknown_source</data>
    </node>
    <edge source="FastAPI" target="PydanticAI">
      <data key="d5">25.0</data>
      <data key="d6">FastAPI is mentioned as a framework that can work alongside PydanticAI for API development.&lt;SEP&gt;PydanticAI is built on the principles established by FastAPI, aiming to offer a similar experience in AI app development.</data>
      <data key="d7">development framework, foundational principles&lt;SEP&gt;framework usage, development</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948&lt;SEP&gt;chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FastAPI" target="chat_app.py">
      <data key="d5">18.0</data>
      <data key="d6">FastAPI is the framework utilized in chat_app.py to build an interactive chat system.&lt;SEP&gt;FastAPI serves as the underlying framework used to build the chat functionality showcased in chat_app.py.</data>
      <data key="d7">framework application, chat system</data>
      <data key="d8">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FastAPI" target="logfire">
      <data key="d5">7.0</data>
      <data key="d6">Logfire can be configured to work with FastAPI to enhance functionality for API development.</data>
      <data key="d7">framework compatibility, API development</data>
      <data key="d8">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic Logfire" target="PydanticAI">
      <data key="d5">23.0</data>
      <data key="d6">PydanticAI can integrate with Pydantic Logfire to provide enhanced monitoring of AI agent runs.&lt;SEP&gt;PydanticAI integrates with Pydantic Logfire to provide enhanced debugging and monitoring functionalities.</data>
      <data key="d7">integration, application monitoring&lt;SEP&gt;integration, monitoring functionality</data>
      <data key="d8">chunk-fbac2cd26b16d89a2ad3c129160b997b&lt;SEP&gt;chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic Logfire" target="Pydantic">
      <data key="d5">9.0</data>
      <data key="d6">Pydantic Logfire is specifically designed to integrate with Pydantic to monitor and trace application performance.</data>
      <data key="d7">monitoring integration, performance tracking</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic Logfire" target="Logfire Configuration">
      <data key="d5">8.0</data>
      <data key="d6">Logfire Configuration is required to correctly set up Pydantic Logfire for optimized performance monitoring.</data>
      <data key="d7">setup process, performance optimization</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic Logfire" target="Logfire Setup">
      <data key="d5">7.0</data>
      <data key="d6">Logfire Setup details how to configure Pydantic Logfire for use with PydanticAI, ensuring proper integration.</data>
      <data key="d7">configuration, integration process</data>
      <data key="d8">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic Logfire" target="Logfire">
      <data key="d5">20.0</data>
      <data key="d6">Pydantic Logfire enhances Logfire's functionalities by providing an observability framework tailored for applications built with Pydantic.&lt;SEP&gt;Pydantic Logfire is a part of the Logfire ecosystem, enhancing observability for applications built with Pydantic.</data>
      <data key="d7">application performance, observability</data>
      <data key="d8">chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic Logfire" target="Pydantic AI">
      <data key="d5">9.0</data>
      <data key="d6">Pydantic AI includes features that can integrate with Pydantic Logfire to improve the monitoring capabilities of AI applications.</data>
      <data key="d7">technology integration, performance monitoring</data>
      <data key="d8">chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Gemini 1.5's Flash" target="PydanticAI">
      <data key="d5">16.0</data>
      <data key="d6">PydanticAI can configure agents to use Gemini 1.5's Flash for generating responses, highlighting its flexibility.</data>
      <data key="d7">model configuration, AI response generation</data>
      <data key="d8">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dependency Injection System" target="PydanticAI">
      <data key="d5">14.0</data>
      <data key="d6">PydanticAI offers a Dependency Injection System that helps provide necessary data and services throughout its frameworks.</data>
      <data key="d7">system architecture, software design</data>
      <data key="d8">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Structured Responses" target="PydanticAI">
      <data key="d5">18.0</data>
      <data key="d6">PydanticAI gives emphasis on generating Structured Responses to ensure consistent and valid outputs from models.</data>
      <data key="d7">output validation, consistency</data>
      <data key="d8">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Type-safe" target="PydanticAI">
      <data key="d5">16.0</data>
      <data key="d6">PydanticAI is designed with a focus on type safety, improving error handling in applications using AI.</data>
      <data key="d7">error management, safe coding practices</data>
      <data key="d8">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="python" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">PydanticAI is developed using the Python programming language, leveraging its features for agent development.</data>
      <data key="d7">programming language, development foundation</data>
      <data key="d8">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI SDK" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI utilizes components of the OpenAI SDK for validation in AI-driven applications.</data>
      <data key="d7">tool integration, validation</data>
      <data key="d8">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Practices for AI Projects" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI incorporates best practices for AI projects to enhance development and maintainability.</data>
      <data key="d7">best practices, project management</data>
      <data key="d8">chunk-a9b9f74a239f46cb684aadb28a77cb76</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bank Support Agent" target="PydanticAI">
      <data key="d5">18.0</data>
      <data key="d6">PydanticAI is used to create the Bank Support Agent, supplying the necessary structure and dependency injection for its functionality.&lt;SEP&gt;PydanticAI is utilized to create and implement the Bank Support Agent, which operates under its framework providing customer support services.</data>
      <data key="d7">AI framework, support systems</data>
      <data key="d8">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bank Support Agent" target="SupportDependencies">
      <data key="d5">16.0</data>
      <data key="d6">SupportDependencies provides relevant data, such as customer information and services, that the Bank Support Agent requires to function effectively.&lt;SEP&gt;SupportDependencies provides the necessary context and data that the Bank Support Agent requires to function effectively.</data>
      <data key="d7">data management, context provision&lt;SEP&gt;data structure, agent requirement</data>
      <data key="d8">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bank Support Agent" target="SupportResult">
      <data key="d5">14.0</data>
      <data key="d6">SupportResult details the format of data returned by the Bank Support Agent, ensuring the outputs are structured and useful.&lt;SEP&gt;SupportResult specifies the expected output format of the Bank Support Agent's responses, ensuring consistency and clarity in customer communications.</data>
      <data key="d7">output format, customer communication&lt;SEP&gt;output structure, information delivery</data>
      <data key="d8">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bank Support Agent" target="system_prompt">
      <data key="d5">8.0</data>
      <data key="d6">system_prompt provides contextual instructions essential for the Bank Support Agent to deliver appropriate customer support responses.</data>
      <data key="d7">instructional content, operational guidance</data>
      <data key="d8">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bank Support Agent" target="tool">
      <data key="d5">7.0</data>
      <data key="d6">tool functionalities enhance the capabilities of the Bank Support Agent, enabling it to perform tasks and respond to multiple customer inquiries.</data>
      <data key="d7">agent functionality, task management</data>
      <data key="d8">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bank Support Agent" target="balance inquiry">
      <data key="d5">9.0</data>
      <data key="d6">balance inquiry is a type of customer request that the Bank Support Agent is designed to handle by retrieving and conveying account information.</data>
      <data key="d7">customer interaction, service request</data>
      <data key="d8">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SupportDependencies" target="DatabaseConn">
      <data key="d5">16.0</data>
      <data key="d6">DatabaseConn is used within SupportDependencies to manage data interactions required by the support agent, allowing efficient access to customer records.&lt;SEP&gt;DatabaseConn is utilized within SupportDependencies to manage and retrieve customer data for the support agent.</data>
      <data key="d7">data access, dependency management&lt;SEP&gt;data management, dependency injection</data>
      <data key="d8">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SupportDependencies" target="customer_id">
      <data key="d5">9.0</data>
      <data key="d6">customer_id is a crucial element within SupportDependencies that allows for specific customer interactions and data retrieval for the support agent.</data>
      <data key="d7">customer identification, relationship management</data>
      <data key="d8">chunk-974886a9bf77b52661ddb26c6b6703df</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SupportResult" target="Static Type Checking">
      <data key="d5">8.0</data>
      <data key="d6">SupportResult aids in static type checking by ensuring that the types of returned data from functions are validated correctly.</data>
      <data key="d7">data validation, programming safety</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DatabaseConn" target="Agent">
      <data key="d5">27.0</data>
      <data key="d6">Agent utilizes DatabaseConn to manage database interactions required for handling user requests.&lt;SEP&gt;The Agent class can use DatabaseConn to execute queries on a database, showcasing its application in data management.</data>
      <data key="d7">database interaction, data management&lt;SEP&gt;software interaction, dependency management</data>
      <data key="d8">chunk-729cd2b3c578d9a846adee8336cc05fd&lt;SEP&gt;chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DatabaseConn" target="weather_app">
      <data key="d5">8.0</data>
      <data key="d6">weather_app utilizes DatabaseConn to interact with a database for storing and retrieving forecast data.</data>
      <data key="d7">data management, application functionality</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DatabaseConn" target="WeatherService">
      <data key="d5">8.0</data>
      <data key="d6">DatabaseConn is used by WeatherService to access and store forecast data in the database.</data>
      <data key="d7">data storage, service utility</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DatabaseConn" target="call_weather_forecast">
      <data key="d5">8.0</data>
      <data key="d6">The DatabaseConn object interacts with call_weather_forecast to manage and retrieve user-specific weather forecast data.</data>
      <data key="d7">database interaction, data retrieval</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DatabaseConn" target="PydanticAI">
      <data key="d5">14.0</data>
      <data key="d6">PydanticAI uses DatabaseConn to simulate customer database interactions in its examples.&lt;SEP&gt;PydanticAI utilizes DatabaseConn to demonstrate how a banking application can interact with customer data as part of its examples.</data>
      <data key="d7">framework usage, simulated database</data>
      <data key="d8">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="system_prompt" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The system_prompt parameter is integrated into the Agent's configuration to guide the AI's response generation.</data>
      <data key="d7">response behavior, instructions</data>
      <data key="d8">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="system_prompt" target="Agent A">
      <data key="d5">7.0</data>
      <data key="d6">The system_prompt provides guidelines for Agent A's execution of tasks within the game context.</data>
      <data key="d7">operational guidance, task execution</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="system_prompt" target="Agent B">
      <data key="d5">7.0</data>
      <data key="d6">The system_prompt also guides Agent B in its interactions with players during the gameplay.</data>
      <data key="d7">operational guidance, task execution</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="system_prompt" target="ConverseResponseTypeDef">
      <data key="d5">8.0</data>
      <data key="d6">system_prompt offers contextual information essential for the structure outlined in ConverseResponseTypeDef.</data>
      <data key="d7">input guidance, response shaping</data>
      <data key="d8">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="system_prompt" target="ModelResponse">
      <data key="d5">9.0</data>
      <data key="d6">system_prompt is instrumental in guiding the ModelResponse generation process to tailor responses to user input.</data>
      <data key="d7">guidance, response generation</data>
      <data key="d8">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Agent encompasses tools that are defined within its framework, allowing tool registration and execution.</data>
      <data key="d7">tool management, framework</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool" target="func">
      <data key="d5">8.0</data>
      <data key="d6">Each tool is a function (func) that is registered to perform specific tasks, indicating a direct connection between the two.</data>
      <data key="d7">functionality, task performance</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool" target="retries">
      <data key="d5">7.0</data>
      <data key="d6">Retries provide a mechanism for tools to handle failures by allowing multiple attempts, enhancing reliability of the function.</data>
      <data key="d7">error handling, reliability</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool" target="name">
      <data key="d5">8.0</data>
      <data key="d6">The name of the tool is essential for identifying the function within the Agent and for user interaction.</data>
      <data key="d7">identification, user interaction</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool" target="deps_type">
      <data key="d5">7.0</data>
      <data key="d6">Deps_type ensures that tools can safely consume specific types of dependencies needed for execution.</data>
      <data key="d7">type safety, dependency management</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool" target="ToolPrepareFunc">
      <data key="d5">6.0</data>
      <data key="d6">ToolPrepareFunc allows for dynamic preparation of tool definitions before execution, enhancing flexibility in tool usage.</data>
      <data key="d7">dynamic preparation, flexibility</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool" target="DocstringFormat">
      <data key="d5">7.0</data>
      <data key="d6">DocstringFormat determines how the documentation for tools is formatted, impacting comprehension and usability.</data>
      <data key="d7">documentation, usability</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool" target="ToolDefinition">
      <data key="d5">8.0</data>
      <data key="d6">Each tool is accompanied by a ToolDefinition that outlines its structure and metadata for registration in the Agent.</data>
      <data key="d7">definition, registration</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="PostgreSQL">
      <data key="d5">7.0</data>
      <data key="d6">Pydantic can be utilized in applications that connect to PostgreSQL for data validation and management purposes.</data>
      <data key="d7">data management, integration</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="bank_support.py">
      <data key="d5">9.0</data>
      <data key="d6">The bank_support.py script serves as an example of how to use Pydantic for structured data validation in banking applications.</data>
      <data key="d7">example usage, data validation</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="Database Connection">
      <data key="d5">7.0</data>
      <data key="d6">Database Connection is often utilized within Pydantic-based applications for managing data effectively and securely.</data>
      <data key="d7">data management, framework usage</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="Static Type Checking">
      <data key="d5">9.0</data>
      <data key="d6">Pydantic enhances static type checking by providing a structured model that defines data types and constraints.</data>
      <data key="d7">type safety, data modeling</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="OpenTelemetry">
      <data key="d5">7.0</data>
      <data key="d6">Pydantic and OpenTelemetry are related as they both provide frameworks for enhancing application performance through data management and observability.</data>
      <data key="d7">data management, performance monitoring</data>
      <data key="d8">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="ValidationError">
      <data key="d5">18.0</data>
      <data key="d6">Pydantic is the library that raises ValidationErrors when input data validation fails, enforcing data structure and types.&lt;SEP&gt;Pydantic is the library that raises ValidationErrors when input data validation fails.</data>
      <data key="d7">data validation, error handling</data>
      <data key="d8">chunk-6917f262ab39c9184d0d42aaa934095b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="pydantic_ai_slim">
      <data key="d5">14.0</data>
      <data key="d6">pydantic_ai_slim integrates with Pydantic for ensuring data validation when processing AI model requests.&lt;SEP&gt;pydantic_ai_slim utilizes Pydantic for data validation and model management.</data>
      <data key="d7">integration, AI management&lt;SEP&gt;integration, library usage</data>
      <data key="d8">chunk-6917f262ab39c9184d0d42aaa934095b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="BaseModel">
      <data key="d5">9.0</data>
      <data key="d6">BaseModel is a part of the Pydantic library, hence they are intrinsically linked in the context of data validation.</data>
      <data key="d7">library usage, framework</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="mermaid">
      <data key="d5">8.0</data>
      <data key="d6">Mermaid serves as a visualization tool that is integrated within the Pydantic library for generating diagrams.</data>
      <data key="d7">integration, visualization</data>
      <data key="d8">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI uses Pydantic for data validation and settings management when generating SQL queries from user input.</data>
      <data key="d7">data validation, dependency</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="PostgreSQL" target="logfire">
      <data key="d5">9.0</data>
      <data key="d6">Logfire uses PostgreSQL as its backend database to manage and store documentation efficiently.</data>
      <data key="d7">data storage, system architecture</data>
      <data key="d8">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="PostgreSQL" target="SQL Generation Example">
      <data key="d5">9.0</data>
      <data key="d6">The SQL Generation Example includes executing SQL queries on PostgreSQL to validate generated output.</data>
      <data key="d7">validation, database usage</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="PostgreSQL" target="Docker">
      <data key="d5">8.0</data>
      <data key="d6">Docker is used to run PostgreSQL in a containerized environment for easy setup and execution of the examples.</data>
      <data key="d7">containerization, environment management</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Logfire" target="bank_support_with_logfire.py">
      <data key="d5">8.0</data>
      <data key="d6">The bank_support_with_logfire.py script demonstrates how to integrate Logfire for monitoring Pydantic-based agents in applications.</data>
      <data key="d7">monitoring tools, integration</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Logfire" target="Weather Agent">
      <data key="d5">18.0</data>
      <data key="d6">The Weather Agent example illustrates how Logfire can be utilized for monitoring and debugging AI applications.&lt;SEP&gt;The Weather Agent serves as a practical example within Logfire to demonstrate how observability features can be utilized in AI applications.</data>
      <data key="d7">monitoring application, real-time insights</data>
      <data key="d8">chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Logfire" target="OpenTelemetry">
      <data key="d5">34.0</data>
      <data key="d6">Logfire is based on OpenTelemetry, which serves as its foundational framework for monitoring and data collection.&lt;SEP&gt;Logfire is built on OpenTelemetry principles, integrating standardized observability features into its platform for enhanced application monitoring.&lt;SEP&gt;Logfire is built on OpenTelemetry, integrating its standards for observability into its platform.</data>
      <data key="d7">integration, observability standards&lt;SEP&gt;technology foundation, monitoring</data>
      <data key="d8">chunk-adafe0dc68284d75a3d5c7256851229e&lt;SEP&gt;chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Logfire" target="PydanticAI">
      <data key="d5">26.0</data>
      <data key="d6">Logfire is integrated with PydanticAI to monitor and log operations performed during SQL generation.&lt;SEP&gt;Logfire is used to monitor the performance of applications created with PydanticAI, showcasing integration between the two platforms.</data>
      <data key="d7">integration, monitoring&lt;SEP&gt;monitoring, integration</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Logfire" target="Logfire SDK">
      <data key="d5">9.0</data>
      <data key="d6">The Logfire SDK enhances the functionality of Logfire by providing tools for performance monitoring and management.</data>
      <data key="d7">SDK integration, performance monitoring</data>
      <data key="d8">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="bank_support.py" target="John">
      <data key="d5">16.0</data>
      <data key="d6">John represents a bank customer interacting with the support agent featured in bank_support.py.&lt;SEP&gt;John represents a customer engaging with the bank's support agent implemented in bank_support.py, illustrating practical use cases.</data>
      <data key="d7">customer engagement, support interaction&lt;SEP&gt;customer representation, support interaction</data>
      <data key="d8">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="bank_support.py" target="chat_app.py">
      <data key="d5">16.0</data>
      <data key="d6">Both bank_support.py and chat_app.py exemplify different applications of PydanticAI in various customer interaction contexts.&lt;SEP&gt;Both bank_support.py and chat_app.py serve as implementation examples for utilizing PydanticAI in different contexts.</data>
      <data key="d7">example applications, PydanticAI usage</data>
      <data key="d8">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Database Connection" target="Asynchronous Programming">
      <data key="d5">7.0</data>
      <data key="d6">Asynchronous Programming techniques are often used to enhance Database Connection efficiency within applications.</data>
      <data key="d7">performance improvement, programming paradigm</data>
      <data key="d8">chunk-16ca6f7569783f5691e1fd7ca9daf7c0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="roulette_agent" target="result">
      <data key="d5">8.0</data>
      <data key="d6">The roulette_agent computes the result based on the bets placed, indicating the outcome of the betting event.</data>
      <data key="d7">betting outcome, agent functionality</data>
      <data key="d8">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="roulette_agent" target="result.data">
      <data key="d5">9.0</data>
      <data key="d6">The output from the roulette_agent's computations is stored in result.data, indicating the result of the operation.</data>
      <data key="d7">agent output, data representation</data>
      <data key="d8">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result" target="five">
      <data key="d5">9.0</data>
      <data key="d6">The bet on five is examined by the roulette_agent to determine if it was successful, relating the category to the outcome.</data>
      <data key="d7">bet placement, event outcome</data>
      <data key="d8">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result" target="usage">
      <data key="d5">9.0</data>
      <data key="d6">The result generated from executing the agent's function contains information about usage, illustrating its resource consumption.</data>
      <data key="d7">result output, resource metrics</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result" target="joke_selection_agent">
      <data key="d5">7.0</data>
      <data key="d6">The outcome from the joke_selection_agent is stored in result, which encapsulates the joke generated for the client.</data>
      <data key="d7">output management, joke retrieval</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result" target="Usage">
      <data key="d5">6.0</data>
      <data key="d6">Usage tracks how the result data from agents like joke_selection_agent and joke_generation_agent is consumed and reported.</data>
      <data key="d7">statistics, performance tracking</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result" target="ModelResponse">
      <data key="d5">9.0</data>
      <data key="d6">ModelResponse encapsulates the result generated from the model, integrating various output components.</data>
      <data key="d7">output management, response structure</data>
      <data key="d8">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result" target="asyncpg">
      <data key="d5">8.0</data>
      <data key="d6">Asyncpg is responsible for producing the result of executed SQL queries while also facilitating database interactions.</data>
      <data key="d7">database interface, query outcome</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result" target="sql_query">
      <data key="d5">9.0</data>
      <data key="d6">The execution of the sql_query yields the result which contains the outcome of the database operation.</data>
      <data key="d7">query execution, result generation</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result.data" target="success_number">
      <data key="d5">8.0</data>
      <data key="d6">The success_number is evaluated by the agent to determine if it results in a True or False outcome, linking the input with the output.</data>
      <data key="d7">input-output relationship, decision making</data>
      <data key="d8">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result.data" target="True">
      <data key="d5">10.0</data>
      <data key="d6">When result.data evaluates to True, it signifies a successful bet based on the agent's conclusion.</data>
      <data key="d7">success indication, boolean outcome</data>
      <data key="d8">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result.data" target="False">
      <data key="d5">10.0</data>
      <data key="d6">When result.data evaluates to False, it denotes an unsuccessful bet, indicating the opposite outcome from True.</data>
      <data key="d7">failure indication, boolean outcome</data>
      <data key="d8">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result.data" target="print">
      <data key="d5">8.0</data>
      <data key="d6">The print function is used to display the value of result.data, which reflects the outcome of the roulette_agent's calculations.</data>
      <data key="d7">output function, result display</data>
      <data key="d8">chunk-a6135304e85ce8757eac7aa9a7eea737</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result.data" target="find_flight">
      <data key="d5">10.0</data>
      <data key="d6">The data returned from find_flight is crucial for the application's workflow and informs the next steps in the booking process.</data>
      <data key="d7">result output, application workflow</data>
      <data key="d8">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result.data" target="find_seat">
      <data key="d5">10.0</data>
      <data key="d6">The result of the find_seat function utilizes the data provided from the initial flight search to maintain context during seat selection.</data>
      <data key="d7">result output, contextual relevance</data>
      <data key="d8">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="print" target="report">
      <data key="d5">7.0</data>
      <data key="d6">The print function is utilized to display the evaluation report in the console, providing users with immediate feedback on the testing process."|</data>
      <data key="d7">output display, user feedback</data>
      <data key="d8">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Paris" target="guess_city">
      <data key="d5">20.0</data>
      <data key="d6">The function 'guess_city' is designed to return 'Paris' when queried for the capital of France, establishing a direct relationship between the function's purpose and the expected output."|&lt;SEP&gt;guess_city is expected to return Paris when the input question queries for the capital of France."|</data>
      <data key="d7">function output, geographical query</data>
      <data key="d8">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Paris" target="Easy Capital Question">
      <data key="d5">10.0</data>
      <data key="d6">The question asks specifically about the capital of France, which is Paris.</data>
      <data key="d7">geographical query, capital city</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">AgentRun manages and utilizes multiple BaseNodes to execute a computational flow in an organized manner.</data>
      <data key="d7">framework management, computational flow</data>
      <data key="d8">chunk-37ea23b80d0ce2eead046bee6649f339</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="OpenAI GPT-4o">
      <data key="d5">9.0</data>
      <data key="d6">The OpenAI GPT-4o model is utilized within the AgentRun to process user prompts and generate responses.</data>
      <data key="d7">model usage, agent execution</data>
      <data key="d8">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="Python Code Example">
      <data key="d5">8.0</data>
      <data key="d6">The Python code example illustrates the use of the AgentRun functionality to handle nodes in the agent graph.</data>
      <data key="d7">code demonstration, functional example</data>
      <data key="d8">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="Agent">
      <data key="d5">25.0</data>
      <data key="d6">AgentRun instances are created and utilized to manage the execution of an Agent within the defined framework.&lt;SEP&gt;The Agent operates to execute an AgentRun for processing user-driven commands.&lt;SEP&gt;The Agent utilizes the AgentRun to manage the execution of user prompts and maintain control during the task lifecycle.</data>
      <data key="d7">agent execution, interaction&lt;SEP&gt;execution management, class relationship&lt;SEP&gt;task management, execution relationship</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="AgentRunResult">
      <data key="d5">9.0</data>
      <data key="d6">AgentRunResult is derived from the execution performed by an AgentRun, representing the final output for user queries.</data>
      <data key="d7">output generation, result relationship</data>
      <data key="d8">chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="Async Iterator">
      <data key="d5">7.0</data>
      <data key="d6">AgentRun employs Async Iterator to process tasks asynchronously, allowing real-time interaction with the user prompts.</data>
      <data key="d7">asynchronous processing, task handling</data>
      <data key="d8">chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="agent_run.data">
      <data key="d5">9.0</data>
      <data key="d6">agent_run.data contains the resulting output produced by the AgentRun, completing the task initiated by the user prompt.</data>
      <data key="d7">result output, task completion</data>
      <data key="d8">chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="ModelRequest">
      <data key="d5">9.0</data>
      <data key="d6">Each ModelRequest is part of an AgentRun, tracking the execution of processing elements in response to user input.</data>
      <data key="d7">processing sequence, execution</data>
      <data key="d8">chunk-ba0f6d002d71ff318d304dea37c2feb5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="ModelResponse">
      <data key="d5">10.0</data>
      <data key="d6">An AgentRun culminates in a ModelResponse, which is the output generated after processing the user's prompt.</data>
      <data key="d7">output generation, user feedback</data>
      <data key="d8">chunk-ba0f6d002d71ff318d304dea37c2feb5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="CallToolsNode">
      <data key="d5">8.0</data>
      <data key="d6">The CallToolsNode is part of the AgentRun that executes specific functions as needed during processing.</data>
      <data key="d7">function execution, agent operations</data>
      <data key="d8">chunk-ba0f6d002d71ff318d304dea37c2feb5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="RunResultDataT">
      <data key="d5">9.0</data>
      <data key="d6">AgentRun produces an instance of RunResultDataT as the result format for executions.</data>
      <data key="d7">execution result, data structure</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="tracer">
      <data key="d5">9.0</data>
      <data key="d6">tracer is utilized during an AgentRun to monitor the execution process and capture performance metrics.</data>
      <data key="d7">execution monitoring, performance analysis</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="user_prompt">
      <data key="d5">9.0</data>
      <data key="d6">The user_prompt is the initiating input for an AgentRun, guiding the agent's processing actions.</data>
      <data key="d7">user interaction, execution initiation</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="tracer.start_span">
      <data key="d5">8.0</data>
      <data key="d6">tracer.start_span is called at the beginning of an AgentRun to track execution metrics.</data>
      <data key="d7">execution tracking, performance monitoring</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="End">
      <data key="d5">10.0</data>
      <data key="d6">AgentRun orchestrates the execution and transitions into the End node, marking the conclusion of the agent's operational cycle.</data>
      <data key="d7">execution management, completion</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="pydantic_ai">
      <data key="d5">9.0</data>
      <data key="d6">pydantic_ai provides the core functionalities that drive the AgentRun, enabling the creation and management of agent instances.</data>
      <data key="d7">library support, agent management</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="openai:gpt-4o">
      <data key="d5">8.0</data>
      <data key="d6">AgentRun utilizes the OpenAI GPT-4o model for executing tasks and generating responses.</data>
      <data key="d7">agent execution, model utilization</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="AsyncIterator">
      <data key="d5">9.0</data>
      <data key="d6">AgentRun provides an interface to asynchronously iterate through nodes, allowing AsyncIterator to work seamlessly with it.</data>
      <data key="d7">asynchronous operation, iteration</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="Node">
      <data key="d5">8.0</data>
      <data key="d6">AgentRun allows for the asynchronous iteration of Node instances, signifying a direct relationship between them in processing tasks.</data>
      <data key="d7">asynchronous iteration, task processing</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="UserPromptNode">
      <data key="d5">9.0</data>
      <data key="d6">UserPromptNode instances are processed within AgentRun to generate responses based on user prompts, linking user interaction with agent execution.</data>
      <data key="d7">user interaction, response generation</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="ModelRequestNode">
      <data key="d5">8.0</data>
      <data key="d6">ModelRequestNodes are created during AgentRun to facilitate requests sent to the model, indicating a connection between task execution and model interaction.</data>
      <data key="d7">task execution, model interaction</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRun" target="GraphRunContext">
      <data key="d5">8.0</data>
      <data key="d6">GraphRunContext holds the state during an AgentRun, demonstrating how context and agent execution are interconnected.</data>
      <data key="d7">state management, agent execution</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptNode" target="ModelRequestNode">
      <data key="d5">23.0</data>
      <data key="d6">UserPromptNode captures user input that is subsequently processed by the ModelRequestNode for generating a model response.&lt;SEP&gt;UserPromptNode generates a prompt that initiates a request processed by the ModelRequestNode in the agent's workflow.&lt;SEP&gt;UserPromptNode is followed by a ModelRequestNode that captures the request made to the model for processing user input.</data>
      <data key="d7">input-output flow, user interaction&lt;SEP&gt;process flow, request generation&lt;SEP&gt;user interaction, model processing</data>
      <data key="d8">chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptNode" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">UserPromptNode initiates the interactions handled by the Agent, representing the user's starting input.</data>
      <data key="d7">user interaction, process initiation</data>
      <data key="d8">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptNode" target="user_prompt">
      <data key="d5">10.0</data>
      <data key="d6">The user_prompt provided by the user directly correlates with the creation of a UserPromptNode for processing.</data>
      <data key="d7">input correlation, task initiation</data>
      <data key="d8">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptNode" target="start_node">
      <data key="d5">8.0</data>
      <data key="d6">The start_node initializes the UserPromptNode to handle user prompts within the Agent's processing workflow.</data>
      <data key="d7">initialization, processing</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptNode" target="ModelRequest">
      <data key="d5">8.0</data>
      <data key="d6">The UserPromptNode initiates the ModelRequest, which is the first step in processing a user's input.</data>
      <data key="d7">user interaction, input processing</data>
      <data key="d8">chunk-ba0f6d002d71ff318d304dea37c2feb5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptNode" target="AgentNode">
      <data key="d5">8.0</data>
      <data key="d6">The AgentNode can transition based on inputs received from the UserPromptNode, indicating a direct flow of user information into agent processing.</data>
      <data key="d7">user interaction, processing flow</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptNode" target="CallToolsNode">
      <data key="d5">9.0</data>
      <data key="d6">The UserPromptNode initiates interactions that lead to Calls executed by the CallToolsNode, showing the interaction from user prompts to tool execution.</data>
      <data key="d7">user input, tool invocation</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestNode" target="ModelResponse">
      <data key="d5">10.0</data>
      <data key="d6">The ModelRequestNode initiates a request that results in a ModelResponse when the model finishes processing the input.</data>
      <data key="d7">request-response cycle, model output</data>
      <data key="d8">chunk-37ea23b80d0ce2eead046bee6649f339</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestNode" target="request_stream">
      <data key="d5">7.0</data>
      <data key="d6">ModelRequestNode processes requests and utilizes request_stream to handle the incoming data during model requests.</data>
      <data key="d7">processing, data handling</data>
      <data key="d8">chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestNode" target="PartStartEvent">
      <data key="d5">6.0</data>
      <data key="d6">PartStartEvent occurs within the ModelRequestNode to indicate the start of processing a new request part.</data>
      <data key="d7">event triggering, request handling</data>
      <data key="d8">chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestNode" target="CallToolsNode">
      <data key="d5">18.0</data>
      <data key="d6">ModelRequestNode processes an input, which is then utilized by CallToolsNode to invoke additional tools during its operation.&lt;SEP&gt;The ModelRequestNode leads to a CallToolsNode where tools are called to execute actions based on the model's request.</data>
      <data key="d7">execution flow, action invocation&lt;SEP&gt;request processing, tool invocation</data>
      <data key="d8">chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestNode" target="AgentNode">
      <data key="d5">9.0</data>
      <data key="d6">ModelRequestNode is a specific type of AgentNode, indicating its role within the agent's processing graph for model requests.</data>
      <data key="d7">class hierarchy, agent structure</data>
      <data key="d8">chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestNode" target="ModelRequest">
      <data key="d5">7.0</data>
      <data key="d6">Each ModelRequestNode corresponds to a specific ModelRequest that delineates how inputs should be structured for processing.</data>
      <data key="d7">input structuring, request correspondence</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tuesday" target="Weather Forecast">
      <data key="d5">8.0</data>
      <data key="d6">The weather forecast is specifically for Paris on the upcoming Tuesday, connecting future weather conditions with a specific day.</data>
      <data key="d7">forecast, scheduling</data>
      <data key="d8">chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request_stream" target="PartDeltaEvent">
      <data key="d5">8.0</data>
      <data key="d6">PartDeltaEvent signifies updates within the request_stream, allowing for dynamic handling of changes in the request content.</data>
      <data key="d7">dynamic updates, streaming data</data>
      <data key="d8">chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request_stream" target="InstrumentedModel">
      <data key="d5">10.0</data>
      <data key="d6">The request_stream method supports continuous message processing in InstrumentedModel, providing real-time responses.</data>
      <data key="d7">streaming, real-time processing</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request_stream" target="Pydantic AI">
      <data key="d5">9.0</data>
      <data key="d6">The request_stream function enhances Pydantic AI's capabilities by allowing for real-time streaming of model responses.</data>
      <data key="d7">real-time interaction, advanced functionality</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request_stream" target="MistralStreamedResponse">
      <data key="d5">7.0</data>
      <data key="d6">MistralStreamedResponse leverages the request_stream function for managing data transmission in streaming requests.</data>
      <data key="d7">streaming, data handling</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request_stream" target="async">
      <data key="d5">10.0</data>
      <data key="d6">The request_stream function utilizes asynchronous operations (async) to manage real-time requests and responses effectively.</data>
      <data key="d7">asynchronous operations, real-time handling</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="PartDeltaEvent" target="part_start">
      <data key="d5">16.0</data>
      <data key="d6">PartDeltaEvent is an event type that signifies a change occurring within the response part lifecycle.</data>
      <data key="d7">event type, response management</data>
      <data key="d8">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="PartDeltaEvent" target="delta">
      <data key="d5">9.0</data>
      <data key="d6">Delta is the specific change applied in the context of a PartDeltaEvent, indicating alterations to parts.</data>
      <data key="d7">data change, event detail</data>
      <data key="d8">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextPartDelta" target="ModelResponsePart">
      <data key="d5">9.0</data>
      <data key="d6">TextPartDeltas represent specific modifications intended for ModelResponseParts, emphasizing the adaptability of text-based responses within model outputs.</data>
      <data key="d7">content adaptability, response modification</data>
      <data key="d8">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolCallPartDelta" target="ToolCallPart">
      <data key="d5">34.0</data>
      <data key="d6">ToolCallPartDelta can be applied to ToolCallPart to represent changes or updates to the tool call parameters.&lt;SEP&gt;ToolCallPartDelta is a modification that can be applied to ToolCallPart, indicating a dependency between the two.&lt;SEP&gt;ToolCallPartDelta provides incremental updates specifically related to modifications in ToolCallPart structures.&lt;SEP&gt;ToolCallPartDelta represents changes made to a ToolCallPart, indicating that it is directly related to the functioning of tool calls and updates.</data>
      <data key="d7">incremental update, modification&lt;SEP&gt;update mechanism, modification&lt;SEP&gt;update mechanism, tool function</data>
      <data key="d8">chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-1c5ccdde7a3769386d9598c66c9e6650&lt;SEP&gt;chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolCallPartDelta" target="tool_call_id">
      <data key="d5">8.0</data>
      <data key="d6">tool_call_id connects to ToolCallPartDelta by providing a means to identify which changes are being applied to a specific ToolCallPart instance.</data>
      <data key="d7">identification, change application</data>
      <data key="d8">chunk-1c5ccdde7a3769386d9598c66c9e6650</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FinalResultEvent" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">FinalResultEvent indicates that the Agent has completed processing and produced the result, linking the event to the overall operation of the Agent.</data>
      <data key="d7">completion, result production</data>
      <data key="d8">chunk-825d3e324dae2955fa006ed4f70fe55a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FinalResultEvent" target="ModelResponsePart">
      <data key="d5">18.0</data>
      <data key="d6">FinalResultEvent is connected to ModelResponsePart as it signifies that the response aligns with expected standards.</data>
      <data key="d7">response validation, event outcome</data>
      <data key="d8">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="Agent">
      <data key="d5">16.0</data>
      <data key="d6">The Agent utilizes ModelRetry to handle failures in request execution and implement retry mechanisms.</data>
      <data key="d7">error handling, resilience</data>
      <data key="d8">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="infinite_retry_tool">
      <data key="d5">14.0</data>
      <data key="d6">The infinite_retry_tool is intended to be used in conjunction with ModelRetry to facilitate repeated attempts before an error occurs.</data>
      <data key="d7">functionality, error handling</data>
      <data key="d8">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="calc_volume">
      <data key="d5">7.0</data>
      <data key="d6">ModelRetry is invoked during the execution of calc_volume when unexpected conditions occur, allowing for retries.</data>
      <data key="d7">error handling, functionality support</data>
      <data key="d8">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="Agent Tool Calls">
      <data key="d5">6.0</data>
      <data key="d6">Agent Tool Calls may lead to situations where ModelRetry is necessary if errors arise during tool execution.</data>
      <data key="d7">error management, operational dependency</data>
      <data key="d8">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="UnexpectedModelBehavior">
      <data key="d5">9.0</data>
      <data key="d6">UnexpectedModelBehavior describes the condition under which ModelRetry is utilized to manage error situations.</data>
      <data key="d7">error handling, robustness</data>
      <data key="d8">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="result_validator">
      <data key="d5">8.0</data>
      <data key="d6">ModelRetry is an exception that can trigger a retry process within the validation framework of agents.</data>
      <data key="d7">error handling, retry mechanism</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="ValidationError">
      <data key="d5">23.0</data>
      <data key="d6">ModelRetry is directly linked with ValidationError as it occurs when validation fails and necessitates a retry.&lt;SEP&gt;ModelRetry is triggered as a result of a ValidationError, indicating that the operation must be attempted again due to validation issues.&lt;SEP&gt;ValidationError triggers ModelRetry mechanisms in case of validation failures during tool execution.</data>
      <data key="d7">error handling, operational flow&lt;SEP&gt;retry mechanism, validation failure</data>
      <data key="d8">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-6917f262ab39c9184d0d42aaa934095b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="sql_query">
      <data key="d5">7.0</data>
      <data key="d6">ModelRetry indicates that the previous sql_query was invalid, requiring a re-attempt for execution.</data>
      <data key="d7">error handling, query validation</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="logfire">
      <data key="d5">8.0</data>
      <data key="d6">Logfire may record instances of ModelRetry for monitoring and debugging purposes during query operations.</data>
      <data key="d7">logging, error tracking</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRetry" target="get_lat_lng">
      <data key="d5">7.0</data>
      <data key="d6">ModelRetry is raised when the get_lat_lng tool fails to find a location, indicating a need for a recurrence of the request.</data>
      <data key="d7">exception handling, retry logic</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimits" target="Agent">
      <data key="d5">27.0</data>
      <data key="d6">The Agent adheres to the UsageLimits to define the maximum number of requests it is allowed to execute, ensuring it operates within constraints.&lt;SEP&gt;UsageLimits apply constraints to the Agent's operations, ensuring it functions within predefined boundaries.&lt;SEP&gt;UsageLimits regulate how the Agent can operate, ensuring that it adheres to specified constraints.</data>
      <data key="d7">operational constraints&lt;SEP&gt;request management, operational limits&lt;SEP&gt;resource management, operational constraints</data>
      <data key="d8">chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimits" target="UsageLimitExceeded">
      <data key="d5">16.0</data>
      <data key="d6">The event UsageLimitExceeded signals that the constraints defined by UsageLimits have been breached.</data>
      <data key="d7">error condition, constraints</data>
      <data key="d8">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimits" target="joke_selection_agent">
      <data key="d5">8.0</data>
      <data key="d6">The joke_selection_agent applies UsageLimits to avoid exceeding the total token limit during execution.</data>
      <data key="d7">resource management, token constraints</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimits" target="joke_generation_agent">
      <data key="d5">7.0</data>
      <data key="d6">UsageLimits are applicable for the joke_generation_agent to manage its resource usage effectively during joke generation.</data>
      <data key="d7">resource management, token constraints</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimits" target="StreamedRunResult">
      <data key="d5">8.0</data>
      <data key="d6">The functionality of StreamedRunResult may be restricted by UsageLimits, governing access and usage levels.</data>
      <data key="d7">usage constraints, access control</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimits" target="pydantic_ai">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai utilizes UsageLimits to control and manage request counts and token limitations in its framework.</data>
      <data key="d7">software framework, resource management</data>
      <data key="d8">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimits" target="token limits">
      <data key="d5">9.0</data>
      <data key="d6">UsageLimits is dependent on token limits to enforce constraints on the number of tokens used during model requests and responses.</data>
      <data key="d7">constraint enforcement, resource allocation</data>
      <data key="d8">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NeverResultType" target="Agent">
      <data key="d5">16.0</data>
      <data key="d6">The NeverResultType structure is used within the Agent to define types that should not be coerced, maintaining strict typing in interactions.</data>
      <data key="d7">type integrity, type definition</data>
      <data key="d8">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimitExceeded" target="AgentRunError">
      <data key="d5">18.0</data>
      <data key="d6">UsageLimitExceeded is a specific case of AgentRunError indicating limits exceeded.</data>
      <data key="d7">limit enforcement, error categorization</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimitExceeded" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">UsageLimitExceeded is an error type defined in pydantic_ai_slim to handle usage constraints.</data>
      <data key="d7">error management, library functionality</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimitExceeded" target="Usage">
      <data key="d5">9.0</data>
      <data key="d6">Usage defines the statistics that can trigger the UsageLimitExceeded exception when limits are exceeded.</data>
      <data key="d7">usage statistics, exception triggering</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UsageLimitExceeded" target="check_tokens">
      <data key="d5">10.0</data>
      <data key="d6">check_tokens function raises a UsageLimitExceeded exception when the token limits are breached, indicating a relationship between usage and limits.</data>
      <data key="d7">limit checking, exception raising</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelSettings" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">ModelSettings configure the operational parameters of the Agent, affecting its behavior and outputs.</data>
      <data key="d7">configuration relationship</data>
      <data key="d8">chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelSettings" target="Model">
      <data key="d5">32.0</data>
      <data key="d6">ModelSettings can be associated with the Model, providing specific configurations that guide its behavior during operation.&lt;SEP&gt;ModelSettings define the specific attributes and configurations that dictate the Model's behavior and responses.&lt;SEP&gt;The Model of the Agent operates under specific ModelSettings that dictate its behavior and performance characteristics.&lt;SEP&gt;The Model uses ModelSettings to configure its operations and behavior during requests, influencing its responses.</data>
      <data key="d7">configuration settings, behavior control&lt;SEP&gt;configuration settings, operational influence&lt;SEP&gt;configuration, model behavior&lt;SEP&gt;model configuration, operational behavior</data>
      <data key="d8">chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelSettings" target="CohereModelSettings">
      <data key="d5">9.0</data>
      <data key="d6">CohereModelSettings inherits from ModelSettings, thus establishing a specific structure for its configurations."&lt;&lt;"inheritance, configuration</data>
      <data key="d7">9</data>
      <data key="d8">chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelSettings" target="FunctionModel">
      <data key="d5">8.0</data>
      <data key="d6">FunctionModel uses ModelSettings to configure responses, indicating an important association for operational functionality.</data>
      <data key="d7">configuration usage, operational support</data>
      <data key="d8">chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelSettings" target="GeminiModel">
      <data key="d5">14.0</data>
      <data key="d6">GeminiModel's functionality can be tailored by applying various ModelSettings for specific API interactions.&lt;SEP&gt;The settings of the GeminiModel can be customized with ModelSettings to optimize model performance.</data>
      <data key="d7">configuration customization, operational settings&lt;SEP&gt;customization, model performance</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelSettings" target="GeminiGenerationConfig">
      <data key="d5">8.0</data>
      <data key="d6">GeminiGenerationConfig can be adjusted through ModelSettings to refine the model's response generation behavior per request.</data>
      <data key="d7">response optimization, customization</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelSettings" target="MistralModelSettings">
      <data key="d5">14.0</data>
      <data key="d6">MistralModelSettings is a specialized version of ModelSettings specific to the requirements of Mistral models.&lt;SEP&gt;MistralModelSettings is a specialized version of ModelSettings that is formatted to work specifically with Mistral models.</data>
      <data key="d7">settings specialization, category relationship</data>
      <data key="d8">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelSettings" target="ModelRequestParameters">
      <data key="d5">16.0</data>
      <data key="d6">ModelRequestParameters and ModelSettings work together to configure how the model operates and processes requests.&lt;SEP&gt;ModelSettings influences the ModelRequestParameters by defining configurations that affect model behavior and tool availability.</data>
      <data key="d7">configuration interaction, operational setup&lt;SEP&gt;configuration management, tool utilization</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage_limits" target="Agent">
      <data key="d5">37.0</data>
      <data key="d6">The agent's operations are governed by usage limits, ensuring it remains within prescribed operational boundaries."|"operational constraints, performance management&lt;SEP&gt;The operation of the Agent is subject to usage limits, which govern the frequency and extent of requests made to the model."|"operational constraints, system governance&lt;SEP&gt;Usage limits are restrictions that the Agent adheres to, guiding the management of request counts and token usage.&lt;SEP&gt;Usage_limits apply constraints on the Agent's actions, ensuring adherence to defined operational limits.&lt;SEP&gt;Usage_limits ensure that the Agent operates within defined constraints, helping manage performance and resource usage effectively.</data>
      <data key="d7">7&lt;SEP&gt;operational constraints, request management&lt;SEP&gt;resource management, operational constraints&lt;SEP&gt;resource management, operational limits</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage_limits" target="find_flight">
      <data key="d5">9.0</data>
      <data key="d6">The find_flight function operates under the constraints defined by usage_limits to effectively manage its operations.</data>
      <data key="d7">operational constraints, functionality guidelines</data>
      <data key="d8">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage_limits" target="find_seat">
      <data key="d5">9.0</data>
      <data key="d6">The find_seat function must also adhere to the usage_limits, ensuring proper interaction with users within set parameters.</data>
      <data key="d7">operational constraints, functionality guidelines</data>
      <data key="d8">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage_limits" target="run_sync">
      <data key="d5">14.0</data>
      <data key="d6">The run_sync method may enforce constraints defined in usage_limits for resource management.&lt;SEP&gt;run_sync may enforce usage_limits to ensure the agent operates within predefined resource boundaries.</data>
      <data key="d7">resource management, operational constraints&lt;SEP&gt;resource management, operational limits</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_sync" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">result_sync is a method provided by the Agent to execute synchronous calls for obtaining results from AI models.</data>
      <data key="d7">synchronous operations, data retrieval</data>
      <data key="d8">chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="User" target="Agent">
      <data key="d5">16.0</data>
      <data key="d6">User class is utilized as a type hint in defining dependencies for an Agent.</data>
      <data key="d7">type usage, dependency management</data>
      <data key="d8">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="User" target="RunContext">
      <data key="d5">7.0</data>
      <data key="d6">The User data class is intended to work within the context of RunContext during the execution of Agents.</data>
      <data key="d7">contextual use, dependency management</data>
      <data key="d8">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="type_mistakes.py" target="Agent">
      <data key="d5">14.0</data>
      <data key="d6">The type_mistakes.py script illustrates potential validation errors that could arise when using the Agent improperly.</data>
      <data key="d7">error demonstration, code validation</data>
      <data key="d8">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="type_mistakes.py" target="mypy">
      <data key="d5">9.0</data>
      <data key="d6">mypy can identify the validation errors shown in type_mistakes.py, helping developers catch type issues early in the development process.</data>
      <data key="d7">type checking, error identification</data>
      <data key="d8">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="type_mistakes.py" target="pyright">
      <data key="d5">9.0</data>
      <data key="d6">Similarly, pyright can analyze type_mistakes.py to point out type inconsistencies that could lead to runtime errors.</data>
      <data key="d7">type checking, error identification</data>
      <data key="d8">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="system_prompts.py" target="Agent">
      <data key="d5">20.0</data>
      <data key="d6">The system_prompts.py script shows how to define prompts within an Agent for dynamic responses based on the context.</data>
      <data key="d7">prompt definition, context-based functionality</data>
      <data key="d8">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Validation Errors" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">Validation Errors can arise during the execution of an Agent when the inputs do not match the expected types or schemas.</data>
      <data key="d7">error handling, type validation</data>
      <data key="d8">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Validation Errors" target="Schema Validation">
      <data key="d5">9.0</data>
      <data key="d6">Schema Validation is a process that aims to prevent Validation Errors by ensuring data complies with defined formats.</data>
      <data key="d7">process relationship, data verification</data>
      <data key="d8">chunk-f375a3596539c3931dca74338cc79546</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="dependencies" target="joke_selection_agent">
      <data key="d5">9.0</data>
      <data key="d6">The joke_selection_agent requires various dependencies to function, including the Client and API key for successful operations.</data>
      <data key="d7">agent requirements, operational dependencies</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="dependencies" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The agent utilizes dependencies to perform its functions, necessitating the management of these through context management processes.</data>
      <data key="d7">software functionality, resource management</data>
      <data key="d8">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="dependencies" target="Python">
      <data key="d5">8.0</data>
      <data key="d6">Dependencies are external libraries that enhance the functionality of the Python script, making it possible to implement various features accurately.</data>
      <data key="d7">external libraries, functional enhancement</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ChatResult" target="Agent">
      <data key="d5">16.0</data>
      <data key="d6">Agent produces ChatResults to document the outcomes of interactions with the user.</data>
      <data key="d7">result documentation, interaction outcome</data>
      <data key="d8">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="John Doe" target="Message to John Doe">
      <data key="d5">20.0</data>
      <data key="d6">The message is specifically addressed to John Doe, inviting him for coffee, which highlights a personal interaction.</data>
      <data key="d7">social interaction, invitation</data>
      <data key="d8">chunk-729cd2b3c578d9a846adee8336cc05fd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UnexpectedModelBehavior" target="AgentRunError">
      <data key="d5">16.0</data>
      <data key="d6">UnexpectedModelBehavior is another type of AgentRunError caused by unexpected responses from the model.</data>
      <data key="d7">unpredictability, error categorization</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UnexpectedModelBehavior" target="pydantic_ai_slim">
      <data key="d5">9.0</data>
      <data key="d6">UnexpectedModelBehavior is utilized within pydantic_ai_slim to address abnormal model responses.</data>
      <data key="d7">error handling, library functionality</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UnexpectedModelBehavior" target="_process_response">
      <data key="d5">8.0</data>
      <data key="d6">UnexpectedModelBehavior may be raised within _process_response if there is an issue with the expected contents of the response.</data>
      <data key="d7">error handling, execution flow</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UnexpectedModelBehavior" target="HTTPResponse">
      <data key="d5">9.0</data>
      <data key="d6">UnexpectedModelBehavior is raised in the event of an issue with the HTTPResponse, reflecting a failure to meet expectations.</data>
      <data key="d7">error handling, response validation</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UnexpectedModelBehavior" target="MistralToolCall">
      <data key="d5">7.0</data>
      <data key="d6">UnexpectedModelBehavior is triggered during the execution of MistralToolCall if the model doesn't behave as expected.</data>
      <data key="d7">error handling, model validation</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="PydanticAI">
      <data key="d5">16.0</data>
      <data key="d6">OpenAI provides the AI models that PydanticAI utilizes within its framework.&lt;SEP&gt;PydanticAI can utilize various models, including those developed by OpenAI, for generating responses to user queries.</data>
      <data key="d7">AI solutions, technology integration&lt;SEP&gt;model interaction, AI applications</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8&lt;SEP&gt;chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="DuckDuckGo">
      <data key="d5">7.0</data>
      <data key="d6">OpenAI's capabilities can be utilized alongside DuckDuckGo's search functionalities for enhanced AI services.</data>
      <data key="d7">search integration, AI application</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="pydantic_ai">
      <data key="d5">25.0</data>
      <data key="d6">OpenAI and pydantic_ai are interconnected as OpenAI incorporates pydantic's functionalities within its AI tools and frameworks.&lt;SEP&gt;OpenAI provides the underlying technology that PydanticAI leverages to build advanced data models and responses.&lt;SEP&gt;Pydantic AI provides compatibility and integration for OpenAI models and services within its framework.</data>
      <data key="d7">AI technology, framework integration&lt;SEP&gt;model compatibility, API integration&lt;SEP&gt;organization collaboration, AI tools</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-ee3a2195c443994ca9561a9128e4ad0d&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="Gemini">
      <data key="d5">16.0</data>
      <data key="d6">Both OpenAI and Gemini are engaged in AI technology development, indicating a collaborative space within the industry.</data>
      <data key="d7">AI development, collaboration</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="Anthropic">
      <data key="d5">14.0</data>
      <data key="d6">OpenAI's focus aligns with Anthropic's mission in the AI safety sector, suggesting potential partnerships or competition.</data>
      <data key="d7">AI safety, competition</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="Groq">
      <data key="d5">18.0</data>
      <data key="d6">Groq provides hardware solutions that can enhance the performance of AI models like those developed by OpenAI.</data>
      <data key="d7">hardware-software synergy, performance enhancement</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="Timeout">
      <data key="d5">8.0</data>
      <data key="d6">Timeout is a feature supported by OpenAI that allows control over how long to wait for a request to complete.</data>
      <data key="d7">request management, operational efficiency</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="max_tokens">
      <data key="d5">9.0</data>
      <data key="d6">max_tokens is an attribute defined by OpenAI that impacts how much text the AI can generate in response.</data>
      <data key="d7">output control, AI modeling</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="temperature">
      <data key="d5">8.0</data>
      <data key="d6">temperature is a parameter used by OpenAI to influence the randomness of AI responses.</data>
      <data key="d7">output variability, response generation</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="top_p">
      <data key="d5">7.0</data>
      <data key="d6">top_p is an attribute utilized by OpenAI for controlling response generation based on token probability.</data>
      <data key="d7">probability management, AI response customization</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="LS">
      <data key="d5">6.0</data>
      <data key="d6">OpenAI's tools are designed for specific functionalities within events such as LS which may rely on their capabilities.</data>
      <data key="d7">tool functionality, organizational relevance</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="OpenAI Python Client">
      <data key="d5">9.0</data>
      <data key="d6">The OpenAI Python Client is developed by OpenAI, thus directly related to their organization and activities.</data>
      <data key="d7">software development, organizational affiliation</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="FileSearchToolParam">
      <data key="d5">7.0</data>
      <data key="d6">FileSearchToolParam is a component of OpenAI's tools, indicating its relevance to the organization.</data>
      <data key="d7">tool category, organizational relevance</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="WebSearchToolParam">
      <data key="d5">7.0</data>
      <data key="d6">WebSearchToolParam is part of OpenAI's suite of tools, reflecting the organization's focus on web services.</data>
      <data key="d7">tool category, organizational relevance</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="ComputerToolParam">
      <data key="d5">7.0</data>
      <data key="d6">ComputerToolParam represents a category of functionalities within OpenAI's tool set, highlighting its organizational context.</data>
      <data key="d7">tool category, organizational relevance</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="openai_builtin_tools">
      <data key="d5">8.0</data>
      <data key="d6">OpenAI provides built-in tools that facilitate various functionalities for model interactions, crucial for operational efficiency.</data>
      <data key="d7">tool utility, organizational relevance</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="openai_reasoning_generate_summary">
      <data key="d5">7.0</data>
      <data key="d6">OpenAI's models utilize reasoning summary parameters to define the response style, showcasing adaptability in communication.</data>
      <data key="d7">response customization, tool functionality</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="openai_truncation">
      <data key="d5">7.0</data>
      <data key="d6">OpenAI's approach to response truncation demonstrates its commitment to efficient data handling and model performance."&lt;/|&gt;"data management, operational efficiency</data>
      <data key="d7">7</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="DocumentUrl">
      <data key="d5">5.0</data>
      <data key="d6">OpenAI's API involves handling various input types, including DocumentUrls, although there are limitations noted on its support.</data>
      <data key="d7">API integration, input handling</data>
      <data key="d8">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="ChatCompletionContentPartInputAudioParam">
      <data key="d5">8.0</data>
      <data key="d6">OpenAI enables audio processing within chat completions, employing ChatCompletionContentPartInputAudioParam for handling audio data.</data>
      <data key="d7">audio processing, AI capabilities</data>
      <data key="d8">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="cached_async_http_client">
      <data key="d5">6.0</data>
      <data key="d6">The cached_async_http_client supports OpenAI's API in making efficient HTTP requests, crucial for retrieving and processing data.</data>
      <data key="d7">performance optimization, client support</data>
      <data key="d8">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="pydantic_ai_slim">
      <data key="d5">9.0</data>
      <data key="d6">pydantic_ai_slim facilitates the implementation of OpenAI models, enhancing model management and integration with AI functionalities.</data>
      <data key="d7">framework integration, model management</data>
      <data key="d8">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="AsyncOpenAI">
      <data key="d5">16.0</data>
      <data key="d6">AsyncOpenAI provides asynchronous interaction capabilities for OpenAI's APIs, making the integration of services more efficient.&lt;SEP&gt;OpenAI utilizes AsyncOpenAI for efficient API interactions that allow for non-blocking requests and improved responsiveness.</data>
      <data key="d7">asynchronous processing, performance&lt;SEP&gt;efficiency, service enhancement</data>
      <data key="d8">chunk-66833d79e4d36b5a0e73579d383201e2&lt;SEP&gt;chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="OpenAIModelName">
      <data key="d5">7.0</data>
      <data key="d6">OpenAIModelName is employed within the OpenAI framework to identify and manage different model variants for specific tasks.</data>
      <data key="d7">model identification, categorization</data>
      <data key="d8">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="OpenAISystemPromptRole">
      <data key="d5">8.0</data>
      <data key="d6">OpenAISystemPromptRole aids in defining how OpenAI models interpret prompts and generate responses, aligning model output with user expectations.</data>
      <data key="d7">prompt management, response generation</data>
      <data key="d8">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="Responses API">
      <data key="d5">9.0</data>
      <data key="d6">OpenAI develops and manages the Responses API as part of its AI offerings.</data>
      <data key="d7">development, service management</data>
      <data key="d8">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="Chat Completions API">
      <data key="d5">8.0</data>
      <data key="d6">OpenAI is responsible for providing the Chat Completions API as a way to facilitate conversational AI.".</data>
      <data key="d7">development, conversational AI</data>
      <data key="d8">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="Pydantic AI Slim">
      <data key="d5">7.0</data>
      <data key="d6">OpenAI can leverage Pydantic AI Slim for managing data models and validations as part of their API offerings.</data>
      <data key="d7">data management, collaboration</data>
      <data key="d8">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="ModelRequest">
      <data key="d5">9.0</data>
      <data key="d6">OpenAI is responsible for processing ModelRequests to generate corresponding responses.</data>
      <data key="d7">organization and event interaction</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="ModelResponse">
      <data key="d5">10.0</data>
      <data key="d6">OpenAI generates ModelResponses based on ModelRequests received from users.</data>
      <data key="d7">organization and event output</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="ModelRequest Parameters">
      <data key="d5">8.0</data>
      <data key="d6">OpenAI utilizes ModelRequest Parameters to customize the requests made to its AI models.</data>
      <data key="d7">API configuration, request customization</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="ModelResponse Parameters">
      <data key="d5">9.0</data>
      <data key="d6">OpenAI structures ModelResponse Parameters to define how responses are formatted and generated from user requests.</data>
      <data key="d7">API configuration, response formatting</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="Agent">
      <data key="d5">16.0</data>
      <data key="d6">OpenAI's technology is used within the Agent framework for executing advanced question-answering tasks.&lt;SEP&gt;The Agent utilizes the OpenAI model for executing tasks and processing user prompts.</data>
      <data key="d7">AI application, technology utilization&lt;SEP&gt;model utilization, task processing</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI" target="logfire">
      <data key="d5">8.0</data>
      <data key="d6">Logfire utilizes OpenAI's tools to enhance its documentation retrieval capabilities.</data>
      <data key="d7">integration, technology partnership</data>
      <data key="d8">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DuckDuckGo" target="PydanticAI">
      <data key="d5">7.0</data>
      <data key="d6">PydanticAI can use DuckDuckGo to perform web searches for better data retrieval in its applications.</data>
      <data key="d7">data retrieval, privacy-focused search</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DuckDuckGo" target="PyPI">
      <data key="d5">18.0</data>
      <data key="d6">DuckDuckGo offers a package on PyPI, allowing users to install its functionalities and enhance web privacy through the package management system.&lt;SEP&gt;DuckDuckGo provides a package that can be installed from PyPI, showcasing its utility for developers.</data>
      <data key="d7">software integration, package management&lt;SEP&gt;software integration, privacy tools</data>
      <data key="d8">chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tavily" target="Tavily Search Tool">
      <data key="d5">18.0</data>
      <data key="d6">Tavily provides the service that powers the Tavily Search Tool, allowing users to utilize its functionalities.</data>
      <data key="d7">service provider, platform relationship</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tavily" target="PyPI">
      <data key="d5">18.0</data>
      <data key="d6">Tavily is listed on PyPI, allowing users to install its functionalities via Python package management.&lt;SEP&gt;Tavily's services can be installed via PyPI, illustrating its integration with Python's package management ecosystem for travel management tasks.</data>
      <data key="d7">software integration, package management</data>
      <data key="d8">chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ne Zha 2" target="Inside Out 2">
      <data key="d5">9.0</data>
      <data key="d6">Both films are highlighted as top animated films of 2025, showcasing their box office success and popularity.</data>
      <data key="d7">box office comparison, film success</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ne Zha 2" target="2025">
      <data key="d5">10.0</data>
      <data key="d6">The discussions around Ne Zha 2's box office performance are specifically tied to the year 2025.</data>
      <data key="d7">timeframe, box office performance</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ne Zha 2" target="Box Office Mojo">
      <data key="d5">8.0</data>
      <data key="d6">Box Office Mojo may track and report the box office earnings of Ne Zha 2, linking this entity to film performance metrics.</data>
      <data key="d7">box office tracking, film statistics</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ne Zha 2" target="The Numbers">
      <data key="d5">8.0</data>
      <data key="d6">The Numbers provides detailed reporting on box office performances, which includes film earnings for Ne Zha 2.</data>
      <data key="d7">film financials, tracking performance</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Inside Out 2" target="2025">
      <data key="d5">10.0</data>
      <data key="d6">Inside Out 2's performance is also linked to the 2025 box office discussions, marking its significance during that year.</data>
      <data key="d7">timeframe, film performance</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Inside Out 2" target="Statista">
      <data key="d5">5.0</data>
      <data key="d6">Statista provides economic data that may include insights into the performance of films like Inside Out 2.</data>
      <data key="d7">market analysis, film performance</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OPENAI_API_KEY" target="pai">
      <data key="d5">8.0</data>
      <data key="d6">The OPENAI_API_KEY is required to execute commands in the pai interactive session, linking security to functionality.</data>
      <data key="d7">authentication, functionality</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pai" target="uv">
      <data key="d5">7.0</data>
      <data key="d6">pai can utilize uv to enhance its command execution, making the process more efficient for users.</data>
      <data key="d7">performance enhancement, tool integration</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="uv" target="uvx">
      <data key="d5">8.0</data>
      <data key="d6">uv and uvx work together to optimize the command-line interface for running tasks related to AI models.</data>
      <data key="d7">tool collaboration, optimization</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DuckDuckGo Search Tool" target="Tavily Search Tool">
      <data key="d5">6.0</data>
      <data key="d6">Both search tools offer functionalities for information retrieval through different mechanisms and services.</data>
      <data key="d7">data retrieval, search tools</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tavily Search Tool" target="Tavily API">
      <data key="d5">16.0</data>
      <data key="d6">The Tavily Search Tool relies on the Tavily API to provide its web search capabilities.</data>
      <data key="d7">service dependency, technological basis</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tavily Search Tool" target="pydantic-ai-slim">
      <data key="d5">14.0</data>
      <data key="d6">pydantic-ai-slim is necessary to run the Tavily Search Tool, linking the installation to its usage.</data>
      <data key="d7">installation requirement, software dependency</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tavily Search Tool" target="installation">
      <data key="d5">7.0</data>
      <data key="d6">Installation is a prerequisite for using the Tavily Search Tool effectively, indicating a necessary action to engage with it.</data>
      <data key="d7">setup process, tool engagement</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tavily Search Tool" target="usage">
      <data key="d5">8.0</data>
      <data key="d6">Usage of the Tavily Search Tool follows after the installation process, highlighting how users interact with it.</data>
      <data key="d7">user interaction, operational phase</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tavily Search Tool" target="Federal Reserve">
      <data key="d5">6.0</data>
      <data key="d6">Federal Reserve policies may influence the type of information retrieved via the Tavily Search Tool, particularly in economic contexts.</data>
      <data key="d7">policy impact, information retrieval</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Just Jared" target="record-breaking films">
      <data key="d5">7.0</data>
      <data key="d6">Just Jared reports on the film industry, highlighting films that achieve record-breaking status, such as Ne Zha 2 and Inside Out 2.</data>
      <data key="d7">entertainment reporting, film performance</data>
      <data key="d8">chunk-75b2d3dceba3b2912e53dc8b82dbacd8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Federal Reserve" target="Nexon Technologies">
      <data key="d5">8.0</data>
      <data key="d6">Nexon Technologies' financial performance is affected by the monetary policies implemented by the Federal Reserve.</data>
      <data key="d7">economic influence, financial performance</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Noah Carter" target="World Athletics Championship">
      <data key="d5">29.0</data>
      <data key="d6">Noah Carter competed in and broke the 100m sprint record during the World Athletics Championship, marking a significant achievement in the event.&lt;SEP&gt;Noah Carter is an athlete who participates and excels in the World Athletics Championship, achieving notable records.&lt;SEP&gt;Noah Carter is associated with the World Athletics Championship as an athlete competing at this prestigious event.</data>
      <data key="d7">athlete achievement, record-breaking&lt;SEP&gt;athlete achievement, sports participation&lt;SEP&gt;athlete participation, event connection</data>
      <data key="d8">chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c&lt;SEP&gt;chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Noah Carter" target="Carbon-Fiber Spikes">
      <data key="d5">14.0</data>
      <data key="d6">Noah Carter used carbon-fiber spikes to enhance his performance while competing at the World Athletics Championship.&lt;SEP&gt;Noah Carter utilizes carbon-fiber spikes, which are designed to optimize his performance in sprinting events during competitions.</data>
      <data key="d7">athletic equipment, performance enhancement&lt;SEP&gt;athletic performance, equipment use</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="World Athletics Championship" target="Tokyo">
      <data key="d5">24.0</data>
      <data key="d6">The World Athletics Championship is held in Tokyo, highlighting its significance as an event location.&lt;SEP&gt;The World Athletics Championship is hosted in Tokyo, which serves as the venue for this major sports event.&lt;SEP&gt;The World Athletics Championship took place in Tokyo, spotlighting the city's role in hosting significant sporting events.</data>
      <data key="d7">event location, hosting&lt;SEP&gt;event location, international competition</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="World Athletics Championship" target="Agent">
      <data key="d5">6.0</data>
      <data key="d6">The Agent can provide information and data regarding the World Athletics Championship based on user queries.</data>
      <data key="d7">information processing, event assistance</data>
      <data key="d8">chunk-ed10d031435c9386fd353a8330563748</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage" target="ctx">
      <data key="d5">9.0</data>
      <data key="d6">The usage object is associated with ctx, providing metrics on resource consumption during the agent's run.</data>
      <data key="d7">resource monitoring, context association</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage" target="Agent">
      <data key="d5">21.0</data>
      <data key="d6">The Agent employs usage mechanisms to determine how inputs are processed, setting up parameters for its operations.&lt;SEP&gt;Usage gives the Agent a starting point to maintain continuity in conversation, allowing it to resume dialogues efficiently.&lt;SEP&gt;Usage provides insights into how the agent is interacting and responding over time."|"activity monitoring, performance analytics</data>
      <data key="d7">6&lt;SEP&gt;conversation continuity, resume interaction&lt;SEP&gt;process management, operational parameters</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage" target="self._state">
      <data key="d5">9.0</data>
      <data key="d6">self._state manages the current usage tracking and provides the usage value via its method."|</data>
      <data key="d7">state management, return value</data>
      <data key="d8">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage" target="OpenTelemetry">
      <data key="d5">7.0</data>
      <data key="d6">Usage tracks the performance and usage analytics of tools executed under OpenTelemetry, providing insights into operational efficiency.</data>
      <data key="d7">usage tracking, performance analytics</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage" target="StreamedResponse">
      <data key="d5">7.0</data>
      <data key="d6">StreamedResponse accesses and tracks usage data to optimize performance metrics.</data>
      <data key="d7">performance tracking, data analytics</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="usage" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">Usage metrics are derived from ModelResponse outputs, indicating the effectiveness and efficiency of the model's performance.</data>
      <data key="d7">performance evaluation, model tracking</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Thomson Reuters" target="GenAI">
      <data key="d5">8.0</data>
      <data key="d6">Thomson Reuters publishes news articles discussing developments and implications of GenAI technology.</data>
      <data key="d7">news coverage, technology impact</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TELUS Digital" target="GenAI">
      <data key="d5">9.0</data>
      <data key="d6">TELUS Digital's survey reveals how GenAI tools are used in enterprise settings, offering insights into transparency and data handling.</data>
      <data key="d7">market research, enterprise usage</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Nexon Technologies" target="Global Tech Index">
      <data key="d5">16.0</data>
      <data key="d6">Nexon Technologies' stock decline contributed to the overall drop in the Global Tech Index.&lt;SEP&gt;Nexon Technologies' stock performance is a contributing factor to the decline of the Global Tech Index during the market selloff.</data>
      <data key="d7">company impact, index movement&lt;SEP&gt;index performance, stock influence</data>
      <data key="d8">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Omega Energy" target="Crude Oil">
      <data key="d5">9.0</data>
      <data key="d6">The stock performance of Omega Energy is inherently linked to the dynamics of crude oil pricing in the market.</data>
      <data key="d7">market relationship, commodity influence</data>
      <data key="d8">chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Gold Futures" target="Market Selloff">
      <data key="d5">20.0</data>
      <data key="d6">Gold Futures are considered safe investments during a market selloff, reflecting a common trend among investors.&lt;SEP&gt;Gold prices rose as investors sought safe-haven assets during the market selloff.</data>
      <data key="d7">investment strategy, market response&lt;SEP&gt;market reaction, safe-haven investment</data>
      <data key="d8">chunk-848b83bfc3ae6c2755d4c3644cfef354&lt;SEP&gt;chunk-c48c3a158b02117d706e48f9993aaa8c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">httpx is utilized within PydanticAI for performing HTTP requests necessary for various agent functionalities.</data>
      <data key="d7">HTTP client, communication</data>
      <data key="d8">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx" target="MyDeps">
      <data key="d5">7.0</data>
      <data key="d6">MyDeps includes an instance of httpx, allowing the agent to make HTTP calls efficiently during its operation.</data>
      <data key="d7">dependency container, HTTP communication</data>
      <data key="d8">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyDeps" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">MyDeps serves as a container for dependencies that PydanticAI requires for managing agents effectively.</data>
      <data key="d7">dependency management, services</data>
      <data key="d8">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyDeps" target="httpx.Client">
      <data key="d5">16.0</data>
      <data key="d6">MyDeps defines dependencies including an instance of httpx.Client for making synchronous HTTP calls within its methods.&lt;SEP&gt;MyDeps uses httpx.Client as a dependency to make synchronous HTTP requests in its methods.</data>
      <data key="d7">dependency, HTTP client</data>
      <data key="d8">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyDeps" target="get_system_prompt">
      <data key="d5">14.0</data>
      <data key="d6">get_system_prompt accesses MyDeps to use httpx.Client for making an HTTP network request.&lt;SEP&gt;get_system_prompt leverages MyDeps to utilize httpx.Client for making necessary HTTP requests to fetch prompts.</data>
      <data key="d7">function dependency, network request</data>
      <data key="d8">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyDeps" target="TestMyDeps">
      <data key="d5">15.0</data>
      <data key="d6">TestMyDeps is a specifically tailored subclass of MyDeps, indicating a relationship based on inheritance and specialization.&lt;SEP&gt;TestMyDeps is a subclass that customizes the MyDeps class, showcasing inheritance and dependency override in testing.</data>
      <data key="d7">inheritance, dependency injection&lt;SEP&gt;inheritance, specialization</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Get System Prompt" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The Get System Prompt action is invoked by the Agent to facilitate the retrieval of pertinent information for processing tasks.</data>
      <data key="d7">agent action, prompt retrieval</data>
      <data key="d8">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Main Function" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The Main Function is the entry point for executing the Agent with defined dependencies, triggering the overall process.</data>
      <data key="d7">execution, entry point</data>
      <data key="d8">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asyncio" target="AsyncExitStack">
      <data key="d5">8.0</data>
      <data key="d6">asyncio provides the asynchronous capabilities that AsyncExitStack utilizes for managing execution flow.</data>
      <data key="d7">asynchronous programming, execution management</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asyncio" target="main">
      <data key="d5">7.0</data>
      <data key="d6">Asyncio is utilized within the main function to manage asynchronous tasks and connections effectively.</data>
      <data key="d7">asynchronous programming, task management</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asyncio" target="streaming structured responses">
      <data key="d5">9.0</data>
      <data key="d6">Asyncio is used in the script to enable asynchronous operations, improving the efficiency and responsiveness of the streaming structured responses.</data>
      <data key="d7">asynchronous programming, efficiency</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dependencies" target="mcp_run_python.py">
      <data key="d5">9.0</data>
      <data key="d6">The script mcp_run_python.py specifies its Dependencies, which need to be in place for the successful execution of the code.</data>
      <data key="d7">dependency management, code execution</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Data Validation" target="PydanticAI">
      <data key="d5">10.0</data>
      <data key="d6">Data Validation is a key feature of PydanticAI, ensuring that inputs to agents are correct and adhere to defined standards.</data>
      <data key="d7">input validity, framework feature</data>
      <data key="d8">chunk-09e12018443ae8bc554ab8d9d7202409</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx.Client" target="Authorization">
      <data key="d5">14.0</data>
      <data key="d6">Authorization headers are used with httpx.Client when making requests that require valid authentication credentials.&lt;SEP&gt;Authorization is used in conjunction with httpx.Client when making requests requiring authentication.</data>
      <data key="d7">security, authentication</data>
      <data key="d8">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx.Client" target="Diagram Properties">
      <data key="d5">6.0</data>
      <data key="d6">httpx.Client is mentioned as a component used in conjunction with diagram properties for making HTTP requests during diagram generation.</data>
      <data key="d7">client usage, application context</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="agent" target="run">
      <data key="d5">18.0</data>
      <data key="d6">The agent is executed to run the task defined in the main function, handling the execution flow and results.&lt;SEP&gt;The agent runs within the main function to execute specific tasks utilizing the defined dependencies and manage input responses.</data>
      <data key="d7">execution, task management</data>
      <data key="d8">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="agent" target="get_system_prompt">
      <data key="d5">16.0</data>
      <data key="d6">get_system_prompt is associated with the agent as it defines how to retrieve system prompts using HTTP requests.&lt;SEP&gt;get_system_prompt is defined as a function within the agent context to manage system prompts for the requests.</data>
      <data key="d7">function definition, system prompt</data>
      <data key="d8">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run" target="main">
      <data key="d5">10.0</data>
      <data key="d6">The main function orchestrates the runner of the agent's tasks and manages the flow of the application's execution.</data>
      <data key="d7">orchestration, application flow</data>
      <data key="d8">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The run method is a core function of the Agent class that performs a specific task based on user input.</data>
      <data key="d7">method functionality, core feature</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run" target="AgentRunResult">
      <data key="d5">9.0</data>
      <data key="d6">The run method generates an AgentRunResult, encapsulating the outcome of the interaction after user input has been processed.</data>
      <data key="d7">processing outcome, result encapsulation</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run" target="prepare_tool_def">
      <data key="d5">8.0</data>
      <data key="d6">run utilizes the tool definition generated by prepare_tool_def to execute the tool function in context.</data>
      <data key="d7">execution management, functional operations</data>
      <data key="d8">chunk-8dbbf042d22f24ab47fdb61c76c368c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run" target="get_node_def">
      <data key="d5">8.0</data>
      <data key="d6">The run method's return type definition is essential for determining possible next nodes in the graph, creating a link between executing node logic and defining node pathways.</data>
      <data key="d7">execution flow, node management</data>
      <data key="d8">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run" target="GraphRunContext">
      <data key="d5">8.0</data>
      <data key="d6">The run method executes with a GraphRunContext, which provides necessary context for node execution and state management.</data>
      <data key="d7">execution process, contextual dependency</data>
      <data key="d8">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">The run method must be implemented by any subclass of BaseNode, establishing a direct relationship between the base functionality and node behavior.</data>
      <data key="d7">inheritance, method definition</data>
      <data key="d8">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="get_system_prompt" target="response.raise_for_status">
      <data key="d5">8.0</data>
      <data key="d6">response.raise_for_status is utilized in get_system_prompt to handle HTTP response validation and error handling.</data>
      <data key="d7">error management, HTTP validation</data>
      <data key="d8">chunk-caeb7b31135f4e36ba22304bc0e7ff49</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asyncio.run" target="DivisibleBy5">
      <data key="d5">9.0</data>
      <data key="d6">asyncio.run is invoked to execute the DivisibleBy5 coroutine, initiating its functionality in the graph.</data>
      <data key="d7">asynchronous execution, coroutine initiation</data>
      <data key="d8">chunk-241cea24e0ec8915cd8b8580f86bf720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asyncio.run" target="joke_selection_agent">
      <data key="d5">15.0</data>
      <data key="d6">The joke_selection_agent is executed within the asyncio.run function to effectively handle asynchronous processes.&lt;SEP&gt;The joke_selection_agent is executed within the asyncio.run function to manage its asynchronous execution flow.</data>
      <data key="d7">asynchronous execution, agent operation&lt;SEP&gt;asynchronous execution, operational flow</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asyncio.run" target="joke_generation_agent">
      <data key="d5">7.0</data>
      <data key="d6">The execution of joke_generation_agent is managed through asyncio.run, ensuring that it runs in an asynchronous environment.</data>
      <data key="d7">execution management, asynchronous execution</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="main" target="find_flight">
      <data key="d5">9.0</data>
      <data key="d6">The find_flight function is called within the main function as part of the overall process to facilitate flight searching.</data>
      <data key="d7">functionality sequence, program flow</data>
      <data key="d8">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="main" target="find_seat">
      <data key="d5">8.0</data>
      <data key="d6">The find_seat function is invoked by the main function to gather user seat preferences after finding a flight.</data>
      <data key="d7">functionality sequence, user interaction</data>
      <data key="d8">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="main" target="GraphRun">
      <data key="d5">9.0</data>
      <data key="d6">The main function initializes and starts the execution of GraphRun, demonstrating its application in a real-world scenario.</data>
      <data key="d7">execution initiation, application demonstration</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="main" target="sys">
      <data key="d5">6.0</data>
      <data key="d6">Sys is used in the main function to handle command-line arguments for dynamic script behavior.</data>
      <data key="d7">command line interaction, script execution</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_agent" target="application_code">
      <data key="d5">8.0</data>
      <data key="d6">application_code utilizes the joke_agent to provide a joke response based on user input, showcasing functional reliance.</data>
      <data key="d7">functionality, dependency</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_agent" target="joke">
      <data key="d5">10.0</data>
      <data key="d6">joke_agent generates jokes using the application code, directly linking the joke agent to the humor content it produces.</data>
      <data key="d7">content generation, functional dependency</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TestMyDeps" target="test_joke_app.py">
      <data key="d5">9.0</data>
      <data key="d6">test_joke_app.py includes tests for TestMyDeps to verify that it correctly customizes dependencies.</data>
      <data key="d7">testing, verification</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TestMyDeps" target="joke_app">
      <data key="d5">9.0</data>
      <data key="d6">joke_app uses TestMyDeps to manage dependencies specifically for testing scenarios within the application.</data>
      <data key="d7">dependency management, testing</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TestMyDeps" target="async function">
      <data key="d5">7.0</data>
      <data key="d6">TestMyDeps defines an asynchronous method, enhancing the testing capabilities of the joke application.</data>
      <data key="d7">asynchronous programming, testing capabilities</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TestMyDeps" target="system_prompt_factory">
      <data key="d5">9.0</data>
      <data key="d6">TestMyDeps overrides the system_prompt_factory method to customize the behavior of the joke application during tests.</data>
      <data key="d7">method overriding, customization</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic Evals" target="Dataset">
      <data key="d5">8.0</data>
      <data key="d6">Pydantic Evals framework uses Dataset to collect and manage various test cases for evaluation.</data>
      <data key="d7">evaluation framework, test management</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="Case">
      <data key="d5">47.0</data>
      <data key="d6">Case instances are aggregated into a Dataset, which serves as a collection of all test cases for systematic evaluation."|&lt;SEP&gt;Case instances are stored within a Dataset for systematic evaluation."|&lt;SEP&gt;Dataset contains multiple instances of Case, which represent different test scenarios for evaluation purposes.&lt;SEP&gt;The Dataset contains multiple Cases which can be evaluated against a task function.&lt;SEP&gt;The Dataset model is a collection that incorporates multiple Case instances, showcasing how they relate to one another within evaluations.</data>
      <data key="d7">collection, data structure&lt;SEP&gt;collection, scenario evaluation&lt;SEP&gt;collection, structured testing&lt;SEP&gt;collection, testing structure&lt;SEP&gt;test aggregation, structured testing</data>
      <data key="d8">chunk-fbd48d906573dc919932c60117d15be5&lt;SEP&gt;chunk-c0417af0fa24429ddd11fe9cfa92e39e&lt;SEP&gt;chunk-931e9fa216c79b214c228f17140b2fb4&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="Evaluator">
      <data key="d5">56.0</data>
      <data key="d6">Dataset class employs Evaluators to apply specific evaluation logic during the data loading process.&lt;SEP&gt;Dataset incorporates Evaluators that provide the ability to define custom criteria for judging the correctness of function outputs."|&lt;SEP&gt;Dataset utilizes Evaluators to assess the performance of the evaluated function against the expected outcomes."|&lt;SEP&gt;Evaluators are associated with the Dataset to assess each Case based on defined input-output specifications, ensuring performance validation.&lt;SEP&gt;Evaluators are critical for assessing the outputs of the Dataset generated, ensuring the quality and integrity of the test cases.&lt;SEP&gt;The Dataset class can utilize Evaluators to apply custom evaluation logic during data loading.&lt;SEP&gt;The Evaluator applies to all Cases within the Dataset to determine if their outputs match the expected outputs.</data>
      <data key="d7">assessment, evaluation process&lt;SEP&gt;custom evaluation, flexibility&lt;SEP&gt;evaluation framework, performance assessment&lt;SEP&gt;evaluation system, performance assessment&lt;SEP&gt;evaluation, flexibility&lt;SEP&gt;evaluation, validation&lt;SEP&gt;quality assurance, dataset evaluation</data>
      <data key="d8">chunk-dcc0ef06948f95ef73eef5b238e34d40&lt;SEP&gt;chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-fbd48d906573dc919932c60117d15be5&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="MyEvaluator">
      <data key="d5">14.0</data>
      <data key="d6">MyEvaluator is employed within Dataset to provide custom evaluation logic for the test cases."|&lt;SEP&gt;MyEvaluator is utilized within a Dataset to apply specific evaluation logic tailored to the test cases."|</data>
      <data key="d7">custom evaluation, testing logic&lt;SEP&gt;evaluation method, custom logic</data>
      <data key="d8">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="report">
      <data key="d5">16.0</data>
      <data key="d6">The report generated summarizes the results from evaluating all Cases within the Dataset, reflecting the performance of the function being assessed."|&lt;SEP&gt;report summarizes the evaluation results derived from the Dataset."|</data>
      <data key="d7">evaluation results, summary output&lt;SEP&gt;results summary, evaluation feedback</data>
      <data key="d8">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="questions_cases.json">
      <data key="d5">9.0</data>
      <data key="d6">The Dataset represents the collection of structured questions and answers found within the questions_cases.json file.</data>
      <data key="d7">data organization, structured information</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="Expected Output">
      <data key="d5">9.0</data>
      <data key="d6">The Dataset contains multiple cases, each with its own Expected Output to be compared against actual task results.</data>
      <data key="d7">testing framework, outcomes</data>
      <data key="d8">chunk-c7b339013d51cc610e38dd15ec7332e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="Evaluators">
      <data key="d5">8.0</data>
      <data key="d6">The Evaluators are associated with the Dataset to systematically verify the outcomes of cases within it.</data>
      <data key="d7">evaluation relationship, assessment methodology</data>
      <data key="d8">chunk-c7b339013d51cc610e38dd15ec7332e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="MetadataT">
      <data key="d5">21.0</data>
      <data key="d6">Dataset can incorporate MetadataT type definitions to include additional information related to the datasets.&lt;SEP&gt;The Dataset incorporates MetadataT to provide additional context and details about the cases and their evaluations.&lt;SEP&gt;The Dataset may utilize MetadataT to provide further context and details about the cases within it.</data>
      <data key="d7">contextual information, enhancing understanding&lt;SEP&gt;contextual information, management&lt;SEP&gt;metadata, supplementary information</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="Path">
      <data key="d5">8.0</data>
      <data key="d6">The Path class is utilized within the Dataset class for loading data files.</data>
      <data key="d7">file management, data loading</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="Validator">
      <data key="d5">9.0</data>
      <data key="d6">The Dataset class integrates the Validator mechanism to ensure that data meets a specified schema before being processed.</data>
      <data key="d7">data integrity, validation</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="yaml">
      <data key="d5">15.0</data>
      <data key="d6">The Dataset class supports loading data in YAML format for flexible data configuration.&lt;SEP&gt;YAML is used to save the Dataset in a human-readable format, making it accessible for configuration and analysis purposes.</data>
      <data key="d7">data format, configuration&lt;SEP&gt;data serialization, accessibility</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="json">
      <data key="d5">15.0</data>
      <data key="d6">JSON provides another format for saving the Dataset, offering a structured and lightweight data interchange solution.&lt;SEP&gt;The Dataset class also supports JSON format for data serialization and deserialization.</data>
      <data key="d7">data format, serialization&lt;SEP&gt;data serialization, interoperability</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="ValidationError">
      <data key="d5">10.0</data>
      <data key="d6">A ValidationError is raised by the Dataset class if the content fails validation.</data>
      <data key="d7">error handling, validation</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="InputsT">
      <data key="d5">16.0</data>
      <data key="d6">Dataset specifies the type of input data it can handle through the InputsT type placeholder.&lt;SEP&gt;The Dataset is built upon the defined input types (InputsT), which specify the kinds of data it will evaluate and manage.</data>
      <data key="d7">data type, evaluation framework&lt;SEP&gt;data types, input handling</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="OutputT">
      <data key="d5">16.0</data>
      <data key="d6">Dataset generates output data defined by the OutputT type placeholder that signifies the result of dataset processing.&lt;SEP&gt;The Dataset is associated with expected output types (OutputT), which guide the evaluation of each case within the dataset.</data>
      <data key="d7">data types, output specification&lt;SEP&gt;expected outcomes, assessment criteria</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="from_file">
      <data key="d5">9.0</data>
      <data key="d6">The from_file method within the Dataset class facilitates loading datasets from specified file paths.</data>
      <data key="d7">data loading, file management</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="from_text">
      <data key="d5">25.0</data>
      <data key="d6">The from_text method allows the Dataset class to directly parse data contents from string inputs.&lt;SEP&gt;The from_text method is intended for converting string data into a Dataset instance based on its format (YAML or JSON).&lt;SEP&gt;The from_text method is used to create a Dataset instance from a string input, making it functional for dataset loading.</data>
      <data key="d7">data loading, content parsing&lt;SEP&gt;dataset loading, method functionality</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="from_dict">
      <data key="d5">25.0</data>
      <data key="d6">The from_dict method allows for constructing a Dataset instance directly from a dictionary format, supporting flexible data loading.&lt;SEP&gt;The from_dict method allows for the creation of a Dataset instance from a dictionary representation, which is vital for data processing.&lt;SEP&gt;The from_dict method enables the Dataset class to create instances from a dictionary format.</data>
      <data key="d7">data handling, instance creation&lt;SEP&gt;dataset loading, method flexibility&lt;SEP&gt;dataset loading, method functionality</data>
      <data key="d8">chunk-6c87e8862a83ae6d7b637969dba767a5&lt;SEP&gt;chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="Dataset Model">
      <data key="d5">9.0</data>
      <data key="d6">The Dataset is created from the Dataset Model, utilizing its specifications for structuring data and its evaluations.</data>
      <data key="d7">data structure, organization</data>
      <data key="d8">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="to_file">
      <data key="d5">19.0</data>
      <data key="d6">The to_file method enables the saving of a Dataset instance to a file, allowing for data persistence and sharing.&lt;SEP&gt;The to_file method saves the Dataset instance to a file, enabling persistent storage and retrieval of data.</data>
      <data key="d7">data persistence, method functionality&lt;SEP&gt;data persistence, saving data</data>
      <data key="d8">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dataset" target="generate_dataset">
      <data key="d5">10.0</data>
      <data key="d6">The generate_dataset function creates a Dataset, indicating that the results of the event are structured according to the Dataset specifications.</data>
      <data key="d7">dataset creation, event result</data>
      <data key="d8">chunk-dcc0ef06948f95ef73eef5b238e34d40</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="simple_eval_complete.py">
      <data key="d5">16.0</data>
      <data key="d6">The script defines the 'Case' structure to facilitate the representation of individual test cases, including their inputs and expected outputs."|&lt;SEP&gt;The script defines the Case class to represent individual inputs and outputs for evaluation."|</data>
      <data key="d7">code structure, component definition</data>
      <data key="d8">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="Evaluator">
      <data key="d5">7.0</data>
      <data key="d6">Each Case in the Dataset links to an Evaluator that it uses for assessment, determining the correctness of the expected output.</data>
      <data key="d7">assessment relationship, evaluation</data>
      <data key="d8">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="Dataset Model">
      <data key="d5">8.0</data>
      <data key="d6">The Dataset Model outlines the structure for individual Cases, guiding the organization of inputs and expected outputs.</data>
      <data key="d7">structure definition, organizational framework</data>
      <data key="d8">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="EvaluationReport">
      <data key="d5">18.0</data>
      <data key="d6">The EvaluationReport summarizes results that are derived from the evaluations of the individual Cases.&lt;SEP&gt;The cases evaluated contribute to the results summarized in the EvaluationReport.</data>
      <data key="d7">reporting, test evaluations&lt;SEP&gt;test scenarios, reporting results</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="lambda">
      <data key="d5">12.0</data>
      <data key="d6">Lambda functions can be used in various cases to operate on inputs during evaluation.&lt;SEP&gt;Lambda functions can serve as evaluators within Cases to implement testing logic quickly and compactly.</data>
      <data key="d7">anonymous function, test case&lt;SEP&gt;anonymous functions, testing logic</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="evaluate">
      <data key="d5">9.0</data>
      <data key="d6">Each Case is evaluated during the evaluate process which tests its inputs against expected outputs.</data>
      <data key="d7">test evaluation, testing process</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="Self">
      <data key="d5">8.0</data>
      <data key="d6">The Self instance represents the dataset that includes various cases for evaluation.</data>
      <data key="d7">dataset structure, evaluation context</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="self.cases">
      <data key="d5">9.0</data>
      <data key="d6">self.cases contains multiple instances of Case that serve as the primary data for evaluation in the dataset.</data>
      <data key="d7">case management, organizational structure</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="BaseModel">
      <data key="d5">9.0</data>
      <data key="d6">The Case class inherits from BaseModel, indicating that it uses the features and validations offered by BaseModel.</data>
      <data key="d7">inheritance, data modeling</data>
      <data key="d8">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="eval_attribute">
      <data key="d5">7.0</data>
      <data key="d6">The Case model can utilize the eval_attribute method to enhance the evaluation process by setting attributes.</data>
      <data key="d7">attribute management, evaluation</data>
      <data key="d8">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case" target="increment_eval_metric">
      <data key="d5">8.0</data>
      <data key="d6">The Case model can increment metrics relevant to the evaluation it represents using the increment_eval_metric method.</data>
      <data key="d7">metric tracking, evaluation performance</data>
      <data key="d8">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_app" target="system_prompt_factory">
      <data key="d5">8.0</data>
      <data key="d6">The system_prompt_factory is utilized within the joke_app to create prompts that guide joke generation.</data>
      <data key="d7">prompt generation, application functionality</data>
      <data key="d8">chunk-931e9fa216c79b214c228f17140b2fb4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="async function" target="joke_factory">
      <data key="d5">8.0</data>
      <data key="d6">The joke_factory function is defined as an async function to allow for non-blocking execution of joke generation actions.</data>
      <data key="d7">asynchronous programming, function definition</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke" target="Colgate">
      <data key="d5">7.0</data>
      <data key="d6">The joke involving Colgate illustrates the humorous aspect of the brand, linking it to the context of the joke.</data>
      <data key="d7">brand humor, comedic reference</data>
      <data key="d8">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke" target="explanation">
      <data key="d5">9.0</data>
      <data key="d6">The explanation provides context for the joke, enhancing understanding and appreciation of its humor.</data>
      <data key="d7">contextual understanding, humor elucidation</data>
      <data key="d8">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="Evaluator Registry">
      <data key="d5">9.0</data>
      <data key="d6">The Evaluator Registry manages Evaluators, allowing for dynamic loading and usage within datasets.</data>
      <data key="d7">management system, dynamic loading</data>
      <data key="d8">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="Case Evaluator">
      <data key="d5">9.0</data>
      <data key="d6">Evaluators assess each case using functions or criteria defined by Case Evaluators, ensuring quality and correctness in evaluations.</data>
      <data key="d7">evaluation mechanism, validation process</data>
      <data key="d8">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="inspect">
      <data key="d5">8.0</data>
      <data key="d6">Inspect is utilized within the context of Evaluators to retrieve type hints and signatures, aiding in the dynamic loading of evaluator classes.</data>
      <data key="d7">dynamic analysis, type retrieval</data>
      <data key="d8">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="Self">
      <data key="d5">9.0</data>
      <data key="d6">The Self instance interfaces with Evaluators, enabling them to assess the cases effectively based on defined criteria.</data>
      <data key="d7">evaluation responsibility, functional relationship</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="model_json_schema_with_evaluators">
      <data key="d5">8.0</data>
      <data key="d6">The model_json_schema_with_evaluators method utilizes the Evaluator class to include custom evaluators in the schema.</data>
      <data key="d7">schema generation, custom evaluation</data>
      <data key="d8">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="pydantic_evals">
      <data key="d5">15.0</data>
      <data key="d6">The Evaluator exists within the pydantic_evals package, which encompasses various functionalities for creating and managing evaluations.&lt;SEP&gt;pydantic_evals provides a framework that defines evaluators, including the generic functionalities of the Evaluator category.</data>
      <data key="d7">framework, categorization&lt;SEP&gt;package framework, organizational context</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="EvaluatorContext">
      <data key="d5">25.0</data>
      <data key="d6">Evaluator uses EvaluatorContext to assess the performance of tasks based on context-specific information.&lt;SEP&gt;Evaluators use the EvaluatorContext to access inputs and outputs required for evaluating the effectiveness of tasks.&lt;SEP&gt;The Evaluator relies on the EvaluatorContext to receive inputs necessary for evaluating tasks.</data>
      <data key="d7">evaluation process, input dependency&lt;SEP&gt;performance assessment, context-related&lt;SEP&gt;task evaluation, context utilization</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b&lt;SEP&gt;chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="Python">
      <data key="d5">8.0</data>
      <data key="d6">The Python evaluator is a specific type of Evaluator tailored for executing Python expressions safely within the evaluation framework.</data>
      <data key="d7">evaluator type, execution context</data>
      <data key="d8">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="ExactMatch">
      <data key="d5">17.0</data>
      <data key="d6">ExactMatch is a specialized implementation of Evaluator that focuses on comparing actual outputs to expected outputs.&lt;SEP&gt;ExactMatch is a specific implementation of the Evaluator that focuses on ensuring the output matches exactly to the expected outcome.</data>
      <data key="d7">specific implementation, accuracy&lt;SEP&gt;specific implementation, output comparison</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9&lt;SEP&gt;chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="Generic">
      <data key="d5">8.0</data>
      <data key="d6">Generic programming allows the Evaluator class to process multiple data types effectively within the pydantic_evals framework.</data>
      <data key="d7">type flexibility, programming concept</data>
      <data key="d8">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="EvaluationResult">
      <data key="d5">9.0</data>
      <data key="d6">The Evaluator generates an EvaluationResult indicating whether the task met specified evaluation criteria.</data>
      <data key="d7">evaluation outcome, task assessment</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="downcast">
      <data key="d5">9.0</data>
      <data key="d6">The downcast method is defined within the Evaluator class, contributing to its functionality in type management during evaluations.</data>
      <data key="d7">method functionality, class relationship</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="metadata">
      <data key="d5">8.0</data>
      <data key="d6">The Evaluator class utilizes metadata to enhance the evaluation process by providing contextual information about inputs and outputs.</data>
      <data key="d7">context enhancement, evaluation process</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="SerializationInfo">
      <data key="d5">7.0</data>
      <data key="d6">The Evaluator uses SerializationInfo for creating a JSON-serializable representation of itself during the serialization process.</data>
      <data key="d7">serialization, JSON conversion</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="to_jsonable_python">
      <data key="d5">9.0</data>
      <data key="d6">The Evaluator employs to_jsonable_python to facilitate converting its specification into a JSON-compatible format.</data>
      <data key="d7">serialization utility, JSON compatibility</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="EvaluatorOutput">
      <data key="d5">9.0</data>
      <data key="d6">The Evaluator produces an EvaluatorOutput as a result of the evaluation process, defining what the outcome of the evaluation is.</data>
      <data key="d7">evaluation result, output generation</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="evaluate_sync">
      <data key="d5">8.0</data>
      <data key="d6">The evaluate_sync method operates using the capabilities of the Evaluator to return evaluation results.</data>
      <data key="d7">method operation, evaluation process</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="evaluate_async">
      <data key="d5">8.0</data>
      <data key="d6">The evaluate_async method allows for evaluation using the Evaluator, particularly accommodating asynchronous operations.</data>
      <data key="d7">method operation, evaluation process</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="InputsT">
      <data key="d5">8.0</data>
      <data key="d6">InputsT specifies the input types that the Evaluator will process during evaluations.</data>
      <data key="d7">input specification, evaluation context</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="OutputT">
      <data key="d5">8.0</data>
      <data key="d6">OutputT defines the output types that the Evaluator produces after an evaluation is completed.</data>
      <data key="d7">output specification, evaluation context</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="MetadataT">
      <data key="d5">7.0</data>
      <data key="d6">MetadataT is integrated into the Evaluator to provide context for the evaluation process.</data>
      <data key="d7">context information, evaluation support</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="serialize">
      <data key="d5">8.0</data>
      <data key="d6">The serialize method converts the Evaluator into a JSON-serializable form, reflecting its specifications.</data>
      <data key="d7">serialization, JSON representation</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator" target="build_serialization_arguments">
      <data key="d5">7.0</data>
      <data key="d6">build_serialization_arguments generates the necessary parameters for the serialization of an Evaluator.</data>
      <data key="d7">parameter generation, serialization process</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="report" target="evaluate_sync">
      <data key="d5">9.0</data>
      <data key="d6">evaluate_sync runs the function across all test cases in the Dataset, ultimately producing a report that documents the evaluation outcomes."|</data>
      <data key="d7">evaluation execution, results documentation</data>
      <data key="d8">chunk-fbd48d906573dc919932c60117d15be5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="report" target="evaluation">
      <data key="d5">19.0</data>
      <data key="d6">The evaluation process generates a report summarizing the outcomes of the test cases and their tests.&lt;SEP&gt;The report details the results of the evaluations processed during the evaluation effort.</data>
      <data key="d7">report content, evaluation results&lt;SEP&gt;results summary, evaluation outputs</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluate_sync" target="evaluate">
      <data key="d5">7.0</data>
      <data key="d6">evaluate_sync provides a simpler interface for executing evaluations compared to the asynchronous evaluate method.</data>
      <data key="d7">interface, evaluation execution</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluate_sync" target="EvaluatorContext">
      <data key="d5">8.0</data>
      <data key="d6">The evaluate_sync method utilizes EvaluatorContext to perform evaluations synchronously by managing the provided inputs and outputs.</data>
      <data key="d7">synchronous evaluation, context utilization</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluate_sync" target="EvaluatorOutput">
      <data key="d5">8.0</data>
      <data key="d6">evaluate_sync returns the evaluation result which can take the form of an EvaluatorOutput.</data>
      <data key="d7">method outcome, evaluation result</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="vegetarian_recipe" target="Duration">
      <data key="d5">8.0</data>
      <data key="d6">The vegetarian recipe's successful execution is marked by its completion within the specified duration of 10ms.</data>
      <data key="d7">execution time, recipe efficiency</data>
      <data key="d8">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="vegetarian_recipe" target="Case ID">
      <data key="d5">9.0</data>
      <data key="d6">The vegetarian recipe entry is associated with a specific Case ID, allowing for tracking and reference within the dataset.</data>
      <data key="d7">tracking, identification</data>
      <data key="d8">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="vegetarian_recipe" target="Assertions">
      <data key="d5">10.0</data>
      <data key="d6">The vegetarian recipe received verification through assertions, confirming its compliance with dietary restrictions.</data>
      <data key="d7">verification, compliance</data>
      <data key="d8">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="gluten_free_recipe" target="Duration">
      <data key="d5">8.0</data>
      <data key="d6">The gluten-free recipe was executed efficiently within a duration of 10ms, indicating quick processing time.</data>
      <data key="d7">execution time, recipe efficiency</data>
      <data key="d8">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="gluten_free_recipe" target="Case ID">
      <data key="d5">9.0</data>
      <data key="d6">The gluten-free recipe entry is associated with a specific Case ID, enabling its documentation and tracking.</data>
      <data key="d7">tracking, identification</data>
      <data key="d8">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="gluten_free_recipe" target="Assertions">
      <data key="d5">10.0</data>
      <data key="d6">The gluten-free recipe received verification through assertions, validating its adherence to gluten-free requirements.</data>
      <data key="d7">verification, compliance</data>
      <data key="d8">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Duration" target="SpanNode">
      <data key="d5">9.0</data>
      <data key="d6">The Duration property of a SpanNode provides insight into the time taken by the span, directly related to the span's start and end timestamps.</data>
      <data key="d7">execution time, performance measurement</data>
      <data key="d8">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case ID" target="Evaluation Summary">
      <data key="d5">8.0</data>
      <data key="d6">The Evaluation Summary organizes results based on unique Case IDs, linking each evaluation to its identifier.</data>
      <data key="d7">tracking, result organization</data>
      <data key="d8">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Case ID" target="normal_text">
      <data key="d5">8.0</data>
      <data key="d6">Case ID is associated with normal text for tracking each input's processing and performance evaluation.</data>
      <data key="d7">tracking, input management</data>
      <data key="d8">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Assertions" target="10ms">
      <data key="d5">7.0</data>
      <data key="d6">The processing duration of 10ms reflects the efficiency in verifying assertions for both recipes.</data>
      <data key="d7">performance efficiency, processing speed</data>
      <data key="d8">chunk-96401031d88e7ec557013dad6c33f986</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Assertions" target="text_with_error">
      <data key="d5">8.0</data>
      <data key="d6">Assertions indicate whether the processing of text with error was successful or not, influencing evaluation outcomes.</data>
      <data key="d7">evaluation feedback, error classification</data>
      <data key="d8">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="double_number">
      <data key="d5">6.0</data>
      <data key="d6">The double_number function can be monitored using OpenTelemetry, allowing for insights into its operational metrics.</data>
      <data key="d7">function performance, monitoring</data>
      <data key="d8">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="logfire">
      <data key="d5">7.0</data>
      <data key="d6">Logfire integrates with OpenTelemetry to enhance monitoring capabilities for applications, thus improving observability.</data>
      <data key="d7">application logging, observability</data>
      <data key="d8">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="pydantic-graph">
      <data key="d5">16.0</data>
      <data key="d6">pydantic-graph is designed to be used in conjunction with OpenTelemetry to enhance observability for Python applications.&lt;SEP&gt;pydantic-graph is developed to enhance observability in applications by integrating with OpenTelemetry for monitoring and analysis of executed workflows.</data>
      <data key="d7">observability, integration</data>
      <data key="d8">chunk-871f0637563e9955b756f367ef81e17e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="PydanticAI">
      <data key="d5">16.0</data>
      <data key="d6">PydanticAI's instrumentation employs OpenTelemetry for tracking and monitoring the performance of generative AI systems.</data>
      <data key="d7">instrumentation, performance tracking</data>
      <data key="d8">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The use of OpenTelemetry allows Agents to collect and analyze telemetry data for improved performance monitoring.</data>
      <data key="d7">performance monitoring, telemetry data</data>
      <data key="d8">chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="pydantic_ai">
      <data key="d5">23.0</data>
      <data key="d6">OpenTelemetry can be integrated into pydantic_ai to enhance the observability of AI models and their execution paths.&lt;SEP&gt;OpenTelemetry can be integrated with pydantic_ai to enhance observability by tracking tool execution within AI applications.&lt;SEP&gt;pydantic_ai integrates with OpenTelemetry for enhanced performance monitoring and logging capabilities.</data>
      <data key="d7">integration, observability&lt;SEP&gt;observability, integration</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="Pydantic AI">
      <data key="d5">8.0</data>
      <data key="d6">Pydantic AI utilizes OpenTelemetry for managing telemetry data including logs and traces.</data>
      <data key="d7">integration, observability</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="TracerProvider">
      <data key="d5">9.0</data>
      <data key="d6">TracerProvider is a part of the OpenTelemetry framework, used for creating and managing telemetry data.</data>
      <data key="d7">component, functionality</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="EventLoggerProvider">
      <data key="d5">9.0</data>
      <data key="d6">EventLoggerProvider is another component of OpenTelemetry that focuses on logging events for telemetry purposes.</data>
      <data key="d7">component, functionality</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="Event">
      <data key="d5">17.0</data>
      <data key="d6">OpenTelemetry uses Events to group and describe signals for better monitoring and observability.&lt;SEP&gt;OpenTelemetry utilizes events to track and report telemetry data for monitoring application performance.</data>
      <data key="d7">observability, telemetry&lt;SEP&gt;observability, telemetry data</data>
      <data key="d8">chunk-3c9b6b4ee61bee314208883b07d282a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="Tracer">
      <data key="d5">20.0</data>
      <data key="d6">Tracer is a key aspect of OpenTelemetry's functionality, enabling tracing of events and performance metrics in AI applications.&lt;SEP&gt;Tracer is a key component of OpenTelemetry used for tracing execution paths and performance monitoring.</data>
      <data key="d7">performance monitoring, tracing</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenTelemetry" target="pydantic-ai">
      <data key="d5">9.0</data>
      <data key="d6">Pydantic-ai utilizes OpenTelemetry to implement its instrumentation logging and event tracking functionalities.</data>
      <data key="d7">instrumentation, observability</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluation Summary" target="Inputs">
      <data key="d5">9.0</data>
      <data key="d6">The Evaluation Summary includes Inputs corresponding to each Case ID, showcasing what was tested in the evaluations.</data>
      <data key="d7">test overview, evaluation scope</data>
      <data key="d8">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluation Summary" target="Outputs">
      <data key="d5">9.0</data>
      <data key="d6">Each Evaluation Summary entry details Outputs derived from the tested Inputs, demonstrating the effectiveness of the evaluations.</data>
      <data key="d7">test results, outcome analysis</data>
      <data key="d8">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluation Summary" target="Scores">
      <data key="d5">9.0</data>
      <data key="d6">Scores in the Evaluation Summary provide an assessment of the performance of each output relative to the inputs.</data>
      <data key="d7">performance evaluation, metrics</data>
      <data key="d8">chunk-ce17e90ff0740177482bed707ce81ba5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Outputs" target="normal_text">
      <data key="d5">9.0</data>
      <data key="d6">Outputs are the results generated from processing normal text inputs, reflecting their performance.</data>
      <data key="d7">input-output relationship, processing result</data>
      <data key="d8">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Scores" target="performance_score">
      <data key="d5">7.0</data>
      <data key="d6">Scores provide a metric that reflects the efficacy of processing inputs, impacting overall assessments.</data>
      <data key="d7">evaluation metric, performance analysis</data>
      <data key="d8">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire" target="HTTPX">
      <data key="d5">8.0</data>
      <data key="d6">Logfire can be integrated with HTTPX to monitor HTTP requests and track application performance.</data>
      <data key="d7">monitoring, application behavior</data>
      <data key="d8">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire" target="TracerProvider">
      <data key="d5">9.0</data>
      <data key="d6">Logfire configures the TracerProvider to enable global tracing settings for Pydantic models.</data>
      <data key="d7">configuration, global settings</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire" target="fastapi">
      <data key="d5">18.0</data>
      <data key="d6">logfire instruments fastapi applications for structured logging, showing their relationship in application monitoring.".</data>
      <data key="d7">application monitoring, logging integration</data>
      <data key="d8">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire" target="AsyncOpenAI">
      <data key="d5">8.0</data>
      <data key="d6">Logfire utilizes AsyncOpenAI for embedding functionalities and document processing.</data>
      <data key="d7">integration, functionality</data>
      <data key="d8">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire" target="build_search_db">
      <data key="d5">7.0</data>
      <data key="d6">build_search_db is a function that relates to the overall purpose and functionality of the Logfire organization, focusing on database tasks.</data>
      <data key="d7">functionality, organization purpose</data>
      <data key="d8">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire" target="DOCS_JSON">
      <data key="d5">8.0</data>
      <data key="d6">Logfire accesses the DOCS_JSON file to retrieve structured documentation data for processing.</data>
      <data key="d7">data retrieval, document processing</data>
      <data key="d8">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire" target="logs">
      <data key="d5">8.0</data>
      <data key="d6">Logfire is used to track and store logs generated from the script execution, providing visibility into the processes involved in streaming responses.</data>
      <data key="d7">logging, tracking</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">Logfire aids in the monitoring and logging process of the Agent by configuring its logging strategies.</data>
      <data key="d7">logging, configuration</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="normal_text" target="performance_score">
      <data key="d5">16.0</data>
      <data key="d6">Normal text is evaluated to produce a performance score, indicating how well it was processed.&lt;SEP&gt;The normal_text input relates to performance_score as it is the basis for evaluating processing performance.</data>
      <data key="d7">input evaluation, processing outcome&lt;SEP&gt;input-output evaluation, performance metrics</data>
      <data key="d8">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="performance_score" target="text_with_error">
      <data key="d5">18.0</data>
      <data key="d6">Text with error receives a performance score of 0, reflecting its unsuccessful processing.&lt;SEP&gt;The text_with_error has a performance_score of 0, indicating that it failed to process successfully.</data>
      <data key="d7">error handling, performance metrics&lt;SEP&gt;error handling, processing performance</data>
      <data key="d8">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="performance_score" target="Averages">
      <data key="d5">14.0</data>
      <data key="d6">Averages are calculated based on the performance_scores to indicate overall processing efficiency.&lt;SEP&gt;Averages are calculated from individual performance scores to summarize overall processing effectiveness.</data>
      <data key="d7">statistical analysis, performance summary&lt;SEP&gt;statistical summary, performance metrics</data>
      <data key="d8">chunk-d5dc19bc0d47e207160ce81e71cc4814</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="questions_cases.json" target="questions_cases_schema.json">
      <data key="d5">8.0</data>
      <data key="d6">The questions_cases.json file is structured according to the guidelines set by questions_cases_schema.json.</data>
      <data key="d7">data structure, schema compliance</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Easy Capital Question" target="Geography">
      <data key="d5">10.0</data>
      <data key="d6">The Easy Capital Question is categorized within Geography, focusing on capital cities worldwide.</data>
      <data key="d7">academic category, subject focus</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Easy Capital Question" target="metadata">
      <data key="d5">7.0</data>
      <data key="d6">Metadata provides critical information about the Easy Capital Question, such as its difficulty level and relevant category.</data>
      <data key="d7">data description, categorization</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Challenging Landmark Question" target="Eiffel Tower">
      <data key="d5">9.0</data>
      <data key="d6">The question pertains to a landmark located on the Seine River, which is the Eiffel Tower.</data>
      <data key="d7">landmark inquiry, cultural significance</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Challenging Landmark Question" target="Landmarks">
      <data key="d5">10.0</data>
      <data key="d6">The Challenging Landmark Question falls under the Landmarks category, emphasizing inquiry about significant locations.</data>
      <data key="d7">subject category, topic focus</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="metadata" target="test case">
      <data key="d5">8.0</data>
      <data key="d6">Metadata enhances the understanding of the test case by providing additional information to evaluators.</data>
      <data key="d7">contextual information, assessment enhancement</data>
      <data key="d8">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="outputs" target="expected_output">
      <data key="d5">8.0</data>
      <data key="d6">The outputs section describes the expected_answer for each question, showing what is anticipated as the correct response.</data>
      <data key="d7">answer validation, expected results</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="outputs" target="EvaluationResult&lt;T&gt;">
      <data key="d5">9.0</data>
      <data key="d6">EvaluationResult&lt;T&gt; assesses outputs based on the given inputs to evaluate task performance and correctness.</data>
      <data key="d7">output assessment, performance evaluation</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="outputs" target="chatbot">
      <data key="d5">10.0</data>
      <data key="d6">The outputs produced by the chatbot are results of its processing of prompts alongside past messages, forming the core of its interaction with users.</data>
      <data key="d7">response generation, AI interaction</data>
      <data key="d8">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluators" target="test case">
      <data key="d5">20.0</data>
      <data key="d6">Evaluators analyze test cases to provide feedback based on the inputs and expected results.&lt;SEP&gt;Evaluators use the test case, its inputs, and expected outputs to conduct analyses and record results.</data>
      <data key="d7">analysis, evaluation role&lt;SEP&gt;evaluation execution, analytical relationship</data>
      <data key="d8">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Confidence Score" target="confidence">
      <data key="d5">8.0</data>
      <data key="d6">Confidence Score reflects the level of certainty in the expected outputs, offering insight into the reliability of the answers.</data>
      <data key="d7">evaluation metric, accuracy indication</data>
      <data key="d8">chunk-1c41f161d83220b7f7f671322fe4ee7a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-graph" target="PydanticAI">
      <data key="d5">18.0</data>
      <data key="d6">pydantic-graph is a required dependency of PydanticAI, adding graph-based functionalities to facilitate complex state management and workflows.&lt;SEP&gt;pydantic-graph is a required dependency of PydanticAI, enhancing its capabilities with graph and state machine functionalities.</data>
      <data key="d7">dependency, enhanced functionality&lt;SEP&gt;dependency, enhancement</data>
      <data key="d8">chunk-871f0637563e9955b756f367ef81e17e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-graph" target="GraphRunContext">
      <data key="d5">9.0</data>
      <data key="d6">GraphRunContext is a key component of pydantic-graph that manages state and facilitates the execution of nodes defined in the graph.</data>
      <data key="d7">state management, execution control</data>
      <data key="d8">chunk-871f0637563e9955b756f367ef81e17e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-graph" target="FileStatePersistence">
      <data key="d5">18.0</data>
      <data key="d6">FileStatePersistence is implemented in the pydantic-graph library to enable file-based state management during graph executions.&lt;SEP&gt;The pydantic-graph library utilizes FileStatePersistence as a method for state management during graph executions.</data>
      <data key="d7">dependency, state management&lt;SEP&gt;state management, file storage</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-graph" target="Returns Workflow">
      <data key="d5">8.0</data>
      <data key="d6">The Returns Workflow process in e-commerce requires the mechanisms provided by pydantic-graph to manage its execution effectively.</data>
      <data key="d7">workflow management, e-commerce</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-graph" target="SimpleStatePersistence">
      <data key="d5">9.0</data>
      <data key="d6">pydantic-graph offers SimpleStatePersistence as the default method for handling state during graph runs.</data>
      <data key="d7">default implementation, state management</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-graph" target="FullStatePersistence">
      <data key="d5">8.0</data>
      <data key="d6">FullStatePersistence is one of the state persistence options provided by pydantic-graph for managing complex executions.</data>
      <data key="d7">advanced functionality, state management</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-graph" target="pydantic">
      <data key="d5">10.0</data>
      <data key="d6">pydantic-graph is built upon pydantic, drawing from its capabilities of data validation and management in graph workflows.</data>
      <data key="d7">foundation, data validation</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-graph" target="PostgresQL">
      <data key="d5">8.0</data>
      <data key="d6">PostgresQL can be used to create custom state persistence solutions within the pydantic-graph for complex applications.</data>
      <data key="d7">database integration, state persistence</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graphs" target="multi-agent workflows">
      <data key="d5">14.0</data>
      <data key="d6">Graphs are promoted as a powerful tool for implementing multi-agent workflows, offering structured approaches to complex tasks.&lt;SEP&gt;Graphs provide a structural framework for implementing multi-agent workflows by detailing agents' interactions and task management strategies.</data>
      <data key="d7">workflow optimization, design framework&lt;SEP&gt;workflow optimization, structural framework</data>
      <data key="d8">chunk-871f0637563e9955b756f367ef81e17e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graphs" target="PydanticAI">
      <data key="d5">12.0</data>
      <data key="d6">Graphs can be leveraged in applications built with PydanticAI to visualize complex relationships and workflows, enhancing functionality.&lt;SEP&gt;Graphs offer a way to model and visualize workflows in applications developed with PydanticAI.</data>
      <data key="d7">modeling, workflow visualization&lt;SEP&gt;visualization, complexity management</data>
      <data key="d8">chunk-871f0637563e9955b756f367ef81e17e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Python" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">PydanticAI is a Python-based library that focuses on data validation and settings management.</data>
      <data key="d7">programming language, library usage</data>
      <data key="d8">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Python" target="MaxDuration">
      <data key="d5">6.0</data>
      <data key="d6">Python evaluates code which could potentially impact the execution time check that MaxDuration performs."|&gt;"execution performance, evaluation support</data>
      <data key="d7">6</data>
      <data key="d8">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Python" target="asyncpg">
      <data key="d5">7.0</data>
      <data key="d6">Python is a programming language used to interact with the asyncpg library for PostgreSQL.</data>
      <data key="d7">programming language, database interaction</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Python" target="streaming structured responses">
      <data key="d5">18.0</data>
      <data key="d6">The Python script is responsible for generating and handling the streaming structured responses displayed in the terminal.&lt;SEP&gt;The Python script is responsible for generating and handling the streaming structured responses, implementing the core functionality.</data>
      <data key="d7">programming, implementation</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="BaseNode">
      <data key="d5">24.0</data>
      <data key="d6">BaseNode makes use of GraphRunContext to execute nodes within a graph, utilizing the state and dependencies defined in the context for task processing.&lt;SEP&gt;BaseNode serves as a template or base for all nodes in the GraphRunContext, influencing how those nodes operate within queries.&lt;SEP&gt;GraphRunContext provides context and necessary dependencies for the execution of BaseNode instances in a graph.</data>
      <data key="d7">context management, node execution&lt;SEP&gt;node execution, functional integration&lt;SEP&gt;structure definition, influence</data>
      <data key="d8">chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-871f0637563e9955b756f367ef81e17e&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="MyNode">
      <data key="d5">8.0</data>
      <data key="d6">MyNode's run method utilizes the GraphRunContext to perform its operations based on the provided state.</data>
      <data key="d7">context utilization, execution framework</data>
      <data key="d8">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="Graph">
      <data key="d5">17.0</data>
      <data key="d6">GraphRunContext is instantiated by the Graph to provide the necessary context for nodes to execute properly based on the current state.&lt;SEP&gt;GraphRunContext manages the execution of the Graph during user interaction, maintaining its state and transitions.</data>
      <data key="d7">context management, execution&lt;SEP&gt;contextual execution, data awareness</data>
      <data key="d8">chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="question_graph">
      <data key="d5">16.0</data>
      <data key="d6">GraphRunContext provides the necessary context for the execution of queries performed by the question_graph.&lt;SEP&gt;GraphRunContext provides the necessary context for the functioning of the question_graph during queries.</data>
      <data key="d7">context management, query execution</data>
      <data key="d8">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">GraphRunContext utilizes the PydanticAI framework for managing the lifecycle of query execution.</data>
      <data key="d7">framework usage, query management</data>
      <data key="d8">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="question_graph.mermaid_save">
      <data key="d5">7.0</data>
      <data key="d6">The method question_graph.mermaid_save saves the state of the GraphRunContext for visualization purposes in the workflow.</data>
      <data key="d7">state visualization, output generation</data>
      <data key="d8">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="GraphRunResult">
      <data key="d5">7.0</data>
      <data key="d6">GraphRunContext is utilized during the graph execution, the results of which are encapsulated in GraphRunResult.</data>
      <data key="d7">execution context, result encapsulation</data>
      <data key="d8">chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="state">
      <data key="d5">8.0</data>
      <data key="d6">GraphRunContext maintains an instance attribute 'state' which captures the current state of the graph.</data>
      <data key="d7">state management</data>
      <data key="d8">chunk-3e6f35e8122ac28c165b2f86d0e0b04e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunContext" target="deps">
      <data key="d5">8.0</data>
      <data key="d6">GraphRunContext also holds 'deps' as an instance attribute to store dependencies needed for executing nodes in the graph.</data>
      <data key="d7">dependency management</data>
      <data key="d8">chunk-3e6f35e8122ac28c165b2f86d0e0b04e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyNode" target="MyState">
      <data key="d5">8.0</data>
      <data key="d6">MyNode can leverage MyState to make use of shared data during its execution in the graph environment.</data>
      <data key="d7">data sharing, node execution</data>
      <data key="d8">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyNode" target="Graph">
      <data key="d5">9.0</data>
      <data key="d6">Graph utilizes MyNode as a fundamental component to create execution sequences and manage the flow of processing.</data>
      <data key="d7">execution management, node structure</data>
      <data key="d8">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DivisibleBy5" target="Increment">
      <data key="d5">34.0</data>
      <data key="d6">DivisibleBy5 checks the value and determines whether to return an End indicating completion or to invoke Increment to change the value.&lt;SEP&gt;Increment is used as part of the process to alter the value being evaluated by DivisibleBy5 to check if it's divisible by 5.&lt;SEP&gt;Increment provides a new value to the DivisibleBy5 node to be checked after increasing the integer.</data>
      <data key="d7">conditional execution, value manipulation&lt;SEP&gt;value forwarding, node interaction&lt;SEP&gt;value modification, conditional routing</data>
      <data key="d8">chunk-241cea24e0ec8915cd8b8580f86bf720&lt;SEP&gt;chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DivisibleBy5" target="fives_graph">
      <data key="d5">8.0</data>
      <data key="d6">fives_graph executes the DivisibleBy5 node as a part of its workflow for processing integers.</data>
      <data key="d7">graph traversal, execution flow</data>
      <data key="d8">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DivisibleBy5" target="End">
      <data key="d5">10.0</data>
      <data key="d6">DivisibleBy5 returns an End when the value is divisible by 5, indicating termination of processing.</data>
      <data key="d7">termination condition, processing flow</data>
      <data key="d8">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Increment" target="ProcessPoolExecutor">
      <data key="d5">14.0</data>
      <data key="d6">ProcessPoolExecutor can execute Increment in parallel, improving performance for heavy computations.</data>
      <data key="d7">parallel processing, performance improvement</data>
      <data key="d8">chunk-241cea24e0ec8915cd8b8580f86bf720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Increment" target="never_42">
      <data key="d5">8.0</data>
      <data key="d6">never_42 defines an asynchronous graph where the Increment event modifies the state represented by MyState.</data>
      <data key="d7">graph operation, state modification</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Increment" target="MyState">
      <data key="d5">24.0</data>
      <data key="d6">MyState can be modified by the Increment node during graph execution, reflecting changes in the graph state.&lt;SEP&gt;MyState is used as state input for the Increment node, impacting the flow of the graph processing.&lt;SEP&gt;The Increment event directly affects MyState by increasing its numeric value during execution.</data>
      <data key="d7">state change, event interaction&lt;SEP&gt;state management, node operation&lt;SEP&gt;state management, value update</data>
      <data key="d8">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Increment" target="never_42_graph">
      <data key="d5">16.0</data>
      <data key="d6">never_42_graph runs the Increment function, modifying the state within the graph.</data>
      <data key="d7">function execution, graph modification</data>
      <data key="d8">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Increment" target="GraphRun">
      <data key="d5">9.0</data>
      <data key="d6">GraphRun iterates over the Increment node to increase the state during the run.</data>
      <data key="d7">graph traversal, state increment</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Increment" target="StateT">
      <data key="d5">9.0</data>
      <data key="d6">The Increment node modifies the shared StateT during the graph run, increasing its value based on operations performed.</data>
      <data key="d7">state modification, operational interaction</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Increment" target="End">
      <data key="d5">9.0</data>
      <data key="d6">Increment operates as an intermediary step that will eventually lead to the End node when processing is complete.</data>
      <data key="d7">workflow progression, termination</data>
      <data key="d8">chunk-074bfa68ac0e63b1f628efd6720d1253</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyState" target="GraphRunResult">
      <data key="d5">9.0</data>
      <data key="d6">MyState is associated with GraphRunResult as it represents the state that ultimately yields the result after running the graph.</data>
      <data key="d7">state representation, result generation</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyState" target="never_42_graph">
      <data key="d5">18.0</data>
      <data key="d6">never_42_graph manipulates MyState objects to reflect new values after executing graph functions.</data>
      <data key="d7">state management, graph processing</data>
      <data key="d8">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyState" target="GraphRun">
      <data key="d5">8.0</data>
      <data key="d6">GraphRun maintains and modifies the shared MyState object during its execution.</data>
      <data key="d7">state management, asynchronous operations</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyState" target="StateT">
      <data key="d5">7.0</data>
      <data key="d6">MyState acts as a practical representation of the state type StateT, providing context during graph execution.</data>
      <data key="d7">state representation, execution context</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MyState" target="Check42">
      <data key="d5">6.0</data>
      <data key="d6">Check42 inspects and potentially modifies MyState based on specific conditions during graph processing.</data>
      <data key="d7">condition verification, state altering</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="deps">
      <data key="d5">7.0</data>
      <data key="d6">The graph may include dependencies (deps) for nodes, facilitating flexible and adaptable node execution as needed.</data>
      <data key="d7">dependency management, execution flow</data>
      <data key="d8">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="InsertCoin">
      <data key="d5">8.0</data>
      <data key="d6">The Graph entity initiates the InsertCoin event as part of the vending machine's operations.</data>
      <data key="d7">event triggering, process orchestration</data>
      <data key="d8">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="BaseNode">
      <data key="d5">71.0</data>
      <data key="d6">BaseNode components are integral to the Graph as they represent the executable units that perform tasks within the graph.&lt;SEP&gt;BaseNode instances serve as the components of a Graph, collectively forming its structure and functionality.&lt;SEP&gt;BaseNode nodes are components of the Graph structure, contributing to the overall functionality and execution flow of the graph.&lt;SEP&gt;BaseNode serves as the fundamental structure for creating nodes within the Graph, forming the basis of the state's management system.&lt;SEP&gt;Each BaseNode represents a specific operation within the Graph structure that contributes to the overall data processing.&lt;SEP&gt;Graph contains nodes defined by BaseNode, establishing a structural relationship where nodes can be executed as part of the graph.&lt;SEP&gt;The Graph consists of multiple BaseNodes that represent individual elements processed within the structure, highlighting the composition of the graph.&lt;SEP&gt;The Graph is composed of various BaseNodes that represent the entities processed in the graph structure.</data>
      <data key="d7">component relationship, graph structure&lt;SEP&gt;component structure, data processing&lt;SEP&gt;component structure, task execution&lt;SEP&gt;graph components, structure&lt;SEP&gt;graph composition, node structure&lt;SEP&gt;graph structure, node composition&lt;SEP&gt;nodes, execution flow&lt;SEP&gt;structural component, graph architecture</data>
      <data key="d8">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-9a99cfa8ff8a41ea240361d13d4e41ec&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="End">
      <data key="d5">17.0</data>
      <data key="d6">End signifies the conclusion of the Graph’s execution cycle, indicating a necessary point for halting processing.&lt;SEP&gt;The End event signifies the completion of processes within the Graph's operations, indicating successful transactions.</data>
      <data key="d7">execution termination, processing flow&lt;SEP&gt;process completion, operational conclusion</data>
      <data key="d8">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="RunEndT">
      <data key="d5">14.0</data>
      <data key="d6">RunEndT is a parameter integrated within the Graph structure to manage the completion states of operational sequences.&lt;SEP&gt;RunEndT represents the final state of a Graph after execution, indicating the relationship between the start and end of the Graph's lifecycle.</data>
      <data key="d7">lifecycle management, state transition&lt;SEP&gt;parameter interaction, operational flow</data>
      <data key="d8">chunk-9f106548aed70137ff14bc29aa95f4ba&lt;SEP&gt;chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="vending_machine_graph">
      <data key="d5">8.0</data>
      <data key="d6">vending_machine_graph as an organization is represented as a type of Graph that models the functionality of a vending machine through nodes and transitions.</data>
      <data key="d7">organizational structure, operational modeling</data>
      <data key="d8">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="Node">
      <data key="d5">27.0</data>
      <data key="d6">Graph comprises various Nodes that represent different states or actions within the Q&amp;A framework.&lt;SEP&gt;Nodes make up the Graph, performing operations that contribute to the overall computations within the Graph.&lt;SEP&gt;The Node is a fundamental component of the Graph, representing the tasks that the Graph executes over time.</data>
      <data key="d7">component structure, operational relationship&lt;SEP&gt;graph structure, components&lt;SEP&gt;structural relationship, execution framework</data>
      <data key="d8">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-d66479842ef0830f8e7bdeb15cd91a5f&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="FileStatePersistence">
      <data key="d5">17.0</data>
      <data key="d6">FileStatePersistence allows for saving and retrieving the state of a Graph, enabling continuity in user interactions.&lt;SEP&gt;FileStatePersistence is used within the Graph framework to manage the saving and loading of the state, enabling continuity in user sessions.</data>
      <data key="d7">state management, continuity&lt;SEP&gt;state management, persistence</data>
      <data key="d8">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="pydantic_graph">
      <data key="d5">30.0</data>
      <data key="d6">pydantic_graph is responsible for providing the framework within which the Graph class operates, focusing on graph management.&lt;SEP&gt;pydantic_graph provides the foundation and framework for the Graph and BaseNode, facilitating their implementation and execution.&lt;SEP&gt;pydantic_graph provides the foundation for creating and managing graphs in Python with a focus on persistence.&lt;SEP&gt;pydantic_graph serves as the foundational library for managing and executing graphs in Python, connecting multiple concepts through a unified approach.</data>
      <data key="d7">framework, implementation&lt;SEP&gt;framework, management&lt;SEP&gt;library function, graph management</data>
      <data key="d8">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="never_42">
      <data key="d5">8.0</data>
      <data key="d6">The never_42 organization is involved in the creation and management of graphs, utilizing the Graph structure for operation.</data>
      <data key="d7">organization process, graph management</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="BaseStatePersistence">
      <data key="d5">8.0</data>
      <data key="d6">BaseStatePersistence governs how state information is handled throughout the execution of the Graph.</data>
      <data key="d7">state management, graph execution</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="StateT">
      <data key="d5">27.0</data>
      <data key="d6">StateT defines the current operational state of all nodes within the Graph during execution.&lt;SEP&gt;StateT indicates the current state of operations within a Graph, crucial for managing execution flow.&lt;SEP&gt;The StateT type variable refers to the current state of the Graph during execution, linking the execution context to the Graph's structure.</data>
      <data key="d7">current status, execution state&lt;SEP&gt;execution context, state management&lt;SEP&gt;execution flow, graph state</data>
      <data key="d8">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="LogfireSpan">
      <data key="d5">7.0</data>
      <data key="d6">LogfireSpan tracks the performance and execution details during runtime of the Graph.</data>
      <data key="d7">performance monitoring, execution management</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="asynccontextmanager">
      <data key="d5">8.0</data>
      <data key="d6">asynccontextmanager allows for safe management of resource allocation during Graph execution.</data>
      <data key="d7">context management, resource handling</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="nodes">
      <data key="d5">9.0</data>
      <data key="d6">Nodes are the fundamental building blocks of a Graph that execute defined operations.</data>
      <data key="d7">component interaction, execution units</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="logfire_api">
      <data key="d5">8.0</data>
      <data key="d6">logfire_api may be used in conjunction with Graph executions to log and monitor performance data, enhancing error tracking and performance analysis.</data>
      <data key="d7">performance tracking, monitoring</data>
      <data key="d8">chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="GraphRun">
      <data key="d5">19.0</data>
      <data key="d6">GraphRun executes operations defined in the Graph using its nodes and maintains state throughout the execution.&lt;SEP&gt;GraphRun is derived from operations on the Graph, representing its execution in an asynchronous manner.</data>
      <data key="d7">execution context, state maintenance&lt;SEP&gt;execution, state management</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="get_nodes">
      <data key="d5">8.0</data>
      <data key="d6">The get_nodes function operates within the context of a Graph, allowing access to its node definitions.</data>
      <data key="d7">functionality, graph structure</data>
      <data key="d8">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="mermaid_save">
      <data key="d5">7.0</data>
      <data key="d6">The Graph structure influences how the mermaid_save function behaves by supplying the graphical content to be represented in the saved image.</data>
      <data key="d7">graph content, output process</data>
      <data key="d8">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="Mermaid Diagram">
      <data key="d5">8.0</data>
      <data key="d6">The Mermaid Diagram is generated from the structure defined in the Graph category, illustrating the relationships of nodes and edges.</data>
      <data key="d7">visualization, representation</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="NodeIdent">
      <data key="d5">8.0</data>
      <data key="d6">NodeIdent serves as the identifiers for entities within the graph, enabling clear connections and relationships.</data>
      <data key="d7">identification, relationship mapping</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Graph" target="StateDiagramDirection">
      <data key="d5">7.0</data>
      <data key="d6">StateDiagramDirection is utilized within the Graph to dictate the flow direction of states in the diagram.</data>
      <data key="d7">flow direction, graph dynamics</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic Graph" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">BaseNode is a core class within the Pydantic Graph framework that represents a single node's logic and behavior in the directed graph.</data>
      <data key="d7">node framework, class relationship</data>
      <data key="d8">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="parameterization" target="BaseNode">
      <data key="d5">8.0</data>
      <data key="d6">BaseNode's design is dependent on concepts of parameterization to define its operational and type constraints.</data>
      <data key="d7">type definition, system design</data>
      <data key="d8">chunk-405009d6dd27fdd5eafe4b829ad75a96</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="state" target="graph_deps">
      <data key="d5">7.0</data>
      <data key="d6">The state of the Agent informs the relevant graph_deps needed for successful task execution within its workflow.</data>
      <data key="d7">operational context, dependencies</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="state" target="GraphRun">
      <data key="d5">8.0</data>
      <data key="d6">The state is maintained and updated during the GraphRun execution to reflect changes in the graph's condition.</data>
      <data key="d7">state management, execution </data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="state" target="self">
      <data key="d5">7.0</data>
      <data key="d6">self often references the current object's state and behavior during method execution within the graph context.</data>
      <data key="d7">object orientation, method execution</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="state" target="BaseNode">
      <data key="d5">7.0</data>
      <data key="d6">BaseNode contains a state that represents its current operational value during graph execution.</data>
      <data key="d7">operational value, node behavior</data>
      <data key="d8">chunk-14e53235b034b988f73d8d04cdce068d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="state" target="run_sync">
      <data key="d5">7.0</data>
      <data key="d6">The state parameter is used in run_sync to represent the initial condition of the graph before execution.</data>
      <data key="d7">initial conditions, execution parameters</data>
      <data key="d8">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="deps" target="hitchhiker">
      <data key="d5">7.0</data>
      <data key="d6">The deps parameter influences the behavior of the hitchhiker function, determining how it interacts with the provided context.</data>
      <data key="d7">dependency management, function behavior</data>
      <data key="d8">chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="deps" target="Agent">
      <data key="d5">13.0</data>
      <data key="d6">Deps are external dependencies that enrich the Agent with necessary tools and resources needed for executing tasks and conversations.&lt;SEP&gt;The dependencies referred to by deps are critical for the Agent's function and setup, influencing its operational environment.</data>
      <data key="d7">dependency management, resource allocation&lt;SEP&gt;environment setup, operational dependencies</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-ed10d031435c9386fd353a8330563748</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="deps" target="GraphAgentState">
      <data key="d5">7.0</data>
      <data key="d6">GraphAgentState depends on various deps for its operations, including user inputs and configurations.</data>
      <data key="d7">dependency management, state dependencies</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="deps" target="BaseNode">
      <data key="d5">12.0</data>
      <data key="d6">BaseNode can have dependencies (deps) that determine its execution sequence in the graph.&lt;SEP&gt;deps represents relationships or requirements that BaseNode might depend on for successful execution within the graph.</data>
      <data key="d7">dependencies, execution context&lt;SEP&gt;execution dependency, graph structure</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MachineState" target="InsertCoin">
      <data key="d5">16.0</data>
      <data key="d6">MachineState is updated during the InsertCoin event, as it tracks the user's balance after coins are inserted.</data>
      <data key="d7">state management, event handling</data>
      <data key="d8">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MachineState" target="CoinsInserted">
      <data key="d5">18.0</data>
      <data key="d6">CoinsInserted updates the user's balance in MachineState based on the amount inserted.</data>
      <data key="d7">state update, event processing</data>
      <data key="d8">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MachineState" target="Purchase">
      <data key="d5">20.0</data>
      <data key="d6">The Purchase event behaves based on the MachineState to complete the transaction if the balance is sufficient.</data>
      <data key="d7">completion of transaction, state reliance</data>
      <data key="d8">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InsertCoin" target="CoinsInserted">
      <data key="d5">8.0</data>
      <data key="d6">InsertCoin leads to the state where CoinsInserted confirms that coins have been inserted into the machine, marking a transition in the graph.</data>
      <data key="d7">state transition, operational flow</data>
      <data key="d8">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InsertCoin" target="Purchase">
      <data key="d5">6.0</data>
      <data key="d6">After completing a Purchase, the flow returns to InsertCoin, indicating that the vending machine can start another transaction.</data>
      <data key="d7">cyclical operation, transaction reset</data>
      <data key="d8">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CoinsInserted" target="SelectProduct">
      <data key="d5">16.0</data>
      <data key="d6">After coins are inserted, the SelectProduct event determines which product to purchase based on user input.</data>
      <data key="d7">transaction flow, user interaction</data>
      <data key="d8">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CoinsInserted" target="Purchase">
      <data key="d5">7.0</data>
      <data key="d6">CoinsInserted allows the user to SelectProduct and move forward with the Purchase, indicating an operational sequence within the vending machine graph.</data>
      <data key="d7">sequence of operations, event progression</data>
      <data key="d8">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Purchase" target="PRODUCT_PRICES">
      <data key="d5">18.0</data>
      <data key="d6">Purchase references PRODUCT_PRICES to check the product's price before completing the transaction.</data>
      <data key="d7">price mapping, product transaction</data>
      <data key="d8">chunk-9a99cfa8ff8a41ea240361d13d4e41ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunResult" target="vending_machine_graph">
      <data key="d5">9.0</data>
      <data key="d6">GraphRunResult provides feedback and data on the execution and performance of the vending_machine_graph, essential for understanding its functionality.</data>
      <data key="d7">output result, feedback loop</data>
      <data key="d8">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunResult" target="pydantic_graph">
      <data key="d5">19.0</data>
      <data key="d6">GraphRunResult is a component of Pydantic Graph, providing the results of executing the graph.&lt;SEP&gt;GraphRunResult is a part of the pydantic_graph library that encapsulates the results of graph runs.</data>
      <data key="d7">library component, encapsulation&lt;SEP&gt;result framework, library component</data>
      <data key="d8">chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunResult" target="End">
      <data key="d5">15.0</data>
      <data key="d6">GraphRunResult derives from completing the execution of nodes in the graph, thus correlating with the End node.".&lt;SEP&gt;GraphRunResult includes End to denote the completion of graph processing and to handle state persistence.</data>
      <data key="d7">execution outcome, graph state&lt;SEP&gt;processing completion, state management</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunResult" target="State Persistence">
      <data key="d5">6.0</data>
      <data key="d6">State Persistence is crucial for creating accurate GraphRunResults, as it preserves the state during the execution of the graph.</data>
      <data key="d7">state management, execution results</data>
      <data key="d8">chunk-e84d9789a2133f11a435754d1aaecda4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunResult" target="StateT">
      <data key="d5">7.0</data>
      <data key="d6">StateT is used to define the shared state between nodes that contributes to generating a finalized GraphRunResult after execution.</data>
      <data key="d7">shared state, result formation</data>
      <data key="d8">chunk-e84d9789a2133f11a435754d1aaecda4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunResult" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">GraphRunResult contains instances of BaseNode as part of its output structure, indicating the results of node executions.</data>
      <data key="d7">output structure, node execution</data>
      <data key="d8">chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRunResult" target="BaseStatePersistence">
      <data key="d5">9.0</data>
      <data key="d6">GraphRunResult includes an instance of BaseStatePersistence to manage state retention and persistence across executions.</data>
      <data key="d7">state management, data retention</data>
      <data key="d8">chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="vending_machine_graph" target="question_graph">
      <data key="d5">6.0</data>
      <data key="d6">question_graph generates interactions similar to the vending_machine_graph, focusing on managing states in querying.</data>
      <data key="d7">state management, functional similarity</data>
      <data key="d8">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunEndT" target="BaseNode">
      <data key="d5">17.0</data>
      <data key="d6">BaseNode instances can lead to a RunEndT, marking the conclusion of a graph execution based on defined logic.&lt;SEP&gt;RunEndT indicates the termination type for nodes, informing the behavior in graph execution processes.</data>
      <data key="d7">node execution, termination handling&lt;SEP&gt;termination, node transitions</data>
      <data key="d8">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunEndT" target="GraphRun">
      <data key="d5">9.0</data>
      <data key="d6">RunEndT indicates the final state upon completion of a GraphRun, marking the end of an execution cycle.</data>
      <data key="d7">execution completion, run tracking</data>
      <data key="d8">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunEndT" target="StateT">
      <data key="d5">6.0</data>
      <data key="d6">StateT and RunEndT are integral types that facilitate state management and signify completion within the context of a graph run.</data>
      <data key="d7">state management, execution completion</data>
      <data key="d8">chunk-e84d9789a2133f11a435754d1aaecda4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunEndT" target="End">
      <data key="d5">8.0</data>
      <data key="d6">End contains RunEndT data, indicating the return type from the graph after reaching its end.</data>
      <data key="d7">graph output, return type</data>
      <data key="d8">chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunEndT" target="EndSnapshot">
      <data key="d5">17.0</data>
      <data key="d6">EndSnapshot collects data pertaining to RunEndT, which signifies the final outcome of running a graph node.&lt;SEP&gt;EndSnapshot includes the result of type RunEndT, detailing outcomes of the graph execution.</data>
      <data key="d7">execution outcome, result tracking&lt;SEP&gt;result representation, execution outcome</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunEndT" target="BaseStatePersistence">
      <data key="d5">7.0</data>
      <data key="d6">BaseStatePersistence is designed to manage storage related to results delineated by types such as RunEndT.</data>
      <data key="d7">state management, result handling</data>
      <data key="d8">chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunEndT" target="NodeSnapshot">
      <data key="d5">7.0</data>
      <data key="d6">NodeSnapshot helps in tracking the results and status of the graph run, connecting to RunEndT for completion analysis.</data>
      <data key="d7">run tracking, completion status</data>
      <data key="d8">chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid diagrams" target="vending_machine_diagram.py">
      <data key="d5">9.0</data>
      <data key="d6">The vending_machine_diagram.py script generates a mermaid diagram based on the Graph structure of the vending machine.</data>
      <data key="d7">visual representation, diagram generation</data>
      <data key="d8">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="feedback_graph" target="GenAI Example">
      <data key="d5">8.0</data>
      <data key="d6">The GenAI Example illustrates how the feedback_graph operates, showcasing the interaction between agents in generating emails.</data>
      <data key="d7">demonstration of functionality, agent interaction</data>
      <data key="d8">chunk-9f106548aed70137ff14bc29aa95f4ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="John" target="Tech Blog">
      <data key="d5">16.0</data>
      <data key="d6">John is welcomed in the Tech Blog, indicating a relationship between the individual and the online platform.&lt;SEP&gt;John is welcomed to the Tech Blog, indicating a connection between the individual and the platform.</data>
      <data key="d7">welcome interaction, community&lt;SEP&gt;welcome interaction, community engagement</data>
      <data key="d8">chunk-e7563a1a76b149778e790581bfc9c864</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="John" target="support_advice">
      <data key="d5">10.0</data>
      <data key="d6">Support_advice is provided directly to John based on his specific inquiries regarding his account and banking issues.</data>
      <data key="d7">customer service feedback, personalized interaction</data>
      <data key="d8">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="count_down_graph">
      <data key="d5">9.0</data>
      <data key="d6">count_down_graph utilizes FileStatePersistence to manage the state of countdown operations over different executions.</data>
      <data key="d7">state management, event execution</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="pydantic_graph">
      <data key="d5">9.0</data>
      <data key="d6">FileStatePersistence is part of the Pydantic Graph library and is utilized for state persistence.</data>
      <data key="d7">dependency, library component</data>
      <data key="d8">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="NodeSnapshot">
      <data key="d5">8.0</data>
      <data key="d6">FileStatePersistence manages snapshots of nodes including NodeSnapshot for state tracking.</data>
      <data key="d7">state management, event tracking</data>
      <data key="d8">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="State Persistence">
      <data key="d5">9.0</data>
      <data key="d6">FileStatePersistence implements the state persistence concept by saving state data in a JSON file.</data>
      <data key="d7">implementation, data storage</data>
      <data key="d8">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="JSON">
      <data key="d5">8.0</data>
      <data key="d6">FileStatePersistence uses JSON format to store snapshots of state data.</data>
      <data key="d7">data format, storage medium</data>
      <data key="d8">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="asynccontextmanager">
      <data key="d5">6.0</data>
      <data key="d6">The asynccontextmanager decorator is utilized within the FileStatePersistence class for managing asynchronous operations.</data>
      <data key="d7">resource management, asynchronous programming</data>
      <data key="d8">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="Path">
      <data key="d5">9.0</data>
      <data key="d6">FileStatePersistence utilizes the Path to store and retrieve snapshots in JSON files.</data>
      <data key="d7">data storage, file management</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="PydanticGraph">
      <data key="d5">8.0</data>
      <data key="d6">FileStatePersistence operates within the PydanticGraph framework, managing snapshot persistence for graph states.</data>
      <data key="d7">framework integration, state management</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FileStatePersistence" target="secrets">
      <data key="d5">9.0</data>
      <data key="d6">The secrets library is used to generate secure tokens for managing file locks in FileStatePersistence.</data>
      <data key="d7">security, data integrity</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CountDown" target="End">
      <data key="d5">8.0</data>
      <data key="d6">The CountDown event is part of a progression that leads to the completion of a graph run, which is indicated by the End event.</data>
      <data key="d7">workflow completion, event progression</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Pydantic is the underlying library that provides the framework within which the Agent class operates.</data>
      <data key="d7">library foundation, framework</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic" target="Agent[None, Union[Box, str]]">
      <data key="d5">9.0</data>
      <data key="d6">Pydantic is the library that facilitates the creation of Agents that can handle diverse return types such as Box or string.</data>
      <data key="d7">library foundation, framework</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic" target="streaming structured responses">
      <data key="d5">18.0</data>
      <data key="d6">Pydantic validates the structured data format of the responses, ensuring accuracy in the whale data presented.&lt;SEP&gt;Pydantic validates the structured data format of the responses, ensuring the structured data related to whales is accurate and well-formed.</data>
      <data key="d7">data validation, structured data</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="EndSnapshot">
      <data key="d5">7.0</data>
      <data key="d6">NodeSnapshop includes sessions from the start to the EndSnapshot, marking the completion of the execution phases in a graph run.</data>
      <data key="d7">execution flow, state transition</data>
      <data key="d8">chunk-7852caa62e172f96d8bc0edb1b849a3f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="NodeDef">
      <data key="d5">8.0</data>
      <data key="d6">NodeSnapshot contains details about the execution of NodeDef nodes, linking the state of the node with its definition.</data>
      <data key="d7">execution tracking, node details</data>
      <data key="d8">chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="SnapshotStatus">
      <data key="d5">9.0</data>
      <data key="d6">NodeSnapshot includes a SnapshotStatus indicating the current state of the node's execution.</data>
      <data key="d7">execution status, monitoring</data>
      <data key="d8">chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="Snapshot">
      <data key="d5">37.0</data>
      <data key="d6">NodeSnapshot is a specific type of Snapshot focused on graph node states.&lt;SEP&gt;NodeSnapshot is a type of Snapshot that specifically captures the state of a node within the graph environment.&lt;SEP&gt;NodeSnapshot is responsible for managing collections of Snapshots that represent various states within a graph.&lt;SEP&gt;NodeSnapshot manages a collection of snapshots indicating a specific state in the graph.&lt;SEP&gt;NodeSnapshot serves as a specialized version of Snapshot that captures the state of individual nodes during execution.</data>
      <data key="d7">node representation, execution state&lt;SEP&gt;specific type, state capture&lt;SEP&gt;state management, data structure&lt;SEP&gt;subclassing, data structure</data>
      <data key="d8">chunk-cd5782f266ceebcaff272f062084cba6&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a&lt;SEP&gt;chunk-1874d189c1d13783a0a35c4fe1c8d046&lt;SEP&gt;chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="BaseStatePersistence">
      <data key="d5">7.0</data>
      <data key="d6">BaseStatePersistence is responsible for managing the storage of different snapshots, including NodeSnapshot instances.</data>
      <data key="d7">state management, snapshot storage</data>
      <data key="d8">chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="BaseNode">
      <data key="d5">15.0</data>
      <data key="d6">NodeSnapshot captures the state related to a specific instance of BaseNode during graph execution.&lt;SEP&gt;NodeSnapshot documents the state of a BaseNode during its lifecycle within the graph.</data>
      <data key="d7">node management, lifecycle tracking&lt;SEP&gt;states, graph structure</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="StateT">
      <data key="d5">9.0</data>
      <data key="d6">StateT represents the current state of the graph, which is captured by NodeSnapshot at various points.</data>
      <data key="d7">graph state management, persistence</data>
      <data key="d8">chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="pydantic_graph">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_graph utilizes NodeSnapshot to maintain the states of nodes in a graph for persistence purposes.</data>
      <data key="d7">persistence mechanism, state management</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="snapshot_node">
      <data key="d5">8.0</data>
      <data key="d6">snapshot_node adds a NodeSnapshot to persistence, recording the state of the graph before executing the next node.</data>
      <data key="d7">state recording, graph execution</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="load_next">
      <data key="d5">8.0</data>
      <data key="d6">The load_next method is responsible for retrieving a NodeSnapshot with a specific status, indicating its significance in process management.</data>
      <data key="d7">event function, node management</data>
      <data key="d8">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="load_all">
      <data key="d5">14.0</data>
      <data key="d6">The load_all method deals with loading the entire history of NodeSnapshots, showing the cumulative process data.&lt;SEP&gt;The load_all method gathers all NodeSnapshots, showing its relationship to the historical data of all nodes in execution.</data>
      <data key="d7">data collection, historical tracking&lt;SEP&gt;event function, data retrieval</data>
      <data key="d8">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="set_types">
      <data key="d5">9.0</data>
      <data key="d6">The set_types method works with NodeSnapshots for defining their state and run end types for serialization.</data>
      <data key="d7">method implementation, snapshot handling</data>
      <data key="d8">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="NodeSnapshot.duration">
      <data key="d5">8.0</data>
      <data key="d6">The duration of a NodeSnapshot helps assess performance, linking the time taken for execution to the snapshot itself.</data>
      <data key="d7">performance measurement, execution efficiency</data>
      <data key="d8">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="Snapshot[StateT, RunEndT]">
      <data key="d5">8.0</data>
      <data key="d6">NodeSnapshot is a specialized form of Snapshot designed to capture the state of individual nodes during their execution.</data>
      <data key="d7">specific type, state capture</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="Node">
      <data key="d5">9.0</data>
      <data key="d6">NodeSnapshot specifically documents the state of a Node during execution, highlighting the relationship between node activity and state tracking.</data>
      <data key="d7">execution documentation, state tracking</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="Graph Run">
      <data key="d5">9.0</data>
      <data key="d6">NodeSnapshots are taken during a graph run to record the state of each node at a given time.</data>
      <data key="d7">state capture, event documentation</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="record_run">
      <data key="d5">7.0</data>
      <data key="d6">record_run manages the status of a NodeSnapshot during execution, ensuring its state is accurately captured.</data>
      <data key="d7">status management, execution tracking</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="NodeSnapshot.state">
      <data key="d5">7.0</data>
      <data key="d6">NodeSnapshot.state represents the current state of the corresponding node in the graph captured by the snapshot.</data>
      <data key="d7">node state, event representation</data>
      <data key="d8">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="AsyncExitStack">
      <data key="d5">14.0</data>
      <data key="d6">AsyncExitStack is used to manage asynchronous context when handling NodeSnapshots effectively.&lt;SEP&gt;AsyncExitStack is utilized in the context of managing asynchronous tasks related to NodeSnapshots.</data>
      <data key="d7">asynchronous management, context handling&lt;SEP&gt;asynchronous management, context management</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot" target="timeout">
      <data key="d5">6.0</data>
      <data key="d6">The timeout parameter is used to define the maximum wait time in operations involving NodeSnapshots.</data>
      <data key="d7">timeout management, performance</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndSnapshot" target="BaseStatePersistence">
      <data key="d5">8.0</data>
      <data key="d6">EndSnapshot acts within the context defined by BaseStatePersistence to provide the final state of a graph run.</data>
      <data key="d7">graph execution, state management</data>
      <data key="d8">chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndSnapshot" target="UNSET_SNAPSHOT_ID">
      <data key="d5">5.0</data>
      <data key="d6">EndSnapshot uses UNSET_SNAPSHOT_ID to signify when a snapshot ID is not explicitly set.</data>
      <data key="d7">identifier management, state tracking</data>
      <data key="d8">chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndSnapshot" target="Snapshot">
      <data key="d5">16.0</data>
      <data key="d6">EndSnapshot is another type of Snapshot capturing the final state once a run ends, thus related to Snapshots.&lt;SEP&gt;EndSnapshot represents a specific instance of a Snapshot at the end of a graph execution.</data>
      <data key="d7">final state, snapshot type&lt;SEP&gt;snapshot representation, final output</data>
      <data key="d8">chunk-cd5782f266ceebcaff272f062084cba6&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndSnapshot" target="End">
      <data key="d5">10.0</data>
      <data key="d6">EndSnapshot includes the final results as part of the graph execution outcome, outlined by type End.</data>
      <data key="d7">execution outcome, result output</data>
      <data key="d8">chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndSnapshot" target="pydantic_graph">
      <data key="d5">9.0</data>
      <data key="d6">EndSnapshot serves to record the final state of the graph at the end of its execution, integral to the persistence strategy.</data>
      <data key="d7">execution results, state recording</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndSnapshot" target="snapshot_end">
      <data key="d5">9.0</data>
      <data key="d6">snapshot_end is responsible for creating an EndSnapshot to record the final state of a graph after it has completed execution.</data>
      <data key="d7">end state recording, completion</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndSnapshot" target="Snapshot[StateT, RunEndT]">
      <data key="d5">8.0</data>
      <data key="d6">EndSnapshot represents the final state of a graph run as a specific instance of Snapshot, contributing to state history.</data>
      <data key="d7">final state, snapshot instance</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndSnapshot" target="Graph Run">
      <data key="d5">9.0</data>
      <data key="d6">EndSnapshots are recorded at the conclusion of a graph run to document the final state and results of the operations.</data>
      <data key="d7">final state documentation, operational summary</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SimpleStatePersistence" target="BaseStatePersistence">
      <data key="d5">24.0</data>
      <data key="d6">SimpleStatePersistence implements the BaseStatePersistence interface, providing concrete state handling functionalities.&lt;SEP&gt;SimpleStatePersistence inherits from BaseStatePersistence, implementing a specific state persistence approach for in-memory management.&lt;SEP&gt;SimpleStatePersistence is a basic implementation of BaseStatePersistence, often employed in graph executions.</data>
      <data key="d7">implementation, state management&lt;SEP&gt;inheritance, state management</data>
      <data key="d8">chunk-84dbc168c641445f220e32b439e688dd&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SimpleStatePersistence" target="pydantic_graph">
      <data key="d5">9.0</data>
      <data key="d6">The SimpleStatePersistence class is a component of the pydantic_graph framework, providing memory state management.</data>
      <data key="d7">framework component, state management</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SimpleStatePersistence" target="Snapshot">
      <data key="d5">7.0</data>
      <data key="d6">SimpleStatePersistence retains the last Snapshot of the state during persistence operations.</data>
      <data key="d7">state retention, snapshot management</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FullStatePersistence" target="pydantic_graph">
      <data key="d5">8.0</data>
      <data key="d6">The FullStatePersistence class is also part of the pydantic_graph framework, offering a detailed history of snapshots.</data>
      <data key="d7">framework component, state history</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FullStatePersistence" target="Snapshot">
      <data key="d5">8.0</data>
      <data key="d6">FullStatePersistence maintains a list of Snapshots to track all state changes throughout the graph’s execution.</data>
      <data key="d7">state history, snapshot management</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FullStatePersistence" target="BaseStatePersistence">
      <data key="d5">9.0</data>
      <data key="d6">FullStatePersistence also derives from BaseStatePersistence, providing full state history capabilities during graph executions.</data>
      <data key="d7">inheritance, state tracking</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FullStatePersistence" target="Path">
      <data key="d5">9.0</data>
      <data key="d6">FullStatePersistence uses paths to store snapshot data in specific JSON files.</data>
      <data key="d7">data storage, file management</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FullStatePersistence" target="PydanticGraph">
      <data key="d5">8.0</data>
      <data key="d6">FullStatePersistence operates within the PydanticGraph context to manage snapshot persistence.</data>
      <data key="d7">organization interaction, state persistence</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="QuestionState" target="Ask">
      <data key="d5">8.0</data>
      <data key="d6">The QuestionState node holds contextual information that is used when the Ask node triggers a user prompt for input.</data>
      <data key="d7">context management, user interaction</data>
      <data key="d8">chunk-7f168f5f58a160ed8d5f9ed516fb7e89</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ask" target="Answer">
      <data key="d5">26.0</data>
      <data key="d6">Ask leads to an Answer as the user is prompted to respond to the question posed.&lt;SEP&gt;The Ask node generates a question prompting the user to provide an answer, leading to the Answer node.&lt;SEP&gt;The Ask node is responsible for generating a question which leads to the Answer node where the user provides their reply.</data>
      <data key="d7">question generation, user input&lt;SEP&gt;question generation, user interaction&lt;SEP&gt;user interaction, Q&amp;A process</data>
      <data key="d8">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Answer" target="Evaluate">
      <data key="d5">37.0</data>
      <data key="d6">Evaluate assesses the correctness of the Answer provided by the user, directly related to the user's response.&lt;SEP&gt;Evaluate is responsible for assessing the quality of the Answer generated from the question_graph.&lt;SEP&gt;The Answer node captures the user's response and passes it to the Evaluate node for correctness assessment.&lt;SEP&gt;The Answer node receives the user's input which is then evaluated in the Evaluate node for correctness.</data>
      <data key="d7">evaluation process, answer quality&lt;SEP&gt;evaluation process, user response&lt;SEP&gt;response evaluation, correctness check</data>
      <data key="d8">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Answer" target="input">
      <data key="d5">10.0</data>
      <data key="d6">The input provided by the user is captured by the Answer node as part of the interactive process.</data>
      <data key="d7">user response, interaction</data>
      <data key="d8">chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Answer" target="image.png">
      <data key="d5">6.0</data>
      <data key="d6">The Answer generated may result in the creation of an image file to visually represent the query results.</data>
      <data key="d7">output generation, visual representation</data>
      <data key="d8">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluate" target="Reprimand">
      <data key="d5">29.0</data>
      <data key="d6">If the Evaluate node determines the answer is incorrect, it transitions to the Reprimand node to prompt the user to try again.&lt;SEP&gt;If the answer evaluated is incorrect, the Evaluate node leads to the Reprimand node prompting the user to try again.&lt;SEP&gt;Reprimand is invoked based on the outcome of the Evaluate node, providing feedback on the user's answer.&lt;SEP&gt;When an evaluation is deemed unsatisfactory, Evaluate may trigger a Reprimand event indicating the need for corrections.</data>
      <data key="d7">evaluation feedback, corrective measures&lt;SEP&gt;feedback loop, correction mechanism&lt;SEP&gt;feedback mechanism, evaluation outcome&lt;SEP&gt;feedback process, correction</data>
      <data key="d8">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687&lt;SEP&gt;chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluate" target="EvaluationResult">
      <data key="d5">9.0</data>
      <data key="d6">Evaluate produces an EvaluationResult indicating the correctness and feedback regarding the user's answer.</data>
      <data key="d7">result production, answer evaluation</data>
      <data key="d8">chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluate" target="End">
      <data key="d5">26.0</data>
      <data key="d6">A correct evaluation in the Evaluate node leads to the completion of the process, transitioning to the End node.&lt;SEP&gt;A successful evaluation in the Evaluate node leads to the End node, signaling the conclusion of the interaction.&lt;SEP&gt;End signifies the conclusion of an evaluation process, leading to final feedback on the user's answer.</data>
      <data key="d7">completion, successful interaction&lt;SEP&gt;process completion, success&lt;SEP&gt;process conclusion, feedback</data>
      <data key="d8">chunk-7f168f5f58a160ed8d5f9ed516fb7e89&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluate" target="question_graph">
      <data key="d5">8.0</data>
      <data key="d6">Evaluate operates within the question_graph, determining the quality of answers generated from queries.</data>
      <data key="d7">query management, evaluation</data>
      <data key="d8">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluate" target="success">
      <data key="d5">10.0</data>
      <data key="d6">Evaluate determines the success of the answer quality assessment and influences subsequent actions in the workflow.</data>
      <data key="d7">evaluation outcome, workflow progression</data>
      <data key="d8">chunk-ef03b0f17602b5bd774f2c7cb055f939</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluate" target="Castigate">
      <data key="d5">5.0</data>
      <data key="d6">Evaluate can lead to castigation if the outcome or assessment is negative, prompting correction or criticism.</data>
      <data key="d7">assessment, reprimand</data>
      <data key="d8">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluate" target="Congratulate">
      <data key="d5">7.0</data>
      <data key="d6">Evaluate can lead to congratulating if the outcome is positive, as success is recognized with praise.</data>
      <data key="d7">assessment, praise</data>
      <data key="d8">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationResult" target="EvaluationReason">
      <data key="d5">8.0</data>
      <data key="d6">EvaluationResult consists of a value and may be accompanied by an EvaluationReason, linking evaluation scores with their justifications.</data>
      <data key="d7">evaluation rationale, scoring explanation</data>
      <data key="d8">chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="Node">
      <data key="d5">7.0</data>
      <data key="d6">BaseModel serves as a foundational structure for creating Nodes that define the behavior and attributes of the graph."&lt;&lt;"model structure, definition</data>
      <data key="d7">7</data>
      <data key="d8">chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="Box">
      <data key="d5">9.0</data>
      <data key="d6">Box extends BaseModel to create a specific data model for box dimensions and units.</data>
      <data key="d7">model inheritance, data modeling</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="MistralStreamedResponse">
      <data key="d5">15.0</data>
      <data key="d6">MistralStreamedResponse leverages BaseModel to define validation rules for various JSON outputs and structures.&lt;SEP&gt;MistralStreamedResponse utilizes BaseModel to ensure that the required parameters in schemas are respected.</data>
      <data key="d7">model integration, validation rules&lt;SEP&gt;validation framework, schema compliance</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="json_schema">
      <data key="d5">8.0</data>
      <data key="d6">BaseModel defines the structure that json_schema follows to enforce compliance with required fields.</data>
      <data key="d7">model definition, structure compliance</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="TypedDict">
      <data key="d5">8.0</data>
      <data key="d6">TypedDict is used alongside BaseModel in Pydantic for defining structured data types.</data>
      <data key="d7">data validation, structure</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="JSON Schema">
      <data key="d5">8.0</data>
      <data key="d6">BaseModel can be used to generate a JSON Schema which describes the data structure expected by the model.</data>
      <data key="d7">schema validation, data description</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="ConfigDict">
      <data key="d5">9.0</data>
      <data key="d6">BaseModel uses ConfigDict to manage configuration settings for model behavior and validations.</data>
      <data key="d7">configuration management, settings</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="Path">
      <data key="d5">7.0</data>
      <data key="d6">BaseModel can utilize Path objects to manage and represent filesystem paths within models.</data>
      <data key="d7">file handling, model integration</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="model_json_schema">
      <data key="d5">10.0</data>
      <data key="d6">model_json_schema is a method associated with BaseModel used to generate its JSON schema.</data>
      <data key="d7">schema generation, model functionality</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="extra">
      <data key="d5">8.0</data>
      <data key="d6">The extra configuration in BaseModel determines how unrecognized fields are handled during validation.</data>
      <data key="d7">field handling, model validation</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="self">
      <data key="d5">8.0</data>
      <data key="d6">The 'self' instance may extend from BaseModel to inherit its validation and management capabilities.</data>
      <data key="d7">inheritance</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="ReportCaseAggregate">
      <data key="d5">8.0</data>
      <data key="d6">ReportCaseAggregate inherits from BaseModel, utilizing its features for data modeling and validation.</data>
      <data key="d7">inheritance, data modeling</data>
      <data key="d8">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="defaultdict">
      <data key="d5">7.0</data>
      <data key="d6">defaultdict is often used within the context of BaseModel for default value handling in cases.</data>
      <data key="d7">default handling, data modeling</data>
      <data key="d8">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseModel" target="EvaluationReport">
      <data key="d5">6.0</data>
      <data key="d6">EvaluationReport is built upon the BaseModel, suggesting that it inherits certain characteristics from it.</data>
      <data key="d7">inheritance, structural relationship</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Node" target="FinalResult">
      <data key="d5">9.0</data>
      <data key="d6">FinalResult is produced at the conclusion of processing a Node within the agent's workflow, summarizing outcomes and results.</data>
      <data key="d7">outcome, processing stage</data>
      <data key="d8">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Node" target="ToolFuncPlain">
      <data key="d5">8.0</data>
      <data key="d6">ToolFuncPlain can be represented as nodes in the computation graph used by the AI agent for function execution.</data>
      <data key="d7">function representation, computational graph</data>
      <data key="d8">chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Node" target="DepsT">
      <data key="d5">9.0</data>
      <data key="d6">DepsT represents the dependencies of a Node in the Graph, showing how Nodes interact and rely on one another for execution.</data>
      <data key="d7">dependency management, node interaction</data>
      <data key="d8">chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Node" target="load_next">
      <data key="d5">8.0</data>
      <data key="d6">The load_next method retrieves the next Node in the execution sequence, highlighting its role in direct node management.</data>
      <data key="d7">method execution, node retrieval</data>
      <data key="d8">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Path" target="Dataset Model">
      <data key="d5">7.0</data>
      <data key="d6">The Dataset Model utilizes Path to define file locations for saving datasets or schema files, facilitating easy data management.</data>
      <data key="d7">file management, structural definition</data>
      <data key="d8">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Path" target="ConfigDict">
      <data key="d5">6.0</data>
      <data key="d6">ConfigDict may use Path to specify file locations or settings related to paths.</data>
      <data key="d7">settings management, configuration</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Path" target="to_file">
      <data key="d5">8.0</data>
      <data key="d6">The to_file method utilizes the Path class to manage the file paths for saving datasets.</data>
      <data key="d7">method utilization, file management</data>
      <data key="d8">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Path" target="mermaid.save_image">
      <data key="d5">9.0</data>
      <data key="d6">Path is used in the save_image method to define the destination for saving generated images.</data>
      <data key="d7">file handling, image storage</data>
      <data key="d8">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="End">
      <data key="d5">36.0</data>
      <data key="d6">GraphRun completes the execution and produces an End object as the final output, signifying the end of the process.&lt;SEP&gt;GraphRun culminates in reaching the End node, indicating the conclusion of the process.&lt;SEP&gt;The End node signifies the conclusion of the graph run, encapsulating the final processed data and results.</data>
      <data key="d7">process completion, final output&lt;SEP&gt;process conclusion, output encapsulation&lt;SEP&gt;process flow, execution outcome</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41&lt;SEP&gt;chunk-241cea24e0ec8915cd8b8580f86bf720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="Snapshot">
      <data key="d5">16.0</data>
      <data key="d6">Snapshots are generated during the GraphRun process to track the state and history of execution.</data>
      <data key="d7">state management, execution history</data>
      <data key="d8">chunk-241cea24e0ec8915cd8b8580f86bf720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="FinalResult">
      <data key="d5">7.0</data>
      <data key="d6">GraphRun manages the state of AgentRun and determines when the completion of an agent run produces a FinalResult.</data>
      <data key="d7">state management, execution completion</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="BaseNode">
      <data key="d5">44.0</data>
      <data key="d6">GraphRun executes nodes defined by BaseNode and monitors their states, forming a core aspect of graph execution.&lt;SEP&gt;GraphRun executes nodes of type BaseNode within the context of a state machine.&lt;SEP&gt;GraphRun interacts with BaseNode objects, managing their state and dependencies throughout the execution process.&lt;SEP&gt;GraphRun is associated with executing a BaseNode as part of the graph traversal process.&lt;SEP&gt;GraphRun is responsible for executing the nodes of type BaseNode, orchestrating the flow of execution within the graph.</data>
      <data key="d7">execution process, node management&lt;SEP&gt;execution, structure&lt;SEP&gt;graph execution, node processing&lt;SEP&gt;node execution, graph management&lt;SEP&gt;node execution, state management</data>
      <data key="d8">chunk-b713802bb6676d53f06afddee9aa1d12&lt;SEP&gt;chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="BaseStatePersistence">
      <data key="d5">35.0</data>
      <data key="d6">BaseStatePersistence is employed by GraphRun to manage state retention throughout the lifecycle of a graph execution.&lt;SEP&gt;BaseStatePersistence is used by GraphRun to save and retrieve the state during execution.&lt;SEP&gt;GraphRun utilizes BaseStatePersistence for managing state persistence and retrieval during its execution.&lt;SEP&gt;GraphRun utilizes BaseStatePersistence to save and load the state during its execution, ensuring continuity and recovery options.</data>
      <data key="d7">state management, data persistence&lt;SEP&gt;state management, execution&lt;SEP&gt;state management, persistence&lt;SEP&gt;state persistence, graph execution</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="ExitStack">
      <data key="d5">7.0</data>
      <data key="d6">ExitStack is utilized within GraphRun to ensure proper management of resources during graph execution.</data>
      <data key="d7">resource management, execution</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="AsyncIterator">
      <data key="d5">8.0</data>
      <data key="d6">GraphRun utilizes AsyncIterator to process nodes asynchronously, allowing for smooth execution of a graph.</data>
      <data key="d7">asynchronous processing, execution</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="run graph&quot;{graph.name}">
      <data key="d5">9.0</data>
      <data key="d6">GraphRun is initiated by the run graph event to manage the execution of the defined graph nodes.</data>
      <data key="d7">execution management, workflow</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="mermaid">
      <data key="d5">14.0</data>
      <data key="d6">GraphRun can generate representation diagrams for processes, utilizing the mermaid tool.</data>
      <data key="d7">graph visualization, diagram generation</data>
      <data key="d8">chunk-14e53235b034b988f73d8d04cdce068d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="persistence">
      <data key="d5">8.0</data>
      <data key="d6">GraphRun relies on persistence to manage and store the state of the nodes during execution.</data>
      <data key="d7">state management, execution support</data>
      <data key="d8">chunk-14e53235b034b988f73d8d04cdce068d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="infer_name">
      <data key="d5">5.0</data>
      <data key="d6">The infer_name parameter in GraphRun determines how the graph's name is derived at runtime.</data>
      <data key="d7">name management, execution context</data>
      <data key="d8">chunk-14e53235b034b988f73d8d04cdce068d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="iter">
      <data key="d5">8.0</data>
      <data key="d6">The iter function returns a GraphRun object that allows for the async iteration of nodes during graph execution.</data>
      <data key="d7">function execution, graph management</data>
      <data key="d8">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="state persistence interface">
      <data key="d5">6.0</data>
      <data key="d6">The state persistence interface is used by GraphRun to maintain the historical state during graph execution.</data>
      <data key="d7">state management, execution continuity</data>
      <data key="d8">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="iter_from_persistence">
      <data key="d5">8.0</data>
      <data key="d6">GraphRun can be iterated using the iter_from_persistence method to drive the graph to completion.</data>
      <data key="d7">graph execution, iteration</data>
      <data key="d8">chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="pydantic_graph">
      <data key="d5">15.0</data>
      <data key="d6">GraphRun is a key component within the pydantic_graph module, facilitating the management and execution of graph processes.&lt;SEP&gt;GraphRun is part of the functionalities offered by the pydantic_graph module for managing graph operations.</data>
      <data key="d7">module functionality, graph execution&lt;SEP&gt;module functionality, graph operations</data>
      <data key="d8">chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="mermaid_code">
      <data key="d5">14.0</data>
      <data key="d6">mermaid_code is associated with GraphRun as a method to visualize its execution as a diagram.&lt;SEP&gt;mermaid_code is employed in conjunction with GraphRun to visualize the execution flow and structure of the graph as a diagram.</data>
      <data key="d7">visual representation, graph structure&lt;SEP&gt;visualization, graph representation</data>
      <data key="d8">chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="next">
      <data key="d5">8.0</data>
      <data key="d6">The next method within GraphRun drives the execution of the graph by determining which node to run next based on the current state.</data>
      <data key="d7">process control, execution flow</data>
      <data key="d8">chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="mermaid.ink">
      <data key="d5">6.0</data>
      <data key="d6">GraphRun can leverage mermaid.ink to visualize its state or structure as diagrams.</data>
      <data key="d7">visualization, external service</data>
      <data key="d8">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="Check42">
      <data key="d5">14.0</data>
      <data key="d6">The Check42 node is evaluated during the GraphRun to ascertain whether the state meets predefined conditions.&lt;SEP&gt;The run involves checking the state for equality to 42 at some point during execution.</data>
      <data key="d7">conditional evaluation, operations logic&lt;SEP&gt;state checking, decision-making</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="never_42_graph">
      <data key="d5">9.0</data>
      <data key="d6">never_42_graph is the graph instance from which GraphRun is created and executed.</data>
      <data key="d7">graph instantiation, execution context</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="State Persistence">
      <data key="d5">9.0</data>
      <data key="d6">GraphRun relies on State Persistence to manage the state throughout the running process.</data>
      <data key="d7">state management, operational dependency</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRun" target="next_node">
      <data key="d5">8.0</data>
      <data key="d6">GraphRun moves to the next_node as part of the algorithmic flow, determining the course of execution based on the current state.</data>
      <data key="d7">execution flow, node transition</data>
      <data key="d8">chunk-5450fc697e851cd84d7c84b663431a41</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Snapshot" target="Graph Run">
      <data key="d5">8.0</data>
      <data key="d6">During a graph run, multiple snapshots are recorded to capture the state at various points in time.</data>
      <data key="d7">graph execution, historical data</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Snapshot" target="dump_json">
      <data key="d5">7.0</data>
      <data key="d6">The dump_json method creates a JSON representation of the snapshot history, helping in data serialization for later use.</data>
      <data key="d7">data serialization, persistence</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Snapshot" target="load_json">
      <data key="d5">8.0</data>
      <data key="d6">The load_json method is utilized to restore snapshots from a JSON format, facilitating the reestablishment of historical states.</data>
      <data key="d7">data restoration, historical accuracy</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ProcessPoolExecutor" target="PydanticAI">
      <data key="d5">7.0</data>
      <data key="d6">PydanticAI supports the use of ProcessPoolExecutor for parallel execution within its functionalities.</data>
      <data key="d7">dependency injection, parallel processing</data>
      <data key="d8">chunk-241cea24e0ec8915cd8b8580f86bf720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Python 3.10+" target="PydanticAI">
      <data key="d5">10.0</data>
      <data key="d6">Python 3.10+ is the required version for running PydanticAI frameworks and code examples.</data>
      <data key="d7">software compatibility, version requirement</data>
      <data key="d8">chunk-241cea24e0ec8915cd8b8580f86bf720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Vertex AI" target="Google AI">
      <data key="d5">16.0</data>
      <data key="d6">Vertex AI is a product developed under the Google AI umbrella, showcasing its application of artificial intelligence technologies.</data>
      <data key="d7">product development, organizational relationship</data>
      <data key="d8">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Vertex AI" target="GeminiModel">
      <data key="d5">18.0</data>
      <data key="d6">GeminiModel can interact with services provided by Vertex AI for enhanced machine learning capabilities.&lt;SEP&gt;GeminiModel interacts with services provided by Vertex AI for enhanced machine learning functionalities and capabilities.</data>
      <data key="d7">AI integration, platform services&lt;SEP&gt;AI services, model integration</data>
      <data key="d8">chunk-a4e01bd25dcff46059903d23d9198862</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Vertex AI" target="google">
      <data key="d5">10.0</data>
      <data key="d6">Google develops and provides the Vertex AI platform for creating and managing machine learning models, establishing a direct organizational relationship.</data>
      <data key="d7">technology, cloud computing</data>
      <data key="d8">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GitHub" target="PydanticAI">
      <data key="d5">18.0</data>
      <data key="d6">PydanticAI is hosted on GitHub, which allows for version control and collaborative development of the library.&lt;SEP&gt;PydanticAI is hosted on GitHub, which provides version control and collaboration capabilities for its development.</data>
      <data key="d7">collaboration, development platform&lt;SEP&gt;platform usage, collaboration</data>
      <data key="d8">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DocumentUrl" target="BinaryContent">
      <data key="d5">20.0</data>
      <data key="d6">Both DocumentUrl and BinaryContent serve as methods for inputting document data into the AI system, albeit in different formats.&lt;SEP&gt;Both DocumentUrl and BinaryContent serve as methods for inputting documents into AI systems but differ in their formats.&lt;SEP&gt;DocumentUrl expands BinaryContent to include document data, providing versatility in content types.</data>
      <data key="d7">data input methods, AI processing&lt;SEP&gt;data type, content type</data>
      <data key="d8">chunk-fbac2cd26b16d89a2ad3c129160b997b&lt;SEP&gt;chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DocumentUrl" target="pydantic_ai_slim">
      <data key="d5">15.0</data>
      <data key="d6">DocumentUrl is included in the pydantic_ai_slim package, handling document URLs and their media types.&lt;SEP&gt;DocumentUrl is part of the infrastructure provided by pydantic_ai_slim for managing document URLs and their respective media types.</data>
      <data key="d7">software component, library functionality</data>
      <data key="d8">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DocumentUrl" target="UserPromptPart">
      <data key="d5">7.0</data>
      <data key="d6">DocumentUrl provides a way to reference documents within a UserPromptPart for richer user interaction.</data>
      <data key="d7">media inclusion, reference</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DocumentUrl" target="responses.ResponseInputFileParam">
      <data key="d5">9.0</data>
      <data key="d6">ResponseInputFileParam is used to manage files provided as DocumentUrl, ensuring they are processed correctly.</data>
      <data key="d7">file processing, data handling</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="UserPromptPart">
      <data key="d5">14.0</data>
      <data key="d6">BinaryContent can be included in a UserPromptPart to manage complex data representations in user inputs.&lt;SEP&gt;Both BinaryContent and UserPromptPart are categories capturing specific types of data structures in a programming context.</data>
      <data key="d7">data handling, input management&lt;SEP&gt;data representation, programming constructs</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf&lt;SEP&gt;chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="media_type">
      <data key="d5">15.0</data>
      <data key="d6">BinaryContent utilizes the media_type property to determine and describe the nature of its contained binary data.&lt;SEP&gt;The media_type property within BinaryContent classifies the binary data according to its format, such as audio or image.</data>
      <data key="d7">data classification, media type&lt;SEP&gt;data type, media categorization</data>
      <data key="d8">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="document">
      <data key="d5">8.0</data>
      <data key="d6">BinaryContent represents a specific type of data structure that can encapsulate binary data related to documents.</data>
      <data key="d7">data structure, document content</data>
      <data key="d8">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="kind">
      <data key="d5">6.0</data>
      <data key="d6">The kind attribute is used within BinaryContent to identify the type of data being processed under a specific framework.</data>
      <data key="d7">data categorization, structural definition</data>
      <data key="d8">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="format">
      <data key="d5">8.0</data>
      <data key="d6">The format property of BinaryContent specifies how the binary data is encoded, affecting how it is processed or displayed.</data>
      <data key="d7">data representation, encoding type</data>
      <data key="d8">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="data">
      <data key="d5">10.0</data>
      <data key="d6">data holds the actual binary content for a BinaryContent instance, which can be of various media types and formats.</data>
      <data key="d7">content storage, binary data</data>
      <data key="d8">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="bedrock_messages">
      <data key="d5">7.0</data>
      <data key="d6">BinaryContent might be included in bedrock_messages to represent non-textual responses or data types in interactions.</data>
      <data key="d7">content type integration, message variety</data>
      <data key="d8">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="responses.ResponseInputContentParam">
      <data key="d5">9.0</data>
      <data key="d6">BinaryContent is a type of ResponseInputContentParam that manages binary data like images and documents.</data>
      <data key="d7">data management, content handling</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="ImageUrl">
      <data key="d5">8.0</data>
      <data key="d6">ImageUrl is a specific instance of BinaryContent, representing image data that can be processed.</data>
      <data key="d7">data type, content type</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BinaryContent" target="AudioUrl">
      <data key="d5">8.0</data>
      <data key="d6">AudioUrl acts similarly to ImageUrl but for audio data, another form of BinaryContent.</data>
      <data key="d7">data type, content type</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Installation Process" target="PydanticAI">
      <data key="d5">10.0</data>
      <data key="d6">The installation process allows users to set up PydanticAI, facilitating access to its AI features.</data>
      <data key="d7">implementation, system setup</data>
      <data key="d8">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Installation" target="PydanticAI">
      <data key="d5">10.0</data>
      <data key="d6">The installation process outlines how to set up PydanticAI for use, making its functionalities accessible.</data>
      <data key="d7">system setup, access facilitation</data>
      <data key="d8">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="main.py" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">The main.py script demonstrates how to utilize PydanticAI for processing documents and interacting with AI models.</data>
      <data key="d7">usage example, application</data>
      <data key="d8">chunk-fbac2cd26b16d89a2ad3c129160b997b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="PyPI" target="Cohere">
      <data key="d5">18.0</data>
      <data key="d6">Cohere is available for installation through the PyPI repository, allowing Python developers to easily integrate its models and services into their projects.&lt;SEP&gt;Cohere is available for installation through the PyPI repository, allowing users to easily integrate it into their projects.</data>
      <data key="d7">software integration, package management</data>
      <data key="d8">chunk-803ad293de9341cf22215ab0b0f22dbe</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="CohereModel">
      <data key="d5">18.0</data>
      <data key="d6">Cohere offers various AI capabilities represented by CohereModel, accessible through their API.&lt;SEP&gt;Cohere provides access to various AI models, referred to as CohereModels, through its API.</data>
      <data key="d7">AI capabilities, model offerings&lt;SEP&gt;model offerings, language processing</data>
      <data key="d8">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="pydantic-ai">
      <data key="d5">18.0</data>
      <data key="d6">Pydantic-AI allows developers to easily employ Cohere's models within applications, fostering language processing solutions.&lt;SEP&gt;pydantic-ai integrates Cohere’s linguistic capabilities into applications built using its framework.</data>
      <data key="d7">integration, language technology&lt;SEP&gt;integration, technology partnership</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d&lt;SEP&gt;chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="Cohere API">
      <data key="d5">9.0</data>
      <data key="d6">Cohere offers API services that utilize its AI models for developers and businesses.</data>
      <data key="d7">service provision, API integration</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="Pydantic-ai">
      <data key="d5">7.0</data>
      <data key="d6">Pydantic-ai is used alongside Cohere to create applications that utilize Cohere’s NLP capabilities.</data>
      <data key="d7">partnership, application development</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="Bedrock">
      <data key="d5">9.0</data>
      <data key="d6">Bedrock provides access to Cohere models within its platform for enhanced machine learning capabilities.</data>
      <data key="d7">model integration, AWS service</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="Cohere API Key">
      <data key="d5">10.0</data>
      <data key="d6">The Cohere API Key is essential for accessing services provided by Cohere, enabling authentication for users.</data>
      <data key="d7">authentication, access</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="AWS Bedrock">
      <data key="d5">9.0</data>
      <data key="d6">AWS Bedrock provides a platform where users can access Cohere’s models through its infrastructure.</data>
      <data key="d7">service accessibility, model usage</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="API Integration">
      <data key="d5">9.0</data>
      <data key="d6">Cohere facilitates API Integration, allowing developers to utilize its models within their applications more effectively.</data>
      <data key="d7">developer access, technology application</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="Anthropic">
      <data key="d5">12.0</data>
      <data key="d6">Cohere and Anthropic are both striving to advance AI technology, possibly sharing insights and methodologies.</data>
      <data key="d7">knowledge sharing, technological advancement</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="Cohere Model">
      <data key="d5">9.0</data>
      <data key="d6">Cohere is the organization that develops and provides Cohere Models for AI applications.</data>
      <data key="d7">organization-product relationship</data>
      <data key="d8">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere" target="CohereModelName">
      <data key="d5">7.0</data>
      <data key="d6">Cohere develops various models, which are classified under CohereModelName for easier identification.</data>
      <data key="d7">organization-product classification</data>
      <data key="d8">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic AI" target="httpx.AsyncClient">
      <data key="d5">6.0</data>
      <data key="d6">Pydantic AI can be customized with httpx.AsyncClient to enhance HTTP request capabilities.</data>
      <data key="d7">customization, asynchronous operation</data>
      <data key="d8">chunk-a4e01bd25dcff46059903d23d9198862</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic AI" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The Agent is a product or service developed by Pydantic AI, indicating a direct organizational relationship.</data>
      <data key="d7">organizational relationship, product development</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic AI" target="MistralStreamedResponse">
      <data key="d5">8.0</data>
      <data key="d6">Pydantic AI has developed the MistralStreamedResponse class to manage streaming responses for its AI model requests.</data>
      <data key="d7">development, class implementation</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Pydantic AI" target="request">
      <data key="d5">7.0</data>
      <data key="d6">The request function is part of Pydantic AI's offerings, enabling clients to communicate with AI models in a structured manner.</data>
      <data key="d7">functionality, communication</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="HTTPX" target="PydanticAI">
      <data key="d5">16.0</data>
      <data key="d6">HTTPX integration allows PydanticAI applications to track HTTP requests and responses, enhancing performance insights.</data>
      <data key="d7">request monitoring, instrumentation</data>
      <data key="d8">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InstrumentationSettings" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">InstrumentationSettings provide parameters for customizing the instrumentation of agents in PydanticAI.</data>
      <data key="d7">configuration, customization</data>
      <data key="d8">chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InstrumentationSettings" target="Agent">
      <data key="d5">29.0</data>
      <data key="d6">Agent has a method to set instrumentation options that affect its behavior, indicating a dependency on instrumentation settings for operation.&lt;SEP&gt;InstrumentationSettings are used to configure the monitoring and tracing options for the Agent's activities.&lt;SEP&gt;InstrumentationSettings can be configured with the Agent to facilitate monitoring and performance tracking.&lt;SEP&gt;InstrumentationSettings provide the Agent with capabilities to monitor and analyze its performance metrics.</data>
      <data key="d7">configuration, dependency&lt;SEP&gt;configuration, monitoring&lt;SEP&gt;monitoring, performance&lt;SEP&gt;performance monitoring, analysis</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-5b7a596ee9422b565de815722b0e31dc&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InstrumentationSettings" target="GroqStreamedResponse">
      <data key="d5">14.0</data>
      <data key="d6">InstrumentationSettings could be utilized to monitor GroqStreamedResponse, linking instrumentation capabilities with streaming responses.</data>
      <data key="d7">monitoring, instrumentation</data>
      <data key="d8">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InstrumentationSettings" target="datetime">
      <data key="d5">6.0</data>
      <data key="d6">The datetime entity may be used within InstrumentationSettings for timestamping events during monitoring."|"time management, debugging</data>
      <data key="d7">6</data>
      <data key="d8">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InstrumentationSettings" target="InstrumentedModel">
      <data key="d5">8.0</data>
      <data key="d6">InstrumentedModel requires InstrumentationSettings to configure how requests are instrumented with OpenTelemetry.</data>
      <data key="d7">configuration, dependency</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunResult" target="Agent">
      <data key="d5">25.0</data>
      <data key="d6">RunResult is produced as a result of an Agent's execution, encapsulating the interactions and messages during a run.&lt;SEP&gt;The Agent executes commands and produces results encapsulated in the RunResult structure.&lt;SEP&gt;The Agent is responsible for executing commands that yield results encapsulated in RunResult, a structured output format.</data>
      <data key="d7">execution output, interaction tracking&lt;SEP&gt;execution, output management&lt;SEP&gt;execution, result management</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunResult" target="ModelRequest">
      <data key="d5">14.0</data>
      <data key="d6">RunResult retains information related to the specific ModelRequest made by the Agent, serving as a record of what was requested.&lt;SEP&gt;The RunResult stores data related to the ModelRequest made by the Agent during execution.</data>
      <data key="d7">request tracking, data structure</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunResult" target="ModelResponse">
      <data key="d5">14.0</data>
      <data key="d6">RunResult also allows access to the ModelResponse generated, providing visibility into the agent's outputs for each request.&lt;SEP&gt;The RunResult also provides access to the ModelResponse generated as output by the Agent.</data>
      <data key="d7">response receipt, data structure&lt;SEP&gt;response tracking, data structure</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunResult" target="all_messages()">
      <data key="d5">8.0</data>
      <data key="d6">RunResult provides access through all_messages() to view every message transacted during both current and prior agent runs.</data>
      <data key="d7">message history, access methods</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunResult" target="new_messages()">
      <data key="d5">8.0</data>
      <data key="d6">new_messages() in RunResult allows for the retrieval of only the latest messages generated during the most recent command execution.</data>
      <data key="d7">recent messages, access methods</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="Agent">
      <data key="d5">17.0</data>
      <data key="d6">The Agent can operate in streamed mode, producing continuous results through StreamedRunResult, enhancing real-time user interaction.&lt;SEP&gt;The Agent can provide continuous outputs through the StreamedRunResult, managing both interim and final results.</data>
      <data key="d7">continuous output, execution&lt;SEP&gt;real-time interaction, continuous output</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="stream()">
      <data key="d5">9.0</data>
      <data key="d6">stream() within StreamedRunResult facilitates a method for tracking and receiving messages continuously as they are produced by the Agent.</data>
      <data key="d7">continuous output, live updates</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="stream_text()">
      <data key="d5">10.0</data>
      <data key="d6">stream_text() function streams the textual output progressively from the Agent creating a dynamic user interaction experience.</data>
      <data key="d7">real-time output, user interaction</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="get_data()">
      <data key="d5">8.0</data>
      <data key="d6">get_data() concludes the streamed interactions by retrieving all compiled data following the completion of the agent's tasks.</data>
      <data key="d7">data retrieval, completion</data>
      <data key="d8">chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="AgentRunError">
      <data key="d5">20.0</data>
      <data key="d6">AgentRunError indicates a failure in generating a StreamedRunResult, marking issues during the agent's run.</data>
      <data key="d7">error handling, processing failure</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="messages">
      <data key="d5">18.0</data>
      <data key="d6">StreamedRunResult includes messages that are generated during the processing of requests and responses.</data>
      <data key="d7">data exchange, response structure</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="final_result_details">
      <data key="d5">9.0</data>
      <data key="d6">The final_result_details describe the outcomes included within the StreamedRunResult, bridging execution with results.</data>
      <data key="d7">result documentation, outcome reporting</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="parts">
      <data key="d5">8.0</data>
      <data key="d6">parts are aggregated into the StreamedRunResult, representing the elements processed by the agent.</data>
      <data key="d7">data aggregation, response structure</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="RunResultDataT">
      <data key="d5">7.0</data>
      <data key="d6">StreamedRunResult returns results based on the typing defined by RunResultDataT to structure the responses from the Agent.</data>
      <data key="d7">result structuring, response handling</data>
      <data key="d8">chunk-ed10d031435c9386fd353a8330563748</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="AsyncIterator">
      <data key="d5">9.0</data>
      <data key="d6">StreamedRunResult utilizes AsyncIterator to facilitate the asynchronous retrieval of processing results from the Agent.</data>
      <data key="d7">asynchronous iteration, result delivery</data>
      <data key="d8">chunk-ed10d031435c9386fd353a8330563748</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="override">
      <data key="d5">6.0</data>
      <data key="d6">StreamedRunResult may be influenced by the parameters set in the override method, as they dictate the context of the agent's execution.</data>
      <data key="d7">event impact, context change</data>
      <data key="d8">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="pydantic_ai_slim">
      <data key="d5">7.0</data>
      <data key="d6">StreamedRunResult is defined within the pydantic_ai_slim module, indicating a relationship to the module's structure and purpose.</data>
      <data key="d7">module relation, data management</data>
      <data key="d8">chunk-08a4d218da7ec53e693bd2773bdb87b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="ResultDataT">
      <data key="d5">17.0</data>
      <data key="d6">StreamedRunResult is designed to return data of type ResultDataT, thus defining a direct relationship based on data type.&lt;SEP&gt;StreamedRunResult utilizes ResultDataT as a generically typed variable for its data output.</data>
      <data key="d7">data type relationship, structured return&lt;SEP&gt;generic data type, structured output</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea&lt;SEP&gt;chunk-08a4d218da7ec53e693bd2773bdb87b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="Generic">
      <data key="d5">9.0</data>
      <data key="d6">StreamedRunResult is a generic type, meaning it can accommodate various result data types through a type variable.</data>
      <data key="d7">generic type, type flexibility</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="RunContext">
      <data key="d5">8.0</data>
      <data key="d6">StreamedRunResult instances operate within a context provided by RunContext, indicating how the stream is managed.</data>
      <data key="d7">context management, operational framework</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="ResultSchema">
      <data key="d5">9.0</data>
      <data key="d6">StreamedRunResult incorporates a ResultSchema to validate the structure of its result data.</data>
      <data key="d7">data validation, structure enforcement</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="_messages.ModelMessage">
      <data key="d5">8.0</data>
      <data key="d6">StreamedRunResult processes messages through the _messages.ModelMessage class to handle communication.</data>
      <data key="d7">message processing, communication</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="Usage">
      <data key="d5">8.0</data>
      <data key="d6">StreamedRunResult relies on Usage to understand its resources' metrics and constraints.</data>
      <data key="d7">resource management, consumption</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="stream">
      <data key="d5">9.0</data>
      <data key="d6">StreamedRunResult has a method called stream to handle real-time data communication asynchronously.</data>
      <data key="d7">data streaming, real-time communication</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedRunResult" target="stream_structured">
      <data key="d5">9.0</data>
      <data key="d6">The streaming of structured responses is handled through the method stream_structured in StreamedRunResult.</data>
      <data key="d7">structured data, asynchronous handling</data>
      <data key="d8">chunk-34aaffaa470a7a741f62a704e48832ea</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="SystemPromptPart">
      <data key="d5">35.0</data>
      <data key="d6">SystemPromptPart is also included in a ModelRequest, providing the system's context for processing user prompts.&lt;SEP&gt;SystemPromptParts are embedded in ModelRequests to guide the generation of responses by the model.&lt;SEP&gt;The ModelRequest includes SystemPromptPart, which conveys the necessary directives to the Agent for proper functioning.&lt;SEP&gt;The ModelRequest includes instructions encapsulated in the SystemPromptPart for the agent's processing.</data>
      <data key="d7">instructions, command guidance&lt;SEP&gt;instructions, request guidance&lt;SEP&gt;instructions, structure&lt;SEP&gt;system context, request components</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="UserPromptPart">
      <data key="d5">58.0</data>
      <data key="d6">A ModelRequest can encompass UserPromptParts that capture user input for processing.&lt;SEP&gt;ModelRequests include UserPromptParts that represent the content provided by users for processing by the model.&lt;SEP&gt;The UserPromptPart is integrated into the ModelRequest to capture user inputs for the agent.&lt;SEP&gt;UserPromptPart instances are typically encapsulated within ModelRequest structures to facilitate interaction between users and the model.&lt;SEP&gt;UserPromptPart is integral to ModelRequest, containing the user's specific input to direct the Agent's response appropriately.&lt;SEP&gt;UserPromptPart is part of a ModelRequest, facilitating user contributions to the request sent to the AI model.&lt;SEP&gt;UserPromptParts are encapsulated as part of ModelRequests, initiating user interactions with the AI model.</data>
      <data key="d7">message composition&lt;SEP&gt;message encapsulation&lt;SEP&gt;user input, data structure&lt;SEP&gt;user input, guidance&lt;SEP&gt;user input, request structure&lt;SEP&gt;user interaction&lt;SEP&gt;user interaction, request structure</data>
      <data key="d8">chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="run_weather_forecast">
      <data key="d5">9.0</data>
      <data key="d6">ModelRequest is the input event that triggers the run_weather_forecast process, linking user queries to weather data retrieval.</data>
      <data key="d7">input-output relationship, user interaction</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="ModelResponse">
      <data key="d5">78.0</data>
      <data key="d6">A ModelRequest is sent to the model, and a corresponding ModelResponse is generated from it.&lt;SEP&gt;A ModelRequest triggers the generation of a ModelResponse, forming a cyclical process of inquiry and reply within the AI system.&lt;SEP&gt;ModelRequest and ModelResponse are interrelated, with the latter serving as a response to the former in AI operations.&lt;SEP&gt;ModelRequest serves as the input for generating a corresponding ModelResponse based on the user's query.&lt;SEP&gt;ModelRequests lead to the creation of ModelResponses, showing the interaction of input/output processes in the API.&lt;SEP&gt;ModelResponse is directly linked to ModelRequest as a response to the requests made during AI operations.&lt;SEP&gt;ModelResponse is generated as a result of processing a ModelRequest, completing the request-response cycle.&lt;SEP&gt;ModelResponse is generated in response to a ModelRequest, reflecting the interaction between the request and the model's processing capabilities.</data>
      <data key="d7">event interaction&lt;SEP&gt;event processing, input-output relationship&lt;SEP&gt;input-output relationship&lt;SEP&gt;model interaction, request-response&lt;SEP&gt;request-response interaction, AI processing&lt;SEP&gt;request-response relationship, AI interaction&lt;SEP&gt;response cycle, event linkage</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05&lt;SEP&gt;chunk-a381b47482fff82b5e9f8a96e51cf27c&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="Timezone">
      <data key="d5">7.0</data>
      <data key="d6">Each ModelRequest includes a timestamp that is influenced by the Timezone setting of the application.</data>
      <data key="d7">temporal accuracy, request details</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="TestModel">
      <data key="d5">8.0</data>
      <data key="d6">TestModel is utilized to simulate ModelRequests during tests of the system's functioning.</data>
      <data key="d7">testing, simulation</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="PydanticAI">
      <data key="d5">16.0</data>
      <data key="d6">PydanticAI creates and utilizes ModelRequest as part of its data processing workflow for user interactions.</data>
      <data key="d7">data processing, workflow</data>
      <data key="d8">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="TextPart">
      <data key="d5">14.0</data>
      <data key="d6">ModelRequest can include multiple TextPart elements as responses from a model that it interacts with.</data>
      <data key="d7">model interaction, response handling</data>
      <data key="d8">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="ToolCallPart">
      <data key="d5">16.0</data>
      <data key="d6">ModelRequest can contain ToolCallPart as part of the instructions sent to a model for processing tasks.</data>
      <data key="d7">instruction processing, tool call</data>
      <data key="d8">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="parts">
      <data key="d5">8.0</data>
      <data key="d6">The parts attribute of ModelRequest encapsulates various ModelRequestPart instances that detail the message components.</data>
      <data key="d7">message structure, components</data>
      <data key="d8">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="ModelRequestParameters">
      <data key="d5">18.0</data>
      <data key="d6">A ModelRequest uses ModelRequestParameters as part of its processing and generation workflow.&lt;SEP&gt;ModelRequestParameters specifies the tools and other parameters required in a ModelRequest, ensuring the request is properly formed.</data>
      <data key="d7">event interaction&lt;SEP&gt;request structure, tool specification</data>
      <data key="d8">chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="ModelMessage">
      <data key="d5">17.0</data>
      <data key="d6">ModelMessages include ModelRequests as inputs that require handling by the AI, highlighting their integral role in the communication cycle.&lt;SEP&gt;ModelRequest generates a ModelMessage that is sent to the Groq model for processing and response.</data>
      <data key="d7">communication cycle&lt;SEP&gt;request processing, communication</data>
      <data key="d8">chunk-10cb9af07d6e8d7fd92ba7df52d5c332&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="Mistral">
      <data key="d5">10.0</data>
      <data key="d6">Mistral organizes and facilitates the creation of ModelRequests that allow user queries to be translated into actionable prompts for the AI model.</data>
      <data key="d7">organization function, request processing</data>
      <data key="d8">chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="RetryPromptPart">
      <data key="d5">7.0</data>
      <data key="d6">RetryPromptParts may lead to new ModelRequests being formulated if the initial processing encounters an issue, emphasizing resilience in communication.</data>
      <data key="d7">error handling, recovery</data>
      <data key="d8">chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="FunctionToolParam">
      <data key="d5">7.0</data>
      <data key="d6">FunctionToolParams are involved in the creation and handling of ModelRequests within the framework.</data>
      <data key="d7">parameter specification, request handling</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequest" target="ModelRequest Parameters">
      <data key="d5">8.0</data>
      <data key="d6">ModelRequests are created using ModelRequest Parameters to specify details of the requests to the AI model.</data>
      <data key="d7">request creation, parameter usage</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPromptPart" target="Agent">
      <data key="d5">14.0</data>
      <data key="d6">SystemPromptPart contributes context to Agent's responses by guiding its behavior during interactions.&lt;SEP&gt;SystemPromptPart provides context to the Agent for producing responses, guiding it in answering queries.</data>
      <data key="d7">context provision, model guidance</data>
      <data key="d8">chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPromptPart" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">SystemPromptPart is a component of the pydantic_ai_slim library, demonstrating its functionality in handling system prompts.</data>
      <data key="d7">software architecture, component relationship</data>
      <data key="d8">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPromptPart" target="content">
      <data key="d5">9.0</data>
      <data key="d6">The content attribute is a fundamental part of the SystemPromptPart class, as it holds the main text associated with the system prompt.</data>
      <data key="d7">class attribute, data encapsulation</data>
      <data key="d8">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPromptPart" target="timestamp">
      <data key="d5">8.0</data>
      <data key="d6">The timestamp attribute records when a SystemPromptPart was created, crucial for maintaining chronological order and context.</data>
      <data key="d7">temporal data, class attribute</data>
      <data key="d8">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPromptPart" target="dynamic_ref">
      <data key="d5">7.0</data>
      <data key="d6">Dynamic_ref may point to specific functions used in generating SystemPromptPart instances, enhancing the interactivity and functionality of prompts.</data>
      <data key="d7">dynamic functionality, system integration</data>
      <data key="d8">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPromptPart" target="part_kind">
      <data key="d5">8.0</data>
      <data key="d6">Part_kind categorizes SystemPromptPart instances, providing clarity on their role within the overall system architecture.</data>
      <data key="d7">classification, system architecture</data>
      <data key="d8">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPromptPart" target="ModelMessage">
      <data key="d5">9.0</data>
      <data key="d6">SystemPromptPart provides context in the ModelMessage that guides how the model interprets user inputs.</data>
      <data key="d7">instructional content, model guidance</data>
      <data key="d8">chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPromptPart" target="ModelResponse">
      <data key="d5">18.0</data>
      <data key="d6">SystemPromptPart provides essential context or directives that influence the nature of the ModelResponse generated by the model.&lt;SEP&gt;SystemPromptParts provide guidance that influences how ModelResponses are structured and what content they convey.</data>
      <data key="d7">contextual guidance&lt;SEP&gt;contextual instruction</data>
      <data key="d8">chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="ModelResponse">
      <data key="d5">9.0</data>
      <data key="d6">UserPromptPart initiates the interaction which leads to the ModelResponse containing the generated answer to the user's prompt.</data>
      <data key="d7">interaction flow, user query</data>
      <data key="d8">chunk-0517903d60beb732d23023e1a1755b2e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="ModelRequestPart">
      <data key="d5">6.0</data>
      <data key="d6">UserPromptPart is one of the components that make up the ModelRequestPart, indicating user inputs in the message structure.</data>
      <data key="d7">input handling, message composition</data>
      <data key="d8">chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="document-url">
      <data key="d5">7.0</data>
      <data key="d6">UserPromptPart incorporates a type identifier that relates to the handling of documents in the context of user prompts.</data>
      <data key="d7">interaction design, digital documents</data>
      <data key="d8">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="document">
      <data key="d5">7.0</data>
      <data key="d6">UserPromptPart is a structured data format that defines user prompts in the context of documents and their characteristics.</data>
      <data key="d7">user interaction, document handling</data>
      <data key="d8">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="bedrock_messages">
      <data key="d5">8.0</data>
      <data key="d6">UserPromptPart is utilized to generate a structured message that will be appended to bedrock_messages collection.</data>
      <data key="d7">input-output relationship, message structure</data>
      <data key="d8">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="Gemini">
      <data key="d5">9.0</data>
      <data key="d6">UserPromptPart is processed within the Gemini organization to facilitate user interaction and input handling.</data>
      <data key="d7">user interaction, processing</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="Response">
      <data key="d5">10.0</data>
      <data key="d6">Response is generated as an output after processing a UserPromptPart in the Gemini framework.</data>
      <data key="d7">output generation, processing flow</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="AudioUrl">
      <data key="d5">7.0</data>
      <data key="d6">AudioUrl references audio content potentially required in a UserPromptPart for interactive features.</data>
      <data key="d7">media inclusion, interaction</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="ImageUrl">
      <data key="d5">7.0</data>
      <data key="d6">ImageUrl can be a part of a UserPromptPart to enhance the user's input with visual content.</data>
      <data key="d7">media inclusion, enhancement</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="ModelMessage">
      <data key="d5">18.0</data>
      <data key="d6">UserPromptPart is a specific type of content that is encapsulated within the broader ModelMessage exchanged between users and the model.&lt;SEP&gt;UserPromptPart is included in the ModelMessage to convey content from the user to the Groq model.</data>
      <data key="d7">user interaction, message structure</data>
      <data key="d8">chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPromptPart" target="responses.EasyInputMessageParam">
      <data key="d5">7.0</data>
      <data key="d6">UserPromptPart is converted into EasyInputMessageParam to structure user prompts for processing.</data>
      <data key="d7">input structuring, user management</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextPart" target="ModelResponse">
      <data key="d5">53.0</data>
      <data key="d6">ModelResponse can consist of one or more TextParts, indicating a structural relationship where responses are broken down into discrete text components.&lt;SEP&gt;ModelResponse can contain TextPart as a type of content, demonstrating how the AI communicates back to the user.&lt;SEP&gt;ModelResponse can include TextPart which contains the actual textual output of the model's processing.&lt;SEP&gt;The ModelResponse comprises the TextPart, which includes the textually formatted output that the user receives from the Agent.&lt;SEP&gt;The ModelResponse consists of various parts, including TextPart, which specifically holds the textual response provided to the user.&lt;SEP&gt;The ModelResponse contains the TextPart, which contains the actual text response from the agent.</data>
      <data key="d7">content structure, response organization&lt;SEP&gt;output content, data structure&lt;SEP&gt;output generation, structured response&lt;SEP&gt;response content, data structure&lt;SEP&gt;response format, AI communication&lt;SEP&gt;response structure, data components</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-f29114dc6d88a06ac1343874c6b2fe1d&lt;SEP&gt;chunk-0517903d60beb732d23023e1a1755b2e&lt;SEP&gt;chunk-6336acb66b05c1fcfd268f8297c6bf9f&lt;SEP&gt;chunk-438b652bbcaf7fa2a816d183d1cd4b54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextPart" target="call_weather_forecast">
      <data key="d5">9.0</data>
      <data key="d6">The output of the call_weather_forecast function includes a TextPart that conveys the weather forecast results to the user.</data>
      <data key="d7">output generation, user communication</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextPart" target="ToolCallPart">
      <data key="d5">19.0</data>
      <data key="d6">TextPart and ToolCallPart are both components of a response returned by the model, facilitating the communication of different data types.&lt;SEP&gt;TextPart and ToolCallPart are both components of a response structure generated by the model's completion process.&lt;SEP&gt;ToolCallPart and TextPart are both structural components that define parts of AI messages in the pydantic_ai_slim framework.</data>
      <data key="d7">message structure, component relationship&lt;SEP&gt;response components&lt;SEP&gt;response structure</data>
      <data key="d8">chunk-3c9b6b4ee61bee314208883b07d282a5&lt;SEP&gt;chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextPart" target="ModelResponsePart">
      <data key="d5">8.0</data>
      <data key="d6">TextPart is a specific type of ModelResponsePart that handles text content in the model's output.</data>
      <data key="d7">content type, structure</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextPart" target="ConverseResponseTypeDef">
      <data key="d5">16.0</data>
      <data key="d6">ConverseResponseTypeDef structures responses that may include various components like TextPart for delivering text to users.</data>
      <data key="d7">response structure, message components</data>
      <data key="d8">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextPart" target="ModelMessage">
      <data key="d5">16.0</data>
      <data key="d6">ModelMessage can include multiple TextParts, which contribute to the overall message content.&lt;SEP&gt;TextParts are integral components of ModelMessages, containing the actual textual content that is sent or generated.</data>
      <data key="d7">content element&lt;SEP&gt;message composition</data>
      <data key="d8">chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Samuel Colvin" target="Toothpaste Scandal">
      <data key="d5">8.0</data>
      <data key="d6">Samuel Colvin is the creator of the joke about the toothpaste scandal, establishing a direct link between the person and the humorous event.</data>
      <data key="d7">joke creation, humor</data>
      <data key="d8">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Samuel Colvin" target="result2">
      <data key="d5">9.0</data>
      <data key="d6">Samuel Colvin's joke is included in result2, highlighting the connection between the creator and the generated output.</data>
      <data key="d7">joke creation, output generation</data>
      <data key="d8">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Samuel Colvin" target="This is an excellent joke invented by Samuel Colvin">
      <data key="d5">8.0</data>
      <data key="d6">Samuel Colvin is the creator of the joke being discussed, highlighting his role as an innovator in humor.</data>
      <data key="d7">creativity, humor</data>
      <data key="d8">chunk-0517903d60beb732d23023e1a1755b2e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result2" target="gpt-4o">
      <data key="d5">10.0</data>
      <data key="d6">Result2 is the output produced by the gpt-4o model, indicating the relationship between the model and the generated responses.</data>
      <data key="d7">model output, interaction</data>
      <data key="d8">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result2" target="messages history">
      <data key="d5">8.0</data>
      <data key="d6">Result2 is built upon the messages history of user prompts and model responses, illustrating its role in the conversation.</data>
      <data key="d7">interaction history, model response</data>
      <data key="d8">chunk-6c1f859347bcf0df691e8fe2fde806fa</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Colgate" target="joke_generation_agent">
      <data key="d5">8.0</data>
      <data key="d6">The joke_generation_agent produces jokes, one of which includes the Colgate toothpaste scandal as a punchline.</data>
      <data key="d7">humor production, brand reference</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="gpt-4o" target="gpt-4">
      <data key="d5">9.0</data>
      <data key="d6">gpt-4o is an optimized version of gpt-4, suggesting ongoing development and enhancement of the original GPT-4 model.</data>
      <data key="d7">model optimization, generative AI</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="gemini-1.5-pro" target="ModelResponse">
      <data key="d5">10.0</data>
      <data key="d6">The ModelResponse is generated by the gemini-1.5-pro model, indicating its role in producing AI-generated answers.</data>
      <data key="d7">AI technology, model output</data>
      <data key="d8">chunk-0517903d60beb732d23023e1a1755b2e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIModel" target="OpenAIProvider">
      <data key="d5">26.0</data>
      <data key="d6">OpenAIModel utilizes OpenAIProvider to connect to its API and conduct operations effectively.&lt;SEP&gt;OpenAIModel utilizes OpenAIProvider to connect to its API and conduct operations.&lt;SEP&gt;The OpenAIProvider is specifically designed to interface with OpenAIModel, enabling access to those models through API calls.</data>
      <data key="d7">model access&lt;SEP&gt;model integration, API connection&lt;SEP&gt;model integration, API connectivity</data>
      <data key="d8">chunk-c9a99acd51a50f5d69363aefdceadda8&lt;SEP&gt;chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIModel" target="Agent Class">
      <data key="d5">9.0</data>
      <data key="d6">Agent Class can utilize the OpenAIModel to perform intelligent actions utilizing OpenAI's models.</data>
      <data key="d7">agent functionality, model integration</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIModel" target="Ollama Client">
      <data key="d5">8.0</data>
      <data key="d6">Ollama Client can run models that are compatible with OpenAI API, allowing local AI execution based on OpenAIModel.</data>
      <data key="d7">local execution, AI integration</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIModel" target="base_url">
      <data key="d5">9.0</data>
      <data key="d6">The base_url is essential when configuring the OpenAIModel to communicate with the OpenAI API for tasks.</data>
      <data key="d7">API connection, model configuration</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIModel" target="model_name">
      <data key="d5">9.0</data>
      <data key="d6">model_name specifies which specific AI model to use when instantiating an OpenAIModel within Pydantic AI.</data>
      <data key="d7">model specification, AI instantiation</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIModel" target="api_key">
      <data key="d5">10.0</data>
      <data key="d6">The api_key is required to authenticate and access the OpenAI API through an OpenAIModel.</data>
      <data key="d7">authentication, API access</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="AsyncAzureOpenAI">
      <data key="d5">14.0</data>
      <data key="d6">AsyncAzureOpenAI connects with OpenAIProvider to enable Azure-based API calls.&lt;SEP&gt;AsyncAzureOpenAI integrates with OpenAIProvider for cloud-based API calls, enhancing the functionality of the OpenAI services.</data>
      <data key="d7">cloud integration, API customizability</data>
      <data key="d8">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="OpenRouter">
      <data key="d5">18.0</data>
      <data key="d6">OpenRouter allows developers to access OpenAI models through the OpenAIProvider interface.&lt;SEP&gt;OpenRouter integrates the OpenAIProvider to offer a range of AI models for developer access.</data>
      <data key="d7">API access, integration&lt;SEP&gt;API integration</data>
      <data key="d8">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="FallbackModel">
      <data key="d5">14.0</data>
      <data key="d6">The FallbackModel strategy can be applied within the OpenAIProvider to handle potential request failures.&lt;SEP&gt;The OpenAIProvider can be part of a FallbackModel strategy to ensure successful API requests.</data>
      <data key="d7">error handling&lt;SEP&gt;error handling, model robustness</data>
      <data key="d8">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="Grok (xAI)">
      <data key="d5">16.0</data>
      <data key="d6">Grok (xAI) leverages OpenAIProvider to offer access to various AI models through its API.&lt;SEP&gt;Grok (xAI) utilizes the OpenAIProvider to allow access to OpenAI models specifically for developers.</data>
      <data key="d7">API integration, model access&lt;SEP&gt;model accessibility</data>
      <data key="d8">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="AsyncOpenAI">
      <data key="d5">9.0</data>
      <data key="d6">OpenAIProvider uses AsyncOpenAI to make asynchronous API calls to OpenAI services.</data>
      <data key="d7">API interaction, asynchronous communication</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="base_url">
      <data key="d5">8.0</data>
      <data key="d6">OpenAIProvider uses the base_url property to define the endpoint for API requests.</data>
      <data key="d7">configuration, service endpoint</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="service_account_file">
      <data key="d5">7.0</data>
      <data key="d6">OpenAIProvider initializes authentication using service_account_file for secure access to the API.</data>
      <data key="d7">authentication, security</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="project_id">
      <data key="d5">6.0</data>
      <data key="d6">OpenAIProvider may utilize project_id to associate API requests with a specific cloud project.</data>
      <data key="d7">resource identification, project management</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="http_client">
      <data key="d5">7.0</data>
      <data key="d6">OpenAIProvider may utilize an http_client instance for making HTTP requests asynchronously.</data>
      <data key="d7">communication, request handling</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="VertexAIAuth">
      <data key="d5">9.0</data>
      <data key="d6">OpenAIProvider uses VertexAIAuth to handle authentication for accessing Vertex AI services.</data>
      <data key="d7">authentication, API access</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="model_publisher">
      <data key="d5">8.0</data>
      <data key="d6">OpenAIProvider interacts with model_publisher to publish machine learning models for use in applications.</data>
      <data key="d7">model management, deployment</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="service_account_info">
      <data key="d5">9.0</data>
      <data key="d6">OpenAIProvider utilizes service_account_info for securing API access with proper credentials.</data>
      <data key="d7">credentials, security</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIProvider" target="_client">
      <data key="d5">8.0</data>
      <data key="d6">OpenAIProvider maintains a _client instance for establishing communication with the OpenAI API.</data>
      <data key="d7">client interaction, communication</data>
      <data key="d8">chunk-233c44dbbafc40133b53d2417bab6371</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIResponsesModel" target="PydanticAI">
      <data key="d5">18.0</data>
      <data key="d6">PydanticAI facilitates the use of OpenAIResponsesModel for effective interaction with the OpenAI Responses API.&lt;SEP&gt;PydanticAI facilitates the use of OpenAIResponsesModel to interact with OpenAI's Responses API.</data>
      <data key="d7">framework integration, API interaction&lt;SEP&gt;framework support, API interaction</data>
      <data key="d8">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIResponsesModel" target="Responses API">
      <data key="d5">18.0</data>
      <data key="d6">OpenAIResponsesModel is designed to interact with the Responses API, improving response capabilities and functionality.&lt;SEP&gt;OpenAIResponsesModel is designed to work with the Responses API, facilitating advanced interactions with models.</data>
      <data key="d7">model enhancement, API connection&lt;SEP&gt;model functionality, API interface</data>
      <data key="d8">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIResponsesModel" target="Web Search Tool">
      <data key="d5">20.0</data>
      <data key="d6">Web Search Tool can be utilized within OpenAIResponsesModel to access real-time information, enhancing response relevance.&lt;SEP&gt;Web Search Tool can be utilized within OpenAIResponsesModel to enhance responses with real-time web data.</data>
      <data key="d7">real-time data, information enhancement&lt;SEP&gt;real-time data, model enhancement</data>
      <data key="d8">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIResponsesModel" target="File Search Tool">
      <data key="d5">20.0</data>
      <data key="d6">File Search Tool extends the capabilities of OpenAIResponsesModel by allowing it to access user files for relevant data.&lt;SEP&gt;File Search Tool significantly enhances OpenAIResponsesModel by enabling it to retrieve information from user files.</data>
      <data key="d7">data retrieval, enhanced performance&lt;SEP&gt;data retrieval, model enhancement</data>
      <data key="d8">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIResponsesModel" target="Computer Use Tool">
      <data key="d5">18.0</data>
      <data key="d6">Computer Use Tool adds functionality to OpenAIResponsesModel by allowing it to perform tasks on user’s behalf.&lt;SEP&gt;Computer Use Tool provides OpenAIResponsesModel with the ability to perform tasks directly for users.</data>
      <data key="d7">task automation, model capability</data>
      <data key="d8">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIResponsesModel" target="Anthropic">
      <data key="d5">12.0</data>
      <data key="d6">Anthropic creates AI models that may utilize similar response mechanisms as those implemented in OpenAIResponsesModel.&lt;SEP&gt;Anthropic creates models that can also be integrated with similar response mechanisms as those of OpenAIResponsesModel.</data>
      <data key="d7">model comparison, AI industry&lt;SEP&gt;model comparison, AI sector</data>
      <data key="d8">chunk-4ae6a42656f5fcb8ac84fe38f9dc4cbf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncAzureOpenAI" target="AzureProvider">
      <data key="d5">8.0</data>
      <data key="d6">AzureProvider utilizes AsyncAzureOpenAI to interact with Azure OpenAI services, indicating a collaborative relationship.</data>
      <data key="d7">collaboration, service interaction</data>
      <data key="d8">chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncAzureOpenAI" target="Provider">
      <data key="d5">8.0</data>
      <data key="d6">Provider is the architecture under which AsyncAzureOpenAI operates, linking them in the service provision model.</data>
      <data key="d7">service architecture, operational link</data>
      <data key="d8">chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Anthropic" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI recognizes and integrates models developed by Anthropic to augment capabilities in natural language understanding.</data>
      <data key="d7">model integration, AI cooperation</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AnthropicModel" target="Agent">
      <data key="d5">16.0</data>
      <data key="d6">The Agent is responsible for managing and utilizing the AnthropicModel for various AI tasks.&lt;SEP&gt;The Agent is responsible for managing interactions with the AnthropicModel for tasks involving natural language processing and AI interactions.</data>
      <data key="d7">model management, AI functionality&lt;SEP&gt;model management, AI interaction</data>
      <data key="d8">chunk-a4e01bd25dcff46059903d23d9198862</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx.AsyncClient" target="Agent">
      <data key="d5">6.0</data>
      <data key="d6">The Agent can utilize httpx.AsyncClient to customize and enhance HTTP requests made during its operations.</data>
      <data key="d7">customization, HTTP requests</data>
      <data key="d8">chunk-a4e01bd25dcff46059903d23d9198862</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx.AsyncClient" target="joke_generation_agent">
      <data key="d5">9.0</data>
      <data key="d6">The joke_generation_agent uses httpx.AsyncClient to perform asynchronous HTTP requests when generating jokes.</data>
      <data key="d7">networking, async operations</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx.AsyncClient" target="async with">
      <data key="d5">9.0</data>
      <data key="d6">The async with statement is used to manage the lifetime of the httpx.AsyncClient, ensuring proper connection management.</data>
      <data key="d7">resource management, connection handling</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx.AsyncClient" target="GoogleVertexProvider">
      <data key="d5">8.0</data>
      <data key="d6">The GoogleVertexProvider utilizes httpx.AsyncClient for making asynchronous API requests, linking it to efficient network operations.</data>
      <data key="d7">networking, async operations</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx.AsyncClient" target="pydantic_ai_slim">
      <data key="d5">9.0</data>
      <data key="d6">httpx.AsyncClient is utilized within the pydantic_ai_slim library to handle asynchronous API requests for AI service integration.</data>
      <data key="d7">API integration, asynchronous operation</data>
      <data key="d8">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="httpx.AsyncClient" target="GeminiModel">
      <data key="d5">16.0</data>
      <data key="d6">The GeminiModel relies on httpx.AsyncClient for efficient asynchronous HTTP requests to the Gemini API.&lt;SEP&gt;The GeminiModel utilizes the httpx.AsyncClient to facilitate asynchronous API requests for model interactions.</data>
      <data key="d7">API interaction, client usage&lt;SEP&gt;API interaction, library usage</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="Agent">
      <data key="d5">14.0</data>
      <data key="d6">The Agent can also manage the GeminiModel, allowing access to Google's generative capabilities for various applications.&lt;SEP&gt;The GeminiModel can also be managed by the Agent if it is initialized within the context of Pydantic AI.</data>
      <data key="d7">model management, AI capabilities&lt;SEP&gt;model management, AI interaction</data>
      <data key="d8">chunk-a4e01bd25dcff46059903d23d9198862</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="Generative Language API">
      <data key="d5">10.0</data>
      <data key="d6">GeminiModel utilizes the Generative Language API to provide its functionalities, allowing for generative tasks in AI applications.</data>
      <data key="d7">API utilization, model access</data>
      <data key="d8">chunk-a4e01bd25dcff46059903d23d9198862</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="VertexAI API">
      <data key="d5">10.0</data>
      <data key="d6">GeminiModel utilizes the VertexAI API for running machine learning tasks.</data>
      <data key="d7">model utilization, AI service</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="VertexAI">
      <data key="d5">10.0</data>
      <data key="d6">GeminiModel functions within the VertexAI framework for implementing various AI applications.</data>
      <data key="d7">model usage, AI technology</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="GoogleVertexProvider">
      <data key="d5">9.0</data>
      <data key="d6">GoogleVertexProvider allows GeminiModel to connect with VertexAI for processing AI tasks.</data>
      <data key="d7">provider usage, model access</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="GeminiModelSettings">
      <data key="d5">10.0</data>
      <data key="d6">GeminiModelSettings provides configuration settings that are specific to the operation of the GeminiModel.</data>
      <data key="d7">configuration, model settings</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="AsyncIterator">
      <data key="d5">8.0</data>
      <data key="d6">GeminiModel can use AsyncIterator to manage responses retrieved from the Gemini API in a non-blocking manner.</data>
      <data key="d7">API interaction, response management</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="_model_name">
      <data key="d5">8.0</data>
      <data key="d6">The _model_name property identifies which GeminiModel is actively in use for processing responses.</data>
      <data key="d7">property identification, model reference</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="ModelMessage">
      <data key="d5">18.0</data>
      <data key="d6">GeminiModel utilizes ModelMessage instances to structure the communication it sends to the API for processing.&lt;SEP&gt;The GeminiModel uses ModelMessage instances to encapsulate the communication sent to the API during requests.</data>
      <data key="d7">message formulation, API requests&lt;SEP&gt;message structure, API communication</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="ModelResponse">
      <data key="d5">18.0</data>
      <data key="d6">GeminiModel processes input messages and retrieves a ModelResponse from the API, indicating the outcome of those messages.&lt;SEP&gt;The GeminiModel processes requests to receive a ModelResponse from the API, indicating the outcome of the request.</data>
      <data key="d7">request processing, response handling&lt;SEP&gt;request-response cycle, output handling</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="Provider">
      <data key="d5">20.0</data>
      <data key="d6">The GeminiModel requires a Provider for authentication and to establish proper API access for interacting with services.&lt;SEP&gt;The GeminiModel requires a Provider for managing authentication and establishing a connection to the Gemini API.</data>
      <data key="d7">authentication, access configuration&lt;SEP&gt;authentication, service provider</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiModel" target="ModelRequestParameters">
      <data key="d5">8.0</data>
      <data key="d6">ModelRequestParameters define how the GeminiModel should make requests, influencing its output and behavior during API calls.</data>
      <data key="d7">parameter definition, request customization</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="VertexAI API" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">The VertexAI API can be used within the PydanticAI framework, providing capabilities for running AI models in GCP.</data>
      <data key="d7">integration, API usage</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GCP" target="PydanticAI">
      <data key="d5">19.0</data>
      <data key="d6">PydanticAI applications are designed to run within GCP, benefiting from its cloud infrastructure.&lt;SEP&gt;PydanticAI can be run inside GCP, leveraging its infrastructure for AI applications.</data>
      <data key="d7">cloud deployment, framework support</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GCP" target="service account">
      <data key="d5">18.0</data>
      <data key="d6">A service account is necessary for authentication to access resources in GCP.&lt;SEP&gt;Service accounts are essential for authenticating applications that run on GCP.</data>
      <data key="d7">authentication, access control</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GCP" target="Groq">
      <data key="d5">7.0</data>
      <data key="d6">Groq can operate on GCP, offering model access through their API.</data>
      <data key="d7">cloud services, model access</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Groq" target="API key">
      <data key="d5">8.0</data>
      <data key="d6">Users generate an API key from Groq to authenticate and access their AI services.</data>
      <data key="d7">access control, API usage</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Groq" target="llama-3.3-70b-versatile">
      <data key="d5">9.0</data>
      <data key="d6">Groq provides access to the llama-3.3-70b-versatile model through its API for various AI applications.</data>
      <data key="d7">AI model, technical integration</data>
      <data key="d8">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Groq" target="GroqModelName">
      <data key="d5">8.0</data>
      <data key="d6">Groq provides various AI models which are categorized under GroqModelName, allowing developers to choose suitable models for their needs.</data>
      <data key="d7">model availability, AI technology</data>
      <data key="d8">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Groq" target="API Key">
      <data key="d5">9.0</data>
      <data key="d6">An API Key is necessary to access Groq's services, linking security with user access to Groq's AI models.</data>
      <data key="d7">authentication, access control</data>
      <data key="d8">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Groq" target="pydantic-ai">
      <data key="d5">8.0</data>
      <data key="d6">Pydantic-AI integrates Groq's models into applications, simplifying their use in various software solutions.</data>
      <data key="d7">integration, software development</data>
      <data key="d8">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Groq" target="ModelRequestParameters">
      <data key="d5">8.0</data>
      <data key="d6">ModelRequestParameters are utilized by Groq to handle AI model requests, linking configuration to model functionality.</data>
      <data key="d7">model operations, configuration</data>
      <data key="d8">chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="VertexAI" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">PydanticAI is built to utilize VertexAI's API capabilities for machine learning applications.</data>
      <data key="d7">integration, API usage</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="VertexAI" target="region">
      <data key="d5">7.0</data>
      <data key="d6">Region selection in VertexAI configurations can improve performance and compliance contextually.</data>
      <data key="d7">geographical context, performance optimization</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="application default credentials" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI can leverage application default credentials for simplifying authentication when running on GCP.</data>
      <data key="d7">authentication, cloud integration</data>
      <data key="d8">chunk-9ff315bedb1e055a20af27b9db87b652</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GoogleVertexProvider" target="project_id">
      <data key="d5">8.0</data>
      <data key="d6">GoogleVertexProvider requires project_id for its operations, linking it to specific API actions within a Google Cloud project.</data>
      <data key="d7">API integration, provider requirement</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GoogleVertexProvider" target="service_account_file">
      <data key="d5">9.0</data>
      <data key="d6">GoogleVertexProvider can utilize a service_account_file for authentication, establishing a direct connection between the provider and the necessary credentials.</data>
      <data key="d7">authentication, provider setup</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GoogleVertexProvider" target="region">
      <data key="d5">7.0</data>
      <data key="d6">The GoogleVertexProvider operates in a specified region, which affects API requests and performance.</data>
      <data key="d7">geographical context, API optimization</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GoogleVertexProvider" target="model_publisher">
      <data key="d5">8.0</data>
      <data key="d6">The model_publisher parameter indicates which publisher to use when making requests through the GoogleVertexProvider.</data>
      <data key="d7">model selection, provider configuration</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GoogleVertexProvider" target="http_client">
      <data key="d5">12.0</data>
      <data key="d6">The GoogleVertexProvider can accept an existing http_client, enabling customized API interactions and request handling.&lt;SEP&gt;The GoogleVertexProvider can work with an existing http_client, which allows for customized API interaction.</data>
      <data key="d7">customization, API integration&lt;SEP&gt;customization, API interaction</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GoogleVertexProvider" target="pydantic_ai_slim/pydantic_ai/providers/__init__.py">
      <data key="d5">9.0</data>
      <data key="d6">GoogleVertexProvider is implemented within the pydantic_ai_slim/pydantic_ai/providers/google_vertex.py file, making it a part of the overall provider framework.</data>
      <data key="d7">implementation, code structure</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GoogleVertexProvider" target="Provider">
      <data key="d5">10.0</data>
      <data key="d6">GoogleVertexProvider is a subclass of Provider, extending its functionality to interface specifically with Google's AI services.</data>
      <data key="d7">inheritance, API specialization</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GoogleVertexProvider" target="service_account_info">
      <data key="d5">7.0</data>
      <data key="d6">service_account_info can be used to authenticate the GoogleVertexProvider without requiring a service_account_file.</data>
      <data key="d7">authentication flexibility, provider security</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="region" target="google">
      <data key="d5">9.0</data>
      <data key="d6">The region specifies the geographical area where Google hosts services, making it a critical aspect of utilizing Google Cloud infrastructure.</data>
      <data key="d7">geographic distribution, cloud services</data>
      <data key="d8">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="region" target="project_id">
      <data key="d5">7.0</data>
      <data key="d6">The region affects resource deployment, and a project_id determines where the resources are managed within Google Cloud.</data>
      <data key="d7">geographic context, cloud infrastructure</data>
      <data key="d8">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="mistral-large-latest">
      <data key="d5">8.0</data>
      <data key="d6">Mistral offers the mistral-large-latest model as part of its AI solutions via API access.</data>
      <data key="d7">AI model, technological service</data>
      <data key="d8">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="MistralModelNames">
      <data key="d5">8.0</data>
      <data key="d6">Mistral provides a selection of AI models summarized under MistralModelNames for developer access.</data>
      <data key="d7">model offering, AI services</data>
      <data key="d8">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="pydantic-ai">
      <data key="d5">8.0</data>
      <data key="d6">Pydantic-AI facilitates the integration of Mistral's models into applications, enhancing their capabilities.</data>
      <data key="d7">integration, model utilization</data>
      <data key="d8">chunk-96f0c03aabc444033deba6ca7c09ac6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="MISTRAL_API_KEY">
      <data key="d5">18.0</data>
      <data key="d6">Mistral requires the MISTRAL_API_KEY for authentication in order to function properly.</data>
      <data key="d7">authentication, dependency</data>
      <data key="d8">chunk-08a4d218da7ec53e693bd2773bdb87b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="UserError">
      <data key="d5">16.0</data>
      <data key="d6">UserError is related to Mistral in the context of missing API authentication, highlighting an error that arises during the provider's initialization.</data>
      <data key="d7">error handling, initialization issue</data>
      <data key="d8">chunk-08a4d218da7ec53e693bd2773bdb87b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="AsyncHTTPClient">
      <data key="d5">20.0</data>
      <data key="d6">Mistral uses AsyncHTTPClient for making asynchronous HTTP requests, allowing efficient communication with its services.</data>
      <data key="d7">communication, HTTP requests</data>
      <data key="d8">chunk-08a4d218da7ec53e693bd2773bdb87b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="MistralProvider">
      <data key="d5">9.0</data>
      <data key="d6">MistralProvider facilitates the usage of the Mistral services, acting as an interface for API interactions.</data>
      <data key="d7">service interface, API connectivity</data>
      <data key="d8">chunk-08a4d218da7ec53e693bd2773bdb87b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="Bedrock">
      <data key="d5">14.0</data>
      <data key="d6">Mistral's AI applications could be built using foundational resources from Bedrock, fostering technological integration.</data>
      <data key="d7">integration, resource sharing</data>
      <data key="d8">chunk-62b30762bc4e6dc84db8c5fa1d88d2de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="Mistral-7b-instruct">
      <data key="d5">9.0</data>
      <data key="d6">The Mistral-7b-instruct model is produced by Mistral, solidifying the company's presence in the AI industry.</data>
      <data key="d7">product development, organization</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="Mixtral-8x7b-instruct">
      <data key="d5">8.0</data>
      <data key="d6">Mixtral-8x7b-instruct represents Mistral's commitment to creating multifaceted AI solutions.</data>
      <data key="d7">product diversity, organization</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="Mistral-Large-2402">
      <data key="d5">9.0</data>
      <data key="d6">This large model, developed by Mistral, serves as an advanced AI solution in their lineup.</data>
      <data key="d7">product development, organization</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="Mistral-Large-2407">
      <data key="d5">9.0</data>
      <data key="d6">The Mistral-Large-2407 model is another iteration from Mistral, focusing on better performance metrics in AI tasks.</data>
      <data key="d7">product development, organization</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="InstrumentedModel">
      <data key="d5">8.0</data>
      <data key="d6">InstrumentedModel is involved in the instrumentation of Mistral models for AI request processing.</data>
      <data key="d7">organization collaboration, AI instrumentation</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="GEN_AI_REQUEST_MODEL_ATTRIBUTE">
      <data key="d5">6.0</data>
      <data key="d6">Mistral models are associated with GEN_AI_REQUEST_MODEL_ATTRIBUTE when configuring requests for AI processing.</data>
      <data key="d7">model configuration, request attributes</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="MistralModel">
      <data key="d5">18.0</data>
      <data key="d6">Mistral organization develops the MistralModel, allowing users to utilize its services for AI implementations.&lt;SEP&gt;Mistral organization develops the MistralModel, allowing users to utilize its services for AI model implementations.</data>
      <data key="d7">organization development, model category</data>
      <data key="d8">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="MistralModelSettings">
      <data key="d5">24.0</data>
      <data key="d6">MistralModelSettings guide the behavior and performance of the Mistral model in processing inputs and generating outputs.&lt;SEP&gt;The Mistral organization provides MistralModelSettings as part of its API framework for model requests, ensuring consistent configuration across models.&lt;SEP&gt;The Mistral organization provides MistralModelSettings as part of its API framework for model requests.</data>
      <data key="d7">configuration, model behavior&lt;SEP&gt;settings provision, API integration</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="Mistral Python Client">
      <data key="d5">9.0</data>
      <data key="d6">The Mistral Python Client is developed by Mistral to facilitate interactions with their models and APIs.</data>
      <data key="d7">API interaction, software integration</data>
      <data key="d8">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai_slim framework enables the management of Mistral's models providing compatibility and ease of use to developers.</data>
      <data key="d7">framework support, organizational partnership</data>
      <data key="d8">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="ModelRequestParameters">
      <data key="d5">16.0</data>
      <data key="d6">Mistral utilizes ModelRequestParameters to tailor its processing of chat requests according to user settings.</data>
      <data key="d7">configuration, request handling</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="MistralTool">
      <data key="d5">18.0</data>
      <data key="d6">Mistral makes use of MistralTool to perform various actions within its operational framework.</data>
      <data key="d7">tool usage, operational functionality</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="MistralEventStreamAsync">
      <data key="d5">9.0</data>
      <data key="d6">MistralEventStreamAsync provides a method for continuous output streaming during model processing, enhancing user experience.</data>
      <data key="d7">streaming, user interaction</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="ModelMessage">
      <data key="d5">26.0</data>
      <data key="d6">Mistral oversees the entire architecture of ModelMessages that encompass the interaction between users and the AI model.&lt;SEP&gt;Mistral provides the framework for creating both ModelRequest and ModelResponse categories within the system's message handling architecture.&lt;SEP&gt;ModelMessage objects are integral to Mistral, encapsulating user inputs that drive the response generation process.</data>
      <data key="d7">architectural oversight&lt;SEP&gt;organizational function&lt;SEP&gt;user interaction, message processing</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="MistralChatCompletionResponse">
      <data key="d5">9.0</data>
      <data key="d6">The Mistral outputs a MistralChatCompletionResponse after processing the incoming ModelMessage based on ModelRequestParameters.</data>
      <data key="d7">response generation, processing outputs</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="function_tools">
      <data key="d5">7.0</data>
      <data key="d6">function_tools define specific activities which Mistral can perform during its execution and response generation.</data>
      <data key="d7">tool functionality, operational capacity</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="result_tools">
      <data key="d5">8.0</data>
      <data key="d6">result_tools are used by Mistral to provide structured outputs following the execution of functions defined by function_tools.</data>
      <data key="d7">output structuring, response generation</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral" target="timeout_ms">
      <data key="d5">7.0</data>
      <data key="d6">timeout_ms defines the time constraint under which Mistral must operate for processing requests effectively.</data>
      <data key="d7">time management, performance constraints</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CohereModel" target="CohereModelSettings">
      <data key="d5">16.0</data>
      <data key="d6">CohereModelSettings defines the settings that are required to configure requests made to the CohereModel.&lt;SEP&gt;CohereModelSettings provides the necessary settings and configurations for requests made to CohereModel."&lt;&lt;"model configuration, settings</data>
      <data key="d7">8&lt;SEP&gt;model configuration, settings</data>
      <data key="d8">chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CohereModel" target="Cohere API">
      <data key="d5">18.0</data>
      <data key="d6">CohereModel interacts with the Cohere API to execute requests and return responses for various applications."&lt;&lt;"API interaction, model usage&lt;SEP&gt;CohereModel uses the Cohere API for making requests and processing responses during API interactions.</data>
      <data key="d7">9&lt;SEP&gt;API interaction, model usage</data>
      <data key="d8">chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CohereModel" target="AsyncClientV2">
      <data key="d5">16.0</data>
      <data key="d6">AsyncClientV2 acts as the asynchronous client that allows CohereModel to make non-blocking API calls."&lt;&lt;"asynchronous communication, client-server&lt;SEP&gt;AsyncClientV2 serves as the client for making asynchronous requests to the CohereModel, enabling non-blocking operations.</data>
      <data key="d7">8&lt;SEP&gt;asynchronous communication, client-server</data>
      <data key="d8">chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CohereModel" target="Cohere Python Client">
      <data key="d5">18.0</data>
      <data key="d6">CohereModel is linked with the Cohere Python Client to facilitate easy usage and integration of the Cohere API in Python applications.&lt;SEP&gt;CohereModel utilizes the Cohere Python Client to streamline the process of making requests to the API."&lt;&lt;"Python integration, library usage</data>
      <data key="d7">9&lt;SEP&gt;Python integration, library usage</data>
      <data key="d8">chunk-43f708cf2c1ed088f9752946682da243</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GroqModelName" target="GroqStreamedResponse">
      <data key="d5">16.0</data>
      <data key="d6">GroqStreamedResponse implements the Groq model specified by GroqModelName, indicating a direct association between the response handling and the model definition.</data>
      <data key="d7">response handling, model definition</data>
      <data key="d8">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic-ai" target="Bedrock">
      <data key="d5">8.0</data>
      <data key="d6">pydantic-ai can be used in applications that also utilize services provided by AWS Bedrock, enhancing machine learning capabilities.</data>
      <data key="d7">integration, technology synergy</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere API" target="Cohere Model Name">
      <data key="d5">8.0</data>
      <data key="d6">The Cohere API provides access to different models listed under Cohere Model Name for various applications.</data>
      <data key="d7">model access, API functionality</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock" target="Provider">
      <data key="d5">8.0</data>
      <data key="d6">Bedrock utilizes a Provider for managing authentication and API access to its models.</data>
      <data key="d7">service integration, API access</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock" target="StreamedResponse">
      <data key="d5">9.0</data>
      <data key="d6">Bedrock implements StreamedResponse to handle events from its models seamlessly.</data>
      <data key="d7">event handling, data streaming</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere API Key" target="Environment Variables">
      <data key="d5">8.0</data>
      <data key="d6">Environment Variables can be used to securely store the Cohere API Key for integration in applications.</data>
      <data key="d7">security, configuration</data>
      <data key="d8">chunk-cd65bf9ab107ffd8e31233d6347c1d1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockConverseModel" target="Agent">
      <data key="d5">10.0</data>
      <data key="d6">BedrockConverseModel is a type of model that can be used in creating an Agent in Pydantic AI.</data>
      <data key="d7">model utility, agent development</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="boto3" target="pydantic_ai">
      <data key="d5">8.0</data>
      <data key="d6">Pydantic AI utilizes boto3 for integrating AWS services into its models and applications.</data>
      <data key="d7">integration, technology</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="boto3" target="Bedrock Provider">
      <data key="d5">9.0</data>
      <data key="d6">The Bedrock Provider utilizes boto3 to facilitate connections and operations with the AWS Bedrock Runtime API.</data>
      <data key="d7">API integration, development</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="boto3" target="GroqProvider">
      <data key="d5">8.0</data>
      <data key="d6">The GroqProvider leverages boto3 for API interactions with the Groq API.</data>
      <data key="d7">API communication, technology</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ollama" target="pydantic_ai">
      <data key="d5">7.0</data>
      <data key="d6">Ollama provides models that can be used in conjunction with Pydantic AI offerings for local AI model utilization.</data>
      <data key="d7">model integration, local deployment</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DeepSeekProvider" target="Agent">
      <data key="d5">6.0</data>
      <data key="d6">DeepSeekProvider can be used to create an Agent that integrates with DeepSeek's AI models.</data>
      <data key="d7">model integration, agent functionality</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DeepSeekProvider" target="Agent Class">
      <data key="d5">7.0</data>
      <data key="d6">DeepSeekProvider can be used to create intelligent agents that interact with DeepSeek AI models through the Agent Class.</data>
      <data key="d7">agent functionality, model integration</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DeepSeekProvider" target="custom_http_client">
      <data key="d5">6.0</data>
      <data key="d6">A custom_http_client can be utilized with the DeepSeekProvider to define the behavior of HTTP requests to the DeepSeek services.</data>
      <data key="d7">customization, HTTP interaction</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DeepSeekProvider" target="AsyncOpenAI">
      <data key="d5">18.0</data>
      <data key="d6">DeepSeekProvider requires an AsyncOpenAI client for making API requests, linking the two organizations closely.</data>
      <data key="d7">provider-client relationship</data>
      <data key="d8">chunk-72ca9e59f2d2201907ab534202af4af4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DeepSeekProvider" target="openai_client">
      <data key="d5">7.0</data>
      <data key="d6">DeepSeekProvider can interact with OpenAI's services through its designated client for operational capabilities.</data>
      <data key="d7">API functionality, integration</data>
      <data key="d8">chunk-72ca9e59f2d2201907ab534202af4af4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockProvider" target="boto3 client">
      <data key="d5">18.0</data>
      <data key="d6">BedrockProvider utilizes the boto3 client to facilitate access to Bedrock runtime services.&lt;SEP&gt;The boto3 client is configured in conjunction with the BedrockProvider to facilitate interactions with AWS services.</data>
      <data key="d7">API integration, service interaction&lt;SEP&gt;configuration, service integration</data>
      <data key="d8">chunk-ee3a2195c443994ca9561a9128e4ad0d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockProvider" target="AsyncOpenAI">
      <data key="d5">8.0</data>
      <data key="d6">BedrockProvider depends on AsyncOpenAI for interactions with AWS Bedrock services, establishing a functional relationship.</data>
      <data key="d7">provider-client relationship</data>
      <data key="d8">chunk-72ca9e59f2d2201907ab534202af4af4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockProvider" target="BaseClient">
      <data key="d5">8.0</data>
      <data key="d6">BedrockProvider depends on BaseClient for establishing connections to AWS services, signifying a functional relationship.</data>
      <data key="d7">provider-client relationship</data>
      <data key="d8">chunk-72ca9e59f2d2201907ab534202af4af4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockProvider" target="openai_client">
      <data key="d5">7.0</data>
      <data key="d6">BedrockProvider can be used in conjunction with OpenAI clients for enhanced API functionalities.</data>
      <data key="d7">integration, service utilization</data>
      <data key="d8">chunk-72ca9e59f2d2201907ab534202af4af4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_name" target="openai_model">
      <data key="d5">6.0</data>
      <data key="d6">The openai_model uses the model_name to identify which version of the OpenAI model is being utilized during processing.</data>
      <data key="d7">model identification, system functionality</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_name" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai_slim provides the underlying structures that utilize model_name for defining specific instances of AI models.</data>
      <data key="d7">library usage, model definition</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_name" target="timestamp">
      <data key="d5">23.0</data>
      <data key="d6">The model_name property is linked to the timestamp, as both are properties that provide context to AI model responses, indicating when they were generated.&lt;SEP&gt;The model_name property is tied to the timestamp to show when a particular model's response was generated.&lt;SEP&gt;model_name is associated with timestamp as part of tracking model usability and performance across different execution instances.</data>
      <data key="d7">model performance, execution tracking&lt;SEP&gt;response context, timing&lt;SEP&gt;response timing, model identification</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72&lt;SEP&gt;chunk-a9de914755fc3f23e749c15911fa6734&lt;SEP&gt;chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_name" target="BaseClient">
      <data key="d5">7.0</data>
      <data key="d6">BaseClient may use model_name properties to specify which model configuration to implement.</data>
      <data key="d7">model selection, configuration</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_name" target="Gemini">
      <data key="d5">9.0</data>
      <data key="d6">model_name is used to identify which specific model instance of Gemini is initialized for processing user prompts.</data>
      <data key="d7">model identification, initialization</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_name" target="_model_name">
      <data key="d5">7.0</data>
      <data key="d6">The model_name property refers to the specific AI model, which is stored as _model_name within the class, indicating a direct relation in describing the model being utilized.</data>
      <data key="d7">property reference, model identity</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_name" target="_init_">
      <data key="d5">7.0</data>
      <data key="d6">The initialization method sets the model_name property when creating an instance of the OpenAI Responses model.</data>
      <data key="d7">initialization, instance creation</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="base_url" target="AzureProvider">
      <data key="d5">10.0</data>
      <data key="d6">AzureProvider requires a base_url to establish connections with Azure OpenAI services, indicating the foundational requirement for functionality.</data>
      <data key="d7">service configuration, foundational requirement</data>
      <data key="d8">chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="api_key" target="azure_endpoint">
      <data key="d5">8.0</data>
      <data key="d6">Both azure_endpoint and api_key are necessary parameters for successful authentication when accessing Azure services.</data>
      <data key="d7">authentication, API access</data>
      <data key="d8">chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="api_key" target="UserError">
      <data key="d5">8.0</data>
      <data key="d6">UserError can occur if an api_key is not provided when needed for Azure API access, indicating an essential requirement.</data>
      <data key="d7">error handling, requirements</data>
      <data key="d8">chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="api_key" target="Cohere Provider">
      <data key="d5">9.0</data>
      <data key="d6">Cohere Provider needs an api_key for authentication, linking it directly to the requirements for using the service.</data>
      <data key="d7">authentication, service requirements</data>
      <data key="d8">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="api_key" target="Mistral Provider">
      <data key="d5">7.0</data>
      <data key="d6">Mistral Provider may also require an api_key similar to Cohere Provider for authentication purposes.</data>
      <data key="d7">authentication, service access</data>
      <data key="d8">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="api_key" target="ApiKeyAuth">
      <data key="d5">10.0</data>
      <data key="d6">api_key is vital for authentication in the ApiKeyAuth class when accessing Google services through Gemini.</data>
      <data key="d7">authorization, key management</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Azure AI Foundry" target="AzureProvider">
      <data key="d5">16.0</data>
      <data key="d6">Azure AI Foundry uses the AzureProvider to access and implement its AI services effectively.&lt;SEP&gt;Azure AI Foundry utilizes the AzureProvider to facilitate access to its AI services.</data>
      <data key="d7">platform service connection&lt;SEP&gt;platform utilization</data>
      <data key="d8">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AzureProvider" target="AsyncGroq">
      <data key="d5">14.0</data>
      <data key="d6">AsyncGroq may be utilized as an HTTP client within the AzureProvider, showing a cooperative relationship in API interaction.&lt;SEP&gt;AsyncGroq provides an HTTP client used by AzureProvider for communication, linking the organizations in technical operations.</data>
      <data key="d7">API client usage, collaboration&lt;SEP&gt;technical integration, service communication</data>
      <data key="d8">chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AzureProvider" target="GROQ_API_KEY">
      <data key="d5">9.0</data>
      <data key="d6">AzureProvider depends on the GROQ_API_KEY for authentication, establishing a critical dependency relationship.</data>
      <data key="d7">authentication, dependency</data>
      <data key="d8">chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Fireworks AI" target="Together AI">
      <data key="d5">12.0</data>
      <data key="d6">Both Fireworks AI and Together AI provide various generative AI models for application development, catering to similar markets.&lt;SEP&gt;Fireworks AI and Together AI both provide generative AI models for user applications.</data>
      <data key="d7">AI services collaboration&lt;SEP&gt;AI services, collaboration</data>
      <data key="d8">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="StreamedResponse">
      <data key="d5">6.0</data>
      <data key="d6">StreamedResponse can be part of a FallbackModel approach, allowing for continuous output as a fallback strategy.</data>
      <data key="d7">response management</data>
      <data key="d8">chunk-c9a99acd51a50f5d69363aefdceadda8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">FallbackModel is a feature within the PydanticAI framework, enhancing the agent's robustness during model failures.</data>
      <data key="d7">system design, reliability</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="ModelHTTPError">
      <data key="d5">18.0</data>
      <data key="d6">FallbackModel includes the ModelHTTPError as a condition that can trigger the fallback mechanism.&lt;SEP&gt;FallbackModel specifically addresses scenarios involving ModelHTTPError, allowing switching between models upon encountering failures.</data>
      <data key="d7">error handling, fallback condition&lt;SEP&gt;error recovery, system design</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac&lt;SEP&gt;chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="Agent Delegation">
      <data key="d5">7.0</data>
      <data key="d6">FallbackModel implementation can also include agent delegation strategies to improve overall performance and response capabilities.</data>
      <data key="d7">workflow management, response strategy</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="pydantic_ai">
      <data key="d5">9.0</data>
      <data key="d6">FallbackModel is a part of the pydantic_ai framework, serving as a utility for error handling and model fallback strategies.</data>
      <data key="d7">model handling, dependency</data>
      <data key="d8">chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="Model">
      <data key="d5">8.0</data>
      <data key="d6">FallbackModel uses the concept of a Model to define its data structure and behavior in case of fallback situations.</data>
      <data key="d7">model framework, structural relation</data>
      <data key="d8">chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="KnownModelName">
      <data key="d5">7.0</data>
      <data key="d6">FallbackModel can accept one or more KnownModelNames as fallback options when the default model fails.</data>
      <data key="d7">fallback mechanism, options</data>
      <data key="d8">chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="infer_model">
      <data key="d5">8.0</data>
      <data key="d6">The function infer_model is utilized within the FallbackModel to determine which model to use during fallback operations.</data>
      <data key="d7">function utility, operational use</data>
      <data key="d8">chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="FallbackExceptionGroup">
      <data key="d5">9.0</data>
      <data key="d6">FallbackModel is designed to throw a FallbackExceptionGroup when all models fail to execute properly.</data>
      <data key="d7">error aggregation, failure handling</data>
      <data key="d8">chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai_slim develops the FallbackModel category to enhance AI response reliability and performance.</data>
      <data key="d7">model development, reliability</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="FunctionModel">
      <data key="d5">7.0</data>
      <data key="d6">FallbackModel and FunctionModel are both categories explored within pydantic_ai_slim for different functional capabilities.</data>
      <data key="d7">model functionality, performance enhancement</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackModel" target="HTTPError">
      <data key="d5">6.0</data>
      <data key="d6">FallbackModel is utilized to handle HTTPError instances by switching to alternative models upon encountering errors.</data>
      <data key="d7">error handling, model reliability</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="message_history">
      <data key="d5">7.0</data>
      <data key="d6">StreamedResponse may include parts of messages that are accumulated in the message history during the streaming process.</data>
      <data key="d7">data processing, message flow</data>
      <data key="d8">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="AsyncAnthropic">
      <data key="d5">9.0</data>
      <data key="d6">StreamedResponse is an implementation model that can operate asynchronously with the AsyncAnthropic provider for improved performance.</data>
      <data key="d7">asynchronous processing, response handling</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="RawMessageStreamEvent">
      <data key="d5">9.0</data>
      <data key="d6">RawMessageStreamEvent events are utilized within StreamedResponse to indicate changes and updates during ongoing streaming.</data>
      <data key="d7">event handling, streaming process</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="abstractmethod">
      <data key="d5">8.0</data>
      <data key="d6">StreamedResponse may require the implementation of abstractmethod to define specific response behavior, linking the response structure to abstract class functionality.</data>
      <data key="d7">implementation requirement, class interaction</data>
      <data key="d8">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="ModelResponse">
      <data key="d5">40.0</data>
      <data key="d6">ModelResponse can occur in the form of a StreamedResponse when data is sent in real-time to the user.&lt;SEP&gt;StreamedResponse is a specific type of ModelResponse designed for streaming larger outputs instead of bulk processing.&lt;SEP&gt;StreamedResponse is a specific type of response that contains the same foundational data as ModelResponse but delivered in real-time.&lt;SEP&gt;StreamedResponse ultimately produces a ModelResponse from the streamed data, establishing a direct link between the processing mechanism and output produced.&lt;SEP&gt;The get method in StreamedResponse produces a ModelResponse, suggesting a direct relationship between the streaming process and the final outcome.</data>
      <data key="d7">data flow, output generation&lt;SEP&gt;data processing, response output&lt;SEP&gt;delivery method, real-time response&lt;SEP&gt;real-time processing, data transmission&lt;SEP&gt;response type, data handling</data>
      <data key="d8">chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="model_request_parameters">
      <data key="d5">7.0</data>
      <data key="d6">StreamedResponse utilizes model_request_parameters to configure its behavior and define how it interacts with the model for generating output.</data>
      <data key="d7">configuration, interaction</data>
      <data key="d8">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="self">
      <data key="d5">8.0</data>
      <data key="d6">Within the StreamedResponse class, self refers to the current instance, helping to access instance-specific attributes and methods.</data>
      <data key="d7">instance reference, object-oriented</data>
      <data key="d8">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="ABC">
      <data key="d5">9.0</data>
      <data key="d6">StreamedResponse inherits from ABC, indicating that it must implement abstract methods defined at the base level, linking class hierarchies.</data>
      <data key="d7">inheritance, class structure</data>
      <data key="d8">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="Usage">
      <data key="d5">8.0</data>
      <data key="d6">The StreamedResponse class includes a Usage metric to monitor the resource consumption during its operations, implying a connection between the response handling and resource management.</data>
      <data key="d7">resource tracking, monitoring</data>
      <data key="d8">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="BedrockStreamedResponse">
      <data key="d5">9.0</data>
      <data key="d6">BedrockStreamedResponse extends the functionality of the StreamedResponse base class for specific use with Bedrock models.</data>
      <data key="d7">inheritance, extension</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="ConverseStreamOutputTypeDef">
      <data key="d5">8.0</data>
      <data key="d6">StreamedResponse relies on ConverseStreamOutputTypeDef for defining the output types from conversational streams.</data>
      <data key="d7">data definition, streaming outputs</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="FunctionModel">
      <data key="d5">26.0</data>
      <data key="d6">FunctionModel supports the generation of StreamedResponse when handling streaming requests, linking their functionalities.&lt;SEP&gt;StreamedResponse is an implementation within the FunctionModel framework that facilitates response handling.&lt;SEP&gt;StreamedResponse serves as an implementation for how FunctionModel handles events in a streamed manner, particularly in asynchronous contexts.</data>
      <data key="d7">implementation, model interaction&lt;SEP&gt;implementation, response handling&lt;SEP&gt;streaming capability, response generation</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="_timestamp">
      <data key="d5">9.0</data>
      <data key="d6">The _timestamp property captures the time at which the StreamedResponse is created or utilized, providing context for event data.</data>
      <data key="d7">timestamp tracking, response context</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="_get_event_iterator">
      <data key="d5">10.0</data>
      <data key="d6">The _get_event_iterator method facilitates the asynchronous event retrieval process specific to StreamedResponse's functionality.</data>
      <data key="d7">event handling, method functionality</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="GroqStreamedResponse">
      <data key="d5">9.0</data>
      <data key="d6">GroqStreamedResponse is derived from StreamedResponse, inheriting its streaming capabilities.</data>
      <data key="d7">inheritance, streaming</data>
      <data key="d8">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="MistralModelSettings">
      <data key="d5">8.0</data>
      <data key="d6">MistralModelSettings outlines the configuration necessary for handling StreamedResponses when interacting with Mistral models.</data>
      <data key="d7">configuration management, response handling</data>
      <data key="d8">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StreamedResponse" target="MistralStreamedResponse">
      <data key="d5">7.0</data>
      <data key="d6">StreamedResponse is a type of response that includes MistralStreamedResponse in the form of real-time output generation.</data>
      <data key="d7">response types, real-time outputs</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelHTTPError" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI framework incorporates ModelHTTPError to manage issues that arise during API calls when models do not respond.</data>
      <data key="d7">error handling, framework robustness</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelHTTPError" target="AgentRunError">
      <data key="d5">18.0</data>
      <data key="d6">ModelHTTPError shows error scenarios specifically tied to HTTP response codes in agent runs.</data>
      <data key="d7">network errors, categorization</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelHTTPError" target="pydantic_ai_slim">
      <data key="d5">9.0</data>
      <data key="d6">ModelHTTPError is incorporated in pydantic_ai_slim to manage HTTP errors during agent runs.</data>
      <data key="d7">error handling, library functionality</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelHTTPError" target="requests">
      <data key="d5">6.0</data>
      <data key="d6">ModelHTTPError would likely be triggered by unsuccessful HTTP requests made using the requests library.</data>
      <data key="d7">error source, HTTP requests</data>
      <data key="d8">chunk-e95f82f1dc6d0df2bb46eb35754fc325</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelHTTPError" target="APIStatusError">
      <data key="d5">14.0</data>
      <data key="d6">APIStatusError can lead to a ModelHTTPError if the API fails in communication with the model.&lt;SEP&gt;APIStatusError may result in a ModelHTTPError when the API call fails due to network issues or incorrect parameters.</data>
      <data key="d7">error handling, API issues</data>
      <data key="d8">chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelHTTPError" target="SDKError">
      <data key="d5">12.0</data>
      <data key="d6">Both ModelHTTPError and SDKError indicate issues related to the functionality of Mistral, but in different contexts (HTTP requests vs SDK operations).</data>
      <data key="d7">error handling, troubleshooting</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="datetime" target="PydanticAI">
      <data key="d5">7.0</data>
      <data key="d6">PydanticAI uses datetime for timestamping events and responses, enhancing the tracking of operational data in its processes.</data>
      <data key="d7">data handling, time management</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="datetime" target="ToolReturnPart">
      <data key="d5">6.0</data>
      <data key="d6">Datetime provides time-related functionality that is utilized in ToolReturnPart to timestamp the tool's return message.</data>
      <data key="d7">timestamping, data integrity</data>
      <data key="d8">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="datetime" target="timezone">
      <data key="d5">13.0</data>
      <data key="d6">Datetime may be used in conjunction with timezone for handling temporal aspects in programming, particularly in event timestamping.&lt;SEP&gt;timezone is utilized to adjust datetime values to reflect local time accurately, important for understanding timestamps in responses.</data>
      <data key="d7">temporal handling, programming&lt;SEP&gt;time adaptation, localization</data>
      <data key="d8">chunk-561b3b3cda17d16517ba963b544fdd01&lt;SEP&gt;chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="datetime" target="AnthropicModelName">
      <data key="d5">8.0</data>
      <data key="d6">The datetime object is essential for logging the model name of the response, as it provides context and timing for AI interactions.</data>
      <data key="d7">timestamp, response tracking</data>
      <data key="d8">chunk-a9de914755fc3f23e749c15911fa6734</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="datetime" target="timestamp">
      <data key="d5">8.0</data>
      <data key="d6">Datetime module is essential for generating and managing timestamp data accurately in the Mistral framework.</data>
      <data key="d7">time management, data handling</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="datetime" target="MistralStreamedResponse">
      <data key="d5">6.0</data>
      <data key="d6">MistralStreamedResponse may rely on datetime to manage timestamps in response validation.</data>
      <data key="d7">timestamp management, response handling</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="datetime" target="OpenAIStreamedResponse">
      <data key="d5">7.0</data>
      <data key="d6">datetime is used to log timestamps for the response events processed by OpenAIStreamedResponse.</data>
      <data key="d7">timestamp logging, response tracking</data>
      <data key="d8">chunk-561b3b3cda17d16517ba963b544fdd01</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="datetime" target="ModelResponseStreamEvent">
      <data key="d5">6.0</data>
      <data key="d6">Streams from ModelResponseStreamEvent are timestamped using datetime to provide temporal context to responses.</data>
      <data key="d7">time tracking, response timestamping</data>
      <data key="d8">chunk-7574296d70c6b864b4a5f29f2b14afe1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="exceptiongroup" target="catch">
      <data key="d5">8.0</data>
      <data key="d6">Catch works in conjunction with ExceptionGroup to provide structured error handling for managing multiple exceptions efficiently.</data>
      <data key="d7">error management, programming construct</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_selection_agent" target="joke_generation_agent">
      <data key="d5">28.0</data>
      <data key="d6">The joke_selection_agent calls the joke_generation_agent to generate jokes and select the best one.&lt;SEP&gt;The joke_selection_agent calls the joke_generation_agent to retrieve jokes based on client inquiries.&lt;SEP&gt;The joke_selection_agent relies on the joke_generation_agent to create jokes based on the prompts received from the client.</data>
      <data key="d7">agent collaboration, joke production&lt;SEP&gt;agent delegation, joke generation&lt;SEP&gt;agent interaction, joke retrieval</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2&lt;SEP&gt;chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_selection_agent" target="RunContext">
      <data key="d5">8.0</data>
      <data key="d6">RunContext is utilized within the joke_selection_agent to manage the execution context during joke selection.</data>
      <data key="d7">context management, execution flow</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_selection_agent" target="ctx">
      <data key="d5">8.0</data>
      <data key="d6">The joke_selection_agent uses ctx to access its context and manage its operation during joke selection.</data>
      <data key="d7">context management, agent operation</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_selection_agent" target="ClientAndKey">
      <data key="d5">8.0</data>
      <data key="d6">ClientAndKey provides the necessary client and API key dependencies to the joke_selection_agent for its functionalities.</data>
      <data key="d7">agent dependencies, connection setup</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_selection_agent" target="Usage">
      <data key="d5">6.0</data>
      <data key="d6">The Usage category is utilized by the joke_selection_agent to track its API request statistics and performance metrics.</data>
      <data key="d7">usage tracking, performance measurement</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_selection_agent" target="Client">
      <data key="d5">9.0</data>
      <data key="d6">The Client provides the necessary context and requests to the joke_selection_agent, allowing it to function effectively for joke selection.</data>
      <data key="d7">request handling, service interaction</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_generation_agent" target="RunContext">
      <data key="d5">7.0</data>
      <data key="d6">RunContext is also used in joke_generation_agent to maintain context similar to its use in joke_selection_agent.</data>
      <data key="d7">context management, consistency</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_generation_agent" target="ctx">
      <data key="d5">8.0</data>
      <data key="d6">The joke_generation_agent also utilizes ctx for managing the execution context during its operations.</data>
      <data key="d7">context management, agent operation</data>
      <data key="d8">chunk-4994823cb969174acf1ac36fa20c35c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="joke_generation_agent" target="toothpaste scandal">
      <data key="d5">10.0</data>
      <data key="d6">The joke_generation_agent produces jokes, including the one referencing the toothpaste scandal, as part of its output.</data>
      <data key="d7">joke generation, humor production</data>
      <data key="d8">chunk-400fc9d2bf52369f39b31d444b09d05a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ctx" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">ctx provides the necessary execution context for the Agent, allowing it to understand its operational environment.</data>
      <data key="d7">context management, execution support</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ctx" target="Tool">
      <data key="d5">9.0</data>
      <data key="d6">The ctx object provides contextual information necessary for the Tool's execution, making it reliant on the context provided.</data>
      <data key="d7">contextual dependency, operational execution</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ctx" target="database connections">
      <data key="d5">8.0</data>
      <data key="d6">The ctx object provides access to database connections, enabling nodes to perform data-related operations during execution.</data>
      <data key="d7">dependency management, data operations</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ctx" target="configuration">
      <data key="d5">8.0</data>
      <data key="d6">The ctx object includes configuration settings necessary for defining the behavior and execution parameters of graph nodes.</data>
      <data key="d7">settings management, behavior definition</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ctx" target="logging clients">
      <data key="d5">8.0</data>
      <data key="d6">ctx includes logging clients which are used to track events and actions performed during node execution.</data>
      <data key="d7">resource tracking, event logging</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ctx" target="sql_query">
      <data key="d5">8.0</data>
      <data key="d6">Ctx provides context necessary for executing the sql_query, ensuring correct state and dependencies are managed.</data>
      <data key="d7">context management, query execution</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="Flight Search Agent">
      <data key="d5">8.0</data>
      <data key="d6">The Flight Search Agent operates under the defined usage limits specified in the app to deliver accurate results.</data>
      <data key="d7">usage management, operational guidelines</data>
      <data key="d8">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="Seat Preference Agent">
      <data key="d5">7.0</data>
      <data key="d6">The Seat Preference Agent is influenced by the overall usage limits of the flight search app and acts accordingly.</data>
      <data key="d7">usage management, operational guidelines</data>
      <data key="d8">chunk-888f71ecd85f28d3bd82e9fee16e3882</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">Usage tracks the resource consumption metrics for the Agent's activities over time.</data>
      <data key="d7">resource tracking</data>
      <data key="d8">chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="PydanticAI">
      <data key="d5">18.0</data>
      <data key="d6">PydanticAI employs the Usage class to track and manage the metrics associated with API calls made to the LLM.&lt;SEP&gt;PydanticAI is an AI model that utilizes the Usage class to track and report API usage metrics.</data>
      <data key="d7">API management, usage tracking&lt;SEP&gt;API usage tracking, AI model functionality</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="requests">
      <data key="d5">16.0</data>
      <data key="d6">Requests represent an internal metric maintained within the Usage class to count the number of API interactions made by users.&lt;SEP&gt;The requests attribute is a part of the Usage class, indicating how many requests have been made to the API.</data>
      <data key="d7">metrics, usage counting&lt;SEP&gt;usage metrics, counting requests</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="request_tokens">
      <data key="d5">16.0</data>
      <data key="d6">Request_tokens is an essential metric within the Usage category that measures the token consumption associated with user requests.&lt;SEP&gt;Request_tokens reflects the usage of tokens specifically associated with processing incoming requests in the Usage class.</data>
      <data key="d7">token tracking, API response metrics&lt;SEP&gt;token usage, metrics relationship</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="response_tokens">
      <data key="d5">16.0</data>
      <data key="d6">Response_tokens gauges the number of tokens used to generate user responses, thus forming a crucial part of the overall usage metrics.&lt;SEP&gt;Response_tokens tracks the number of tokens used to generate responses, also part of the Usage class metrics.</data>
      <data key="d7">token tracking, API response metrics&lt;SEP&gt;token usage, user response</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="total_tokens">
      <data key="d5">18.0</data>
      <data key="d6">Total_tokens encapsulates the overall consumption of tokens by summing both request_tokens and response_tokens for comprehensive tracking.&lt;SEP&gt;Total_tokens is calculated within the Usage class as the overall sum of request_tokens and response_tokens.</data>
      <data key="d7">overall metrics, token accounting&lt;SEP&gt;token accounting, overall usage</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="details">
      <data key="d5">14.0</data>
      <data key="d6">Details provide additional context and breakdowns of usage within the Usage class metrics structure.&lt;SEP&gt;Details provide additional insights or context for the metrics captured in the Usage class, enhancing reporting accuracy.</data>
      <data key="d7">additional metrics, usage summary&lt;SEP&gt;data enhancement, metrics detail</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="incr">
      <data key="d5">18.0</data>
      <data key="d6">The incr method is employed to modify the usage metrics dynamically according to new inputs for accurate tracking.&lt;SEP&gt;The incr method is integral to the Usage class, allowing for the adjustment of metrics when new usage data is received.</data>
      <data key="d7">method functionality, updating usage&lt;SEP&gt;method functionality, usage update</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="__add__">
      <data key="d5">16.0</data>
      <data key="d6">The __add__ method allows for the combination of multiple Usage instances, facilitating collaborative tracking of metrics across different contexts.&lt;SEP&gt;The __add__ method facilitates combining multiple Usage objects, allowing for aggregated metric reporting.</data>
      <data key="d7">class methods, aggregating data&lt;SEP&gt;data aggregation, method relationship</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="opentelemetry_attributes">
      <data key="d5">18.0</data>
      <data key="d6">The opentelemetry_attributes method connects the usage monitoring with OpenTelemetry for tracking via attributes.&lt;SEP&gt;The opentelemetry_attributes method integrates usage data with OpenTelemetry for monitoring, thus linking consumption data to observability frameworks.</data>
      <data key="d7">data monitoring, integration&lt;SEP&gt;monitoring integration, telemetry data</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="ModelResponse">
      <data key="d5">7.0</data>
      <data key="d6">Usage metrics may provide insights into the performance and effectiveness of the ModelResponse generated by the Model.</data>
      <data key="d7">performance metrics, analysis</data>
      <data key="d8">chunk-b769b4aed2676da2f16bf28894246048</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="ToolCallPart">
      <data key="d5">14.0</data>
      <data key="d6">ToolCallPart provides detailed information about tool usage which is documented in the Usage data structure for tracking overall performance.</data>
      <data key="d7">tool usage tracking, performance metrics</data>
      <data key="d8">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Usage" target="InstrumentedModel">
      <data key="d5">9.0</data>
      <data key="d6">Usage instances are generated during requests processed by InstrumentedModel, tracking resource utilization.</data>
      <data key="d7">resource tracking, performance</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Box" target="Agent">
      <data key="d5">16.0</data>
      <data key="d6">The Agent can process instances of Box, which represent structured data for dimensions within its framework.&lt;SEP&gt;The Agent class can handle instances of Box, where it processes dimensions for validation or extraction.</data>
      <data key="d7">data handling, model integration</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Box" target="width">
      <data key="d5">8.0</data>
      <data key="d6">Width is an attribute of the Box entity, representing one of its dimensions.</data>
      <data key="d7">attribute relationship, structuring</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Box" target="height">
      <data key="d5">8.0</data>
      <data key="d6">Height is an attribute of the Box entity, representing one of its dimensions.</data>
      <data key="d7">attribute relationship, structuring</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Box" target="depth">
      <data key="d5">8.0</data>
      <data key="d6">Depth is an attribute of the Box entity, representing one of its dimensions.</data>
      <data key="d7">attribute relationship, structuring</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Box" target="units">
      <data key="d5">8.0</data>
      <data key="d6">Units are used to define the measurements of the Box entity's dimensions like width, height, and depth.</data>
      <data key="d7">measurement standard, definition</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Union" target="Any">
      <data key="d5">9.0</data>
      <data key="d6">Both Any and Union are used in type hints to allow for flexible and dynamic type definitions in function signatures.</data>
      <data key="d7">flexible type definition, programming concept</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="colors_or_sizes.py" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The Agent class is demonstrated in the colors_or_sizes.py example to extract categorical attributes from shapes.</data>
      <data key="d7">example functionality, implementation</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="colors_or_sizes.py" target="colors">
      <data key="d5">8.0</data>
      <data key="d6">The colors_or_sizes.py example focuses on extracting colors as part of the functionalities of the Agent.</data>
      <data key="d7">categorical extraction, example focus</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="colors_or_sizes.py" target="sizes">
      <data key="d5">8.0</data>
      <data key="d6">The colors_or_sizes.py example also targets size extraction alongside color extraction, demonstrating the Agent's versatility.</data>
      <data key="d7">categorical extraction, example focus</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="sql_gen.py" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The Agent class in sql_gen.py is illustrated to generate SQL queries while validating them before execution.</data>
      <data key="d7">example functionality, validation</data>
      <data key="d8">chunk-efc722ebd98256b20f6a17746e03016e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="width" target="Diagram Properties">
      <data key="d5">9.0</data>
      <data key="d6">width is a crucial attribute that, along with height, determines the overall size of the diagram being generated.</data>
      <data key="d7">dimension specification, diagram size</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="height" target="Diagram Properties">
      <data key="d5">9.0</data>
      <data key="d6">height complements width, collectively defining how large the diagram will be displayed.</data>
      <data key="d7">dimension specification, diagram size</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="C programming language" target="1974 Textbook">
      <data key="d5">16.0</data>
      <data key="d6">The C programming language was notably featured in the 1974 textbook that discussed foundational programming concepts.&lt;SEP&gt;The phrase 'hello, world' was first introduced in a 1974 textbook about the C programming language.</data>
      <data key="d7">educational content, foundational learning&lt;SEP&gt;historical significance, introduction</data>
      <data key="d8">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="C programming language" target="Hello World">
      <data key="d5">10.0</data>
      <data key="d6">The phrase 'hello, world' is fundamental in the C programming context, commonly being the first program written by new programmers.</data>
      <data key="d7">programming basics, educational significance</data>
      <data key="d8">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="1974 Textbook" target="Hello World">
      <data key="d5">9.0</data>
      <data key="d6">The 1974 textbook is credited with popularizing the phrase 'hello, world' in programming education.</data>
      <data key="d7">historical relevance, phrase introduction</data>
      <data key="d8">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="1974 Textbook" target="1974">
      <data key="d5">8.0</data>
      <data key="d6">The year 1974 is significant as it marks the publication year of the textbook that introduced the 'hello, world' programming concept.</data>
      <data key="d7">publication history, year significance</data>
      <data key="d8">chunk-8c8fb6037628cc448b0f00de4f71ef82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ben" target="Ben">
      <data key="d5">8.0</data>
      <data key="d6">The repetitions of 'Ben' in the context indicate a focus on this individual, possibly highlighting different facets of his life or variations in his profile.</data>
      <data key="d7">individual focus, repetition</data>
      <data key="d8">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ben" target="date(1990, 1, 28)">
      <data key="d5">9.0</data>
      <data key="d6">Ben was born on this date, which designates his life timeline and age context.</data>
      <data key="d7">biographical context, age</data>
      <data key="d8">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ben" target="Likes the chain the dog and the pyramid">
      <data key="d5">8.0</data>
      <data key="d6">Ben's interests include elements reflecting his personality, indicating characteristics that define him.</data>
      <data key="d7">personal interests, character attributes</data>
      <data key="d8">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ben" target="Likes the chain the dog and the pyr">
      <data key="d5">7.0</data>
      <data key="d6">This incomplete interest statement further illustrates aspects of Ben's personality, continuing the theme of his interests.</data>
      <data key="d7">personal interests, character depth</data>
      <data key="d8">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Likes the chain the dog and the pyramid" target="Likes the chain the dog and the pyr">
      <data key="d5">6.0</data>
      <data key="d6">Both interest statements reveal similar themes about Ben's character and preferences, indicating variations of the same interest.</data>
      <data key="d7">interest overlap, characterization</data>
      <data key="d8">chunk-b4b8fdb92caea638a6b10cb7523f9ba3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather_app" target="pydantic_ai">
      <data key="d5">8.0</data>
      <data key="d6">weather_app utilizes pydantic_ai for managing input and output data in the forecasting process.</data>
      <data key="d7">data management, functionality</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather_app" target="call_weather_forecast">
      <data key="d5">8.0</data>
      <data key="d6">The weather_app uses the call_weather_forecast function to deliver weather forecasts based on user prompts.</data>
      <data key="d7">software functionality, application logic</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="London" target="weather_forecast">
      <data key="d5">7.0</data>
      <data key="d6">weather_forecast events often include requests for weather information specific to cities like London.</data>
      <data key="d7">weather queries, geographical focus</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="London" target="call_weather_forecast">
      <data key="d5">9.0</data>
      <data key="d6">The function call_weather_forecast is designed to fetch weather data specifically for London based on user requests.</data>
      <data key="d7">location-based function, forecast request</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="London" target="Weather Assistant">
      <data key="d5">7.0</data>
      <data key="d6">The Weather Assistant can also handle inquiries about the weather in London, showcasing its capability to cover various locations.</data>
      <data key="d7">user interaction, location-based inquiry</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather_forecast" target="TestModel">
      <data key="d5">9.0</data>
      <data key="d6">TestModel is used to test the functionality of the weather_forecast event by simulating user requests.</data>
      <data key="d7">testing, simulation</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather_forecast" target="forecast_date">
      <data key="d5">8.0</data>
      <data key="d6">forecast_date is essential in the weather_forecast event, as it determines when the forecast is requested for.</data>
      <data key="d7">timing, request specifics</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TestModel" target="Agent">
      <data key="d5">26.0</data>
      <data key="d6">TestModel is used in unit tests to ensure the functionality of the Agent in executing commands invokes the OpenAI model correctly.&lt;SEP&gt;The Agent uses TestModel to run operations and handle function calls in the context of testing Pydantic functionalities.&lt;SEP&gt;The Agent utilizes the TestModel to carry out functional testing and manage operations within the Pydantic framework.</data>
      <data key="d7">agent functionality, testing framework&lt;SEP&gt;testing framework, functionality validation</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TestModel" target="check_allow_model_requests">
      <data key="d5">7.0</data>
      <data key="d6">TestModel will reference check_allow_model_requests to validate its ability to make requests during testing scenarios.</data>
      <data key="d7">testing framework, model validation</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TestModel" target="pytest">
      <data key="d5">16.0</data>
      <data key="d6">TestModel is designed to be tested using the pytest framework, which facilitates the execution and validation of unit tests.</data>
      <data key="d7">testing framework, integration</data>
      <data key="d8">chunk-ba870a242fd1468b0176d028dc0c47b3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TestModel" target="my_agent">
      <data key="d5">18.0</data>
      <data key="d6">TestModel can be utilized within the my_agent environment to run agent-specific tests and validate outcomes.</data>
      <data key="d7">agent integration, testing</data>
      <data key="d8">chunk-ba870a242fd1468b0176d028dc0c47b3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pytest" target="run_weather_forecast">
      <data key="d5">9.0</data>
      <data key="d6">pytest is used to test the functionality of the run_weather_forecast event within the weather application.</data>
      <data key="d7">testing, validation</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pytest" target="FunctionModel">
      <data key="d5">7.0</data>
      <data key="d6">pytest is used to test the FunctionModel's implementation for ensuring correct behavior during weather forecast calls.</data>
      <data key="d7">testing framework, software correctness</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pytest" target="test_forecast_future">
      <data key="d5">7.0</data>
      <data key="d6">pytest is used to run the test_forecast_future function to ensure the accuracy and reliability of the weather forecasting code.</data>
      <data key="d7">testing framework, code validation</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="WeatherService" target="run_weather_forecast">
      <data key="d5">8.0</data>
      <data key="d6">The run_weather_forecast function interacts with the WeatherService to obtain the forecast data needed by users.</data>
      <data key="d7">service interaction, data retrieval</data>
      <data key="d8">chunk-2c24a9be4ac8532ee8ba6bc83b74eb05</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run_weather_forecast" target="FunctionModel">
      <data key="d5">8.0</data>
      <data key="d6">The FunctionModel integrates with run_weather_forecast to execute custom functionalities needed for weather predictions.</data>
      <data key="d7">function integration, operational enhancement</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="call_weather_forecast" target="AgentInfo">
      <data key="d5">8.0</data>
      <data key="d6">The call_weather_forecast function utilizes AgentInfo to customize behavior based on the agent's context during the forecast generation.</data>
      <data key="d7">agent context, functionality customization</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="call_weather_forecast" target="ModelMessage">
      <data key="d5">9.0</data>
      <data key="d6">The call_weather_forecast function processes ModelMessage instances to derive user prompts necessary for fetching weather data.</data>
      <data key="d7">message processing, functional input</data>
      <data key="d8">chunk-88421b6a92c107220e0c204663c39a71</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="check_allow_model_requests">
      <data key="d5">7.0</data>
      <data key="d6">FunctionModel utilizes the check_allow_model_requests function to confirm if it can proceed with its operations regarding model requests.</data>
      <data key="d7">function execution validation, model control</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="ModelMessage">
      <data key="d5">18.0</data>
      <data key="d6">FunctionModel processes ModelMessages to interact with functions and obtain responses, highlighting their functional relationship.&lt;SEP&gt;FunctionModel utilizes ModelMessage structures to interact with user inputs and generate appropriate responses.</data>
      <data key="d7">communication, interaction&lt;SEP&gt;message processing, function interaction</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="FunctionDef">
      <data key="d5">28.0</data>
      <data key="d6">FunctionModel calls either FunctionDef or StreamFunctionDef to perform the intended function as per user requests.&lt;SEP&gt;FunctionModel relies on FunctionDef to create non-streamed responses and utilize defined functions.&lt;SEP&gt;FunctionModel requires a FunctionDef to operate for non-streamed requests, establishing a functional dependency.</data>
      <data key="d7">function execution, API design&lt;SEP&gt;function execution, response management&lt;SEP&gt;function operation, dependency</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="StreamFunctionDef">
      <data key="d5">27.0</data>
      <data key="d6">FunctionModel utilizes StreamFunctionDef to handle streamed requests, indicating a strong relationship between the two.&lt;SEP&gt;StreamFunctionDef is used by FunctionModel to handle streamed requests, enabling real-time processing.&lt;SEP&gt;StreamFunctionDef is utilized by FunctionModel for generating responses in a streamed manner, enhancing real-time data processing.</data>
      <data key="d7">data streaming, function execution&lt;SEP&gt;streaming capability, functional integration&lt;SEP&gt;streaming process, real-time responses</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="AgentInfo">
      <data key="d5">24.0</data>
      <data key="d6">AgentInfo is instantiated within FunctionModel to assist in managing request parameters and model settings.&lt;SEP&gt;FunctionModel uses AgentInfo to provide context about the available tools and permissions when processing a function call.&lt;SEP&gt;FunctionModel utilizes AgentInfo to understand the context and available tools for executing functions.</data>
      <data key="d7">execution context, function management&lt;SEP&gt;function invocation, user context&lt;SEP&gt;request management, operational support</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385&lt;SEP&gt;chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="ModelRequestParameters">
      <data key="d5">9.0</data>
      <data key="d6">FunctionModel requires ModelRequestParameters to effectively manage request specifications, demonstrating a high dependency.</data>
      <data key="d7">request management, dependency</data>
      <data key="d8">chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="ModelResponse">
      <data key="d5">10.0</data>
      <data key="d6">ModelResponse is generated by the FunctionModel when processing requests, marking a direct output relationship.</data>
      <data key="d7">output generation, request handling</data>
      <data key="d8">chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="PeekableAsyncStream">
      <data key="d5">8.0</data>
      <data key="d6">The FunctionModel utilizes PeekableAsyncStream for managing streaming responses, indicating a functional tie between them.</data>
      <data key="d7">stream management, functional integration</data>
      <data key="d8">chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="TypeError">
      <data key="d5">7.0</data>
      <data key="d6">TypeError may be raised within the FunctionModel under improper usage scenarios, highlighting potential issues in programming.</data>
      <data key="d7">error handling, programming issues</data>
      <data key="d8">chunk-595efca0298903c32af81a505cfa2209</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="model_settings">
      <data key="d5">8.0</data>
      <data key="d6">model_settings configures the behavior of FunctionModel by specifying different operational parameters.</data>
      <data key="d7">model configuration, operational settings</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="system">
      <data key="d5">7.0</data>
      <data key="d6">system refers to the overarching framework that supports the operations of FunctionModel.</data>
      <data key="d7">framework relationship, system integration</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionModel" target="pydantic_ai_slim">
      <data key="d5">15.0</data>
      <data key="d6">FunctionModel is a component of the pydantic_ai_slim library aimed at function modeling for API responses.&lt;SEP&gt;FunctionModel is a component of the pydantic_ai_slim organization which focuses on function-based modeling.</data>
      <data key="d7">model framework, organizational structure&lt;SEP&gt;organizational structure, functionality</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentInfo" target="function_tools">
      <data key="d5">9.0</data>
      <data key="d6">AgentInfo contains a list of function tools available to the agent, directly affecting function execution.</data>
      <data key="d7">function availability, agent capabilities</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentInfo" target="result_tools">
      <data key="d5">8.0</data>
      <data key="d6">result_tools indicates which tools can be utilized for final outputs, which is crucial for the agent's function execution.</data>
      <data key="d7">output generation, tool access</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentInfo" target="allow_text_result">
      <data key="d5">8.0</data>
      <data key="d6">The allow_text_result attribute in AgentInfo determines if the output can be presented in plain text, impacting interactions.</data>
      <data key="d7">output flexibility, interaction design</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Anne" target="dice_result">
      <data key="d5">17.0</data>
      <data key="d6">Anne guessed the result of the die roll correctly, leading to a winning outcome.&lt;SEP&gt;Anne's winning guess is stored in the dice_result variable, marking her success in the game.</data>
      <data key="d7">game outcome, guess tracking&lt;SEP&gt;game success, player achievement</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97&lt;SEP&gt;chunk-0d5b65b7fc5f3988bd8cbb2a78491eac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Anne" target="Dice Game">
      <data key="d5">10.0</data>
      <data key="d6">Anne participates in the Dice Game as a player who guessed the outcome correctly.</data>
      <data key="d7">player participation, game involvement</data>
      <data key="d8">chunk-0d5b65b7fc5f3988bd8cbb2a78491eac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Anne" target="Congratulations Message">
      <data key="d5">10.0</data>
      <data key="d6">Anne receives a Congratulations Message after correctly guessing the result of the Dice Game.</data>
      <data key="d7">success acknowledgment, reward</data>
      <data key="d8">chunk-0d5b65b7fc5f3988bd8cbb2a78491eac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Anne" target="roll_die">
      <data key="d5">8.0</data>
      <data key="d6">Anne participated in the roll_die event and was declared a winner based on her correct guess.</data>
      <data key="d7">game achievement, winning</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Anne" target="Yashar">
      <data key="d5">5.0</data>
      <data key="d6">Yashar and Anne are both participants in the game, contributing to the same event of rolling the die.</data>
      <data key="d7">game players, competition</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Anne" target="Agent B">
      <data key="d5">8.0</data>
      <data key="d6">Agent B interacts with Anne to acknowledge her winning guess in the roll_die event.</data>
      <data key="d7">game interaction, player engagement</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dice Game" target="Dice">
      <data key="d5">9.0</data>
      <data key="d6">The Dice Game utilizes Dice as the primary tool for determining outcomes with each roll.</data>
      <data key="d7">game mechanics, foundational tool</data>
      <data key="d8">chunk-0d5b65b7fc5f3988bd8cbb2a78491eac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="google-gla:gemini-1.5-flash" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The google-gla:gemini-1.5-flash is utilized by the Agent to perform automated responses and manage tools.</data>
      <data key="d7">software interaction, automated responses</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Yashar" target="roll_die">
      <data key="d5">6.0</data>
      <data key="d6">Yashar participated in the roll_die event by making a guess during the game.</data>
      <data key="d7">game participation, guessing</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Yashar" target="Agent A">
      <data key="d5">8.0</data>
      <data key="d6">Agent A interacts with Yashar to process his guess during the roll_die event.</data>
      <data key="d7">game interaction, player engagement</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Yashar" target="dice_result">
      <data key="d5">6.0</data>
      <data key="d6">Yashar's guess is stored in the dice_result variable after the roll_die event concludes.</data>
      <data key="d7">game outcome, guess tracking</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent A" target="Tool">
      <data key="d5">9.0</data>
      <data key="d6">Agent A utilizes the Tool functions like roll_die and get_player_name to conduct the gameplay.</data>
      <data key="d7">functionality, agent tools</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent B" target="Tool">
      <data key="d5">9.0</data>
      <data key="d6">Agent B also relies on the Tool functions to implement their part of the gaming experience.</data>
      <data key="d7">functionality, agent tools</data>
      <data key="d8">chunk-9aa9b9f3160592a6de9590d495a31f97</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="Agent">
      <data key="d5">69.0</data>
      <data key="d6">Agent can utilize various Tool instances for executing specific functions within the pydantic_ai framework.&lt;SEP&gt;Agent executes Tool instances utilizing ToolFuncEither to define callable behavior within pydantic_ai.&lt;SEP&gt;Agent leverages Tool to encapsulate functionalities that can be executed asynchronously based on various contexts.&lt;SEP&gt;Agent leverages the Tool class to encapsulate functionalities that can be executed based on specific contexts.&lt;SEP&gt;Agent uses tools to automate processes and execute tasks efficiently.&lt;SEP&gt;The Agent class utilizes tools for executing defined tasks and managing dependencies."|&lt;SEP&gt;Tools are functions that enhance the capabilities of the Agent, allowing it to perform specialized tasks.&lt;SEP&gt;Tools enhance the capabilities of the Agent, allowing it to perform specialized tasks effectively.</data>
      <data key="d7">automation, task management&lt;SEP&gt;function utilization, framework interaction&lt;SEP&gt;functionality enhancement, agent capabilities&lt;SEP&gt;manager-tools&lt;SEP&gt;organization functionality, execution capability&lt;SEP&gt;tool execution, framework utilization</data>
      <data key="d8">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="ToolFuncContext">
      <data key="d5">7.0</data>
      <data key="d6">ToolFuncContext is related to Tool as it provides the context required for the tool functions to operate effectively.</data>
      <data key="d7">contextual operation, tool functionality</data>
      <data key="d8">chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="ToolPrepareFunc">
      <data key="d5">24.0</data>
      <data key="d6">Tool uses ToolPrepareFunc to customize or prepare the tool definition based on context before execution.&lt;SEP&gt;ToolPrepareFunc is responsible for the preparation phase of a Tool before its execution.&lt;SEP&gt;ToolPrepareFunc is utilized to prepare a tool's definition within the Tool class for operation.</data>
      <data key="d7">preparation process, tool configuration&lt;SEP&gt;tool customization, preparation&lt;SEP&gt;tool preparation, execution</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="DocstringFormat">
      <data key="d5">14.0</data>
      <data key="d6">DocstringFormat determines how the documentation strings for methods in the Tool class are formatted.&lt;SEP&gt;DocstringFormat impacts how tool documentation is structured for clarity and usability.</data>
      <data key="d7">documentation, clarity&lt;SEP&gt;documentation, formatting</data>
      <data key="d8">chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="Function">
      <data key="d5">8.0</data>
      <data key="d6">Tools are often implemented through functions that execute predefined operations and scripts.</data>
      <data key="d7">functionality, execution</data>
      <data key="d8">chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="GenerateToolJsonSchema">
      <data key="d5">24.0</data>
      <data key="d6">GenerateToolJsonSchema ensures that tools are compliant with the defined JSON schema.&lt;SEP&gt;GenerateToolJsonSchema is used to define the JSON schema for the tools created in the agent context.&lt;SEP&gt;GenerateToolJsonSchema is used to define the JSON schema for the tools created within the agent framework.</data>
      <data key="d7">schema compliance, tool development&lt;SEP&gt;tool definition, schema generation</data>
      <data key="d8">chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="Model">
      <data key="d5">8.0</data>
      <data key="d6">Models work in conjunction with tools to manage data representation and manipulation during operations.</data>
      <data key="d7">data management, tool functionality</data>
      <data key="d8">chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="Func">
      <data key="d5">9.0</data>
      <data key="d6">Tools are specific functions categorized under the broader notion of Func that perform designated tasks in the Agent framework.</data>
      <data key="d7">function categorization</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="retries">
      <data key="d5">7.0</data>
      <data key="d6">The retries parameter applies to Tools, determining how many attempts can be made for function execution to succeed.</data>
      <data key="d7">execution reliability</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="schema_generator">
      <data key="d5">9.0</data>
      <data key="d6">The schema_generator creates structured schemas for Tools, enhancing documentation and understanding of their parameters.</data>
      <data key="d7">schema creation</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="ToolDefinition">
      <data key="d5">26.0</data>
      <data key="d6">Tool instances are defined through ToolDefinition that outlines their parameters and functionality.&lt;SEP&gt;Tool instances are instantiated based on definitions provided by ToolDefinition detailing the functionality and parameters.&lt;SEP&gt;Tool is designed to operate within the ToolDefinition framework, following its rules and capabilities.</data>
      <data key="d7">definition structure, tool architecture&lt;SEP&gt;definition structure, tool functionality&lt;SEP&gt;framework structure, operational context</data>
      <data key="d8">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="RunContext">
      <data key="d5">9.0</data>
      <data key="d6">Tool functions utilize RunContext to execute with relevant operational parameters, linking context to function execution.</data>
      <data key="d7">functional execution, context reliance</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="hitchhiker">
      <data key="d5">8.0</data>
      <data key="d6">hitchhiker is defined as a tool, encapsulating a function for execution and dependent on context.</data>
      <data key="d7">tool encapsulation, context dependency</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="answer">
      <data key="d5">10.0</data>
      <data key="d6">The Tool function returns an answer as an output after processing based on the given parameters and context.</data>
      <data key="d7">function output, operational result</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="max_retries">
      <data key="d5">6.0</data>
      <data key="d6">max_retries determines the maximum attempts that can be made when executing the Tool function, linking the configuration with execution behavior.</data>
      <data key="d7">execution limit, error handling</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="name">
      <data key="d5">7.0</data>
      <data key="d6">name identifies the Tool, establishing a reference for invocation within the operational framework.</data>
      <data key="d7">tool identity, operational reference</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="description">
      <data key="d5">7.0</data>
      <data key="d6">description furnishes details about the Tool's functionality, linking narrative context to the Tool's operational purpose.</data>
      <data key="d7">tool functionality, descriptive context</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="ToolFuncEither">
      <data key="d5">16.0</data>
      <data key="d6">Tool implements functionalities from ToolFuncEither, indicating whether it operates synchronously or asynchronously based on the context.&lt;SEP&gt;ToolFuncEither type can define the callable function behavior of a Tool instance in the pydantic_ai framework.</data>
      <data key="d7">functionality type, execution method&lt;SEP&gt;type definition, tool behavior</data>
      <data key="d8">chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="GenerateJsonSchema">
      <data key="d5">6.0</data>
      <data key="d6">Tool uses GenerateJsonSchema for generating structured representations of its parameters, linking schema generation to tool execution.</data>
      <data key="d7">schema generation, parameter structure</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="Max Retries">
      <data key="d5">7.0</data>
      <data key="d6">Max Retries establishes the constraint on how many times a tool can attempt to execute before failing.</data>
      <data key="d7">execution resilience, tool configuration</data>
      <data key="d8">chunk-3c16ab7b122ed13c1236f5062ceed453</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="ValidationError">
      <data key="d5">8.0</data>
      <data key="d6">ValidationError may occur during the execution of a Tool indicating issues that need to be resolved.</data>
      <data key="d7">error handling, validation</data>
      <data key="d8">chunk-3c16ab7b122ed13c1236f5062ceed453</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="Description">
      <data key="d5">8.0</data>
      <data key="d6">Description provides important context about the purpose and functionality of the Tool, aiding users in understanding usage.</data>
      <data key="d7">tool documentation, user guidance</data>
      <data key="d8">chunk-3c16ab7b122ed13c1236f5062ceed453</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool" target="prepare_tool_def">
      <data key="d5">8.0</data>
      <data key="d6">prepare_tool_def dynamically creates tool definitions that are essential for the registration of tools in the agent.</data>
      <data key="d7">tool definition generation, dynamic configuration</data>
      <data key="d8">chunk-8dbbf042d22f24ab47fdb61c76c368c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Foobar" target="Agent">
      <data key="d5">14.0</data>
      <data key="d6">Foobar is defined and managed as part of the Agent's tools, showcasing the ability to handle data models in the Pydantic framework.&lt;SEP&gt;Foobar is defined as part of the tools available within the Pydantic AI Agent, showcasing its ability to manage models and tools.</data>
      <data key="d7">model definition, tool management</data>
      <data key="d8">chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function_tools" target="result_tools">
      <data key="d5">8.0</data>
      <data key="d6">function_tools enhance the functionality of the result_tools used to process and generate results in the Agent.</data>
      <data key="d7">functionality enhancement, tools interaction</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function_tools" target="model_settings">
      <data key="d5">8.0</data>
      <data key="d6">function_tools may be configured based on model_settings to define behaviors and functionalities of the agent.</data>
      <data key="d7">configuration, functionality adjustment</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool_plain" target="Agent">
      <data key="d5">14.0</data>
      <data key="d6">The tool_plain decorator is utilized by the Agent for defining basic tools that do not require advanced functionalities.&lt;SEP&gt;The tool_plain function is a decorator within the Agent class, allowing the registration of simple tool functions for execution.</data>
      <data key="d7">definition method, tool management&lt;SEP&gt;function utility, agent functionality</data>
      <data key="d8">chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool_plain" target="RunContext">
      <data key="d5">6.0</data>
      <data key="d6">The tool_plain function is designed to work with or without RunContext, indicating its flexibility in function registration.</data>
      <data key="d7">function structure, flexibility</data>
      <data key="d8">chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="prepare" target="ToolDefinition">
      <data key="d5">8.0</data>
      <data key="d6">The prepare method modifies ToolDefinitions dynamically before execution, ensuring correct operation based on context parameters.</data>
      <data key="d7">setup process, customization</data>
      <data key="d8">chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="prepare" target="func">
      <data key="d5">8.0</data>
      <data key="d6">The prepare method can modify the behavior of func at runtime, enhancing flexibility in tool execution.</data>
      <data key="d7">dynamic behavior, customization</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="hitchhiker" target="RunContext">
      <data key="d5">14.0</data>
      <data key="d6">The hitchhiker function uses context parameters from RunContext to produce a specific response based on the defined execution context.&lt;SEP&gt;hitchhiker operates upon RunContext to respond based on the current state and dependencies.</data>
      <data key="d7">event execution, context interaction&lt;SEP&gt;function response, contextual action</data>
      <data key="d8">chunk-3fdc59f27ef4b954d5ce497baa940c0b&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Jupyter Notebook" target="PydanticAI">
      <data key="d5">14.0</data>
      <data key="d6">PydanticAI provides tools that can be used within Jupyter Notebook environments, enhancing functionality for data science tasks.</data>
      <data key="d7">tool integration, environment compatibility</data>
      <data key="d8">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Jupyter Notebook" target="nest-asyncio">
      <data key="d5">16.0</data>
      <data key="d6">Nest-asyncio can be used in Jupyter Notebook to manage event loop conflicts, allowing for smoother execution of async code.&lt;SEP&gt;Nest-asyncio can be utilized within Jupyter Notebook to manage event loop conflicts, enabling smoother execution of async code.</data>
      <data key="d7">event loop management, usage guidance</data>
      <data key="d8">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Jupyter Notebook" target="RuntimeError">
      <data key="d5">20.0</data>
      <data key="d6">RuntimeError may occur within Jupyter Notebook due to conflicts with event loops, indicating integration challenges.</data>
      <data key="d7">error handling, integration issues</data>
      <data key="d8">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="API Key Configuration" target="PydanticAI">
      <data key="d5">18.0</data>
      <data key="d6">API Key Configuration is critical for users of PydanticAI to access its features securely.</data>
      <data key="d7">security setup, access control</data>
      <data key="d8">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RuntimeError" target="media_type">
      <data key="d5">6.0</data>
      <data key="d6">RuntimeError can occur if a media_type is unsupported during processing, highlighting a connection between execution errors and the nature of content types.</data>
      <data key="d7">error handling, content support</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RuntimeError" target="check_allow_model_requests">
      <data key="d5">18.0</data>
      <data key="d6">The function check_allow_model_requests raises a RuntimeError when model requests are not permitted based on the ALLOW_MODEL_REQUESTS setting.&lt;SEP&gt;The function check_allow_model_requests will raise a RuntimeError if requests are attempted when ALLOW_MODEL_REQUESTS is False.</data>
      <data key="d7">error handling, request validation&lt;SEP&gt;error handling, validation failure</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Google Colab" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI tools can also be used in Google Colab, providing users with a flexible environment for executing Python code.</data>
      <data key="d7">cloud services, tool compatibility</data>
      <data key="d8">chunk-459acdb5bfa20be2d698a80bc830b084</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="carbon-fiber spikes" target="Agent">
      <data key="d5">3.0</data>
      <data key="d6">The functionality of the Agent does not directly involve athletic equipment, but it could potentially analyze performance data related to equipment like carbon-fiber spikes.</data>
      <data key="d7">analysis, performance</data>
      <data key="d8">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="models" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">Agents utilize models to guide their operations, allowing for effective task execution based on the provided models.</data>
      <data key="d7">model utilization, task execution</data>
      <data key="d8">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ResultDataT" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The Agent outputs results that conform to the ResultDataT type, ensuring structured data presentation.</data>
      <data key="d7">output structure, data consistency</data>
      <data key="d8">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ResultDataT" target="FinalResult">
      <data key="d5">9.0</data>
      <data key="d6">ResultDataT is the format of the data processed during the execution, which culminates in a FinalResult once the agent completes its function.</data>
      <data key="d7">data processing, output generation</data>
      <data key="d8">chunk-4d3f57edc4c3f799d03bb18401fc8f09</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ResultDataT" target="structured response">
      <data key="d5">7.0</data>
      <data key="d6">ResultDataT defines the structure of the data returned in a structured format, aimed for validation.</data>
      <data key="d7">data structure, validation</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ResultDataT" target="self">
      <data key="d5">7.0</data>
      <data key="d6">self refers to an instance that will return a ResultDataT type for validation."|&gt;"object instance, data validation</data>
      <data key="d7">7</data>
      <data key="d8">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentDepsT" target="Agent">
      <data key="d5">22.0</data>
      <data key="d6">AgentDepsT are optional dependencies that can enhance the capabilities and performance of the Agent.&lt;SEP&gt;AgentDepsT defines the types of dependencies that the Agent can utilize during its execution.&lt;SEP&gt;The Agent can incorporate AgentDepsT to customize its functionalities through dependency injection.</data>
      <data key="d7">dependency injection, customization&lt;SEP&gt;dependency management, operational context&lt;SEP&gt;optional enhancement</data>
      <data key="d8">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-65bc4779c39b4dfb61824a17bf7103db&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentDepsT" target="override">
      <data key="d5">7.0</data>
      <data key="d6">The override method also allows dependencies represented by AgentDepsT to be temporarily modified, enhancing agent flexibility during testing.</data>
      <data key="d7">dependency management, flexibility</data>
      <data key="d8">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentDepsT" target="AgentNode">
      <data key="d5">18.0</data>
      <data key="d6">AgentDepsT defines the dependencies that an AgentNode requires to function, highlighting its integral role in execution.&lt;SEP&gt;AgentDepsT provides necessary dependencies for the execution of an AgentNode, making it a critical part of the process.</data>
      <data key="d7">dependency requirement, execution dependency&lt;SEP&gt;dependency structure, agent operation</data>
      <data key="d8">chunk-4d3f57edc4c3f799d03bb18401fc8f09</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentDepsT" target="RunContext">
      <data key="d5">8.0</data>
      <data key="d6">RunContext holds dependencies required for the agent during execution.</data>
      <data key="d7">agent dependencies, execution context</data>
      <data key="d8">chunk-0defe853a1fb0dadf514cce37cdbbd16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServer" target="Agent">
      <data key="d5">14.0</data>
      <data key="d6">Agents can connect to MCPServers to access additional computational resources and services.&lt;SEP&gt;MCPServer instances can be registered with the Agent to enable connections to necessary servers, which is essential for functionality.</data>
      <data key="d7">networking, server configuration&lt;SEP&gt;resource access, computational support</data>
      <data key="d8">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServer" target="client_streams">
      <data key="d5">16.0</data>
      <data key="d6">MCPServer must implement the client_streams method for stream creation in its subclasses.&lt;SEP&gt;MCPServer requires the implementation of client_streams method to facilitate client communication streams.</data>
      <data key="d7">method requirement, server functionality&lt;SEP&gt;server communication, method requirement</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServer" target="list_tools">
      <data key="d5">7.0</data>
      <data key="d6">MCPServer includes a method, list_tools, to list active tools available on the server.</data>
      <data key="d7">functionality, server capability</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServer" target="call_tool">
      <data key="d5">7.0</data>
      <data key="d6">MCPServer has a call_tool method to execute a tool with specific arguments.</data>
      <data key="d7">functionality, server capability</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServer" target="MCPServerStdio">
      <data key="d5">17.0</data>
      <data key="d6">MCPServerStdio inherits from MCPServer, extending its functionality for handling subprocesses.&lt;SEP&gt;MCPServerStdio is a specific implementation of the MCPServer that facilitates communication through stdin/stdout.</data>
      <data key="d7">implementation, communication protocol&lt;SEP&gt;inheritance, software design</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894&lt;SEP&gt;chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServer" target="MCPServerHTTP">
      <data key="d5">16.0</data>
      <data key="d6">MCPServerHTTP is an instance of MCPServer designed for HTTP connections.&lt;SEP&gt;MCPServerHTTP is another implementation of MCPServer, enabling HTTP-based connections according to MCP standards.</data>
      <data key="d7">inheritance, protocol implementation&lt;SEP&gt;inheritance, software design</data>
      <data key="d8">chunk-570bd1954ac1dec6ff5e11d27332192d&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EndStrategy" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">EndStrategy determines how an Agent manages tool calls and final result outputs, optimizing performance.</data>
      <data key="d7">performance optimization, task management</data>
      <data key="d8">chunk-c77a6c2c8bc1fe9a2d7df96c3a536533</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Servers" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">Agent is designed to work with MCP Servers to facilitate prompt handling and tool registration, establishing a functional relationship.</data>
      <data key="d7">system architecture, server integration</data>
      <data key="d8">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tools" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Agent registers various Tools to enhance functionality and enable specific tasks during user interactions.</data>
      <data key="d7">tool integration, functionality enrichment</data>
      <data key="d8">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="User Prompt" target="Agent">
      <data key="d5">18.0</data>
      <data key="d6">User Prompt is processed by the Agent, serving as the primary input that dictates the subsequent actions and outputs.&lt;SEP&gt;User Prompt serves as the input for the Agent to process and generate a response.</data>
      <data key="d7">input-output interaction&lt;SEP&gt;input-output relationship, user interaction</data>
      <data key="d8">chunk-5b7a596ee9422b565de815722b0e31dc&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="User Prompt" target="Run Result">
      <data key="d5">10.0</data>
      <data key="d6">The Run Result is generated as a direct response to the User Prompt provided to the Agent.</data>
      <data key="d7">input-output relationship, user interaction</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Result Type" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">Result Type defines the format of outputs generated by the Agent based on the processing of User Prompts.</data>
      <data key="d7">output structure, response format</data>
      <data key="d8">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Message History" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Agent refers to the Message History to maintain context and continuity in user interactions, enhancing response relevance.</data>
      <data key="d7">context management, user engagement</data>
      <data key="d8">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent Run Result" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Agent produces an Agent Run Result after processing User Prompts, representing the final output of the interaction.</data>
      <data key="d7">output generation, process completion</data>
      <data key="d8">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphAgent" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The Agent class is responsible for managing and operating the capabilities encapsulated within the GraphAgent.</data>
      <data key="d7">organizational structure, function</data>
      <data key="d8">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CallToolsNode" target="End">
      <data key="d5">20.0</data>
      <data key="d6">After tools execute their functions in CallToolsNode, the process culminates in an End event that captures and returns the final results.&lt;SEP&gt;The CallToolsNode performs actions that must culminate in the End node, signifying the completion of the operations initiated from user input.</data>
      <data key="d7">completion flow, execution lifecycle&lt;SEP&gt;workflow completion, results production</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="CallToolsNode" target="ModelResponse">
      <data key="d5">9.0</data>
      <data key="d6">CallToolsNode leads to the production of a ModelResponse, highlighting the connection between tool calls and output generation.</data>
      <data key="d7">output generation, tool call</data>
      <data key="d8">chunk-f29114dc6d88a06ac1343874c6b2fe1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FinalResult" target="End">
      <data key="d5">28.0</data>
      <data key="d6">The End event leads directly to the FinalResult, which represents the final output delivered to the user.&lt;SEP&gt;The End event produces a FinalResult, indicating the conclusion of the agent's task and providing the outcome to the user.&lt;SEP&gt;The End node directly leads to the FinalResult, providing the outcome produced by the agent after executing all necessary processes.</data>
      <data key="d7">conclusion, delivery&lt;SEP&gt;outcome delivery, finalization&lt;SEP&gt;result delivery, task conclusion</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6&lt;SEP&gt;chunk-026d208ef4ddc45c65e52cfc9aeb6151&lt;SEP&gt;chunk-ba0f6d002d71ff318d304dea37c2feb5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FinalResult" target="result_schema">
      <data key="d5">10.0</data>
      <data key="d6">FinalResult adheres to the specifications outlined by the result_schema, ensuring consistency in output formats.</data>
      <data key="d7">data structure compliance, output integrity</data>
      <data key="d8">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model used" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The specific model used is integral to the Agent's operations, affecting how it processes input and generates output.</data>
      <data key="d7">model dependency, operational significance</data>
      <data key="d8">chunk-026d208ef4ddc45c65e52cfc9aeb6151</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="user_prompt" target="Agent">
      <data key="d5">36.0</data>
      <data key="d6">The Agent class utilizes user_prompt as an input to interact with users and process requests during its operation.&lt;SEP&gt;The agent requires a user prompt to initiate interaction and provide a response."|"interaction initiation, communication&lt;SEP&gt;The user_prompt is the input provided to the Agent for processing and generating outputs.&lt;SEP&gt;User prompt is utilized by the Agent to carry out tasks and respond to user queries.</data>
      <data key="d7">9&lt;SEP&gt;interaction initiation, user engagement&lt;SEP&gt;user interaction, data input&lt;SEP&gt;user interaction, input processing</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-5dd90ca26b9a717c2bb167611fc310a1&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="Agent">
      <data key="d5">33.0</data>
      <data key="d6">Model is a fundamental part of the Agent's configuration, as it determines its data handling capabilities.&lt;SEP&gt;The Agent operates according to a defined Model, which shapes its behavior and functionalities.&lt;SEP&gt;The Agent utilizes different Models to effectively process user prompts and generate appropriate responses.&lt;SEP&gt;The Model classification is utilized by the Agent to formulate accurate responses to User Prompts.</data>
      <data key="d7">data modeling, agent configuration&lt;SEP&gt;framework structure, operational definition&lt;SEP&gt;functionality, AI processing&lt;SEP&gt;model-utilization</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-4c2a3419dcd475440c12988735eb5e77&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="override">
      <data key="d5">8.0</data>
      <data key="d6">The override method requires a Model parameter to modify the model used during the agent's execution, impacting its behavior and outputs.</data>
      <data key="d7">method functionality, testing</data>
      <data key="d8">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="ModelMessage">
      <data key="d5">25.0</data>
      <data key="d6">Model utilizes ModelMessage to receive prompts and structured input necessary for generating responses.&lt;SEP&gt;ModelMessage is a type of communication that is utilized when sending requests to the Model and receiving responses.&lt;SEP&gt;The Model uses ModelMessage structures to communicate and process interactions with users and other entities.</data>
      <data key="d7">communication structure, operational process&lt;SEP&gt;communication, model interaction&lt;SEP&gt;input-output relationship, AI processing</data>
      <data key="d8">chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="messages">
      <data key="d5">9.0</data>
      <data key="d6">Messages are the inputs required by the Model to process and generate responses based on user prompts.</data>
      <data key="d7">input-output dynamic, AI processing</data>
      <data key="d8">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="ModelRequestParameters">
      <data key="d5">37.0</data>
      <data key="d6">ModelRequestParameters configures requests made to the Model, defining how tools and results will be handled.&lt;SEP&gt;ModelRequestParameters configures requests to the Model, defining how tools and results will be handled.&lt;SEP&gt;ModelRequestParameters define how the Model should behave and respond during requests, making them integral to the interaction.&lt;SEP&gt;ModelRequestParameters play a crucial role in shaping the requests sent to the Model, influencing the generated responses.</data>
      <data key="d7">request configuration, model interaction&lt;SEP&gt;request customization, interaction design&lt;SEP&gt;request settings, model interaction</data>
      <data key="d8">chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="pydantic_ai_slim">
      <data key="d5">18.0</data>
      <data key="d6">The Model class is a component of the pydantic_ai_slim library, indicating it is part of this organization's framework for model creation.&lt;SEP&gt;The Model is a part of the overall structure provided by pydantic_ai_slim, indicating organizational dependencies.</data>
      <data key="d7">organizational structure, model framework</data>
      <data key="d8">chunk-b769b4aed2676da2f16bf28894246048</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="ModelResponse">
      <data key="d5">28.0</data>
      <data key="d6">After processing requests, the Model generates a ModelResponse that contains the results of the request.&lt;SEP&gt;Outputs from the Model are encapsulated in ModelResponse, demonstrating the connection between input messages and model outputs.&lt;SEP&gt;The Model produces a ModelResponse based on the input it receives, thereby linking the model's operation to its output.</data>
      <data key="d7">model output, response generation&lt;SEP&gt;output generation, model interaction&lt;SEP&gt;output generation, model results</data>
      <data key="d8">chunk-b769b4aed2676da2f16bf28894246048&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="AsyncIterator">
      <data key="d5">9.0</data>
      <data key="d6">The Model may implement request streaming through an AsyncIterator for handling requests and responses asynchronously.</data>
      <data key="d7">asynchronous handling, streaming</data>
      <data key="d8">chunk-b769b4aed2676da2f16bf28894246048</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="InstrumentedModel">
      <data key="d5">7.0</data>
      <data key="d6">InstrumentedModel employs various models to implement AI functionalities.</data>
      <data key="d7">AI functionality, model application</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model" target="AsyncOpenAI">
      <data key="d5">9.0</data>
      <data key="d6">The Model architecture operates within the AsyncOpenAI framework, facilitating asynchronous processing capabilities.</data>
      <data key="d7">system architecture, operational methods</data>
      <data key="d8">chunk-8c8f75d6c796eb1144066af5a11cfdd9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Event Loop" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">The Event Loop facilitates the synchronous operation of the Agent, allowing it to process requests efficiently.</data>
      <data key="d7">process management, efficiency</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="end_strategy" target="graph_run">
      <data key="d5">8.0</data>
      <data key="d6">end_strategy is utilized at the conclusion of the graph_run process to determine the outcome and clean-up operations.</data>
      <data key="d7">process conclusion, operational strategy</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="end_strategy" target="Agent">
      <data key="d5">24.0</data>
      <data key="d6">End strategy influences the final decision-making process of the Agent, determining how it manages flow after tool interactions.&lt;SEP&gt;The end_strategy specifies how the Agent concludes operations, directly influencing task management and results.&lt;SEP&gt;end_strategy dictates how the Agent manages multiple calls that occur together with the final output, affecting overall performance.</data>
      <data key="d7">decision-making, process management&lt;SEP&gt;performance management, operational efficiency&lt;SEP&gt;task completion, strategy definition</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_schema" target="result_validators">
      <data key="d5">9.0</data>
      <data key="d6">result_validators ensure the outputs conform to the structure defined in the result_schema, maintaining integrity in results.</data>
      <data key="d7">output quality, validation</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mcp_servers" target="Agent">
      <data key="d5">18.0</data>
      <data key="d6">The mcp_servers are integral to the operation of the Agent by managing communication and processing tasks effectively.&lt;SEP&gt;mcp_servers are connected to the Agent, allowing it to operate within a network of multiple servers for achieving its tasks.</data>
      <data key="d7">network connection, operational capacity&lt;SEP&gt;server management, operational support</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run_span" target="graph_run">
      <data key="d5">7.0</data>
      <data key="d6">The run_span outlines the time period allocated for the specific graph_run instance of the Agent, impacting processing efficiency.</data>
      <data key="d7">time management, processing efficiency</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tracer" target="graph_run">
      <data key="d5">8.0</data>
      <data key="d6">The tracer is utilized during a graph_run to monitor and analyze the execution performance throughout the process.</data>
      <data key="d7">performance monitoring, execution tracking</data>
      <data key="d8">chunk-4c2a3419dcd475440c12988735eb5e77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="graph_run" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">graph_run processes each BaseNode in the workflow, determining how each one executes as part of the overall logic.</data>
      <data key="d7">node execution, workflow management</data>
      <data key="d8">chunk-074bfa68ac0e63b1f628efd6720d1253</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="graph_run" target="next">
      <data key="d5">8.0</data>
      <data key="d6">the next method is used to manually advance the current graph_run to the next node or indication of completion.</data>
      <data key="d7">node progression, control flow</data>
      <data key="d8">chunk-074bfa68ac0e63b1f628efd6720d1253</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="graph_run" target="exceptions">
      <data key="d5">8.0</data>
      <data key="d6">exceptions are managed as part of the graph_run to handle errors or unexpected conditions during execution.</data>
      <data key="d7">error handling, stability</data>
      <data key="d8">chunk-074bfa68ac0e63b1f628efd6720d1253</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Asynchronous Context Manager" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The Agent operates within an asynchronous context manager to handle requests, ensuring efficient resource management."|"efficient operations, resource management</data>
      <data key="d7">8</data>
      <data key="d8">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_stream" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">Agent processes user prompts and returns responses in results streams, indicating how it operates in real-time."|"interaction, real-time processing</data>
      <data key="d7">8</data>
      <data key="d8">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent Run" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">Each agent run corresponds to the processing of a specific user prompt by the agent."|"process execution, session management</data>
      <data key="d7">8</data>
      <data key="d8">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent Run" target="Result Data">
      <data key="d5">9.0</data>
      <data key="d6">The result data is generated as a result of processing a user prompt during the agent run."|"output generation, processing feedback</data>
      <data key="d7">9</data>
      <data key="d8">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_settings" target="Agent">
      <data key="d5">38.0</data>
      <data key="d6">Model settings are parameters that influence how the Agent operates, allowing customization in its responses.&lt;SEP&gt;Model settings define how the Agent operates and interacts with specific models during its tasks.&lt;SEP&gt;Model settings directly influence how the agent operates and responds to user prompts."|"configuration influence, system behavior&lt;SEP&gt;Model_settings provide additional configuration to adapt the Agent's behavior according to specific processing requirements.&lt;SEP&gt;The Agent uses model_settings to configure its parameters, adjusting behavior based on these settings.</data>
      <data key="d7">8&lt;SEP&gt;configuration options, behavior adaptation&lt;SEP&gt;configuration, model interaction&lt;SEP&gt;configuration, operational adjustment&lt;SEP&gt;configuration, operational parameters</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-ab85d0443eef9eae16c396f2077c5031&lt;SEP&gt;chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_settings" target="generation_config">
      <data key="d5">10.0</data>
      <data key="d6">Model settings directly influence the generation config, impacting how the model produces content.</data>
      <data key="d7">parameters influence, model behavior</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_settings" target="OpenAIModelName">
      <data key="d5">7.0</data>
      <data key="d6">ModelSettings configure how the specific OpenAI model operates, playing a role in shaping the output from that model.</data>
      <data key="d7">configuration, model operation</data>
      <data key="d8">chunk-3d1c7209debb23a47e4399b20a981057</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asynccontextmanager" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The agent uses an asynccontextmanager for efficient execution of asynchronous tasks."|"resource management, efficiency</data>
      <data key="d7">9</data>
      <data key="d8">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asynccontextmanager" target="override">
      <data key="d5">8.0</data>
      <data key="d6">The override method leverages asynccontextmanager to manage temporary dependency changes within an asynchronous context.</data>
      <data key="d7">context management, async functionality</data>
      <data key="d8">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="currentframe" target="inspect">
      <data key="d5">8.0</data>
      <data key="d6">The inspect module can utilize the currentframe to gather information about the execution context of the agent."|"reflection, debugging</data>
      <data key="d7">8</data>
      <data key="d8">chunk-ab85d0443eef9eae16c396f2077c5031</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="inspect" target="signature">
      <data key="d5">7.0</data>
      <data key="d6">The inspect module provides access to the signature of functions, informing how they can be called and used within code.</data>
      <data key="d7">function analysis, callable inspection</data>
      <data key="d8">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="inspect" target="BaseNode">
      <data key="d5">28.0</data>
      <data key="d6">The inspect library is used within BaseNode's methods to get current frame context information, which is useful for managing execution flows.&lt;SEP&gt;The inspect library is utilized within methods of BaseNode to fetch current context information like call frames.&lt;SEP&gt;The inspect module can be used to gather information about BaseNode attributes or execution context.&lt;SEP&gt;inspect is utilized within the implementation of BaseNode to analyze and validate the properties of nodes.</data>
      <data key="d7">analysis, validation&lt;SEP&gt;introspection, attribute discovery&lt;SEP&gt;runtime analysis, context inspection&lt;SEP&gt;runtime context, analysis</data>
      <data key="d8">chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="inspect" target="mermaid">
      <data key="d5">8.0</data>
      <data key="d6">Inspect is utilized within the mermaid context to inspect function frames for inferring graph names.</data>
      <data key="d7">introspection, integration</data>
      <data key="d8">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="inspect" target="iter">
      <data key="d5">7.0</data>
      <data key="d6">inspect is utilized within the iter function to verify and infer properties from executing nodes in the graph.</data>
      <data key="d7">verification, introspection</data>
      <data key="d8">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">The Agent interacts directly with messages to generate responses and manage communication.</data>
      <data key="d7">communication, response generation</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="last_message">
      <data key="d5">9.0</data>
      <data key="d6">The last_message is a crucial part of the messages array that captures the most recent output from the model.</data>
      <data key="d7">data tracking, response management</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="ToolCallPart">
      <data key="d5">8.0</data>
      <data key="d6">Messages contain ToolCallParts that represent individual tool calls and their associated data and parameters.</data>
      <data key="d7">communication structure, tool calls</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="self.client">
      <data key="d5">8.0</data>
      <data key="d6">self.client processes messages sent to the chat model as inputs for generating chat.ChatCompletion outputs.</data>
      <data key="d7">API interaction, message handling</data>
      <data key="d8">chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="InstrumentedModel">
      <data key="d5">10.0</data>
      <data key="d6">InstrumentedModel's request methods process messages to obtain responses, forming a clear operational link.</data>
      <data key="d7">data processing, request handling</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="ModelResponse">
      <data key="d5">9.0</data>
      <data key="d6">Messages are critical parts of the ModelResponse, containing the input data for generating responses.</data>
      <data key="d7">data input, response generation</data>
      <data key="d8">chunk-3d1c7209debb23a47e4399b20a981057</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="ChatCompletion">
      <data key="d5">10.0</data>
      <data key="d6">ChatCompletion results are based on the messages provided, demonstrating a direct dependency between them.</data>
      <data key="d7">response dependency, content generation</data>
      <data key="d8">chunk-3d1c7209debb23a47e4399b20a981057</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="Chat App">
      <data key="d5">10.0</data>
      <data key="d6">Messages are a fundamental component of the Chat App, forming the basis for interaction between users and the AI.</data>
      <data key="d7">user interaction, core functionality</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages" target="ModelMessagesTypeAdapter">
      <data key="d5">8.0</data>
      <data key="d6">ModelMessagesTypeAdapter ensures that messages conform to expected formats, maintaining consistency in the Chat App's operations.</data>
      <data key="d7">data validation, message formatting</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunError" target="override">
      <data key="d5">6.0</data>
      <data key="d6">AgentRunError might be raised if there is an issue while applying the override method during the agent's execution.</data>
      <data key="d7">error handling, execution flow</data>
      <data key="d8">chunk-b0ca3e3a47d636078489a814af89439f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunError" target="UserError">
      <data key="d5">18.0</data>
      <data key="d6">UserError is a specific type of AgentRunError indicating a misuse by developers.</data>
      <data key="d7">inheritance, error categorization</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunError" target="FallbackExceptionGroup">
      <data key="d5">14.0</data>
      <data key="d6">FallbackExceptionGroup represents a collection of errors that arise when fallback models are unsuccessful, underlining the limitations of error management.</data>
      <data key="d7">error handling, fallback mechanism</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunError" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">AgentRunError serves as a base within the pydantic_ai_slim for handling runtime errors.</data>
      <data key="d7">error management, library functionality</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_messages.ModelResponse" target="_stream_response">
      <data key="d5">8.0</data>
      <data key="d6">The _messages.ModelResponse is produced by the streaming process represented by _stream_response, encapsulating the structured data returned.</data>
      <data key="d7">message structure, streaming data</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_messages.ModelResponse" target="_stream_response_text">
      <data key="d5">8.0</data>
      <data key="d6">_messages.ModelResponse is utilized within the _stream_response_text event handler to manage message data in a structured manner.</data>
      <data key="d7">message handling, event processing</data>
      <data key="d8">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_agent_graph" target="Agent">
      <data key="d5">16.0</data>
      <data key="d6">The _agent_graph defines the operational framework within which the Agent functions and processes requests.</data>
      <data key="d7">operational structure, agent functionality</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool_calls" target="parts">
      <data key="d5">7.0</data>
      <data key="d6">tool_calls generate parts that are further processed during the agent's execution, linking input to output.</data>
      <data key="d7">data flow, processing connection</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="parts" target="msg">
      <data key="d5">7.0</data>
      <data key="d6">msg contains parts that can be processed independently during the streaming response."|&gt;"message components, streaming process</data>
      <data key="d7">7</data>
      <data key="d8">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="agent.run" target="Agent">
      <data key="d5">10.0</data>
      <data key="d6">The agent.run action triggers the operational cycle of the Agent, utilizing its configuration and context.</data>
      <data key="d7">execution trigger, operational flow</data>
      <data key="d8">chunk-65bc4779c39b4dfb61824a17bf7103db</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_validator" target="Agent">
      <data key="d5">25.0</data>
      <data key="d6">result_validator functions are mechanisms used within the Agent for validating the results of its function calls, ensuring data integrity.&lt;SEP&gt;result_validator is a mechanism utilized within the Agent to validate the results of its function calls.&lt;SEP&gt;result_validator is used to enhance the functionality of agents by enabling the validation of the results.</data>
      <data key="d7">functionality enhancement, validation&lt;SEP&gt;result handling, validation&lt;SEP&gt;result handling, validation process</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolFuncContext" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">ToolFuncContext provides a structured way for tool functions to integrate within the agent's execution context.</data>
      <data key="d7">tool integration, context management</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolFuncContext" target="Decorator">
      <data key="d5">9.0</data>
      <data key="d6">The Decorator applies to functions to register them within the tool context, linking them with ToolFuncContext.</data>
      <data key="d7">function registration</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SystemPrompt" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">SystemPrompt provides the guiding prompts that help shape the Agent's dialogue and actions in response to tasks.</data>
      <data key="d7">guidance, interaction shaping</data>
      <data key="d8">chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="decorator" target="function">
      <data key="d5">9.0</data>
      <data key="d6">The decorator pattern modifies function behavior when registering functions within the pydantic_ai library.</data>
      <data key="d7">modification pattern, behavior enhancement</data>
      <data key="d8">chunk-ff513df1fc0c234137e78a2a4fdf00c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="decorator" target="func">
      <data key="d5">8.0</data>
      <data key="d6">func is modified by the decorator function, which enhances its functionality.</data>
      <data key="d7">decoration, function modification</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="decorator" target="func_">
      <data key="d5">8.0</data>
      <data key="d6">decorator takes func_ as a parameter, aiming to apply additional behavior to that function.</data>
      <data key="d7">function enhancement, parameter passing</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function" target="MistralToolCall">
      <data key="d5">9.0</data>
      <data key="d6">MistralToolCall is used to execute specific functions, linking tool calls with their corresponding code blocks for execution.</data>
      <data key="d7">function execution, tool interaction</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="foobar" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">foobar is a tool function registered with the Agent, showcasing how to integrate functions within the Agent framework.</data>
      <data key="d7">tool registration, framework demonstration</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="spam" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">spam is another tool function that is registered with Agent but functions asynchronously, illustrating versatility in function registration.</data>
      <data key="d7">async tool management, framework demonstration</data>
      <data key="d8">chunk-f3ddcdd6dcfe55ac66d9a731536a392d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="func" target="Agent">
      <data key="d5">10.0</data>
      <data key="d6">An Agent utilizes func to execute tools, showcasing the primary operational method for executing tasks within the framework.</data>
      <data key="d7">tool execution, framework operation</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="func" target="name">
      <data key="d5">8.0</data>
      <data key="d6">The name parameter is used to assign a specific identifier to the func, essential for tool registration and reference.</data>
      <data key="d7">identifier assignment, tool registration</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="func" target="retries">
      <data key="d5">9.0</data>
      <data key="d6">The retries parameter provides a mechanism for func to have retries, ensuring robustness in case of failures during execution.</data>
      <data key="d7">fault tolerance, execution reliability</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="func" target="docstring_format">
      <data key="d5">7.0</data>
      <data key="d6">The docstring_format influences the structure and clarity of the documentation for func, impacting user understanding.</data>
      <data key="d7">documentation clarity, user guidance</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="func" target="require_parameter_descriptions">
      <data key="d5">7.0</data>
      <data key="d6">The require_parameter_descriptions parameter specifies expectations for documentation associated with func, promoting thoroughness.</data>
      <data key="d7">documentation standards, thoroughness</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="func" target="schema_generator">
      <data key="d5">8.0</data>
      <data key="d6">The schema_generator parameter affects how func's definitions are validated, crucial for maintaining functional standards.</data>
      <data key="d7">validation, functional standards</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="func" target="strict">
      <data key="d5">9.0</data>
      <data key="d6">The strict parameter enforces compliance in how func operates, significantly affecting its execution context and reliability.</data>
      <data key="d7">compliance, execution reliability</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="func" target="functools">
      <data key="d5">8.0</data>
      <data key="d6">The module functools provides utilities that enhance the features of functions in Python programming.</data>
      <data key="d7">function enhancement, programming utility</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="retries" target="Agent">
      <data key="d5">14.0</data>
      <data key="d6">Retries define the persistence of the Agent in executing tasks, helping to enhance its reliability and error handling.&lt;SEP&gt;The Agent incorporates the retries setting to manage attempts in executing operations or recovering from failures.</data>
      <data key="d7">execution attempts, error handling&lt;SEP&gt;task reliability, error management</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="name" target="increment">
      <data key="d5">9.0</data>
      <data key="d6">The increment operation uses name as a parameter, indicating its purpose of applying the increment to a specific metric.</data>
      <data key="d7">parameter usage, function execution</data>
      <data key="d8">chunk-88aa29b286377569bc39ad941b6e9f6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="name" target="sums_by_name">
      <data key="d5">8.0</data>
      <data key="d6">sums_by_name aggregates data and uses name as one of its key components to access summed values.</data>
      <data key="d7">data aggregation, key access</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="deps_type" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">Deps type gives structure to how the Agent utilizes dependencies, directly influencing its performance and flexibility.</data>
      <data key="d7">dependency management, performance optimization</data>
      <data key="d8">chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolPrepareFunc" target="GenerateToolJsonSchema">
      <data key="d5">5.0</data>
      <data key="d6">ToolPrepareFunc can be customized to work with different schema generators, including GenerateToolJsonSchema for tool definitions.</data>
      <data key="d7">customization, schema generation</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolPrepareFunc" target="ToolDefinition">
      <data key="d5">6.0</data>
      <data key="d6">ToolPrepareFunc methods can be used within ToolDefinition to customize tool registration based on execution requirements.</data>
      <data key="d7">function registration, customization</data>
      <data key="d8">chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DocstringFormat" target="ToolDefinition">
      <data key="d5">8.0</data>
      <data key="d6">ToolDefinition utilizes DocstringFormat to ensure consistent and readable formatting of function documentation.</data>
      <data key="d7">documentation, formatting</data>
      <data key="d8">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Function Frame" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">Function Frame is referenced within the Agent class for inferring its name when executing operations.</data>
      <data key="d7">execution context, introspection</data>
      <data key="d8">chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Function" target="Max Retries">
      <data key="d5">7.0</data>
      <data key="d6">Max Retries determines how many times a Function can be retried in case of execution failures, impacting its reliability.</data>
      <data key="d7">error handling, function execution</data>
      <data key="d8">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Function" target="Takes Context">
      <data key="d5">6.0</data>
      <data key="d6">Takes Context is a parameter associated with Function that determines whether it receives contextual information for its execution.</data>
      <data key="d7">parameter settings, context handling</data>
      <data key="d8">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GenerateToolJsonSchema" target="Tool Definition">
      <data key="d5">10.0</data>
      <data key="d6">GenerateToolJsonSchema is utilized to automatically create a JSON schema for the Tool Definition, streamlining schema generation.</data>
      <data key="d7">schema creation</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dependency Management" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Agent is involved in managing dependencies effectively to ensure smooth operation of tools and functions.</data>
      <data key="d7">dependency management, operational efficiency</data>
      <data key="d8">chunk-09588c5157091a4aa47d5c46bda7856c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerStdio" target="Agent">
      <data key="d5">24.0</data>
      <data key="d6">MCPServerStdio is utilized by the Agent class to manage server processes and asynchronous contexts.&lt;SEP&gt;The Agent utilizes MCPServerStdio to manage input/output operations during its execution.</data>
      <data key="d7">class interaction, async management&lt;SEP&gt;interaction, process management</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerStdio" target="ToolDefinition">
      <data key="d5">7.0</data>
      <data key="d6">MCPServerStdio may utilize ToolDefinition to define the tools available during the server session.</data>
      <data key="d7">tool management, definition usage</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerStdio" target="ClientSession">
      <data key="d5">8.0</data>
      <data key="d6">ClientSession is utilized by MCPServerStdio to establish the connection with the MCP server for communication.</data>
      <data key="d7">session management, server communication</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerStdio" target="MCP">
      <data key="d5">14.0</data>
      <data key="d6">MCPServerStdio operates under the Model Context Protocol, adhering to its specifications for server management.</data>
      <data key="d7">protocol adherence, server management</data>
      <data key="d8">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerStdio" target="async context manager">
      <data key="d5">9.0</data>
      <data key="d6">The async context manager is used to start and stop the MCPServerStdio server, managing its lifecycle efficiently.</data>
      <data key="d7">resource management, lifecycle control</data>
      <data key="d8">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerStdio" target="stdio">
      <data key="d5">7.0</data>
      <data key="d6">MCPServerStdio utilizes stdio for managing standard input and output for server communication.</data>
      <data key="d7">communication method, process management</data>
      <data key="d8">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerStdio" target="subprocess">
      <data key="d5">9.0</data>
      <data key="d6">MCPServerStdio runs the server as a subprocess, allowing for concurrent execution.</data>
      <data key="d7">execution model, process management</data>
      <data key="d8">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function_frame" target="self">
      <data key="d5">16.0</data>
      <data key="d6">function_frame provides the context in which self is being used, facilitating access to attributes and methods.&lt;SEP&gt;self is used within a function_frame to reference the instance of the class executing the method.</data>
      <data key="d7">contextual relationship, class instance&lt;SEP&gt;instance reference, method context</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function_frame" target="parent_frame">
      <data key="d5">16.0</data>
      <data key="d6">function_frame provides context that leads to parent_frame, enabling access to previous calls in the execution stack.&lt;SEP&gt;parent_frame refers to the frame that called function_frame, creating a link in the call stack for context retrieval.</data>
      <data key="d7">call hierarchy, context management&lt;SEP&gt;call hierarchy, execution context</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="parent_frame" target="locals">
      <data key="d5">8.0</data>
      <data key="d6">parent_frame can access its locals, which store variables defined within that particular call context.</data>
      <data key="d7">scope access, variable storage</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="parent_frame" target="globals">
      <data key="d5">6.0</data>
      <data key="d6">parent_frame accesses globals when local variables are not found, providing a broader variable scope.</data>
      <data key="d7">scope resolution, hierarchy effect</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="parent_frame" target="f_locals">
      <data key="d5">8.0</data>
      <data key="d6">f_locals allows access to local variables in the parent frame, enhancing the scope visibility for the current frame.</data>
      <data key="d7">variable access, scope visibility</data>
      <data key="d8">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="parent_frame" target="f_globals">
      <data key="d5">8.0</data>
      <data key="d6">f_globals enables the current frame to access global variables defined outside the local context of the function.</data>
      <data key="d7">global variable access, scope management</data>
      <data key="d8">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="_system_prompt.SystemPromptRunner">
      <data key="d5">7.0</data>
      <data key="d6">self refers to the instance that holds references to system prompt runners, such as _system_prompt.SystemPromptRunner.</data>
      <data key="d7">instance management, object-oriented programming</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="assert">
      <data key="d5">8.0</data>
      <data key="d6">assert is utilized within the context of self to ensure certain conditions hold true, indicating a validation step.</data>
      <data key="d7">condition validation, programming</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="_graph_run">
      <data key="d5">8.0</data>
      <data key="d6">self is involved in managing and coordinating operations with _graph_run, which oversees the execution of graph-related tasks.</data>
      <data key="d7">process management, coordination</data>
      <data key="d8">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="End Node">
      <data key="d5">7.0</data>
      <data key="d6">self coordinates the actions that lead to the identification and handling of an End Node, effectively managing the conclusion of processes.</data>
      <data key="d7">process management, conclusion handling</data>
      <data key="d8">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="_state">
      <data key="d5">8.0</data>
      <data key="d6">The method 'usage' returns data based on the current state of 'self', which is an instance of an organization."|</data>
      <data key="d7">method interaction, internal state</data>
      <data key="d8">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="all_messages">
      <data key="d5">8.0</data>
      <data key="d6">self is the caller that invokes the all_messages method to retrieve the message history."|</data>
      <data key="d7">method invocation, object interaction</data>
      <data key="d8">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="_stream_response">
      <data key="d5">8.0</data>
      <data key="d6">The self instance manages the _stream_response attribute, which contains the streaming response data relevant for processing and validation.</data>
      <data key="d7">data management, class attributes</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="_result_schema">
      <data key="d5">9.0</data>
      <data key="d6">The self instance utilizes the _result_schema attribute to validate incoming structured results against established criteria.</data>
      <data key="d7">validation, schema utilization</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="_result_validators">
      <data key="d5">8.0</data>
      <data key="d6">The self instance applies the _result_validators collection to ensure that the responses meet quality checks before being returned.</data>
      <data key="d7">data quality, validation process</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="exceptions.UserError">
      <data key="d5">8.0</data>
      <data key="d6">The exceptions.UserError event can be raised by methods within the self instance to indicate improper usage or invalid states in streaming operations.</data>
      <data key="d7">error handling, user feedback</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="get_data">
      <data key="d5">9.0</data>
      <data key="d6">The self instance controls the execution of the get_data function, which completes the response streaming and performs validation.</data>
      <data key="d7">control flow, method interaction</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="msg">
      <data key="d5">6.0</data>
      <data key="d6">The variable self is used to reference the object instance that utilizes msg for streaming."|&gt;"object reference, message handling</data>
      <data key="d7">6</data>
      <data key="d8">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="requests">
      <data key="d5">8.0</data>
      <data key="d6">Within the method context, self refers to the instance that includes the requests count, indicating which object's metrics are being manipulated.</data>
      <data key="d7">instance reference, method operational</data>
      <data key="d8">chunk-5f42fa22c7c2c65ec3a39c77ddb963a0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">Self acts as the context within which the model responses are generated, influencing how methods are executed.</data>
      <data key="d7">context, instance</data>
      <data key="d8">chunk-3d1c7209debb23a47e4399b20a981057</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="renderer">
      <data key="d5">8.0</data>
      <data key="d6">self utilizes the renderer to build and format the evaluation report based on provided configurations.</data>
      <data key="d7">report generation, formatting</data>
      <data key="d8">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="AbstractContextManager">
      <data key="d5">5.0</data>
      <data key="d6">self may be associated with methods of AbstractContextManager to manage resources effectively during graph execution.</data>
      <data key="d7">resource management, object orientation</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self" target="BaseNode">
      <data key="d5">10.0</data>
      <data key="d6">self is used within the methods of BaseNode to reference the instance on which the methods are operating.</data>
      <data key="d7">instance reference, object-oriented programming</data>
      <data key="d8">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_tool_name" target="result_tool_description">
      <data key="d5">8.0</data>
      <data key="d6">result_tool_name and result_tool_description are interconnected, with the latter explaining the functionality and purpose of the former.</data>
      <data key="d7">naming convention, descriptive linkage</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_tool_name" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The result tool name indicates which specific tool is being called by the Agent to produce final outputs.</data>
      <data key="d7">tool selection, output generation</data>
      <data key="d8">chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_tool_description" target="Agent">
      <data key="d5">23.0</data>
      <data key="d6">Result tool description provides context and functionality insights for the tools used by the Agent, impacting efficiency.&lt;SEP&gt;result_tool_description is a parameter that defines part of the configuration for the Agent during its creation.&lt;SEP&gt;result_tool_description provides essential information regarding the final output of the Agent, thus enhancing its context and utility.</data>
      <data key="d7">configuration parameter, operational context&lt;SEP&gt;parameter, configuration&lt;SEP&gt;tool functionality, operational context</data>
      <data key="d8">chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="defer_model_check" target="Agent">
      <data key="d5">13.0</data>
      <data key="d6">The agent may choose to defer model validation checks, impacting how operational integrity is ensured during execution.&lt;SEP&gt;defer_model_check allows flexibility in when the Agent evaluates its model, which can be beneficial during testing or configuration.</data>
      <data key="d7">flexibility, model evaluation&lt;SEP&gt;validation strategy, operational impact</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_retries" target="Agent">
      <data key="d5">15.0</data>
      <data key="d6">result_retries defines how many times the Agent will attempt to validate results, impacting its robustness and error handling.&lt;SEP&gt;result_retries dictates how many attempts the Agent will make if results require validation, thereby affecting its operation.</data>
      <data key="d7">error handling, reliability&lt;SEP&gt;retry logic, operational efficiency</data>
      <data key="d8">chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tools" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">tools are integral to the functionality of the Agent, allowing the agent to perform various tasks as defined by its configuration.</data>
      <data key="d7">functionality, task management</data>
      <data key="d8">chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tools" target="_GeminiRequest">
      <data key="d5">8.0</data>
      <data key="d6">_GeminiRequest may utilize tools defined to enhance or modify the model's capabilities during request handling.</data>
      <data key="d7">request enhancement, tool integration</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="instrument" target="Agent">
      <data key="d5">18.0</data>
      <data key="d6">Instrumentation features allow Agents to automatically incorporate performance monitoring tools into their operations.&lt;SEP&gt;instrument settings can be applied to the Agent for monitoring its activities, aiding in debugging and optimization.</data>
      <data key="d7">monitoring, optimization&lt;SEP&gt;performance tracking, instrumentation</data>
      <data key="d8">chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Name" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">Name serves as the identifier for logging and tracking the Agent within the system, which is crucial for development.</data>
      <data key="d7">identifier, logging</data>
      <data key="d8">chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Type" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">Type serves to define the dependency requirements for the Agent, thus influencing its design and implementation.</data>
      <data key="d7">dependency injection, design influence</data>
      <data key="d8">chunk-cc724d184134671e86784e1ef1d1caf1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Server" target="Agent">
      <data key="d5">17.0</data>
      <data key="d6">An Agent can register and connect to an MCP Server to enhance functionalities and performance through communication.&lt;SEP&gt;The MCP Server interacts with Agents, enabling them to perform tasks and execute commands in a secure manner.</data>
      <data key="d7">communication, functionality enhancement&lt;SEP&gt;server interaction, task execution</data>
      <data key="d8">chunk-ca69f7760206a502c8e51fa924646c33&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Server" target="Python Code">
      <data key="d5">9.0</data>
      <data key="d6">The MCP Server can execute Python Code through the agents that communicate with it.</data>
      <data key="d7">code execution, server functionality</data>
      <data key="d8">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Server" target="Deno">
      <data key="d5">9.0</data>
      <data key="d6">Deno provides the environment for running scripts on the MCP Server, adding security and functionality to code execution.</data>
      <data key="d7">runtime environment, security</data>
      <data key="d8">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Server" target="FastMCP">
      <data key="d5">9.0</data>
      <data key="d6">FastMCP hosts the MCP Server, executing functionalities related to PydanticAI."|&gt;"server hosting, organizational structure</data>
      <data key="d7">9</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Server" target="mcp_server.py">
      <data key="d5">10.0</data>
      <data key="d6">The mcp_server.py script serves as the implementation of the MCP Server."|&gt;"script implementation, event facilitator</data>
      <data key="d7">10</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Server" target="mcp_client.py">
      <data key="d5">9.0</data>
      <data key="d6">The mcp_client.py script communicates with the MCP Server to perform tasks."|&gt;"client-server interaction, functional relationship</data>
      <data key="d7">9</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model" target="Agent">
      <data key="d5">35.0</data>
      <data key="d6">Model parameter is essential for the Agent to determine which specific AI language model will be invoked for processing user prompts.&lt;SEP&gt;The Agent operates based on the model, utilizing its structure for performing tasks and producing outputs.&lt;SEP&gt;The Agent utilizes a specific model for task execution, which drives its capacity to generate responses based on inputs.&lt;SEP&gt;The agent operates based on a model that represents the underlying logic and functionality necessary for its tasks.</data>
      <data key="d7">AI model specification, processing context&lt;SEP&gt;functionality, computational logic&lt;SEP&gt;model utilization, AI processing&lt;SEP&gt;operational reliance, task execution</data>
      <data key="d8">chunk-263f86d77c473effe9073f383e8bfb9e&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_type" target="Agent">
      <data key="d5">15.0</data>
      <data key="d6">Result_type is a flexible parameter passed to the Agent's run method, allowing customization of the output format based on user needs.&lt;SEP&gt;The result type specifies how the Agent's outputs are structured, ensuring proper data handling.</data>
      <data key="d7">custom output, user customization&lt;SEP&gt;output structure, data validation</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-c8a1efe96649b981276d2273ee539b22</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="instrument_all" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The instrument_all method is associated with the Agent class, enabling all agents to adopt specific instrumentation settings.</data>
      <data key="d7">method association, instrumentation setup</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="message_history" target="Agent">
      <data key="d5">17.0</data>
      <data key="d6">Message_history aids the Agent by preserving past interactions, thus maintaining contextual relevance during conversations.&lt;SEP&gt;The Agent relies on message history to maintain context and continuity in conversations with users.</data>
      <data key="d7">context preservation, interaction history&lt;SEP&gt;context retention, conversation tracking</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="message_history" target="GraphAgentState">
      <data key="d5">8.0</data>
      <data key="d6">message_history is part of GraphAgentState, storing exchanges that preserve the agent's conversational context.</data>
      <data key="d7">state management, contextual awareness</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="infer_name" target="Agent">
      <data key="d5">12.0</data>
      <data key="d6">Infer_name helps the Agent determine its identity dynamically during operations, enhancing usability in various contexts.&lt;SEP&gt;The Agent can determine its name based on the execution context if infer_name is enabled, impacting its identity usage.</data>
      <data key="d7">dynamic identification, usability enhancement&lt;SEP&gt;identity definition, automatic inference</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-845fe9f41721b0a309c27bcf17a16a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunResult" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The Agent processes User Prompts and produces AgentRunResults as outputs of its operations.</data>
      <data key="d7">process-output relationship</data>
      <data key="d8">chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunResult" target="self._graph_run">
      <data key="d5">15.0</data>
      <data key="d6">AgentRunResult allows access to performance metrics captured during the execution managed by self._graph_run.&lt;SEP&gt;self._graph_run manages the state and execution flow that culminates in generating an AgentRunResult output.</data>
      <data key="d7">performance metrics, execution overview&lt;SEP&gt;state management, execution flow</data>
      <data key="d8">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunResult" target="usage()">
      <data key="d5">9.0</data>
      <data key="d6">usage() provides insights into the statistics associated with the AgentRunResult, reflecting on the usage of resources and processes involved.</data>
      <data key="d7">resource monitoring, statistical insights</data>
      <data key="d8">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunResult" target="new_messages_json">
      <data key="d5">8.0</data>
      <data key="d6">new_messages_json is used to convert the result of an agent run into JSON bytes, serving as an output format.</data>
      <data key="d7">output formatting, agent interaction</data>
      <data key="d8">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentRunResult" target="new_messages">
      <data key="d5">8.0</data>
      <data key="d6">AgentRunResult and new_messages are both involved in processing the results from an agent's operation.</data>
      <data key="d7">result processing, operational flow</data>
      <data key="d8">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="None" target="str">
      <data key="d5">7.0</data>
      <data key="d6">The data type str can be assigned a value of None when defining default values for function arguments or class attributes.</data>
      <data key="d7">default value, type association</data>
      <data key="d8">chunk-1c5ccdde7a3769386d9598c66c9e6650</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="None" target="Literal">
      <data key="d5">6.0</data>
      <data key="d6">The constant None is often cast in programming as a value within Literal types, as it is one of the potential values for a variable of Literal type.</data>
      <data key="d7">type constraint, value representation</data>
      <data key="d8">chunk-1c5ccdde7a3769386d9598c66c9e6650</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserPrompt" target="UserContent">
      <data key="d5">8.0</data>
      <data key="d6">UserPrompt is part of the UserContent that provides the input for the Agent's processing.</data>
      <data key="d7">input structure</data>
      <data key="d8">chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunResultDataT" target="run_sync">
      <data key="d5">8.0</data>
      <data key="d6">RunResultDataT is the expected output type when run_sync is performed by the Agent.</data>
      <data key="d7">data type, output expectation</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunResultDataT" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">RunResultDataT is the output data type that the Agent returns after processing UserContent.</data>
      <data key="d7">output type</data>
      <data key="d8">chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run_sync" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The run_sync method is a functionality of the Agent that executes operations based on user prompts.</data>
      <data key="d7">method functionality, agent operation</data>
      <data key="d8">chunk-5dd90ca26b9a717c2bb167611fc310a1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run_sync" target="BaseNode">
      <data key="d5">8.0</data>
      <data key="d6">The run_sync function takes a BaseNode as input to define the entry point for synchronous graph execution.</data>
      <data key="d7">execution initiation, graph processing</data>
      <data key="d8">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run_sync" target="pydantic_graph/pydantic_graph/graph.py">
      <data key="d5">9.0</data>
      <data key="d6">run_sync is defined in pydantic_graph/pydantic_graph/graph.py, showing its implementation within the graph management module.</data>
      <data key="d7">implementation reference, code structure</data>
      <data key="d8">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Async Context Manager" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">Async Context Manager allows the Agent to conduct operations without blocking the main thread, enhancing efficiency.</data>
      <data key="d7">asynchronous operation</data>
      <data key="d8">chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserContent" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Agent processes UserContent to interact with users and produce results.</data>
      <data key="d7">process-response</data>
      <data key="d8">chunk-632e225b36efe3528b4513b2ab669d21</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserContent" target="run_stream">
      <data key="d5">9.0</data>
      <data key="d6">UserContent is the input that triggers the run_stream operation, initiating interaction with the Agent.</data>
      <data key="d7">user input, interaction start</data>
      <data key="d8">chunk-ed10d031435c9386fd353a8330563748</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AbstractAsyncContextManager" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The Agent is built on the principles of AbstractAsyncContextManager, enabling it to manage asynchronous operations effectively.</data>
      <data key="d7">asynchronous management, foundational structure</data>
      <data key="d8">chunk-ed10d031435c9386fd353a8330563748</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AbstractAsyncContextManager" target="BaseStatePersistence">
      <data key="d5">8.0</data>
      <data key="d6">AbstractAsyncContextManager is utilized within BaseStatePersistence to manage asynchronous operations for state snapshots.</data>
      <data key="d7">async management, state handling</data>
      <data key="d8">chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="run_stream" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The run_stream event is a function of the Agent that initiates the processing of user prompts in an asynchronous manner.</data>
      <data key="d7">event execution, prompt processing</data>
      <data key="d8">chunk-ed10d031435c9386fd353a8330563748</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Context Manager" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The context manager is utilized by the agent to manage dependencies and models during task execution.</data>
      <data key="d7">resource management, software functionality</data>
      <data key="d8">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Context Manager" target="AbstractContextManager">
      <data key="d5">7.0</data>
      <data key="d6">AbstractContextManager serves as a foundational class for creating context managers, facilitating resource management during execution.</data>
      <data key="d7">resource management, programming structure</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Testing" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Testing is an essential process to ensure that the agent's functionality is working as intended, potentially involving context managers.</data>
      <data key="d7">evaluation process, software reliability</data>
      <data key="d8">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="override_deps" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">Override_deps provides a way for the agent to manage dependencies temporarily, enhancing flexibility in execution contexts.</data>
      <data key="d7">flexibility, resource management</data>
      <data key="d8">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="override_model" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">Override_model allows the agent to adapt its operating model for specific scenarios, showcasing its adaptability.</data>
      <data key="d7">adaptability, operational effectiveness</data>
      <data key="d8">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="yield" target="context manager">
      <data key="d5">9.0</data>
      <data key="d6">Yield is used within a context manager to control the execution flow, allowing for setup and teardown around specific code blocks.</data>
      <data key="d7">execution control, code management</data>
      <data key="d8">chunk-263f86d77c473effe9073f383e8bfb9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_system_prompt.SystemPromptFunc" target="runner">
      <data key="d5">9.0</data>
      <data key="d6">runner is an instance associated with a specific function created by _system_prompt.SystemPromptFunc.</data>
      <data key="d7">execution management, function handling</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="dynamic" target="_system_prompt_dynamic_functions">
      <data key="d5">8.0</data>
      <data key="d6">dynamic indicates if functions should be added to the _system_prompt_dynamic_functions, affecting their treatment.</data>
      <data key="d7">dynamic behavior, function management</data>
      <data key="d8">chunk-3480f7d762a13a5f3859e9d819c5ecd1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool Prepare Function" target="Tool Definition">
      <data key="d5">7.0</data>
      <data key="d6">Tool Prepare Function customizes the tool definition process, influencing how tools are described and executed.</data>
      <data key="d7">customization, execution process</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Func" target="Sync Function">
      <data key="d5">8.0</data>
      <data key="d6">Sync Functions are a subset of Func that are executed in a synchronous manner, impacting how they are registered and called.</data>
      <data key="d7">execution type</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Func" target="Async Function">
      <data key="d5">8.0</data>
      <data key="d6">Async Functions belong to the category of Func, crafted for asynchronous execution to enhance performance and responsiveness.</data>
      <data key="d7">execution type</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Func" target="parameter_descriptions">
      <data key="d5">8.0</data>
      <data key="d6">Parameter Descriptions are linked to Func by providing detailed information necessary for understanding how to use the function effectively.</data>
      <data key="d7">function documentation</data>
      <data key="d8">chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Async Function" target="RunContext">
      <data key="d5">8.0</data>
      <data key="d6">Async Function operates within the RunContext to manage timing and execution flow effectively in an asynchronous environment.</data>
      <data key="d7">asynchronous execution, context</data>
      <data key="d8">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolFuncPlain" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">ToolFuncPlain functions are registered within an Agent, showing their importance in tool management.</data>
      <data key="d7">tool registration, framework integration</data>
      <data key="d8">chunk-18a72d852226f42ca9377ccc8f1d77d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolFuncPlain" target="RunContext[int]">
      <data key="d5">7.0</data>
      <data key="d6">ToolFuncPlain functions may optionally utilize RunContext[int] to manage execution context, enhancing flexibility in agent operations.</data>
      <data key="d7">function utility, execution context</data>
      <data key="d8">chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentNode" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Agent utilizes AgentNode to create a computational framework for decision making and processing in AI tasks.</data>
      <data key="d7">agent functionality, computational structure</data>
      <data key="d8">chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AgentNode" target="End">
      <data key="d5">16.0</data>
      <data key="d6">AgentNode represents a step that can lead up to an End node signifying the completion of processing for that agent.&lt;SEP&gt;AgentNode runs an agent, which can lead to an End node signifying the conclusion of that agent's execution.</data>
      <data key="d7">agent process, execution cycle&lt;SEP&gt;agent process, execution flow</data>
      <data key="d8">chunk-4d3f57edc4c3f799d03bb18401fc8f09</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GenerateJsonSchema" target="ToolDefinition">
      <data key="d5">9.0</data>
      <data key="d6">GenerateJsonSchema works in conjunction with ToolDefinition to ensure that tools comply with the defined JSON schema format.</data>
      <data key="d7">schema validation, tool structure</data>
      <data key="d8">chunk-74d8bed4a268265e628208d04e7ee018</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_agent_graph.CallToolsNode" target="_agent_graph.UserPromptNode">
      <data key="d5">8.0</data>
      <data key="d6">The CallToolsNode operates on responses generated from UserPromptNode inputs, indicating the user prompt has to reach an endpoint through a call to a tool.</data>
      <data key="d7">user interaction, tool execution</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_agent_graph.UserPromptNode" target="_agent_graph.End">
      <data key="d5">9.0</data>
      <data key="d6">The UserPromptNode initiates the process that leads to an End node indicating completion of the agent's response cycle.</data>
      <data key="d7">process flow, user prompt</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_agent_graph.End" target="pydantic_ai.agent">
      <data key="d5">8.0</data>
      <data key="d6">The pydantic_ai.agent module handles scenarios ending in the End node where results are returned to users.</data>
      <data key="d7">module responsibility, outcome handling</data>
      <data key="d8">chunk-ce01e842b7551c639f7aa44b6b7502a6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:gpt-4o" target="openai:gpt-4-u-vision-preview">
      <data key="d5">9.0</data>
      <data key="d6">These entries indicate OpenAI’s adaptations focusing on combining visual capabilities with their language AI outputs.</data>
      <data key="d7">multi-modal AI, visual integration</data>
      <data key="d8">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:gpt-4o" target="generate_dataset">
      <data key="d5">9.0</data>
      <data key="d6">The openai:gpt-4o model is used to generate a dataset in the generate_dataset event, illustrating its application in dataset creation.</data>
      <data key="d7">model application, dataset generation</data>
      <data key="d8">chunk-dcc0ef06948f95ef73eef5b238e34d40</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:gpt-4o" target="KnownModelName">
      <data key="d5">8.0</data>
      <data key="d6">KnownModelName specifies the openai:gpt-4o as a model used for generating datasets, providing a direct connection between the type of organization and its specific implementation.</data>
      <data key="d7">organization type, model specification</data>
      <data key="d8">chunk-dcc0ef06948f95ef73eef5b238e34d40</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:gpt-4o" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">OpenAI GPT-4o is embedded within the PydanticAI framework to facilitate language processing capabilities and enhance user interactions.</data>
      <data key="d7">AI integration, language processing</data>
      <data key="d8">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Example" target="France">
      <data key="d5">6.0</data>
      <data key="d6">The organization Example is involved in various initiatives pertaining to countries like France.</data>
      <data key="d7">international collaboration, organizational initiatives</data>
      <data key="d8">chunk-f05343baae3f62f1bed61aebb48d39ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="France" target="pydantic_ai">
      <data key="d5">5.0</data>
      <data key="d6">pydantic_ai may support applications and organizations operating within France or related to French contexts.</data>
      <data key="d7">international application, local engagement</data>
      <data key="d8">chunk-f05343baae3f62f1bed61aebb48d39ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self._graph_run" target="End">
      <data key="d5">6.0</data>
      <data key="d6">self._graph_run facilitates transitions within the graph structure that can lead to an End node, indicating termination points.</data>
      <data key="d7">graph structure, transition management</data>
      <data key="d8">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent Node" target="next_node">
      <data key="d5">7.0</data>
      <data key="d6">The next_node variable is used to retrieve and reference the subsequent Agent Node during graph traversal, facilitating the operation of agents.</data>
      <data key="d7">graph traversal, sequential processing</data>
      <data key="d8">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="End Node" target="assertion">
      <data key="d5">10.0</data>
      <data key="d6">The assertion checks if the next_node is an End Node to determine if the graph processing should stop or continue.</data>
      <data key="d7">flow control, termination logic</data>
      <data key="d8">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="next_node" target="_graph_run">
      <data key="d5">9.0</data>
      <data key="d6">_graph_run interacts with next_node to execute the next operation in the graph, ensuring continuous processing of nodes.</data>
      <data key="d7">operation continuity, processing flow</data>
      <data key="d8">chunk-f3f3c443aa87c97f7f7ea1e79e0dcd7f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self._state" target="return statement">
      <data key="d5">10.0</data>
      <data key="d6">The return statement is a command that sends back the result of 'self._state.usage', indicating a relationship of input and output operations."|</data>
      <data key="d7">output operation, function interaction</data>
      <data key="d8">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="all_messages" target="is_complete">
      <data key="d5">7.0</data>
      <data key="d6">The function all_messages checks the is_complete attribute to determine if the message history can be retrieved.</data>
      <data key="d7">status checking, message retrieval</data>
      <data key="d8">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_tool_return_content" target="new_messages">
      <data key="d5">7.0</data>
      <data key="d6">result_tool_return_content can influence what new messages are generated by the new_messages method."|</data>
      <data key="d7">parameter impact, method output</data>
      <data key="d8">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="result_tool_return_content" target="pydantic_ai">
      <data key="d5">7.0</data>
      <data key="d6">result_tool_return_content is a part of the API response structure defined within the pydantic_ai library.</data>
      <data key="d7">API structure, library functionality</data>
      <data key="d8">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="new_messages" target="new_messages_json">
      <data key="d5">9.0</data>
      <data key="d6">new_messages provides the data that new_messages_json converts to JSON format for data exchange."|</data>
      <data key="d7">data conversion, method chaining</data>
      <data key="d8">chunk-7024ed9fea1c2b8447084fcacb8e7cfc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="new_messages_json" target="JSON bytes">
      <data key="d5">9.0</data>
      <data key="d6">new_messages_json outputs data in JSON bytes as part of the messaging process.</data>
      <data key="d7">data format, communication protocol</data>
      <data key="d8">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tracer" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The Agent uses the Tracer for tracking events during AI tasks.</data>
      <data key="d7">event tracking, performance monitoring</data>
      <data key="d8">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EventLogger" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">The Agent utilizes the EventLogger to log operational events for monitoring purposes.</data>
      <data key="d7">event logging, operational monitoring</data>
      <data key="d8">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai/pydantic_ai/agent.py" target="pydantic_ai">
      <data key="d5">9.0</data>
      <data key="d6">The agent.py file is a core part of the pydantic_ai organization, implementing its agent capabilities.</data>
      <data key="d7">core functionality, organizational structure</data>
      <data key="d8">chunk-15fc395902f1d91634e46bd619e7e35a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TracerProvider" target="logfire.configure()">
      <data key="d5">7.0</data>
      <data key="d6">The logfire.configure() function is used to set the global TracerProvider in OpenTelemetry.</data>
      <data key="d7">configuration, setup</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TracerProvider" target="get_tracer_provider()">
      <data key="d5">8.0</data>
      <data key="d6">get_tracer_provider() returns the TracerProvider which is essential for managing telemetry tracing."\</data>
      <data key="d7">functionality, management</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TracerProvider" target="InstrumentedModel">
      <data key="d5">8.0</data>
      <data key="d6">InstrumentedModel uses TracerProvider to obtain tracers for instrumentation in requests.</data>
      <data key="d7">instrumentation, tracing</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EventLoggerProvider" target="logfire.configure()">
      <data key="d5">7.0</data>
      <data key="d6">The logfire.configure() function is also used to set the global EventLoggerProvider in OpenTelemetry.</data>
      <data key="d7">configuration, setup</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EventLoggerProvider" target="get_event_logger_provider()">
      <data key="d5">8.0</data>
      <data key="d6">get_event_logger_provider() retrieves the EventLoggerProvider which manages event logging for telemetry."\</data>
      <data key="d7">functionality, management</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EventLoggerProvider" target="InstrumentedModel">
      <data key="d5">8.0</data>
      <data key="d6">InstrumentedModel uses EventLoggerProvider to obtain loggers for event logging during requests.</data>
      <data key="d7">event logging, monitoring</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logs" target="event_mode">
      <data key="d5">9.0</data>
      <data key="d6">Logs are one of the formats in which events can be emitted, categorized under event modes in OpenTelemetry.</data>
      <data key="d7">format, event emission</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="attributes" target="event_mode">
      <data key="d5">9.0</data>
      <data key="d6">Attributes are another format for emitting events in OpenTelemetry, related to the event mode configuration.</data>
      <data key="d7">format, event emission</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="attributes" target="operation">
      <data key="d5">8.0</data>
      <data key="d6">Attributes define the specific characteristics and parameters needed to execute an operation within the AI model system.</data>
      <data key="d7">configuration, operation parameters</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="attributes" target="OutputT">
      <data key="d5">6.0</data>
      <data key="d6">OutputT has associated attributes which explain the context of the task results, linking the output to its characteristics.</data>
      <data key="d7">output context, attribute association</data>
      <data key="d8">chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="event_mode" target="attributes mode">
      <data key="d5">7.0</data>
      <data key="d6">The attributes mode is a specific setting under the event_mode that defines how events should be emitted.</data>
      <data key="d7">configuration, sub-mode</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="event_mode" target="logs mode">
      <data key="d5">7.0</data>
      <data key="d6">Logs mode is another specific setting under the event_mode that delineates a different way of handling event emission.</data>
      <data key="d7">configuration, sub-mode</data>
      <data key="d8">chunk-21a3cb379899823f20a4957eba46c558</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="event_mode" target="InstrumentedModel">
      <data key="d5">9.0</data>
      <data key="d6">The event_mode in InstrumentedModel dictates how events are emitted and logged during processing.</data>
      <data key="d7">configuration, processing mode</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="message" target="UserError">
      <data key="d5">16.0</data>
      <data key="d6">UserError captures a message describing the mistake made by the application developer.</data>
      <data key="d7">error handling, developer feedback</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="message" target="timestamp">
      <data key="d5">9.0</data>
      <data key="d6">The message contains a timestamp indicating when the streaming response was generated."|&gt;"message metadata, response timing</data>
      <data key="d7">9</data>
      <data key="d8">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserError" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">UserError is part of the pydantic_ai_slim library's framework for managing application errors.</data>
      <data key="d7">error management, library functionality</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserError" target="Bedrock Provider">
      <data key="d5">9.0</data>
      <data key="d6">UserError is raised by the Bedrock Provider when there is a problem with user input during initialization.</data>
      <data key="d7">error handling, user input validation</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserError" target="GroqProvider">
      <data key="d5">18.0</data>
      <data key="d6">GroqProvider raises UserError when the necessary API key for accessing the Groq API is not provided.&lt;SEP&gt;GroqProvider raises UserError when the necessary API key is not provided or other user-related issues arise during setup.</data>
      <data key="d7">error handling, API access&lt;SEP&gt;error handling, user input validation</data>
      <data key="d8">chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserError" target="GROQ_API_KEY">
      <data key="d5">9.0</data>
      <data key="d6">UserError signifies an issue related to the absence of GROQ_API_KEY, indicating a dependency on the variable for working with the Groq provider.</data>
      <data key="d7">authentication issue, dependency</data>
      <data key="d8">chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserError" target="http_client">
      <data key="d5">6.0</data>
      <data key="d6">UserError can indicate issues arising from misconfiguration of the http_client, highlighting a connection between error handling and client setup.</data>
      <data key="d7">error handling, client setup</data>
      <data key="d8">chunk-d0eaab0e6f8b6094f0a21fdf7b8a63ad</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserError" target="Cohere Provider">
      <data key="d5">14.0</data>
      <data key="d6">UserError is raised by the Cohere Provider when there is a failure to authenticate, indicating issues with user setup.</data>
      <data key="d7">error handling, user configuration</data>
      <data key="d8">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="UserError" target="CO_API_KEY">
      <data key="d5">8.0</data>
      <data key="d6">UserError may arise from the absence of the CO_API_KEY, linking it to API authentication issues.</data>
      <data key="d7">error management, environment variable</data>
      <data key="d8">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FallbackExceptionGroup" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">FallbackExceptionGroup is part of the exception management strategy in pydantic_ai_slim.</data>
      <data key="d7">error handling, library functionality</data>
      <data key="d8">chunk-93010a3465ed2346e5ca1cbbf11fbc95</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Fallback Models" target="Fallback Systems">
      <data key="d5">8.0</data>
      <data key="d6">Fallback models are a subset of fallback systems that serve as backups when primary systems fail.</data>
      <data key="d7">system redundancy, operational reliability</data>
      <data key="d8">chunk-4379cd84952d0fee03cfcca822fde7ed</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MemoryObjectReceiveStream" target="JSONRPCMessage">
      <data key="d5">9.0</data>
      <data key="d6">MemoryObjectReceiveStream is responsible for receiving JSONRPCMessages, which are crucial for the communication protocol.</data>
      <data key="d7">data handling, communication structure</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MemoryObjectReceiveStream" target="MemoryObjectSendStream">
      <data key="d5">18.0</data>
      <data key="d6">Both streams are integral to the MCP communication protocol, allowing the efficient handling of incoming and outgoing messages.&lt;SEP&gt;Both streams are part of the MCP communication infrastructure, handling message exchange between the client and server.</data>
      <data key="d7">message handling, communication infrastructure&lt;SEP&gt;message handling, communication structure</data>
      <data key="d8">chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MemoryObjectSendStream" target="JSONRPCMessage">
      <data key="d5">9.0</data>
      <data key="d6">MemoryObjectSendStream is used to send JSONRPCMessages to the server, essential for executing requests.</data>
      <data key="d7">data handling, communication structure</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncExitStack" target="raise FallbackExceptionGroup">
      <data key="d5">7.0</data>
      <data key="d6">AsyncExitStack facilitates the proper handling and cleanup of resources when raising a FallbackExceptionGroup.</data>
      <data key="d7">resource management, exception handling</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncExitStack" target="EvaluationReport">
      <data key="d5">8.0</data>
      <data key="d6">AsyncExitStack ensures proper resource management during the evaluation process outlined in the EvaluationReport.</data>
      <data key="d7">resource management, report handling</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncExitStack" target="get_event_loop">
      <data key="d5">13.0</data>
      <data key="d6">The get_event_loop function is used within AsyncExitStack's context to manage asynchronous operations.&lt;SEP&gt;get_event_loop can be used alongside AsyncExitStack to ensure proper management of asynchronous tasks.</data>
      <data key="d7">asynchronous management, utility&lt;SEP&gt;asynchronous management, utility function</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncExitStack" target="evaluate">
      <data key="d5">8.0</data>
      <data key="d6">AsyncExitStack is utilized during the evaluate process to manage resources and handle exits gracefully.</data>
      <data key="d7">resource management, evaluation</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncExitStack" target="task_group_gather">
      <data key="d5">8.0</data>
      <data key="d6">task_group_gather runs multiple asynchronous cases concurrently while using AsyncExitStack for resource management.</data>
      <data key="d7">concurrency, task execution</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncExitStack" target="graph_utils">
      <data key="d5">6.0</data>
      <data key="d6">graph_utils provides utility functions that may assist in tasks linked with AsyncExitStack and NodeSnapshots.</data>
      <data key="d7">utility functions, task management</data>
      <data key="d8">chunk-1874d189c1d13783a0a35c4fe1c8d046</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="list_tools" target="ToolDefinition">
      <data key="d5">8.0</data>
      <data key="d6">The list_tools method retrieves the current ToolDefinitions active on the server, linking them to the implementation and functionality of tools.</data>
      <data key="d7">tool retrieval, server functionality</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="list_tools" target="ClientSession">
      <data key="d5">7.0</data>
      <data key="d6">The list_tools method is executed within the context of a ClientSession, reflecting the active tools during a session.</data>
      <data key="d7">session functionality, tool management</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="call_tool" target="ToolDefinition">
      <data key="d5">8.0</data>
      <data key="d6">The call_tool method requires a ToolDefinition to function, relating them through execution requests to the server.</data>
      <data key="d7">tool execution, functionality link</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="call_tool" target="ClientSession">
      <data key="d5">7.0</data>
      <data key="d6">call_tool is called within the ClientSession to perform actions using the specified tools.</data>
      <data key="d7">session functionality, tool execution</data>
      <data key="d8">chunk-209c7ce456d62ec8593bbdf7185e8894</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerHTTP" target="Agent">
      <data key="d5">36.0</data>
      <data key="d6">The Agent class connects to MCPServerHTTP to manage interactions over HTTP connections.&lt;SEP&gt;The Agent connects to the MCPServerHTTP to facilitate interactions and message exchanges with the server.&lt;SEP&gt;The Agent connects to the MCPServerHTTP to facilitate message exchanges with the server.</data>
      <data key="d7">class interaction, server communication&lt;SEP&gt;client-server interaction, message processing</data>
      <data key="d8">chunk-570bd1954ac1dec6ff5e11d27332192d&lt;SEP&gt;chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerHTTP" target="MCP">
      <data key="d5">16.0</data>
      <data key="d6">MCPServerHTTP is designed to implement the specifications laid out by the Model Context Protocol.</data>
      <data key="d7">protocol implementation, server connection</data>
      <data key="d8">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerHTTP" target="async context manager">
      <data key="d5">9.0</data>
      <data key="d6">The async context manager is employed to set up and maintain the connection with the MCPServerHTTP.</data>
      <data key="d7">resource management, connection setup</data>
      <data key="d8">chunk-570bd1954ac1dec6ff5e11d27332192d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerHTTP" target="pydantic_ai">
      <data key="d5">16.0</data>
      <data key="d6">MCPServerHTTP is designed to connect with and utilize the pydantic_ai library for enhanced functionality in HTTP connections.&lt;SEP&gt;MCPServerHTTP utilizes the pydantic_ai library to facilitate its operations and manage data effectively.</data>
      <data key="d7">library integration, functionality&lt;SEP&gt;library integration, functionality enhancement</data>
      <data key="d8">chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCPServerHTTP" target="sse_client">
      <data key="d5">8.0</data>
      <data key="d6">The sse_client function is used within MCPServerHTTP to establish connections for streaming data.</data>
      <data key="d7">functionality integration, communication setup</data>
      <data key="d8">chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolReturnPart" target="Event">
      <data key="d5">17.0</data>
      <data key="d6">An Event leads to the generation of a ToolReturnPart which records the outcome of user interactions with the AI.&lt;SEP&gt;The Event entity represents user interactions which result in the creation of ToolReturnPart messages, indicating a dependency relationship.</data>
      <data key="d7">event processing, tool interaction&lt;SEP&gt;response generation, user interaction</data>
      <data key="d8">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolReturnPart" target="timestamp">
      <data key="d5">7.0</data>
      <data key="d6">The timestamp is essential for ToolReturnPart to document when the tool's response was generated, ensuring temporal accuracy.</data>
      <data key="d7">time tracking, response logging</data>
      <data key="d8">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolReturnPart" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">Pydantic_ai_slim is utilized in the creation of ToolReturnPart to ensure structured and validated outputs from tool executions.</data>
      <data key="d7">data validation, structured response</data>
      <data key="d8">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolReturnPart" target="dataclass">
      <data key="d5">7.0</data>
      <data key="d6">The ToolReturnPart is defined as a dataclass to leverage automatic method generation for data management.</data>
      <data key="d7">data structure, automatic methods</data>
      <data key="d8">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolReturnPart" target="RetryPromptPart">
      <data key="d5">8.0</data>
      <data key="d6">RetryPromptPart is a type of ToolReturnPart, indicating the need to retry a tool call based on the return response.</data>
      <data key="d7">response handling, tool interaction</data>
      <data key="d8">chunk-795b05e67738f70446b444b9153346b5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolReturnPart" target="ToolCallPart">
      <data key="d5">17.0</data>
      <data key="d6">A ToolCallPart indicates a tool call, and a ToolReturnPart provides the result of that tool call.&lt;SEP&gt;ToolCallParts initiate specific tool actions, while ToolReturnParts provide the results of those actions as part of the overall response to the user.</data>
      <data key="d7">tool interaction</data>
      <data key="d8">chunk-ded0fb4dcc42ebf68653cf3dbd584607&lt;SEP&gt;chunk-10cb9af07d6e8d7fd92ba7df52d5c332</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolReturnPart" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">ToolReturnPart contributes to ModelResponse by indicating the successful return of results from executed tools.</data>
      <data key="d7">response construction, result indication</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolReturnPart" target="weather agent">
      <data key="d5">8.0</data>
      <data key="d6">The weather agent processes responses from ToolReturnPart to present the information fetched from APIs back to the users.</data>
      <data key="d7">response handling, user interaction</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestPart" target="ModelResponsePart">
      <data key="d5">9.0</data>
      <data key="d6">The ModelRequestPart leads to the generation of the ModelResponsePart, representing a request-response cycle in communication.</data>
      <data key="d7">request-response cycle, communication flow</data>
      <data key="d8">chunk-a9c68832b6e867224ec251f612bde7de</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestPart" target="RetryPromptPart">
      <data key="d5">8.0</data>
      <data key="d6">RetryPromptPart is a specific kind of ModelRequestPart indicating a need for the model to retry an operation previously attempted.</data>
      <data key="d7">message structure, operation retry</data>
      <data key="d8">chunk-6917f262ab39c9184d0d42aaa934095b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestPart" target="ToolCallPart">
      <data key="d5">18.0</data>
      <data key="d6">ToolCallPart extends ModelRequestPart, signifying that it is a specific type of model request component.</data>
      <data key="d7">inheritance, category expansion</data>
      <data key="d8">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestPart" target="discriminator">
      <data key="d5">7.0</data>
      <data key="d6">The discriminator is a class attribute present in ModelRequestPart that helps categorize different elements of the request.</data>
      <data key="d7">type identification, categorization</data>
      <data key="d8">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestPart" target="ModelRequestPart Kind">
      <data key="d5">7.0</data>
      <data key="d6">ModelRequestPart Kind is used as a specific identifier for the type of part included in a ModelRequest.</data>
      <data key="d7">specificity, categorization</data>
      <data key="d8">chunk-b76bef668c33d18b6f44870e86c33a1b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponsePart" target="ModelResponse">
      <data key="d5">18.0</data>
      <data key="d6">ModelResponse consists of multiple ModelResponsePart instances which make up the response content.&lt;SEP&gt;ModelResponse is composed of multiple ModelResponsePart elements that form the complete response provided by the model.</data>
      <data key="d7">composition, response structure</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponsePart" target="args_as_dict()">
      <data key="d5">8.0</data>
      <data key="d6">The args_as_dict() method can be used to retrieve the arguments of a ModelResponsePart as a dictionary for easier access.</data>
      <data key="d7">method usage, model convenience</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponsePart" target="args_as_json_str()">
      <data key="d5">8.0</data>
      <data key="d6">The args_as_json_str() method may be utilized to convert the ModelResponsePart data into a JSON string for API interactions.</data>
      <data key="d7">method usage, model convenience</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponsePart" target="has_content()">
      <data key="d5">7.0</data>
      <data key="d6">has_content() is a method that can be utilized to check whether the ModelResponsePart has any data, enhancing data integrity checking.</data>
      <data key="d7">data validation, integrity check</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponsePart" target="ToolCallPart">
      <data key="d5">15.0</data>
      <data key="d6">ModelResponseParts can include ToolCallParts, linking response outputs to specific tool functionalities, indicating a structural relationship.&lt;SEP&gt;ToolCallPart is a subtype of ModelResponsePart representing the tool call elements in the model's output.</data>
      <data key="d7">component relationship, functionality&lt;SEP&gt;response structure, tool output</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670&lt;SEP&gt;chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AudioUrl" target="pydantic_ai_slim">
      <data key="d5">15.0</data>
      <data key="d6">AudioUrl belongs to the pydantic_ai_slim library, providing a way to manage audio file locations within the framework.&lt;SEP&gt;AudioUrl class serves as an example of a component within the pydantic_ai_slim library, specifically focused on audio file handling.</data>
      <data key="d7">software component, library functionality</data>
      <data key="d8">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AudioUrl" target="bedrock_messages">
      <data key="d5">5.0</data>
      <data key="d6">AudioUrl is a potential content type that may be included in bedrock_messages, although currently not supported.</data>
      <data key="d7">content type connection, implementation status</data>
      <data key="d8">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ImageUrl" target="pydantic_ai_slim">
      <data key="d5">15.0</data>
      <data key="d6">ImageUrl class exemplifies another aspect of the pydantic_ai_slim library, addressing image resources and their management.&lt;SEP&gt;ImageUrl is part of the pydantic_ai_slim, aiding in image URL management and media type recognition.</data>
      <data key="d7">software component, library functionality</data>
      <data key="d8">chunk-7d1e8771351fdf8b093090b4c0eb88d6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="content" target="Event">
      <data key="d5">10.0</data>
      <data key="d6">Content is the primary input in an Event, stemming from user prompts intended for the AI system.</data>
      <data key="d7">input source, user intention</data>
      <data key="d8">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="content" target="GeminiPartUnion">
      <data key="d5">8.0</data>
      <data key="d6">GeminiPartUnion includes content as one of its components, signifying that content is a part of the union's structural framework.</data>
      <data key="d7">category inclusion, structural component</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="content" target="parts_manager">
      <data key="d5">7.0</data>
      <data key="d6">The parts_manager is involved in handling content, ensuring proper processing and management of response parts.</data>
      <data key="d7">management function, content handling</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="timestamp" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">ModelResponse incorporates timestamp as a critical part of its data structure, enabling tracking of response timing.</data>
      <data key="d7">data structure, tracking</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="timestamp" target="timezone">
      <data key="d5">9.0</data>
      <data key="d6">Timezone influences the creation of timestamps, ensuring they reflect the correct local time for events.</data>
      <data key="d7">temporal accuracy, event tracking</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="timestamp" target="MistralStreamedResponse">
      <data key="d5">7.0</data>
      <data key="d6">timestamp records when MistralStreamedResponse generates the output, keeping track of response times.</data>
      <data key="d7">time tracking, process monitoring</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="part_kind" target="user-prompt">
      <data key="d5">6.0</data>
      <data key="d6">Part_kind categorizes user prompts, helping determine the type of interaction taking place within the AI system.</data>
      <data key="d7">message categorization, user interaction</data>
      <data key="d8">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="media_type" target="Item">
      <data key="d5">7.0</data>
      <data key="d6">Item may define an entity that includes a media_type attribute which dictates how the content within it is handled in AI processing.</data>
      <data key="d7">content structure, type definition</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="document" target="url">
      <data key="d5">9.0</data>
      <data key="d6">The url instance-attribute provides a direct link to the document, facilitating access to its content.</data>
      <data key="d7">accessibility, resource location</data>
      <data key="d8">chunk-cfb555b3d68851a2fa259151f0745e2a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="url" target="response">
      <data key="d5">8.0</data>
      <data key="d6">The response object is based on the url that is constructed for the image generation request made by the code.</data>
      <data key="d7">response management, URL construction</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="url" target="save_image">
      <data key="d5">9.0</data>
      <data key="d6">The save_image function generates a URL to request an image of the Mermaid diagram from the service.</data>
      <data key="d7">image service, function usage</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="url" target="DOCS_JSON">
      <data key="d5">7.0</data>
      <data key="d6">The URL is derived from the DOCS_JSON structure to form unique identifiers for documentation materials.</data>
      <data key="d7">unique identification, documentation access</data>
      <data key="d8">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="user-prompt" target="Event">
      <data key="d5">17.0</data>
      <data key="d6">User-prompt is the type of message that initiates an Event in the AI's interaction model.&lt;SEP&gt;User-prompt specifies the kind of event related to AI interaction, forming a direct relationship with the Event entity.</data>
      <data key="d7">interaction initiation, event triggering&lt;SEP&gt;interaction, event type</data>
      <data key="d8">chunk-4f4eceed73ea96cd06f2303055d3cd57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ValidationError" target="ErrorDetails">
      <data key="d5">20.0</data>
      <data key="d6">ErrorDetails provide insights into the specific reasons that lead to the raising of a ValidationError, thereby aiding in debugging and error correction.&lt;SEP&gt;ErrorDetails provides the specific reasons for why a ValidationError occurred.</data>
      <data key="d7">detailed errors, validation reasons&lt;SEP&gt;error explanation, detail provision</data>
      <data key="d8">chunk-6917f262ab39c9184d0d42aaa934095b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ValidationError" target="RunContext">
      <data key="d5">7.0</data>
      <data key="d6">ValidationError is relevant in the context of RunContext as it monitors and enforces parameter correctness during execution.</data>
      <data key="d7">error handling, validation</data>
      <data key="d8">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ValidationError" target="from_text">
      <data key="d5">7.0</data>
      <data key="d6">ValidationError can be raised by from_text if the data cannot be parsed into a valid dataset, indicating validation issues.</data>
      <data key="d7">error handling, data validation</data>
      <data key="d8">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ValidationError" target="generate_dataset">
      <data key="d5">10.0</data>
      <data key="d6">ValidationError is relevant when the outputs of generate_dataset do not adhere to the expected format, indicating an issue that needs addressing.</data>
      <data key="d7">error handling, validation issue</data>
      <data key="d8">chunk-dcc0ef06948f95ef73eef5b238e34d40</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="messages.py" target="pydantic_ai_slim">
      <data key="d5">22.0</data>
      <data key="d6">The messages.py file is essential for the pydantic_ai_slim framework, housing definitions for managing AI-related messages.&lt;SEP&gt;The messages.py file is part of the pydantic_ai_slim organization, containing essential structures for managing AI messages.&lt;SEP&gt;messages.py is part of the pydantic_ai_slim codebase, containing functionality that utilizes Pydantic for message handling.</data>
      <data key="d7">code organization, functionality&lt;SEP&gt;file structure, organizational dependency&lt;SEP&gt;source code organization, structure management</data>
      <data key="d8">chunk-6917f262ab39c9184d0d42aaa934095b&lt;SEP&gt;chunk-3c9b6b4ee61bee314208883b07d282a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RetryPromptPart" target="ModelRequestParameters">
      <data key="d5">7.0</data>
      <data key="d6">RetryPromptPart may appear in ModelResponse based on the conditions defined in ModelRequestParameters, indicating retries.</data>
      <data key="d7">request handling, decision-making</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="args_as_dict" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI utilizes the args_as_dict method to enhance the convenience of model interactions.</data>
      <data key="d7">method usage, model convenience</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="args_as_json_str" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI utilizes the args_as_json_str method to facilitate the conversion of arguments into JSON format.</data>
      <data key="d7">method usage, model convenience</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="has_content" target="PydanticAI">
      <data key="d5">7.0</data>
      <data key="d6">The PydanticAI framework implements the has_content method to check for data presence in arguments.</data>
      <data key="d7">method usage, data validation</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="args" target="ModelResponse">
      <data key="d5">6.0</data>
      <data key="d6">The args attribute in ModelResponse allows for storing the input given to the model, connecting inputs to generated outputs.</data>
      <data key="d7">input-output connection, data management</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="args" target="args_as_dict()">
      <data key="d5">8.0</data>
      <data key="d6">args_as_dict() method retrieves the current arguments and represents them in a dictionary, making them accessible for processing.</data>
      <data key="d7">method functionality, argument management</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="args" target="args_as_json_str()">
      <data key="d5">8.0</data>
      <data key="d6">args_as_json_str() converts the current arguments into JSON format, facilitating their use in web applications or APIs.</data>
      <data key="d7">format conversion, data interoperability</data>
      <data key="d8">chunk-2eb1c494e4f675bfe12e4e3047f70efc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ConfigDict" target="TypeAdapter">
      <data key="d5">7.0</data>
      <data key="d6">ConfigDict is used by TypeAdapter to manage serialization settings effectively in the pydantic_ai_slim framework.</data>
      <data key="d7">configuration management, serialization</data>
      <data key="d8">chunk-3c9b6b4ee61bee314208883b07d282a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ConfigDict" target="TypedDict">
      <data key="d5">7.0</data>
      <data key="d6">TypedDict can employ ConfigDict, allowing for customization on how dictionaries behave for the model.</data>
      <data key="d7">data structure, configuration</data>
      <data key="d8">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool_call_id" target="ToolCallPart">
      <data key="d5">15.0</data>
      <data key="d6">The tool_call_id helps to identify and organize ToolCallParts for specific tool calls, illustrating its role in effective tool management.&lt;SEP&gt;tool_call_id is used to identify revisions or specific calls of the ToolCallPart structure, relating it to its versioning.</data>
      <data key="d7">identification, version control&lt;SEP&gt;tracking, organization</data>
      <data key="d8">chunk-1c5ccdde7a3769386d9598c66c9e6650&lt;SEP&gt;chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool_call_id" target="as_part">
      <data key="d5">7.0</data>
      <data key="d6">The tool_call_id assists the as_part method in identifying tool calls and organizing them, indicating their interdependent roles in tool functionality.</data>
      <data key="d7">organizational utility, function tracking</data>
      <data key="d8">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="str" target="Any">
      <data key="d5">6.0</data>
      <data key="d6">The type hint Any allows for variables to be of type str, thereby enhancing type flexibility.</data>
      <data key="d7">type flexibility, programming</data>
      <data key="d8">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="args_delta" target="apply">
      <data key="d5">16.0</data>
      <data key="d6">The args_delta variable is updated using the apply method, indicating a direct relationship between the delta content and its application in tool function.&lt;SEP&gt;The args_delta variable is used as an input in the apply method to update tool arguments, indicating their interdependent roles in managing tool functionalities.</data>
      <data key="d7">data management, function interaction&lt;SEP&gt;data management, function synergy</data>
      <data key="d8">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="part_delta_kind" target="as_part">
      <data key="d5">18.0</data>
      <data key="d6">The part_delta_kind constant is a determinant for the as_part method, influencing how tool call parts are interpreted and processed.&lt;SEP&gt;The part_delta_kind constant is utilized by the as_part method to determine the type of part being converted, indicating their functional relationship in processing data.</data>
      <data key="d7">type identification, method usage&lt;SEP&gt;type identification, processing efficiency</data>
      <data key="d8">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="as_part" target="apply">
      <data key="d5">12.0</data>
      <data key="d6">The apply method can implement changes resulting from as_part, demonstrating a sequential relationship in handling tool responses.&lt;SEP&gt;The apply method can involve components from as_part when integrating changes to response parts, showcasing their collaborative role in response management.</data>
      <data key="d7">method interaction, response management&lt;SEP&gt;method synergy, integration</data>
      <data key="d8">chunk-88a4268ed0561dee36cedfe0e8bce930</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="part_start" target="ModelResponseStreamEvent">
      <data key="d5">7.0</data>
      <data key="d6">ModelResponseStreamEvent represents the start of new parts within the response, aligning with part_start events.</data>
      <data key="d7">response initiation, model structure</data>
      <data key="d8">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponseStreamEvent" target="AsyncIterator">
      <data key="d5">15.0</data>
      <data key="d6">AsyncIterator is utilized in handling ModelResponseStreamEvent instances, allowing for efficient streaming and handling of asynchronous events.&lt;SEP&gt;ModelResponseStreamEvent instances are iterated over using AsyncIterator to handle model response streaming.</data>
      <data key="d7">event handling, asynchronous processing&lt;SEP&gt;stream handling, event processing</data>
      <data key="d8">chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponseStreamEvent" target="ModelMessage">
      <data key="d5">9.0</data>
      <data key="d6">ModelMessage instances are processed within ModelResponseStreamEvent as part of the streaming response mechanism.</data>
      <data key="d7">message handling, response processing</data>
      <data key="d8">chunk-7574296d70c6b864b4a5f29f2b14afe1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionToolCallEvent" target="ToolCallPart">
      <data key="d5">20.0</data>
      <data key="d6">FunctionToolCallEvent initiates a call to a ToolCallPart for specific functions within the model structure.</data>
      <data key="d7">tool invocation, functional interaction</data>
      <data key="d8">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionToolCallEvent" target="FunctionToolResultEvent">
      <data key="d5">18.0</data>
      <data key="d6">FunctionToolResultEvent provides the result for the preceding FunctionToolCallEvent, making them inherently related.</data>
      <data key="d7">tool result, event sequence</data>
      <data key="d8">chunk-16a247913aead6b056519aa63f310789</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="service_account_file" target="service_account_info">
      <data key="d5">16.0</data>
      <data key="d6">Both, service_account_file and service_account_info, relate to the authentication mechanism for Google services, where one contains the credentials, and the other is derived from it.&lt;SEP&gt;service_account_info is derived from the service_account_file, linking them in the context of Google Cloud authentication.</data>
      <data key="d7">authentication, data management&lt;SEP&gt;authentication, security</data>
      <data key="d8">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="service_account_file" target="google">
      <data key="d5">9.0</data>
      <data key="d6">The service_account_file is necessary for authenticating Google services, establishing a direct connection to Google's organizational structure.</data>
      <data key="d7">authentication, cloud services</data>
      <data key="d8">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="project_id" target="google">
      <data key="d5">16.0</data>
      <data key="d6">The Project ID is essential for resource management within Google Cloud, thus linking it to the organizational structure of Google.&lt;SEP&gt;The project_id is essential for managing and structuring resources within Google Cloud services, linking it to the organization itself.</data>
      <data key="d7">resource management, cloud functionality&lt;SEP&gt;resource management, cloud services</data>
      <data key="d8">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="http_client" target="google">
      <data key="d5">17.0</data>
      <data key="d6">The http_client is integral in making requests to Google's cloud services, highlighting its function in accessing organizational offerings.&lt;SEP&gt;The http_client is utilized to make HTTP requests to Google's services, showcasing a practical relationship in implementing Google Cloud solutions.</data>
      <data key="d7">API interaction, service integration&lt;SEP&gt;service integration, API requests</data>
      <data key="d8">chunk-4789175c72630811bc7e624447f539f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="http_client" target="async_client">
      <data key="d5">9.0</data>
      <data key="d6">Asynchronous clients like AsyncOpenAI and Httpx.AsyncClient work together to handle API calls efficiently.</data>
      <data key="d7">asynchronous communication, API integration</data>
      <data key="d8">chunk-72ca9e59f2d2201907ab534202af4af4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="http_client" target="api_version">
      <data key="d5">7.0</data>
      <data key="d6">The api_version must be compatible with http_client to ensure correct functionality when making requests to the Azure API.</data>
      <data key="d7">compatibility, API requests</data>
      <data key="d8">chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="http_client" target="AsyncClientV2">
      <data key="d5">9.0</data>
      <data key="d6">AsyncClientV2 requires an http_client for making HTTP requests, indicating a dependency relationship.</data>
      <data key="d7">client dependency, request handling</data>
      <data key="d8">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Provider" target="BaseClient">
      <data key="d5">7.0</data>
      <data key="d6">The Provider may involve an instance of BaseClient to facilitate client interactions with the Bedrock service.</data>
      <data key="d7">client-server architecture, system design</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Provider" target="GeminiModelName">
      <data key="d5">8.0</data>
      <data key="d6">GeminiModelName is initialized with a Provider for authentication and API access using Google services.</data>
      <data key="d7">model initialization, authentication</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Provider" target="Google API Key">
      <data key="d5">9.0</data>
      <data key="d6">The Google API Key is used by the Provider for authenticating API requests in the Gemini framework.</data>
      <data key="d7">authentication, credential</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Provider" target="Gemini Streamed Response">
      <data key="d5">7.0</data>
      <data key="d6">Gemini Streamed Response interacts with the Provider to manage streamed responses for API calls.</data>
      <data key="d7">response management, API interaction</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Provider" target="GroqStreamedResponse">
      <data key="d5">7.0</data>
      <data key="d6">The GroqStreamedResponse relies on the Provider for managing API access during model execution.</data>
      <data key="d7">API management, response handling</data>
      <data key="d8">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Provider" target="AsyncGroq">
      <data key="d5">8.0</data>
      <data key="d6">Provider enables the asynchronous operations of AsyncGroq for efficient data handling.</data>
      <data key="d7">asynchronous operation, provider functionality</data>
      <data key="d8">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncClient" target="Gemini">
      <data key="d5">8.0</data>
      <data key="d6">AsyncClient is utilized by the Gemini model for executing asynchronous requests to manage user prompts and responses.</data>
      <data key="d7">asynchronous operations, communication</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncClient" target="Agent">
      <data key="d5">7.0</data>
      <data key="d6">AsyncClient is utilized by the Agent to send asynchronous requests to retrieve data from APIs.</data>
      <data key="d7">data retrieval, HTTP requests</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncClient" target="weather agent">
      <data key="d5">8.0</data>
      <data key="d6">The weather agent uses AsyncClient to facilitate asynchronous requests to the Weather and Geocoding APIs for efficient data retrieval.</data>
      <data key="d7">data handling, efficiency</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncOpenAI" target="insert_doc_section">
      <data key="d5">9.0</data>
      <data key="d6">insert_doc_section interacts with AsyncOpenAI to create embeddings as part of its operations.</data>
      <data key="d7">embedding process, integration</data>
      <data key="d8">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai_client" target="azure_endpoint">
      <data key="d5">9.0</data>
      <data key="d6">openai_client must interact with azure_endpoint for accessing OpenAI functionalities provided via Azure.</data>
      <data key="d7">API interaction, cloud services</data>
      <data key="d8">chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseClient" target="Bedrock Provider">
      <data key="d5">8.0</data>
      <data key="d6">The Bedrock Provider is built on top of the BaseClient class, utilizing its functions to interact with AWS services.</data>
      <data key="d7">inheritance, functionality</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseClient" target="Config">
      <data key="d5">6.0</data>
      <data key="d6">BaseClient relies on Config to define how to create service clients with specific parameters.</data>
      <data key="d7">dependency, client initialization</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock Provider" target="AWS">
      <data key="d5">8.0</data>
      <data key="d6">The Bedrock Provider operates on AWS infrastructure, leveraging the cloud computing capabilities provided by AWS.</data>
      <data key="d7">cloud services, infrastructure</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock Provider" target="Bedrock Runtime">
      <data key="d5">9.0</data>
      <data key="d6">The Bedrock Provider functions as a client that utilizes the Bedrock Runtime API for machine learning operations.</data>
      <data key="d7">API client, machine learning</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock Provider" target="Config">
      <data key="d5">7.0</data>
      <data key="d6">The Bedrock Provider uses the Config class to manage the settings for connecting to the AWS Bedrock Runtime.</data>
      <data key="d7">configuration management, settings</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock Provider" target="AWS Region">
      <data key="d5">8.0</data>
      <data key="d6">Bedrock Provider requires an AWS Region to determine where the resources will be accessed or created.</data>
      <data key="d7">regional dependency, resource allocation</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock Provider" target="aws_access_key_id">
      <data key="d5">9.0</data>
      <data key="d6">aws_access_key_id is necessary for the Bedrock Provider to authenticate its requests to the AWS services.</data>
      <data key="d7">authentication, security</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock Provider" target="aws_secret_access_key">
      <data key="d5">9.0</data>
      <data key="d6">aws_secret_access_key is used alongside aws_access_key_id for securely accessing AWS services in the Bedrock Provider.</data>
      <data key="d7">authentication, security</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock Provider" target="aws_session_token">
      <data key="d5">9.0</data>
      <data key="d6">aws_session_token enhances the security of requests made by the Bedrock Provider to AWS services.</data>
      <data key="d7">authentication, security</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Bedrock Provider" target="GroqProvider">
      <data key="d5">6.0</data>
      <data key="d6">GroqProvider may utilize a similar authentication pattern as the Bedrock Provider in its API interactions.</data>
      <data key="d7">similarity, API usage</data>
      <data key="d8">chunk-8d5d1cb0d1f5a4f5e2a91c607b3d94ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GroqProvider" target="AsyncGroq">
      <data key="d5">16.0</data>
      <data key="d6">GroqProvider uses AsyncGroq to facilitate asynchronous communication with the Groq API, allowing for efficient data retrieval.&lt;SEP&gt;GroqProvider utilizes AsyncGroq as the client for managing asynchronous requests to the Groq API.</data>
      <data key="d7">API interaction, asynchronous communication&lt;SEP&gt;API interaction, client usage</data>
      <data key="d8">chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GroqProvider" target="AsyncHTTPClient">
      <data key="d5">14.0</data>
      <data key="d6">GroqProvider can use AsyncHTTPClient for making HTTP requests, indicating its dependency on async HTTP capabilities.&lt;SEP&gt;GroqProvider utilizes AsyncHTTPClient to make asynchronous HTTP requests, vital for its operations.</data>
      <data key="d7">HTTP communication, async requests&lt;SEP&gt;HTTP requests, asynchronous communication</data>
      <data key="d8">chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GroqProvider" target="GROQ_API_KEY">
      <data key="d5">10.0</data>
      <data key="d6">GroqProvider checks for GROQ_API_KEY to authenticate requests made to the Groq API, making it a critical component of the provider.</data>
      <data key="d7">authentication, API access</data>
      <data key="d8">chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GroqProvider" target="GROQ_BASE_URL">
      <data key="d5">9.0</data>
      <data key="d6">GroqProvider relies on the GROQ_BASE_URL environment variable to construct the base URL for API requests, essential for connectivity.</data>
      <data key="d7">configuration, API base URL</data>
      <data key="d8">chunk-3daa082fe580b04c6ec4f3234e7a073b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncHTTPClient" target="Cohere Provider">
      <data key="d5">8.0</data>
      <data key="d6">Cohere Provider utilizes AsyncHTTPClient for handling asynchronous HTTP requests, showcasing an operational relationship.</data>
      <data key="d7">asynchronous processing, API interaction</data>
      <data key="d8">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Azure Provider" target="Cohere Provider">
      <data key="d5">5.0</data>
      <data key="d6">Both providers offer API services aimed at developers and businesses looking to enhance their applications with AI capabilities.</data>
      <data key="d7">API services, AI capabilities</data>
      <data key="d8">chunk-a0f0b34a0a28fff06a9b6be854290df6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere Provider" target="AsyncClientV2">
      <data key="d5">16.0</data>
      <data key="d6">Cohere Provider employs AsyncClientV2 for making asynchronous requests in its operations.</data>
      <data key="d7">integration, service architecture</data>
      <data key="d8">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Cohere Provider" target="Mistral Provider">
      <data key="d5">18.0</data>
      <data key="d6">Mistral Provider operates as a separate provider that offers additional functionalities related to the Mistral API within the ecosystem of API services.</data>
      <data key="d7">API service, provider ecosystem</data>
      <data key="d8">chunk-f235ce39161a5edb725814748db38df4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Generic" target="ToolParams">
      <data key="d5">6.0</data>
      <data key="d6">ToolParams can be defined using generics, allowing for flexible type specifications in tool functions.</data>
      <data key="d7">flexibility, type safety</data>
      <data key="d8">chunk-0defe853a1fb0dadf514cce37cdbbd16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="stream" target="pydantic_ai_slim">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai_slim provides functionality to stream data as an asynchronous iterable for efficient processing.</data>
      <data key="d7">data handling, organization functionality</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="stream" target="AsyncIterator">
      <data key="d5">9.0</data>
      <data key="d6">AsyncIterator is utilized within the stream function to handle asynchronous data retrieval and processing.</data>
      <data key="d7">async programming, data retrieval</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="stream" target="debounce_by">
      <data key="d5">6.0</data>
      <data key="d6">debounce_by is a parameter influencing the behavior of the stream function, affecting timing and data processing efficiency.</data>
      <data key="d7">parameter influence, data processing</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="stream" target="stream_text">
      <data key="d5">8.0</data>
      <data key="d6">stream is a broader process that includes specific mechanisms like stream_text for retrieving responses in real-time.</data>
      <data key="d7">data flow, real-time processing</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="stream" target="stream_structured">
      <data key="d5">8.0</data>
      <data key="d6">stream_structured is a specialized function within the stream process focused on structured data outputs.</data>
      <data key="d7">specialization, data streaming</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="stream_structured" target="stream_text">
      <data key="d5">7.0</data>
      <data key="d6">Both stream_structured and stream_text functions are designed to stream data as async iterables, but they handle different types of results.</data>
      <data key="d7">data streaming, async processing</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="stream_structured" target="AsyncIterator">
      <data key="d5">10.0</data>
      <data key="d6">The stream_structured function is designed to return data as an AsyncIterator, enabling efficient streaming of responses without blocking.</data>
      <data key="d7">asynchronous programming, efficiency</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="stream_text" target="debounce_by parameter">
      <data key="d5">6.0</data>
      <data key="d6">debounce_by parameter is relevant in stream_text to manage how response chunks are processed over time.</data>
      <data key="d7">parameter usage, response management</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="validate_structured_result" target="get_data">
      <data key="d5">9.0</data>
      <data key="d6">The get_data function incorporates the validate_structured_result function to ensure the integrity of the response data before returning it.</data>
      <data key="d7">data validation, result integrity</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="validate_structured_result" target="validate_text_result">
      <data key="d5">8.0</data>
      <data key="d6">Both validate_structured_result and validate_text_result are concerned with ensuring that responses meet specified validation criteria, maintaining quality and adherence to schemas.</data>
      <data key="d7">validation, quality assurance</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="validate_structured_result" target="_result_validators">
      <data key="d5">9.0</data>
      <data key="d6">The validate_structured_result function depends on the _result_validators to check the validity of structured messages against their criteria.</data>
      <data key="d7">validation, function dependency</data>
      <data key="d8">chunk-24a1f4477bbe2e3f1edd1aeda5e0f5a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="validate_structured_result" target="Result">
      <data key="d5">9.0</data>
      <data key="d6">validate_structured_result performs checks on the Result to ensure its integrity before utilizing it further.</data>
      <data key="d7">data validation, integrity check</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="validate_structured_result" target="usage_checking_stream">
      <data key="d5">8.0</data>
      <data key="d6">validate_structured_result uses usage_checking_stream to ensure that the streaming response adheres to usage limits."|&gt;"validation, usage monitoring</data>
      <data key="d7">8</data>
      <data key="d8">chunk-2e95a42b1e44a831fcd0b7eb5810fc9e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_utils.group_by_temporal" target="stream_response">
      <data key="d5">9.0</data>
      <data key="d6">_utils.group_by_temporal organizes the messages as they are streamed in real-time, enhancing the efficiency of the stream response mechanism.</data>
      <data key="d7">message organization, streaming efficiency</data>
      <data key="d8">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_stream_response_text" target="results_tool_return_content">
      <data key="d5">6.0</data>
      <data key="d6">_stream_response_text may provide the result_tool_return_content to modify the last message in the response sequence.</data>
      <data key="d7">dynamic response, message modification</data>
      <data key="d8">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_stream_response_text" target="deltas">
      <data key="d5">8.0</data>
      <data key="d6">deltas is populated with the streamed text from the _stream_response_text handler, which yields each received chunk of response.</data>
      <data key="d7">stream accumulation, data context</data>
      <data key="d8">chunk-9b2399edbbf7b8123ba44d7166c35085</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Global Tech Index" target="Market Selloff">
      <data key="d5">9.0</data>
      <data key="d6">The decline in the Global Tech Index is part of the broader market selloff driven by investor concerns.</data>
      <data key="d7">market performance, investor sentiment</data>
      <data key="d8">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Market Selloff" target="Federal Reserve Policy Announcement">
      <data key="d5">7.0</data>
      <data key="d6">Speculation over Federal Reserve policy changes contributed to market volatility and investor selloff.</data>
      <data key="d7">interest rate impact, financial regulation</data>
      <data key="d8">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Market Selloff" target="Investor Concerns">
      <data key="d5">9.0</data>
      <data key="d6">The market selloff is driven by heightened investor concerns over various economic factors, including interest rates and regulatory changes.</data>
      <data key="d7">market reaction, investor psychology</data>
      <data key="d8">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Market Selloff" target="Interest Rates">
      <data key="d5">8.0</data>
      <data key="d6">Concerns about rising interest rates are a key driver of the market selloff, affecting investor confidence.</data>
      <data key="d7">economic impact, financial stability</data>
      <data key="d8">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Market Selloff" target="Regulatory Uncertainty">
      <data key="d5">7.0</data>
      <data key="d6">Regulatory uncertainty contributes to the overall market selloff by creating apprehension among investors.</data>
      <data key="d7">risk perception, market stability</data>
      <data key="d8">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Federal Reserve Policy Announcement" target="Investor Concerns">
      <data key="d5">8.0</data>
      <data key="d6">Speculation about the Federal Reserve's policy announcement heightens investor concerns, impacting market behavior.</data>
      <data key="d7">policy impact, investment strategy</data>
      <data key="d8">chunk-848b83bfc3ae6c2755d4c3644cfef354</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncIterator[ResultDataT]" target="Result">
      <data key="d5">7.0</data>
      <data key="d6">AsyncIterator[ResultDataT] produces Result instances, allowing for structured handling of data streams.</data>
      <data key="d7">data handling, structured processing</data>
      <data key="d8">chunk-bd6dfe5e98d926e7e4cb3f17a23e568c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Gemini" target="provider">
      <data key="d5">9.0</data>
      <data key="d6">provider identifies the service used for authentication and API interactions with the Gemini framework.</data>
      <data key="d7">authentication, service identification</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Gemini" target="system">
      <data key="d5">8.0</data>
      <data key="d6">system denotes the underlying model system that integrates with the Gemini organization for its operations.</data>
      <data key="d7">model operations, integration</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolParams" target="RunContext">
      <data key="d5">7.0</data>
      <data key="d6">RunContext contains parameters that define how tools are executed within the context.</data>
      <data key="d7">parameter specification, context tools</data>
      <data key="d8">chunk-0defe853a1fb0dadf514cce37cdbbd16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Schema Generator" target="ToolDefinition">
      <data key="d5">8.0</data>
      <data key="d6">Schema Generator is utilized to define the parameters and structure of tool definitions, ensuring they conform to expected formats.</data>
      <data key="d7">data validation, schema creation</data>
      <data key="d8">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Prepare Tool Definition" target="ToolDefinition">
      <data key="d5">9.0</data>
      <data key="d6">Prepare Tool Definition is a method directly related to ToolDefinition as it generates the tool's configuration before it is executed.</data>
      <data key="d7">tool preparation, setup</data>
      <data key="d8">chunk-6c55dffdff9c514f2f88b60d9ec9f6c4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Prepare Method" target="ToolDefinition">
      <data key="d5">6.0</data>
      <data key="d6">Prepare Method can be adapted based on the parameters defined in the ToolDefinition for efficient execution.</data>
      <data key="d7">preparation, execution strategy</data>
      <data key="d8">chunk-3c16ab7b122ed13c1236f5062ceed453</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="my_tool" target="Agent">
      <data key="d5">14.0</data>
      <data key="d6">my_tool functions as an example tool that can be registered and executed within the Agent.&lt;SEP&gt;my_tool serves as an example of a tool that can be registered and executed within the Agent framework.</data>
      <data key="d7">example usage, tool registration</data>
      <data key="d8">chunk-8dbbf042d22f24ab47fdb61c76c368c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="json" target="ToolDefinition">
      <data key="d5">9.0</data>
      <data key="d6">ToolDefinition includes parameters defined using JSON schemas which describe the structure and validation rules for tool parameters.</data>
      <data key="d7">data format, schema validation</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="json" target="ObjectJsonSchema">
      <data key="d5">8.0</data>
      <data key="d6">ObjectJsonSchema uses JSON format to describe the schema structure of objects, making it compatible with various data formats.</data>
      <data key="d7">data format, schema description</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="json" target="ModelMessage">
      <data key="d5">7.0</data>
      <data key="d6">The json library is employed to serialize and deserialize ModelMessage instances within the chat application.".</data>
      <data key="d7">data serialization, message processing</data>
      <data key="d8">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ObjectJsonSchema" target="ToolDefinition">
      <data key="d5">9.0</data>
      <data key="d6">ToolDefinition includes a JSON schema defined by ObjectJsonSchema to enforce the structure of parameters for tools.</data>
      <data key="d7">schema validation, parameter structure</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="token limits" target="token management">
      <data key="d5">9.0</data>
      <data key="d6">Token management is responsible for ensuring that token limits are adhered to during all interactions with the model.</data>
      <data key="d7">resource oversight, compliance</data>
      <data key="d8">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model requests" target="request count">
      <data key="d5">7.0</data>
      <data key="d6">The number of model requests directly influences the request count metric that tracks overall submissions to the AI model.</data>
      <data key="d7">usage tracking, model interaction</data>
      <data key="d8">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request count" target="request limit">
      <data key="d5">8.0</data>
      <data key="d6">The request count is monitored against the request limit to ensure that the usage does not exceed allowable submissions.</data>
      <data key="d7">compliance monitoring, efficiency</data>
      <data key="d8">chunk-283bc165fd3b54e2f1d7d98b00bc1b16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai.models.anthropic" target="pydantic_ai">
      <data key="d5">7.0</data>
      <data key="d6">pydantic_ai.models.anthropic is a specialized segment of the pydantic_ai library focusing on models related to Anthropic's services.</data>
      <data key="d7">specific functionality, library modularization</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="check_tokens" target="UsageLimitExceeded Exception">
      <data key="d5">10.0</data>
      <data key="d6">The check_tokens function is responsible for verifying token limits and can raise the UsageLimitExceeded Exception if those limits are breached.</data>
      <data key="d7">token verification, exception handling</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="check_tokens" target="request_tokens_limit">
      <data key="d5">7.0</data>
      <data key="d6">The request_tokens_limit is one of the limits checked by the check_tokens function to ensure compliance with usage policies.</data>
      <data key="d7">limit verification, usage compliance</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="check_tokens" target="response_tokens_limit">
      <data key="d5">7.0</data>
      <data key="d6">The response_tokens_limit is another parameter checked by check_tokens to ensure that response usage remains within acceptable limits.</data>
      <data key="d7">limit verification, usage compliance</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="check_tokens" target="total_tokens_limit">
      <data key="d5">9.0</data>
      <data key="d6">The total_tokens_limit is assessed by check_tokens to prevent excessive token usage across all interactions.</data>
      <data key="d7">total usage verification, compliance</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai_slim/pydantic_ai/usage.py" target="has_token_limits">
      <data key="d5">8.0</data>
      <data key="d6">The has_token_limits method is defined in pydantic_ai_slim/pydantic_ai/usage.py, indicating that it is related to usage tracking in that module.</data>
      <data key="d7">implementation, usage tracking</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="check_before_request" target="UsageLimitExceeded Exception">
      <data key="d5">9.0</data>
      <data key="d6">The check_before_request function raises a UsageLimitExceeded Exception when request limits are exceeded, linking usage checks and exceptions.</data>
      <data key="d7">limit checking, exception handling</data>
      <data key="d8">chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Anthropic API" target="AsyncAnthropic">
      <data key="d5">9.0</data>
      <data key="d6">AsyncAnthropic acts as the client that allows users to send requests and receive processed responses from the Anthropic API.</data>
      <data key="d7">client-server relationship, interaction</data>
      <data key="d8">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncAnthropic" target="provider">
      <data key="d5">7.0</data>
      <data key="d6">Provider specifies which client should be used to interact with AsyncAnthropic, influencing how requests are handled.</data>
      <data key="d7">configuration relationship, service management</data>
      <data key="d8">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="ToolParam">
      <data key="d5">9.0</data>
      <data key="d6">ModelRequestParameters includes ToolParam to define the tools that may be employed during interactions with the model.</data>
      <data key="d7">tool definition, interaction parameters</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="ToolDefinition">
      <data key="d5">16.0</data>
      <data key="d6">ModelRequestParameters includes a list of ToolDefinition which outlines the tools required for the model requests.</data>
      <data key="d7">tool specification, request parameters</data>
      <data key="d8">chunk-b769b4aed2676da2f16bf28894246048</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="BedrockStreamedResponse">
      <data key="d5">16.0</data>
      <data key="d6">ModelRequestParameters are essential for configuring how BedrockStreamedResponse processes and returns data.</data>
      <data key="d7">configuration, data processing</data>
      <data key="d8">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="GroqModelSettings">
      <data key="d5">16.0</data>
      <data key="d6">ModelRequestParameters are used to define aspects of the Groq model settings when making requests.&lt;SEP&gt;ModelRequestParameters provide necessary configurations that are tailored by GroqModelSettings for making requests to the model.</data>
      <data key="d7">configuration management&lt;SEP&gt;request configuration</data>
      <data key="d8">chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="ModelResponse">
      <data key="d5">38.0</data>
      <data key="d6">ModelRequestParameters influence the generation of a ModelResponse by defining what tools are available to handle requests.&lt;SEP&gt;ModelResponse is created as a result of processing the ModelRequestParameters, linking configuration to generated output.&lt;SEP&gt;The ModelResponse is produced as an output after processing the ModelRequestParameters, linking the two directly in terms of function.&lt;SEP&gt;The effectiveness of ModelRequestParameters directly impacts the content and quality of the ModelResponse generated.</data>
      <data key="d7">input quality, response effectiveness&lt;SEP&gt;output generation, request processing&lt;SEP&gt;request processing, tool influence</data>
      <data key="d8">chunk-3ddf9ea98365de8bc4bbe2bdc8d93226&lt;SEP&gt;chunk-7574296d70c6b864b4a5f29f2b14afe1&lt;SEP&gt;chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="chat.ChatCompletionToolParam">
      <data key="d5">8.0</data>
      <data key="d6">chat.ChatCompletionToolParam provides the necessary definitions for the tools included in ModelRequestParameters, essential for processing requests.</data>
      <data key="d7">tool definition, parameter specification</data>
      <data key="d8">chunk-561b3b3cda17d16517ba963b544fdd01</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="my_agent">
      <data key="d5">8.0</data>
      <data key="d6">my_agent uses ModelRequestParameters to manage function calls and results during the test execution process.</data>
      <data key="d7">request management, testing process</data>
      <data key="d8">chunk-ba870a242fd1468b0176d028dc0c47b3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="ToolCallPart">
      <data key="d5">8.0</data>
      <data key="d6">ToolCallPart is dependent upon ModelRequestParameters to define which tools are called during a given request.</data>
      <data key="d7">tool execution, request parameters</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="ModelMessage">
      <data key="d5">8.0</data>
      <data key="d6">ModelMessage provides the context and content that guides how ModelRequestParameters are utilized in processing requests.</data>
      <data key="d7">message processing, request context</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelRequestParameters" target="_get_tool_calls">
      <data key="d5">9.0</data>
      <data key="d6">_get_tool_calls uses ModelRequestParameters to determine which tools are necessary for serving a request.</data>
      <data key="d7">tool determination, request processing</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="provider" target="client">
      <data key="d5">9.0</data>
      <data key="d6">The client interacts with the provider to send requests to the AI model, establishing a connection between them.</data>
      <data key="d7">client-server interaction, communication </data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model Name" target="Model Settings">
      <data key="d5">8.0</data>
      <data key="d6">Model Settings are tailored specifically for a Model Name, indicating that settings apply directly to how that model operates.</data>
      <data key="d7">model configuration management</data>
      <data key="d8">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Streamed Response" target="Raw Message Stream Event">
      <data key="d5">9.0</data>
      <data key="d6">Streamed Responses involve Raw Message Stream Events, providing feedback while the model processes input and generates output.</data>
      <data key="d7">real-time feedback, processing stream</data>
      <data key="d8">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Streamed Response" target="OpenAIStreamedResponse">
      <data key="d5">8.0</data>
      <data key="d6">OpenAIStreamedResponse facilitates the Streamed Response by managing the flow of response data in a real-time format.</data>
      <data key="d7">response management, real-time processing</data>
      <data key="d8">chunk-561b3b3cda17d16517ba963b544fdd01</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Tool Choice Param" target="client">
      <data key="d5">7.0</data>
      <data key="d6">Tool Choice Param determines how the client interacts with the tools during model requests, influencing response mechanisms.</data>
      <data key="d7">configuration relationship, tool selection</data>
      <data key="d8">chunk-9655d08afefd464282f89b643272e0b6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextBlock" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">TextBlock serves as a specific type of content part within the overall structure of ModelResponse, conveying textual information.</data>
      <data key="d7">content structure, response components</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextBlock" target="ContentBlock">
      <data key="d5">8.0</data>
      <data key="d6">TextBlock is a specialized form of ContentBlock that specifically carries text content in the streaming response.</data>
      <data key="d7">specific content type, text handling</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolUseBlock" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">ToolUseBlock is included as part of the ModelResponse, indicating the use of particular tools during AI interactions.</data>
      <data key="d7">tool usage, response components</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolParam" target="JSONDecodeError">
      <data key="d5">6.0</data>
      <data key="d6">JSONDecodeError can occur when parameters within ToolParam are being processed and parsed, indicating a failure in proper data structure.</data>
      <data key="d7">error handling, data structure</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_process_response" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">_process_response processes the ModelResponse to prepare it for return, focusing on its components like text and tool calls.</data>
      <data key="d7">response handling, processing</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_process_response" target="response">
      <data key="d5">9.0</data>
      <data key="d6">The response parameter in _process_response is crucial as it is the primary input being processed by the method.</data>
      <data key="d7">input processing, importance</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="response" target="ToolCallPart">
      <data key="d5">9.0</data>
      <data key="d6">ToolCallPart is associated with the response by referencing the specific tool and its arguments within the overall response structure.</data>
      <data key="d7">tool interactions, response flow</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="response" target="r">
      <data key="d5">8.0</data>
      <data key="d6">The response is derived from the HTTP response object R that reflects the outcome of executing a request.</data>
      <data key="d7">evaluation of processing, request outcome</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="response" target="candidates">
      <data key="d5">9.0</data>
      <data key="d6">Candidates represent the proposed contents for selection within the response from the model after processing.</data>
      <data key="d7">selection process, model output</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="response" target="GeminiStreamedResponse">
      <data key="d5">8.0</data>
      <data key="d6">GeminiStreamedResponse manages and processes the streaming output of data as responses are received from the model.</data>
      <data key="d7">stream management, real-time processing</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="response" target="request_image">
      <data key="d5">9.0</data>
      <data key="d6">The request_image function sends a request to generate an image and receives a response that includes the generated image data.</data>
      <data key="d7">image generation, request-response</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncStream" target="AnthropicStreamedResponse">
      <data key="d5">8.0</data>
      <data key="d6">AsyncStream represents the type of response received, formatted as an AnthropicStreamedResponse for effective usage.</data>
      <data key="d7">streaming data, response structure</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncStream" target="PeekableAsyncStream">
      <data key="d5">9.0</data>
      <data key="d6">PeekableAsyncStream enhances the functionality of AsyncStream by allowing inspection of the stream's contents without consumption.</data>
      <data key="d7">utility function, streaming</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolResultBlockParam" target="ToolCallPart">
      <data key="d5">9.0</data>
      <data key="d6">ToolResultBlockParam provides the outcome of the ToolCallPart, linking the results back to the tools invoked.</data>
      <data key="d7">result relationship, tool interaction</data>
      <data key="d8">chunk-06cf04d118cac634438fc98127ca6670</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AnthropicModelName" target="ToolDefinition">
      <data key="d5">7.0</data>
      <data key="d6">AnthropicModelName is necessary in defining various tools within the tool definition process for AI models.</data>
      <data key="d7">tool specification, model configuration</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DocumentBlockParam" target="PlainTextSourceParam">
      <data key="d5">8.0</data>
      <data key="d6">DocumentBlockParam manages the parameters for processing, which often includes handling plain text sources through PlainTextSourceParam.</data>
      <data key="d7">document handling, parameter management</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DocumentBlockParam" target="Item">
      <data key="d5">8.0</data>
      <data key="d6">DocumentBlockParam is responsible for managing Item, which includes meta attributes that aid in document processing</data>
      <data key="d7">document processing, metadata handling</data>
      <data key="d8">chunk-4a4ce9bc8714c4dfcb4875dd52609356</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RawContentBlockStopEvent" target="pydantic_ai.models">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai.models provides the framework within which events like RawContentBlockStopEvent are defined and handled.</data>
      <data key="d7">event handling, system architecture</data>
      <data key="d8">chunk-a9de914755fc3f23e749c15911fa6734</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RawMessageStopEvent" target="pydantic_ai.models">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai.models includes the functionality for handling events such as RawMessageStopEvent during processing.</data>
      <data key="d7">event management, system processing</data>
      <data key="d8">chunk-a9de914755fc3f23e749c15911fa6734</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="llama3-3-70b-instruct-v1" target="bedrock:mistral.mistral-7b-instruct-v0">
      <data key="d5">8.0</data>
      <data key="d6">Both llama3-3-70b-instruct-v1 and bedrock:mistral.mistral-7b-instruct-v0 are instruction-based variants of larger language models within the AI landscape.</data>
      <data key="d7">instruction models, AI comparison</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="google-gla:gemini-1.0-pro" target="gpt-4">
      <data key="d5">9.0</data>
      <data key="d6">google-gla:gemini-1.0-pro and gpt-4 are both advanced generative AI models available for professional applications, highlighting competition in AI technology.</data>
      <data key="d7">AI advancement, competition</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="google-gla:gemini-1.0-pro" target="google-vertex:gemini-1.0-pro">
      <data key="d5">9.0</data>
      <data key="d6">Both Gemini models indicate Google's strategy to diversify its product offerings in generative AI technology.</data>
      <data key="d7">product diversification, AI technology</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="gpt-3.5-turbo" target="gpt-4">
      <data key="d5">7.0</data>
      <data key="d6">gpt-3.5-turbo is an earlier generation compared to gpt-4, showcasing the evolution from one model to the next in OpenAI's offerings.</data>
      <data key="d7">model evolution, performance improvement</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="gpt-4" target="gpt-4-turbo">
      <data key="d5">10.0</data>
      <data key="d6">gpt-4-turbo is an optimized variant of the GPT-4 model designed for efficiency, highlighting ongoing development in model speed and usability.</data>
      <data key="d7">model optimization, performance metrics</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="bedrock:mistral.mistral-large-2402-v1" target="bedrock:mistral.mistral-large-2407-v1">
      <data key="d5">8.0</data>
      <data key="d6">Both models are large Mistral variants designed for high-performance AI tasks, indicating internal competition within the category.</data>
      <data key="d7">high-performance, model competition</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="claude-3-5-sonnet-latest" target="claude-3-opus-latest">
      <data key="d5">7.0</data>
      <data key="d6">Both Claude models from Anthropic indicate the company's efforts to expand their conversational AI capabilities.</data>
      <data key="d7">AI development, competitive offerings</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cohere:command" target="cohere:command-light">
      <data key="d5">9.0</data>
      <data key="d6">cohere:command-light is a lighter version of the command model, showcasing improvements in efficiency for command-based AI tasks.</data>
      <data key="d7">model optimization, efficiency</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cohere:command-light" target="cohere:command-light-nightly">
      <data key="d5">6.0</data>
      <data key="d6">cohere:command-light-nightly represents nightly updates to the command-light model, indicating ongoing improvements.</data>
      <data key="d7">continuous development, iterative updates</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cohere:command-r" target="cohere:command-r-plus">
      <data key="d5">8.0</data>
      <data key="d6">cohere:command-r-plus is an enhanced version of the command-r model, representing the evolution of command processing technology.</data>
      <data key="d7">model evolution, performance improvement</data>
      <data key="d8">chunk-bc066e01894e9a879be8e969281bd347</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="groq:distil-whisper-large-v3-en" target="groq:whisper-large-v3">
      <data key="d5">8.0</data>
      <data key="d6">Both entries represent models from Groq focused on audio or language processing capabilities, emphasizing their specialization in these tasks.</data>
      <data key="d7">AI models, language processing</data>
      <data key="d8">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="groq:llama-3.3-70b-versatile" target="groq:llama-guard-3-8b">
      <data key="d5">14.0</data>
      <data key="d6">Both models are related as they fall under the category of AI technologies developed by the 'groq' entity, and may share underlying architectures or purposes.&lt;SEP&gt;These models are part of Groq's AI offerings, with one enhancing language processing and the other ensuring safe content output.</data>
      <data key="d7">AI models, technology development&lt;SEP&gt;technology, safety measures</data>
      <data key="d8">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:chatgpt-4o-latest" target="openai:gpt-4">
      <data key="d5">17.0</data>
      <data key="d6">Both entries refer to notable advancements in AI technology developed by OpenAI, targeting improvements in generative language capabilities.&lt;SEP&gt;These entries are both advanced AI models by OpenAI, with the latter being a generational improvement of their conversational capabilities.</data>
      <data key="d7">AI advancements, technology evolution&lt;SEP&gt;AI progression, conversational models</data>
      <data key="d8">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:gpt-3.5-turbo" target="openai:gpt-4">
      <data key="d5">17.0</data>
      <data key="d6">These entries represent different generations of GPT models, showing progression in performance and usability from earlier to later models.&lt;SEP&gt;These models are part of OpenAI's product line, with each iteration representing growth in conversational efficiency and depth.</data>
      <data key="d7">model comparison, efficiency&lt;SEP&gt;model progression, generational improvement</data>
      <data key="d8">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:gpt-3.5-turbo" target="openai:gpt-3.5-turbo-1106">
      <data key="d5">7.0</data>
      <data key="d6">The latter entry is a specific version of the former, indicating enhancements or updates to the model's functionalities.</data>
      <data key="d7">versioning, continuous improvement</data>
      <data key="d8">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:gpt-4" target="openai:gpt-4-32k">
      <data key="d5">8.0</data>
      <data key="d6">Both entries are related as extensions within OpenAI's technologies, focusing on high-capacity processing with advanced capabilities.</data>
      <data key="d7">high-capacity models, AI advancement</data>
      <data key="d8">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai:o1" target="openai:o1-preview">
      <data key="d5">8.0</data>
      <data key="d6">The latter entry is a preview version directly related to the O1 model, showcasing upcoming features and improvements.</data>
      <data key="d7">development preview, feature enhancement</data>
      <data key="d8">chunk-2efde2e0cd716841d8bf6ac6a64c342c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="abstractmethod" target="NotImplementedError">
      <data key="d5">8.0</data>
      <data key="d6">abstractmethod raises NotImplementedError when an implementation is missing in derived classes, defining an important interaction between abstraction and error handling.</data>
      <data key="d7">error handling, implementation guidance</data>
      <data key="d8">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="system" target="Bedrock Model">
      <data key="d5">8.0</data>
      <data key="d6">The Bedrock Model is utilized within the system provided by the organization to perform various AI tasks.</data>
      <data key="d7">model usage, organizational operation</data>
      <data key="d8">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="system" target="_init_">
      <data key="d5">7.0</data>
      <data key="d6">The initialization method also sets the system property to define the model provider.</data>
      <data key="d7">provider definition, instance setup</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_request_parameters" target="APIStatusError">
      <data key="d5">6.0</data>
      <data key="d6">APIStatusError can arise due to improper model request parameters, indicating a direct relationship in error handling.</data>
      <data key="d7">error management, request validity</data>
      <data key="d8">chunk-3d1c7209debb23a47e4399b20a981057</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponsePartsManager" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">ModelResponsePartsManager plays a crucial role in assembling the parts that make up a complete ModelResponse, linking component management with final output.</data>
      <data key="d7">assembly, output construction</data>
      <data key="d8">chunk-dd9a98f0dbfe0b13eb759308b4347720</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai.models.bedrock" target="ALLOW_MODEL_REQUESTS">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai.models.bedrock has a setting named ALLOW_MODEL_REQUESTS that controls the ability to make model requests.</data>
      <data key="d7">model control setting, configuration</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ALLOW_MODEL_REQUESTS" target="check_allow_model_requests">
      <data key="d5">18.0</data>
      <data key="d6">The check_allow_model_requests function checks the state of the ALLOW_MODEL_REQUESTS setting to ensure that any model requests adhere to its current status.&lt;SEP&gt;The function check_allow_model_requests verifies the state of ALLOW_MODEL_REQUESTS to ensure requests are valid.</data>
      <data key="d7">function validation, request control&lt;SEP&gt;function verification, request validation</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ALLOW_MODEL_REQUESTS" target="override_allow_model_requests">
      <data key="d5">20.0</data>
      <data key="d6">The override_allow_model_requests context manager temporarily modifies ALLOW_MODEL_REQUESTS allowing model requests within its scope.&lt;SEP&gt;The override_allow_model_requests function modifies the ALLOW_MODEL_REQUESTS temporarily, allowing or disallowing requests based on its argument.</data>
      <data key="d7">context management, temporary configuration&lt;SEP&gt;context management, temporary control</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ALLOW_MODEL_REQUESTS" target="pydantic_ai">
      <data key="d5">8.0</data>
      <data key="d6">The pydantic_ai library includes the ALLOW_MODEL_REQUESTS setting as a fundamental part of its configuration for managing model requests.</data>
      <data key="d7">library setting, configuration control</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ALLOW_MODEL_REQUESTS" target="Model.request">
      <data key="d5">8.0</data>
      <data key="d6">The Model.request method's execution is contingent upon the status of the ALLOW_MODEL_REQUESTS setting, determining if requests can proceed.</data>
      <data key="d7">request execution control, operational dependency</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ALLOW_MODEL_REQUESTS" target="Model.request_stream">
      <data key="d5">8.0</data>
      <data key="d6">The Model.request_stream method relies on the ALLOW_MODEL_REQUESTS setting to control streaming requests to models.</data>
      <data key="d7">streaming request control, operational dependency</data>
      <data key="d8">chunk-aeb5e3495054b417710f8e52ebcb151a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Llama3-1-8b-instruct" target="Meta">
      <data key="d5">9.0</data>
      <data key="d6">The Llama3-1-8b-instruct model is developed by Meta, indicating a direct association between the organization and its AI product.</data>
      <data key="d7">product development, organization</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Meta" target="Llama3-1-70b-instruct">
      <data key="d5">9.0</data>
      <data key="d6">Llama3-1-70b-instruct is another endeavor by Meta, continuing its focus on advancing AI model capabilities.</data>
      <data key="d7">product development, organization</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Meta" target="Llama3-1-405b-instruct">
      <data key="d5">9.0</data>
      <data key="d6">This version of the Llama model, Llama3-1-405b-instruct, reflects Meta's ongoing innovation in the AI sector.</data>
      <data key="d7">product development, organization</data>
      <data key="d8">chunk-280e2293efebc370222ffe9ce64e03c2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockStreamedResponse" target="AsyncIterator">
      <data key="d5">18.0</data>
      <data key="d6">BedrockStreamedResponse can be utilized with AsyncIterator to yield responses in a non-blocking manner.</data>
      <data key="d7">asynchronous processing, data streaming</data>
      <data key="d8">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockStreamedResponse" target="pydantic_ai">
      <data key="d5">8.0</data>
      <data key="d6">BedrockStreamedResponse is part of the Pydantic AI framework that facilitates managing streamed responses from models.</data>
      <data key="d7">part of framework, model handling</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockStreamedResponse" target="ConverseStreamOutputTypeDef">
      <data key="d5">7.0</data>
      <data key="d6">BedrockStreamedResponse uses the ConverseStreamOutputTypeDef for defining types of events processed during streaming.</data>
      <data key="d7">data definition, event processing</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockStreamedResponse" target="AsyncIteratorWrapper">
      <data key="d5">8.0</data>
      <data key="d6">BedrockStreamedResponse employs AsyncIteratorWrapper for iterating over events in an asynchronous manner.</data>
      <data key="d7">asynchronous processing, utility usage</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BedrockStreamedResponse" target="EventStream">
      <data key="d5">6.0</data>
      <data key="d6">BedrockStreamedResponse processes events in an EventStream format for coherent data management.</data>
      <data key="d7">event processing, data management</data>
      <data key="d8">chunk-3fe1c986ef649646858753879674bde7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="inference_config" target="params">
      <data key="d5">7.0</data>
      <data key="d6">params contain inference_config settings as part of the overall model request parameters.</data>
      <data key="d7">configuration parameters, model settings</data>
      <data key="d8">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="tool_choice" target="params">
      <data key="d5">7.0</data>
      <data key="d6">tool_choice is specified within the params object to define which tools can be utilized during model processing.</data>
      <data key="d7">configuration selection, tool application</data>
      <data key="d8">chunk-bd2bc160d25374fdd8c399ea89d82b1d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="params" target="save_image">
      <data key="d5">8.0</data>
      <data key="d6">The save_image function utilizes params to configure details of the image generation for the Mermaid diagram.</data>
      <data key="d7">function configuration, parameters</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="params" target="image_type">
      <data key="d5">9.0</data>
      <data key="d6">The params dictionary includes the image_type parameter, which defines the format of the generated image."&lt;/|&gt;"image format specification, parameters</data>
      <data key="d7">9</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="params" target="background_color">
      <data key="d5">9.0</data>
      <data key="d6">The params dictionary contains the background_color parameter, which allows customization of the diagram's appearance.</data>
      <data key="d7">appearance settings, diagram customization</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="params" target="scale">
      <data key="d5">8.0</data>
      <data key="d6">The scale parameter in params is used to adjust the size of the generated diagram during the image creation process.</data>
      <data key="d7">size adjustment, image generation</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="params" target="pdf_landscape">
      <data key="d5">8.0</data>
      <data key="d6">The pdf_landscape parameter specifies the orientation for PDF generation in the params dictionary.</data>
      <data key="d7">PDF settings, orientation specification</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ContentBlockOutputTypeDef" target="MessageUnionTypeDef">
      <data key="d5">8.0</data>
      <data key="d6">ContentBlockOutputTypeDef defines how messages are outputted which is aggregated into MessageUnionTypeDef.</data>
      <data key="d7">structure and typing, type definition</data>
      <data key="d8">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="bedrock_messages" target="ToolCallPart">
      <data key="d5">8.0</data>
      <data key="d6">ToolCallPart is involved in processing user requests and its outcomes are added to the bedrock_messages structure.</data>
      <data key="d7">tool usage, process integration</data>
      <data key="d8">chunk-6336acb66b05c1fcfd268f8297c6bf9f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolV2" target="ToolV2Function">
      <data key="d5">8.0</data>
      <data key="d6">ToolV2 incorporates functions defined by ToolV2Function to execute tasks within the model.</data>
      <data key="d7">tool functionality</data>
      <data key="d8">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolV2" target="Parameters">
      <data key="d5">8.0</data>
      <data key="d6">ToolV2 relies on Parameters for configuration and execution of its functions.</data>
      <data key="d7">tool configuration</data>
      <data key="d8">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolV2Function" target="Parameters">
      <data key="d5">9.0</data>
      <data key="d6">ToolV2Function defines the Parameters that are necessary for the tool's operation.</data>
      <data key="d7">function details</data>
      <data key="d8">chunk-ded0fb4dcc42ebf68653cf3dbd584607</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="infer_model" target="fallback model instance">
      <data key="d5">7.0</data>
      <data key="d6">A fallback model instance involves using infer_model to determine which model to switch to in the case of an error.</data>
      <data key="d7">model instantiation, error recovery</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="fallback model instance" target="_default_fallback_condition_factory">
      <data key="d5">8.0</data>
      <data key="d6">The _default_fallback_condition_factory generates conditions that dictate how fallback model instances should operate upon encountering failures.</data>
      <data key="d7">condition generation, fallback logic</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TypeError" target="exceptions">
      <data key="d5">10.0</data>
      <data key="d6">TypeError is one of the exceptions defined in the exceptions module, indicating errors related to incorrect types.</data>
      <data key="d7">error handling, type validation</data>
      <data key="d8">chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DeltaToolCall" target="DeltaToolCalls">
      <data key="d5">18.0</data>
      <data key="d6">DeltaToolCalls map changes made to actions represented by DeltaToolCall, facilitating incremental updates during function execution.&lt;SEP&gt;DeltaToolCalls provides a structure for tracking incremental changes reflected by DeltaToolCall instances during function execution.</data>
      <data key="d7">incremental updates, tool call management&lt;SEP&gt;tracking changes, event management</data>
      <data key="d8">chunk-67e1fb7008dc73bb2467aed7bf1ae385</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai.models.function" target="pydantic_ai_slim">
      <data key="d5">9.0</data>
      <data key="d6">The pydantic_ai_slim library includes the models from the function category for handling structured responses.</data>
      <data key="d7">library integration, data modeling</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai.models.gemini" target="pydantic_ai_slim">
      <data key="d5">10.0</data>
      <data key="d6">The pydantic_ai_slim library supports models that interact with the Gemini API for generative tasks.</data>
      <data key="d7">API interaction, generative language</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function.py" target="pydantic_ai_slim">
      <data key="d5">9.0</data>
      <data key="d6">The function.py module resides within the pydantic_ai_slim library and contains the definitions relevant to function models.</data>
      <data key="d7">module structure, integration</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiRequest" target="ModelMessage">
      <data key="d5">8.0</data>
      <data key="d6">ModelMessage instances are included in the GeminiRequest to provide the necessary context and content for API interactions.</data>
      <data key="d7">request structure, context-setting</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiRequest" target="GeminiTextContent">
      <data key="d5">9.0</data>
      <data key="d6">GeminiRequest employs GeminiTextContent to convey the text components needed for understanding the messages being sent to the API.</data>
      <data key="d7">content representation, communication structure</data>
      <data key="d8">chunk-c85826bcf2c124ee6da90aa381dfff25</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiRequest" target="Gemini Generation Config">
      <data key="d5">8.0</data>
      <data key="d6">GeminiRequest includes a generation configuration that dictates how the model generates content based on user specifications.</data>
      <data key="d7">request configuration, model output</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="HTTPResponse" target="GeminiStreamedResponse">
      <data key="d5">7.0</data>
      <data key="d6">GeminiStreamedResponse processes HTTPResponse to handle streamed content sent back from the server.</data>
      <data key="d7">stream processing, response management</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_GeminiRequest" target="sys_prompt_parts">
      <data key="d5">9.0</data>
      <data key="d6">_GeminiRequest includes system prompt parts, which are instructions guiding the content processing of the model.</data>
      <data key="d7">request structure, instruction guidance</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_GeminiRequest" target="tool_config">
      <data key="d5">9.0</data>
      <data key="d6">_GeminiRequest specifies the tool configuration needed to interact with the model optimally.</data>
      <data key="d7">configuration settings, tool functionality</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_GeminiRequest" target="request_json">
      <data key="d5">9.0</data>
      <data key="d6">Request JSON is constructed from the data within the _GeminiRequest structure to articulate the request to the model.</data>
      <data key="d7">data conversion, request formation</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="headers" target="ApiKeyAuth">
      <data key="d5">9.0</data>
      <data key="d6">headers method in ApiKeyAuth class provides necessary authorization information when making requests using the Gemini model.</data>
      <data key="d7">authorization, API communication</data>
      <data key="d8">chunk-1e3877dfdbcb8d4c3cbdf207d7480bcf</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="r" target="status_code">
      <data key="d5">10.0</data>
      <data key="d6">R represents the HTTP response, and the status code indicates whether the processing was successful or encountered an error.</data>
      <data key="d7">response evaluation, HTTP communication</data>
      <data key="d8">chunk-311a0249fe229b6715b937248d87772f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiSafetySettings" target="category">
      <data key="d5">8.0</data>
      <data key="d6">GeminiSafetySettings includes the category attribute that defines the type of safety concerns addressed in the model.</data>
      <data key="d7">safety settings, classification</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GeminiSafetySettings" target="threshold">
      <data key="d5">9.0</data>
      <data key="d6">GeminiSafetySettings contains a threshold attribute that specifies the levels of harm filtering that will be applied.</data>
      <data key="d7">safety management, filtering criteria</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="parts_manager" target="function_call">
      <data key="d5">9.0</data>
      <data key="d6">Function calls are managed by parts_manager, which is crucial for processing and executing function requests.</data>
      <data key="d7">function management, execution processing</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function_call" target="function_response">
      <data key="d5">10.0</data>
      <data key="d6">Function responses are directly linked to function calls, as they represent the outcomes of executed functions.</data>
      <data key="d7">execution results, functional linkage</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function_call" target="uuid4">
      <data key="d5">6.0</data>
      <data key="d6">uuid4 is utilized in association with function calls to generate unique identifiers during parts processing.</data>
      <data key="d7">identifier generation, uniqueness</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="function_response" target="safety settings">
      <data key="d5">9.0</data>
      <data key="d6">Safety settings are applied to function responses to manage content control and compliance with standards.</data>
      <data key="d7">content regulation, compliance</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="validate_json" target="_gemini_streamed_response_ta">
      <data key="d5">8.0</data>
      <data key="d6">validate_json is a function leveraged within _gemini_streamed_response_ta to ensure the validity of the responses being processed.</data>
      <data key="d7">data integrity, response validation</data>
      <data key="d8">chunk-6dec771bf122777d549352881e0fea72</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Safety Settings Category" target="Threshold Settings">
      <data key="d5">8.0</data>
      <data key="d6">Threshold Settings are categorized under Safety Settings to define safety protocols and operational limits.</data>
      <data key="d7">safety management, classification</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai.models.groq" target="GroqModel">
      <data key="d5">9.0</data>
      <data key="d6">The GroqModel relies on the structures defined within pydantic_ai.models.groq for efficient interaction with Groq models.</data>
      <data key="d7">model framework, organizational structure</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ProductionGroqModelNames" target="PreviewGroqModelNames">
      <data key="d5">15.0</data>
      <data key="d6">ProductionGroqModelNames and PreviewGroqModelNames are related as they both categorize different model types usable within the Groq ecosystem.&lt;SEP&gt;ProductionGroqModelNames and PreviewGroqModelNames represent different model states available in the Groq system, highlighting versioning and classification.</data>
      <data key="d7">model categorization, development stages&lt;SEP&gt;versioning, model categorization</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GroqModel" target="GroqModelSettings">
      <data key="d5">20.0</data>
      <data key="d6">GroqModelSettings directly influences how the GroqModel operates, as it provides the necessary configurations for model requests.&lt;SEP&gt;GroqModelSettings provides necessary configurations for requests made by the GroqModel, ensuring optimal settings are used.</data>
      <data key="d7">model configuration, operational efficiency&lt;SEP&gt;model management, configuration settings</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GroqModel" target="Authentication Settings">
      <data key="d5">9.0</data>
      <data key="d6">Authentication Settings are crucial for secure access and operation of the GroqModel in API interactions.</data>
      <data key="d7">security, model access</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GroqModelSettings" target="chat.ChatCompletion">
      <data key="d5">18.0</data>
      <data key="d6">GroqModelSettings impact how chat.ChatCompletion responses are generated based on defined parameters.&lt;SEP&gt;GroqModelSettings influence the generation of a chat.ChatCompletion response by defining its behavior.</data>
      <data key="d7">model settings, response generation&lt;SEP&gt;response generation, model behavior</data>
      <data key="d8">chunk-77d1c9fabe1883697171dedd7266ffd7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Safety Settings" target="HARM_BLOCK_THRESHOLD_UNSPECIFIED">
      <data key="d5">7.0</data>
      <data key="d6">HARM_BLOCK_THRESHOLD_UNSPECIFIED is one of the options defined under Safety Settings that does not impose any harm blocking policies.</data>
      <data key="d7">safety parameters, threshold specifications</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Safety Settings" target="BLOCK_LOW_AND_ABOVE">
      <data key="d5">8.0</data>
      <data key="d6">BLOCK_LOW_AND_ABOVE is a threshold setting categorized under Safety Settings that defines actions allowed based on harm levels.</data>
      <data key="d7">threshold settings, safety criteria</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Safety Settings" target="BLOCK_MEDIUM_AND_ABOVE">
      <data key="d5">9.0</data>
      <data key="d6">BLOCK_MEDIUM_AND_ABOVE is included within the Safety Settings as it specifies actions prohibited based on medium or higher harm levels.</data>
      <data key="d7">safety prevention, threshold definition</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Safety Settings" target="BLOCK_ONLY_HIGH">
      <data key="d5">8.0</data>
      <data key="d6">BLOCK_ONLY_HIGH represents a restrictive threshold setting under Safety Settings that blocks only high severity actions.</data>
      <data key="d7">harm prevention, safety thresholds</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Safety Settings" target="BLOCK_NONE">
      <data key="d5">6.0</data>
      <data key="d6">BLOCK_NONE describes a safety setting with no restrictions, reflecting an extreme end of the Safety Settings spectrum.</data>
      <data key="d7">safety extremes, operational freedom</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Safety Settings" target="OFF">
      <data key="d5">5.0</data>
      <data key="d6">OFF signifies a state designated in Safety Settings where all forms of harm blocking are disabled, emphasizing unrestricted operations.</data>
      <data key="d7">unrestricted access, threshold disabling</data>
      <data key="d8">chunk-15fdf584bfe078df410fd6c110374e1e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="APIStatusError" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">APIStatusErrors are related to issues encountered during the generation of ModelResponses from requests.</data>
      <data key="d7">error handling, response validation</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="chat.ChatCompletionMessageParam" target="OpenAIStreamedResponse">
      <data key="d5">9.0</data>
      <data key="d6">chat.ChatCompletionMessageParam represents the structure of messages that are streamed in OpenAIStreamedResponse, indicating how responses are formatted.</data>
      <data key="d7">message structure, response format</data>
      <data key="d8">chunk-561b3b3cda17d16517ba963b544fdd01</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolCall" target="ToolCallPart">
      <data key="d5">8.0</data>
      <data key="d6">ToolCall events are generated when ToolCallParts are processed as part of the message to the model.</data>
      <data key="d7">function invocation, operational link</data>
      <data key="d8">chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncIterable" target="AsyncIterator">
      <data key="d5">8.0</data>
      <data key="d6">AsyncIterable provides the building blocks for implementing AsyncIterator, allowing seamless manipulation of asynchronous data streams.</data>
      <data key="d7">data handling, asynchronous programming</data>
      <data key="d8">chunk-23dd09bcb6c976f2167345bb77e402ff</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InstrumentedModel" target="__init__">
      <data key="d5">8.0</data>
      <data key="d6">The __init__ method is part of InstrumentedModel's definition, facilitating its initialization and configuration.</data>
      <data key="d7">class construction, method functionality</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InstrumentedModel" target="ModelResponse">
      <data key="d5">10.0</data>
      <data key="d6">The output of an InstrumentedModel's request is encapsulated in a ModelResponse, indicating a direct relationship.</data>
      <data key="d7">output, response handling</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InstrumentedModel" target="request">
      <data key="d5">10.0</data>
      <data key="d6">The request method is integral to the operation of InstrumentedModel, processing messages and producing responses.</data>
      <data key="d7">method functionality, core operation</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request" target="_instrument">
      <data key="d5">9.0</data>
      <data key="d6">The _instrument method is invoked during a request to set up necessary observability, linking them closely.</data>
      <data key="d7">instrumentation, observability</data>
      <data key="d8">chunk-790ebf5be3b16b55c5c47a819e17bb54</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request" target="ModelMessage">
      <data key="d5">6.0</data>
      <data key="d6">ModelMessage is the input format required by the request function to initiate a communication with the AI models.</data>
      <data key="d7">data format, input requirement</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request" target="ModelResponse">
      <data key="d5">6.0</data>
      <data key="d6">ModelResponse is the outputting structure returned by the request function after processing the input messages.</data>
      <data key="d7">output structure, processing</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request" target="infer_provider">
      <data key="d5">8.0</data>
      <data key="d6">The request function relies on the infer_provider function to determine which provider to communicate with based on the input given.</data>
      <data key="d7">function dependency, dynamic sourcing</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request" target="json_mode_schema_prompt">
      <data key="d5">6.0</data>
      <data key="d6">The json_mode_schema_prompt is likely used during the request function to format the JSON data correctly for processing.</data>
      <data key="d7">data formatting, structuring requests</data>
      <data key="d8">chunk-26694cbae32bb1e9e7496e96276959ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="span_name" target="span">
      <data key="d5">8.0</data>
      <data key="d6">Span name is associated with a span, representing the specific operation being tracked during AI processing.</data>
      <data key="d7">operation tracking, monitoring</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="span" target="logfire_api">
      <data key="d5">8.0</data>
      <data key="d6">span coordinates with logfire_api for performance monitoring and logging during graph execution.</data>
      <data key="d7">performance monitoring, logging</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="events" target="finish">
      <data key="d5">9.0</data>
      <data key="d6">Finish function finalizes and processes events that are tracked during the operation.</data>
      <data key="d7">event finalization, processing</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="events" target="self.settings.event_logger">
      <data key="d5">7.0</data>
      <data key="d6">The event logger records the events generated during the operations of the system.</data>
      <data key="d7">event logging, system monitoring</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="events" target="self.messages_to_otel_events">
      <data key="d5">8.0</data>
      <data key="d6">Transforming messages into OTEL events is crucial for tracking and monitoring operation occurrences.</data>
      <data key="d7">data transformation, observability</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self.settings.event_logger" target="self._emit_events">
      <data key="d5">9.0</data>
      <data key="d6">Emit events sends data to the event logger for tracking and analysis.</data>
      <data key="d7">event tracking, log management</data>
      <data key="d8">chunk-a381b47482fff82b5e9f8a96e51cf27c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralModel" target="MistralModelName">
      <data key="d5">9.0</data>
      <data key="d6">MistralModelName defines valid identifiers for various models under the Mistral category, establishing a naming convention for users.</data>
      <data key="d7">naming convention, model identification</data>
      <data key="d8">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralModel" target="ModelMessage">
      <data key="d5">7.0</data>
      <data key="d6">ModelMessage is used to format interactions with the MistralModel for requesting outputs during operations.</data>
      <data key="d7">interaction format, model communication</data>
      <data key="d8">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mistral Python Client" target="API Documentation">
      <data key="d5">8.0</data>
      <data key="d6">The API Documentation provides instructions on how to use the Mistral Python Client effectively for accessing Mistral's services.</data>
      <data key="d7">documentation, software guide</data>
      <data key="d8">chunk-49dda393c384d6eedda81d9cf452a9c8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralEventStreamAsync" target="ydantic">
      <data key="d5">8.0</data>
      <data key="d6">Yadantic is utilized within the MistralEventStreamAsync framework to manage data validation and ensure the integrity of streamed responses.</data>
      <data key="d7">data management, integration</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralEventStreamAsync" target="MistralCompletionEvent">
      <data key="d5">9.0</data>
      <data key="d6">MistralCompletionEvent is an event processed within the MistralEventStreamAsync framework, indicating task completion.".</data>
      <data key="d7">event handling, framework process</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralStreamedResponse" target="ToolCallPart">
      <data key="d5">8.0</data>
      <data key="d6">MistralStreamedResponse processes the output and generates a ToolCallPart based on validated JSON schema.</data>
      <data key="d7">processes, output generation</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralStreamedResponse" target="VALID_JSON_TYPE_MAPPING">
      <data key="d5">7.0</data>
      <data key="d6">MistralStreamedResponse uses VALID_JSON_TYPE_MAPPING to validate JSON types against Python types.</data>
      <data key="d7">type validation, compliance</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralStreamedResponse" target="_result.py">
      <data key="d5">9.0</data>
      <data key="d6">MistralStreamedResponse utilizes the _result.py script to validate output parameters against the defined JSON schema.</data>
      <data key="d7">validation process, script dependency</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralStreamedResponse" target="output_json">
      <data key="d5">8.0</data>
      <data key="d6">MistralStreamedResponse produces the output_json as a result of validated data processing.</data>
      <data key="d7">data production, validation result</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="first_chunk" target="ModelResponse">
      <data key="d5">9.0</data>
      <data key="d6">First_chunk is part of the data processing within ModelResponse, ensuring initial content is assessed before further actions are taken.</data>
      <data key="d7">data processing, response handling</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MistralToolCall" target="MistralFunctionCall">
      <data key="d5">10.0</data>
      <data key="d6">MistralFunctionCall is embedded in MistralToolCall, defining the function to be executed along with its arguments.</data>
      <data key="d7">function definition, tool call structure</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="async" target="BaseNode">
      <data key="d5">8.0</data>
      <data key="d6">BaseNode can define asynchronous methods that allow for non-blocking execution in the context of graph processing.</data>
      <data key="d7">asynchronous execution, code efficiency</data>
      <data key="d8">chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="output_json" target="ToolCallPart">
      <data key="d5">8.0</data>
      <data key="d6">output_json is transformed into a ToolCallPart to encapsulate the results of the tool call processed through validation.</data>
      <data key="d7">output transformation, processing</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="output_json" target="json_dict">
      <data key="d5">8.0</data>
      <data key="d6">output_json is derived from json_dict after ensuring it adheres to the structure and validation conditions set by the json_schema.</data>
      <data key="d7">data output, structured result</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="json_dict" target="json_schema">
      <data key="d5">9.0</data>
      <data key="d6">json_dict is validated against json_schema to ensure it meets all required parameters stipulated in the schema.</data>
      <data key="d7">schema validation, data integrity</data>
      <data key="d8">chunk-9a9bc262ebbbdd42a17a84adee4a7f9d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIModelSettings" target="ModelResponse">
      <data key="d5">7.0</data>
      <data key="d6">OpenAIModelSettings are used to customize the behavior of the model, influencing the generated ModelResponse.</data>
      <data key="d7">parameter influence, response customization</data>
      <data key="d8">chunk-3d1c7209debb23a47e4399b20a981057</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAIStreamedResponse" target="async Iterable">
      <data key="d5">9.0</data>
      <data key="d6">async Iterable allows OpenAIStreamedResponse to handle continuous data streams asynchronously, improving efficiency in response processing.</data>
      <data key="d7">asynchronous programming, efficiency</data>
      <data key="d8">chunk-561b3b3cda17d16517ba963b544fdd01</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ChatCompletionContentPartInputAudioParam" target="InputAudio">
      <data key="d5">7.0</data>
      <data key="d6">InputAudio is a critical part of ChatCompletionContentPartInputAudioParam, which manages audio input data for AI interactions.</data>
      <data key="d7">data management, input processing</data>
      <data key="d8">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cached_async_http_client" target="responses.ResponseInputFileParam">
      <data key="d5">7.0</data>
      <data key="d6">The cached_async_http_client fetches content that may be used in ResponseInputFileParam for user inputs.</data>
      <data key="d7">data fetching, client usage</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="response.content" target="File">
      <data key="d5">6.0</data>
      <data key="d6">File structures are utilized to manage response.content efficiently, ensuring that data retrieved from OpenAI APIs is appropriately processed.</data>
      <data key="d7">data management, API response handling</data>
      <data key="d8">chunk-53688e690a1714927cd95fd846af7f81</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI Responses API" target="Responses API documentation">
      <data key="d5">9.0</data>
      <data key="d6">The Responses API documentation serves as a resource for understanding how to use the OpenAI Responses API effectively.</data>
      <data key="d7">guidance, resource provision</data>
      <data key="d8">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI Responses API" target="OpenAI API docs">
      <data key="d5">10.0</data>
      <data key="d6">The OpenAI API docs provide essential information regarding the functionalities and usage of the OpenAI Responses API.</data>
      <data key="d7">documentation, user guidance</data>
      <data key="d8">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OpenAI Responses API" target="tool call">
      <data key="d5">9.0</data>
      <data key="d6">Tool calls can be executed through the OpenAI Responses API to perform specific tasks as defined by user inputs.</data>
      <data key="d7">functional capabilities, task execution</data>
      <data key="d8">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Responses API documentation" target="OpenAI API docs">
      <data key="d5">8.0</data>
      <data key="d6">Responses API documentation is included in the broader OpenAI API documentation, contributing to the overall understanding of API functionalities.</data>
      <data key="d7">comprehensive resources, interrelation</data>
      <data key="d8">chunk-66833d79e4d36b5a0e73579d383201e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponse Parameters" target="ModelResponse">
      <data key="d5">9.0</data>
      <data key="d6">ModelResponses are influenced by the ModelResponse Parameters that dictate the format and content of the response.</data>
      <data key="d7">response generation, parameter influence</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Reasoning" target="ModelResponse">
      <data key="d5">8.0</data>
      <data key="d6">Reasoning processes affect the way ModelResponses are generated, influencing the outputs based on user inputs and instructions.</data>
      <data key="d7">response generation, logic processing</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionCallOutput" target="ModelResponse">
      <data key="d5">7.0</data>
      <data key="d6">ModelResponses may include FunctionCallOutputs which are part of the structured output from function calls made within the model's operations.</data>
      <data key="d7">response structure, function output</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionCallOutput" target="ToolDefinition">
      <data key="d5">7.0</data>
      <data key="d6">ToolDefinitions are associated with the mechanisms through which FunctionCallOutputs are produced during model interactions.</data>
      <data key="d7">tool specification, function output</data>
      <data key="d8">chunk-7bbf029ffcbd941c7cbf2fc595c3e5c6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="responses.ResponseFunctionToolCallParam" target="ToolCallPart">
      <data key="d5">8.0</data>
      <data key="d6">ToolCallPart maps the parts of a tool call to the parameters required by ResponseFunctionToolCallParam for processing.</data>
      <data key="d7">tool mapping, parameter handling</data>
      <data key="d8">chunk-71384fed13de40875f84ff6882c37c84</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="my_agent" target="Unit Testing">
      <data key="d5">20.0</data>
      <data key="d6">the role of my_agent is to perform unit tests, validating the functionality of individual components through TestModel.</data>
      <data key="d7">unit testing methodology, functionality verification</data>
      <data key="d8">chunk-ba870a242fd1468b0176d028dc0c47b3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="my_agent" target="pydantic_ai_slim">
      <data key="d5">14.0</data>
      <data key="d6">my_agent utilizes pydantic_ai_slim for creating and validating settings related to its operations and interactions.</data>
      <data key="d7">configuration management, library usage</data>
      <data key="d8">chunk-ba870a242fd1468b0176d028dc0c47b3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FunctionToolResult" target="ToolCallPart">
      <data key="d5">10.0</data>
      <data key="d6">FunctionToolResult arises from the execution of commands defined in ToolCallPart, delivering outcomes back to the model.</data>
      <data key="d7">result generation, tool execution</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TextResult" target="ModelResponse">
      <data key="d5">9.0</data>
      <data key="d6">TextResult is part of ModelResponse, providing the textual content that results from the model's processing of requests.</data>
      <data key="d7">output structure, response content</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_request" target="ModelMessage">
      <data key="d5">10.0</data>
      <data key="d6">_request function processes ModelMessages to execute the required functions and generate a response.</data>
      <data key="d7">request handling, function execution</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="WrapperModel" target="ModelMessage">
      <data key="d5">7.0</data>
      <data key="d6">WrapperModel can manage requests containing ModelMessage instances, facilitating communication with the model.</data>
      <data key="d7">request management, model interaction</data>
      <data key="d8">chunk-7574296d70c6b864b4a5f29f2b14afe1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Iterable" target="ModelResponse">
      <data key="d5">7.0</data>
      <data key="d6">ModelResponse can encompass Iterable types to allow processing of multiple output elements sequentially or in batches.</data>
      <data key="d7">data handling, output processing</data>
      <data key="d8">chunk-7574296d70c6b864b4a5f29f2b14afe1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="test case" target="inputs">
      <data key="d5">9.0</data>
      <data key="d6">A test case incorporates specific inputs that are essential for conducting evaluations.</data>
      <data key="d7">evaluation process, foundational components</data>
      <data key="d8">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="test case" target="expected_output">
      <data key="d5">18.0</data>
      <data key="d6">The expected output defines the goals of the evaluation, guiding the evaluators on desired results.&lt;SEP&gt;The expected output sets the standards for what the evaluation will measure concerning the input provided in the test case.</data>
      <data key="d7">evaluation criteria, outcome relationship&lt;SEP&gt;reference standard, evaluation clarity</data>
      <data key="d8">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="test case" target="InputsT">
      <data key="d5">8.0</data>
      <data key="d6">The test case is closely tied to InputsT as it specifies the type of inputs necessary for its evaluation.</data>
      <data key="d7">evaluation requirements, input specification</data>
      <data key="d8">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="test case" target="MetadataT">
      <data key="d5">7.0</data>
      <data key="d6">The test case relates to MetadataT because additional metadata provides an essential context for understanding the evaluation metrics.</data>
      <data key="d7">contextual understanding, data enhancement</data>
      <data key="d8">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="inputs" target="task">
      <data key="d5">8.0</data>
      <data key="d6">Each task requires specific inputs to function, linking them directly in the evaluation process.</data>
      <data key="d7">input parameters, task execution</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="inputs" target="EvaluationResult&lt;T&gt;">
      <data key="d5">7.0</data>
      <data key="d6">EvaluationResult&lt;T&gt; is dependent on inputs to determine whether the results from evaluations are valid according to specified criteria.</data>
      <data key="d7">result validation, performance assessment</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InputsT" target="OutputsT">
      <data key="d5">18.0</data>
      <data key="d6">InputsT are used to produce OutputsT in evaluating task functions, demonstrating the input-output relationship in testing."&lt;/|&gt;"input-output relationship, function evaluation&lt;SEP&gt;The type of inputs required (InputsT) directly corresponds to the expected outputs (OutputT) during evaluation processes.</data>
      <data key="d7">9&lt;SEP&gt;input-output relationship, evaluative correlation</data>
      <data key="d8">chunk-a7db06d94811ecc4dc37c02ebe2a82c3&lt;SEP&gt;chunk-c7b339013d51cc610e38dd15ec7332e2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InputsT" target="Self">
      <data key="d5">7.0</data>
      <data key="d6">The Self instance represents the dataset which encompasses multiple inputs required for evaluation tasks.</data>
      <data key="d7">dataset structure, foundational elements</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="InputsT" target="generate_dataset">
      <data key="d5">8.0</data>
      <data key="d6">The generate_dataset function requires InputsT to function, as it defines the initial parameters necessary for creation of a structured dataset.</data>
      <data key="d7">input requirements, dataset generation</data>
      <data key="d8">chunk-dcc0ef06948f95ef73eef5b238e34d40</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MetadataT" target="OutputT">
      <data key="d5">8.0</data>
      <data key="d6">MetadataT provides details that can inform what expected output to anticipate based on the inputs of the test case.</data>
      <data key="d7">informative aspect, evaluative detail</data>
      <data key="d8">chunk-a7db06d94811ecc4dc37c02ebe2a82c3</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MetadataT" target="Self">
      <data key="d5">8.0</data>
      <data key="d6">The Self instance utilizes metadata to enhance the evaluation process by providing context for each case.</data>
      <data key="d7">contextual information, evaluation enhancement</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MetadataT" target=" evaluate_sync">
      <data key="d5">7.0</data>
      <data key="d6">The evaluate_sync method utilizes MetadataT to provide additional contextual information relevant to the evaluation process.</data>
      <data key="d7">synchronous context, metadata utilization</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MetadataT" target="generate_dataset">
      <data key="d5">7.0</data>
      <data key="d6">MetadataT is tied to the dataset created by generate_dataset, offering context and additional details about the generated outputs.</data>
      <data key="d7">contextual information, dataset details</data>
      <data key="d8">chunk-dcc0ef06948f95ef73eef5b238e34d40</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OutputT" target="Self">
      <data key="d5">8.0</data>
      <data key="d6">The Self instance includes the defined expected outputs which are crucial for comparing case performances.</data>
      <data key="d7">assessment, evaluation criteria</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OutputT" target="OutputT">
      <data key="d5">5.0</data>
      <data key="d6">The entity 'OutputT' is both the output and the subject in the document, indicating a self-referential relationship.</data>
      <data key="d7">self-reference</data>
      <data key="d8">chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OutputT" target="duration">
      <data key="d5">7.0</data>
      <data key="d6">OutputT is related to the duration, as the time taken for task execution may be part of the output metrics, indicating performance efficiency.</data>
      <data key="d7">task performance, execution duration</data>
      <data key="d8">chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OutputT" target="metrics">
      <data key="d5">8.0</data>
      <data key="d6">The metrics provide quantitative measures of output performance, showcasing how OutputT evaluates success.</data>
      <data key="d7">performance measurement, evaluation metrics</data>
      <data key="d8">chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OutputT" target="span_tree">
      <data key="d5">9.0</data>
      <data key="d6">The span_tree provides a visual representation of the task execution, enhancing the understanding of the OutputT's attributes.</data>
      <data key="d7">task visualization, performance analysis</data>
      <data key="d8">chunk-b3a62dd1e4feda3a9c3f07deba46161f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="OutputT" target="generate_dataset">
      <data key="d5">9.0</data>
      <data key="d6">The output of the generate_dataset function is determined by the OutputT specifications, providing structure to the produced dataset.</data>
      <data key="d7">output generation, dataset structure</data>
      <data key="d8">chunk-dcc0ef06948f95ef73eef5b238e34d40</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="test cases" target="EvaluationDataset">
      <data key="d5">8.0</data>
      <data key="d6">The EvaluationDataset comprises multiple test cases used for validating tasks.</data>
      <data key="d7">dataset structure, test management</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="test cases" target="Evaluation Report">
      <data key="d5">8.0</data>
      <data key="d6">The Evaluation Report contains results from evaluations of the test cases.</data>
      <data key="d7">results summary, performance evaluation</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluator" target="Evaluation Report">
      <data key="d5">9.0</data>
      <data key="d6">Evaluators generate an Evaluation Report based on the performance of test cases.</data>
      <data key="d7">assessment, reporting</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluator" target="EvaluationDataset">
      <data key="d5">7.0</data>
      <data key="d6">Evaluators are associated with the EvaluationDataset to apply assessments on the test cases.</data>
      <data key="d7">evaluation, role association</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluator" target="EvaluationReport">
      <data key="d5">9.0</data>
      <data key="d6">The evaluator collects results from tests and compiles them into the Evaluation Report.</data>
      <data key="d7">assessment, reporting</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationDataset" target="cases">
      <data key="d5">8.0</data>
      <data key="d6">The EvaluationDataset is made up of multiple cases that are used for testing and evaluation.</data>
      <data key="d7">dataset structure, test management</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cases" target="task">
      <data key="d5">9.0</data>
      <data key="d6">Each case corresponds to a specific task to be evaluated, forming the core of the evaluation process.</data>
      <data key="d7">task evaluation, functional testing</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cases" target="average">
      <data key="d5">9.0</data>
      <data key="d6">The average method takes a list of cases as input to compute average attributes and metrics.</data>
      <data key="d7">input processing, averaging</data>
      <data key="d8">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cases" target="case">
      <data key="d5">9.0</data>
      <data key="d6">cases is a collection that contains multiple instances of case, each representing an evaluation during the report.</data>
      <data key="d7">collection, instance representation</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cases" target="average_task_duration">
      <data key="d5">7.0</data>
      <data key="d6">average_task_duration is computed using data derived from the task durations found within the individual cases.</data>
      <data key="d7">calculation, task duration</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cases" target="average_scores">
      <data key="d5">8.0</data>
      <data key="d6">average_scores is derived from the scores present in each of the cases evaluated during the reporting process.</data>
      <data key="d7">score aggregation, metric generation</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cases" target="average_labels">
      <data key="d5">7.0</data>
      <data key="d6">average_labels accumulates and averages the labeling data collected from all cases in the evaluation.</data>
      <data key="d7">label aggregation, summarization</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cases" target="average_metrics">
      <data key="d5">8.0</data>
      <data key="d6">average_metrics represent the overall performance metrics averaged across all cases processed in the evaluation.</data>
      <data key="d7">metric analysis, performance overview</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="cases" target="EvaluationReport">
      <data key="d5">9.0</data>
      <data key="d6">Cases are included in the EvaluationReport to represent specific instances under evaluation.</data>
      <data key="d7">evaluation components, report content</data>
      <data key="d8">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="max_concurrency" target="Concurrent Evaluations">
      <data key="d5">7.0</data>
      <data key="d6">Max concurrency limits how many evaluations can take place at once, affecting overall evaluation speed.</data>
      <data key="d7">performance, concurrency management</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="async def evaluate" target="tasks">
      <data key="d5">8.0</data>
      <data key="d6">The evaluate method is responsible for executing tasks asynchronously as part of the evaluation process.</data>
      <data key="d7">asynchronous execution, task handling</data>
      <data key="d8">chunk-721115271d8562920e102e684e09862b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="pydantic_evals">
      <data key="d5">9.0</data>
      <data key="d6">The EvaluationReport is part of the pydantic_evals library for documenting test results.</data>
      <data key="d7">library, report generation</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="ReportCase">
      <data key="d5">18.0</data>
      <data key="d6">ReportCase instances are stored within the EvaluationReport, allowing the renderer to access evaluation results for each case.&lt;SEP&gt;The EvaluationReport contains a list of ReportCases that detail the evaluation results.</data>
      <data key="d7">data structure, case association&lt;SEP&gt;report composition, evaluation results</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="ReportCaseAggregate">
      <data key="d5">16.0</data>
      <data key="d6">ReportCaseAggregate derives data from the EvaluationReport to compute averages for assessments.&lt;SEP&gt;The EvaluationReport can be summarized using ReportCaseAggregate, which highlights average results from the ReportCases.</data>
      <data key="d7">data aggregation, report analysis&lt;SEP&gt;report summary, result averaging</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284&lt;SEP&gt;chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="ReportCaseAggregateAverage">
      <data key="d5">9.0</data>
      <data key="d6">The EvaluationReport can incorporate ReportCaseAggregateAverage to summarize the average metrics of evaluated cases.</data>
      <data key="d7">report summarization, average computation</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="Report">
      <data key="d5">8.0</data>
      <data key="d6">The EvaluationReport is a specific type of Report focused on structured evaluation processes.</data>
      <data key="d7">report type, evaluation focus</data>
      <data key="d8">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="baseline">
      <data key="d5">7.0</data>
      <data key="d6">The baseline serves as a comparison point for the EvaluationReport to analyze any changes over time.</data>
      <data key="d7">comparison metrics, performance assessment</data>
      <data key="d8">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="output_config">
      <data key="d5">9.0</data>
      <data key="d6">output_config determines how the final EvaluationReport is presented to users after processing.</data>
      <data key="d7">report presentation, configuration</data>
      <data key="d8">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="score_configs">
      <data key="d5">15.0</data>
      <data key="d6">The score_configs parameter allows customization of how specific scores are formatted and displayed, enhancing the clarity of the report.&lt;SEP&gt;score_configs influence how performance scores are calculated and reflected within the EvaluationReport.</data>
      <data key="d7">score calculation, assessment metrics&lt;SEP&gt;score customization, report clarity</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="label_configs">
      <data key="d5">14.0</data>
      <data key="d6">The label_configs setting is used to adjust how labels are represented in the EvaluationReport, affecting their presentation in the output.&lt;SEP&gt;label_configs play a critical role in categorizing various elements of the EvaluationReport.</data>
      <data key="d7">categorization, report elements&lt;SEP&gt;label representation, user customization</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="metric_configs">
      <data key="d5">15.0</data>
      <data key="d6">The metric_configs parameter influences how different metrics are computed and formatted in the report, impacting overall presentation.&lt;SEP&gt;metric_configs define the metrics to be included in the EvaluationReport, impacting its content and analysis.</data>
      <data key="d7">metric definition, evaluation criteria&lt;SEP&gt;metric handling, report generation</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07&lt;SEP&gt;chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="duration_config">
      <data key="d5">7.0</data>
      <data key="d6">duration_config settings affect how time-related data are reported in the EvaluationReport.</data>
      <data key="d7">duration measurement, metrics</data>
      <data key="d8">chunk-bcd914e11b03ba538ea23f2601432f3d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="console_table">
      <data key="d5">18.0</data>
      <data key="d6">The console_table method is part of the EvaluationReport class and is used to generate a formatted report table.&lt;SEP&gt;The console_table method is part of the EvaluationReport class and provides a formatted visual representation of evaluation data.</data>
      <data key="d7">report generation, method association</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="EvaluationRenderer">
      <data key="d5">24.0</data>
      <data key="d6">EvaluationRenderer utilizes EvaluationReport to generate and render reports related to evaluations.&lt;SEP&gt;EvaluationRenderer works closely with EvaluationReport to format and render evaluation data effectively in reports.&lt;SEP&gt;EvaluationRenderer works in conjunction with EvaluationReport to format and present evaluation data.</data>
      <data key="d7">rendering, collaboration&lt;SEP&gt;rendering, report generation&lt;SEP&gt;report rendering, evaluation process</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5&lt;SEP&gt;chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="baseline report">
      <data key="d5">14.0</data>
      <data key="d6">The baseline report is used within the EvaluationReport to compare current data against previously established metrics.&lt;SEP&gt;The baseline report is utilized within EvaluationReport to compare and contrast current evaluation results with established benchmarks.</data>
      <data key="d7">reference, comparison</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="RenderValueConfig">
      <data key="d5">14.0</data>
      <data key="d6">RenderValueConfig is leveraged in EvaluationReport to determine the formatting and rendering of values displayed in reports.&lt;SEP&gt;RenderValueConfig is utilized in the evaluation report to determine how values appear in the final output.</data>
      <data key="d7">configuration, value rendering&lt;SEP&gt;configuration, value representation</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="RenderNumberConfig">
      <data key="d5">14.0</data>
      <data key="d6">RenderNumberConfig influences the formatting of numerical scores captured in reports produced by EvaluationReport.&lt;SEP&gt;RenderNumberConfig provides specific formatting settings for numerical scores presented in EvaluationReport.</data>
      <data key="d7">configuration, numeric formatting</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="input and output details">
      <data key="d5">6.0</data>
      <data key="d6">Input and output details are optional features of EvaluationReport that enhance the clarity of the evaluation process documentation.</data>
      <data key="d7">context, reporting details</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="RenderDurationConfig">
      <data key="d5">7.0</data>
      <data key="d6">RenderDurationConfig plays a role in formatting how duration metrics are displayed in evaluation reports, adding to the report’s consistency.</data>
      <data key="d7">time formatting, report consistency</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="include_input">
      <data key="d5">6.0</data>
      <data key="d6">The include_input configuration determines whether input data is presented in the EvaluationReport, influencing report transparency.</data>
      <data key="d7">report transparency, configuration setting</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="include_metadata">
      <data key="d5">6.0</data>
      <data key="d6">The include_metadata option decides if information about the evaluation metrics and methods are included in the EvaluationReport.</data>
      <data key="d7">report comprehensiveness, configuration setting</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="include_expected_output">
      <data key="d5">6.0</data>
      <data key="d6">The include_expected_output setting influences whether the report displays both expected and actual outputs, enhancing understanding.</data>
      <data key="d7">output comparison, reporting detail</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="Evaluation Diff">
      <data key="d5">9.0</data>
      <data key="d6">Evaluation Diff is a process that utilizes the EvaluationReport to identify metrics and changes compared to the baseline.</data>
      <data key="d7">evaluation process, comparison</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="Baseline">
      <data key="d5">10.0</data>
      <data key="d6">EvaluationReport is compared against the Baseline to identify discrepancies and performance improvements.</data>
      <data key="d7">comparison, performance evaluation</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="Number Renderer">
      <data key="d5">7.0</data>
      <data key="d6">Number Renderer is utilized within the EvaluationReport to display numerical metrics clearly.</data>
      <data key="d7">data representation, metrics</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="Value Renderer">
      <data key="d5">7.0</data>
      <data key="d6">Value Renderer aids in visualizing categorical data present within the EvaluationReport.</data>
      <data key="d7">data visualization, reporting</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationReport" target="Duration Renderer">
      <data key="d5">8.0</data>
      <data key="d6">Duration Renderer specifically visualizes time-based metrics found in the EvaluationReport.</data>
      <data key="d7">time metrics, data representation</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="from_file" target="Self">
      <data key="d5">9.0</data>
      <data key="d6">The from_file function allows for the creation of a new Self instance by loading an existing dataset from an external file.</data>
      <data key="d7">data management, organization</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="from_text" target="custom_evaluator_types">
      <data key="d5">6.0</data>
      <data key="d6">The custom_evaluator_types parameter can be passed to from_text to modify how the dataset is deserialized for custom needs.</data>
      <data key="d7">customization, evaluation</data>
      <data key="d8">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="from_text" target="fmt">
      <data key="d5">8.0</data>
      <data key="d6">The fmt parameter defines the expected format (YAML or JSON) when using from_text, guiding how to parse the contents.</data>
      <data key="d7">format specification, content processing</data>
      <data key="d8">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="from_dict" target="dataset_model">
      <data key="d5">9.0</data>
      <data key="d6">The dataset_model is validated when using from_dict to ensure the data conforms to the expected structure of a Dataset.</data>
      <data key="d7">validation, data structure</data>
      <data key="d8">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="from_dict" target="dataset_model_type">
      <data key="d5">7.0</data>
      <data key="d6">dataset_model_type indicates the type of dataset structure being generated when using from_dict to load data.</data>
      <data key="d7">data structure, type indication</data>
      <data key="d8">chunk-a58389fcd1596d9d04e1ed8f3cd54773</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator Registry" target="ExceptionGroup">
      <data key="d5">8.0</data>
      <data key="d6">The ExceptionGroup captures errors during the loading of evaluators, indicating issues in the Evaluator Registry management or loading process.</data>
      <data key="d7">error handling, system reliability</data>
      <data key="d8">chunk-1a1db7f3f2cdd3688c79c7bd79b8514e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="TypedDict" target="Any">
      <data key="d5">8.0</data>
      <data key="d6">TypedDict can define fields of type Any, allowing for flexible typing in defined dictionaries.</data>
      <data key="d7">flexible typing, data structure</data>
      <data key="d8">chunk-e8b0da52016600c1ab9198b94278d4ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Any" target="float">
      <data key="d5">6.0</data>
      <data key="d6">The type hint Any allows for variables to accommodate float types, enabling diverse data handling.</data>
      <data key="d7">type flexibility, programming</data>
      <data key="d8">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Any" target="int">
      <data key="d5">6.0</data>
      <data key="d6">The presence of Any allows for variables to accept integer types, contributing to dynamic typing.</data>
      <data key="d7">type flexibility, programming</data>
      <data key="d8">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SerializerFunctionWrapHandler" target="SerializationInfo">
      <data key="d5">9.0</data>
      <data key="d6">SerializerFunctionWrapHandler utilizes SerializationInfo to manage schema in serialized outputs.</data>
      <data key="d7">uses, serialization management</data>
      <data key="d8">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SerializationInfo" target="serialize">
      <data key="d5">9.0</data>
      <data key="d6">SerializationInfo contains information used in the serialize method to properly format the Evaluator into JSON.</data>
      <data key="d7">serialization support, information structure</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Context" target="Schema">
      <data key="d5">7.0</data>
      <data key="d6">Context can include a Schema that defines how data should be structured during serialization.</data>
      <data key="d7">data structure, configuration</data>
      <data key="d8">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_serializer" target="_add_json_schema">
      <data key="d5">8.0</data>
      <data key="d6">The model_serializer uses the _add_json_schema function to enhance its output with additional schema information.</data>
      <data key="d7">serialization enhancement, schema integration</data>
      <data key="d8">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_serializer" target="serialize_output">
      <data key="d5">10.0</data>
      <data key="d6">The model_serializer affects the serialize_output through its operations, ensuring data is formatted as required.</data>
      <data key="d7">output formatting, data processing</data>
      <data key="d8">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_add_json_schema" target="nxt">
      <data key="d5">7.0</data>
      <data key="d6">The _add_json_schema event involves processing by nxt, which is responsible for handling the serialized output.</data>
      <data key="d7">process handling, serialization</data>
      <data key="d8">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="info" target="schema">
      <data key="d5">9.0</data>
      <data key="d6">Info contains the schema context necessary to properly structure the serialized output according to predefined rules.</data>
      <data key="d7">context significance, schema validation</data>
      <data key="d8">chunk-ce77d28e25c8e076c1a08f2eb9cfc746</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_evals" target="to_file">
      <data key="d5">9.0</data>
      <data key="d6">The to_file method is part of the pydantic_evals library, indicating its functionality relates to dataset management.</data>
      <data key="d7">dataset management, library functionality</data>
      <data key="d8">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_evals" target="model_dump">
      <data key="d5">8.0</data>
      <data key="d6">The model_dump method is utilized within the pydantic_evals library to convert models into a specific format.</data>
      <data key="d7">method usage, model conversion</data>
      <data key="d8">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_evals" target="Python Evaluator">
      <data key="d5">9.0</data>
      <data key="d6">Python Evaluator is a part of the pydantic_evals framework designed specifically for executing Python expressions in a safe context.</data>
      <data key="d7">framework component, execution</data>
      <data key="d8">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_evals" target="otel">
      <data key="d5">9.0</data>
      <data key="d6">pydantic_evals is a library that implements features pertinent to OpenTelemetry for span evaluations and telemetry data analysis.</data>
      <data key="d7">library functionality, observability</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_evals" target="SpanNode">
      <data key="d5">16.0</data>
      <data key="d6">Pydantic_evals encompasses the SpanNode class at the core of its span management functionality.&lt;SEP&gt;Pydantic_evals houses the SpanNode class, which is fundamental to managing spans.</data>
      <data key="d7">implementation context, class instance&lt;SEP&gt;implementation context, class usage</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluate" target="EvaluatorContext">
      <data key="d5">9.0</data>
      <data key="d6">The evaluate method requires an EvaluatorContext to obtain inputs, outputs, and metadata necessary for the performance evaluation.</data>
      <data key="d7">method requirement, context dependency</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluate" target="Awaitable">
      <data key="d5">7.0</data>
      <data key="d6">The evaluate method can return an Awaitable, allowing for asynchronous evaluation in the context of the Evaluator.</data>
      <data key="d7">asynchronous processing, evaluation return type</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="evaluate" target="EvaluatorOutput">
      <data key="d5">10.0</data>
      <data key="d6">The evaluate method ultimately returns an EvaluatorOutput, which indicates the results of executing the evaluation logic based on provided inputs.</data>
      <data key="d7">evaluation process, result generation</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="limiter" target="self.evaluators">
      <data key="d5">7.0</data>
      <data key="d6">limiter works in conjunction with self.evaluators to regulate the pace of task evaluations when dealing with a dataset.</data>
      <data key="d7">rate-limiting, evaluation control</data>
      <data key="d8">chunk-b88722767613f27ba54bd4b6245204cd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="add_evaluator" target="Self">
      <data key="d5">9.0</data>
      <data key="d6">The add_evaluator function interacts with the Self instance to attach evaluators, impacting how cases are evaluated.</data>
      <data key="d7">functionality, evaluative process</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self.cases" target="case.name">
      <data key="d5">6.0</data>
      <data key="d6">case.name is a unique identifier used within the self.cases to reference and distinguish individual cases.</data>
      <data key="d7">categorization, identification</data>
      <data key="d8">chunk-2b642c0eb3f8e30082fb1c02c90b38ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DEFAULT_SCHEMA_PATH_TEMPLATE" target="model_json_schema_with_evaluators">
      <data key="d5">7.0</data>
      <data key="d6">The model_json_schema_with_evaluators method references the DEFAULT_SCHEMA_PATH_TEMPLATE constant for generating schema paths.</data>
      <data key="d7">method dependency, schema generation</data>
      <data key="d8">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="model_dump" target="model_dump_json">
      <data key="d5">7.0</data>
      <data key="d6">model_dump_json extends the functionality of model_dump by specifically serializing data to JSON format.</data>
      <data key="d7">data serialization, format specificity</data>
      <data key="d8">chunk-68c71ff18ccbf9e8039bfdaa893a9aeb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="registry" target="evaluator_class">
      <data key="d5">8.0</data>
      <data key="d6">The registry holds various evaluator classes that dictate how evaluations are performed.</data>
      <data key="d7">organizational structure, functionality</data>
      <data key="d8">chunk-c0417af0fa24429ddd11fe9cfa92e39e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_CURRENT_TASK_RUN" target="current_case">
      <data key="d5">14.0</data>
      <data key="d6">current_case is obtained from the _CURRENT_TASK_RUN organization, linking the two in the context of task execution.</data>
      <data key="d7">task management, context linkage</data>
      <data key="d8">chunk-88aa29b286377569bc39ad941b6e9f6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="increment" target="current_case">
      <data key="d5">16.0</data>
      <data key="d6">current_case has an operation to increment a metric, indicating an active state and performance tracking.</data>
      <data key="d7">task operation, performance tracking</data>
      <data key="d8">chunk-88aa29b286377569bc39ad941b6e9f6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="increment" target="amount">
      <data key="d5">9.0</data>
      <data key="d6">The increment operation requires an amount, identifying how much to increase the metric by.</data>
      <data key="d7">parameter specification, operation requirement</data>
      <data key="d8">chunk-88aa29b286377569bc39ad941b6e9f6a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="HasMatchingSpan" target="IsInstance">
      <data key="d5">5.0</data>
      <data key="d6">Both are evaluators that validate certain conditions in the evaluation context, focusing on checking specific attributes."|&gt;"evaluation validation, functionality overlap</data>
      <data key="d7">5</data>
      <data key="d8">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="HasMatchingSpan" target="LLMJudge">
      <data key="d5">6.0</data>
      <data key="d6">HasMatchingSpan assists LLMJudge by providing a method to validate effective span matching as part of output assessment."|&gt;"functional dependency, evaluation support</data>
      <data key="d7">6</data>
      <data key="d8">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="IsInstance" target="LLMJudge">
      <data key="d5">7.0</data>
      <data key="d6">IsInstance provides an evaluation type check that complements LLMJudge's analysis of output quality against specific criteria."|&gt;"functional dependency, quality validation</data>
      <data key="d7">7</data>
      <data key="d8">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="LLMJudge" target="MaxDuration">
      <data key="d5">8.0</data>
      <data key="d6">MaxDuration’s performance check can be critical in the overall evaluation process used by LLMJudge to ensure timely outputs."|&gt;"performance evaluation, time management</data>
      <data key="d7">8</data>
      <data key="d8">chunk-9ed140ecdab085e2534a8130bc747b5c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluatorContext" target="EvaluatorOutput">
      <data key="d5">8.0</data>
      <data key="d6">EvaluatorOutput is generated within the context provided by EvaluatorContext, which contains the necessary inputs and metadata for the evaluation.</data>
      <data key="d7">context dependency, evaluation framework</data>
      <data key="d8">chunk-76d64a3e02c213511d0d0fa80098b99b</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Source Code" target="common.py">
      <data key="d5">8.0</data>
      <data key="d6">The source code contains the implementation details and methods defined within the common.py file.</data>
      <data key="d7">code organization, structure</data>
      <data key="d8">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluate Method" target="Evaluator Context Attributes">
      <data key="d5">8.0</data>
      <data key="d6">The Evaluate method uses attributes from Evaluator Context to determine the correctness of task outputs.</data>
      <data key="d7">output assessment, attribute utilization</data>
      <data key="d8">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluator Context Attributes" target="Metrics">
      <data key="d5">7.0</data>
      <data key="d6">Metrics can be associated with Evaluator Context Attributes to provide insights on task evaluations.</data>
      <data key="d7">performance measurement, analytics</data>
      <data key="d8">chunk-1e4fc04e07a090d99ba9788f91be22b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="duration" target="SpanNode">
      <data key="d5">8.0</data>
      <data key="d6">The duration property applies to SpanNode, indicating the time associated with the node's trace."&lt;&lt;"time representation, tracing</data>
      <data key="d7">8</data>
      <data key="d8">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="metrics" target="ReportCaseAggregate">
      <data key="d5">8.0</data>
      <data key="d6">The metrics attribute in ReportCaseAggregate provides calculated performance metrics from the case data.</data>
      <data key="d7">measurement, performance analysis</data>
      <data key="d8">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="downcast" target="value_types">
      <data key="d5">8.0</data>
      <data key="d6">The downcast method utilizes value_types as parameters to determine if the evaluation value can be converted to a more specific type.</data>
      <data key="d7">type conversion, method functionality</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="downcast" target="self.value">
      <data key="d5">10.0</data>
      <data key="d6">self.value is the primary attribute evaluated by the downcast method to check against the specified types.</data>
      <data key="d7">evaluation attribute, method operation</data>
      <data key="d8">chunk-20e032599e3c3c011a88dd3096b104d9</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MISSING" target="Raw Arguments">
      <data key="d5">6.0</data>
      <data key="d6">MISSING represents the lack of certain values that can affect the compilation of raw arguments for functions.</data>
      <data key="d7">data absence, argument compilation</data>
      <data key="d8">chunk-c5ec0773b9bee4d3c1e47d6c99be1b86</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluatorOutput" target="evaluate_async">
      <data key="d5">8.0</data>
      <data key="d6">evaluate_async also returns the evaluation result, potentially in an asynchronous manner similar to evaluate_sync.</data>
      <data key="d7">method outcome, evaluation result</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluatorOutput" target="serialize">
      <data key="d5">7.0</data>
      <data key="d6">serialize provides a JSON-serializable representation of the Evaluator, thus transferring the EvaluatorOutput into a serializable format.</data>
      <data key="d7">serialization, evaluator representation</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluatorOutput" target="build_serialization_arguments">
      <data key="d5">6.0</data>
      <data key="d6">build_serialization_arguments defines the parameters required for constructing an EvaluatorOutput in a serialized dictionary format.</data>
      <data key="d7">argument preparation, serialization</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="serialize" target="EvaluatorSpec">
      <data key="d5">9.0</data>
      <data key="d6">EvaluatorSpec is produced as a result of the serialize method, allowing for JSON-compatible representation of the Evaluator.</data>
      <data key="d7">output structure, JSON compatibility</data>
      <data key="d8">chunk-09795f59482a4f70d3c8059b12e12196</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Field" target="Raw Arguments">
      <data key="d5">8.0</data>
      <data key="d6">Field is responsible for capturing and processing values that contribute to raw arguments in a function context.</data>
      <data key="d7">data processing, function parameters</data>
      <data key="d8">chunk-c5ec0773b9bee4d3c1e47d6c99be1b86</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="ReadableSpan">
      <data key="d5">16.0</data>
      <data key="d6">SpanNode can be constructed from a ReadableSpan, illustrating its role in representing span data within a tracing system.&lt;SEP&gt;SpanNode can be created from a ReadableSpan object, indicating that it represents the structure derived from a span in the context of tracing.</data>
      <data key="d7">data structure, creation&lt;SEP&gt;data structure, representation</data>
      <data key="d8">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="AttributeValue">
      <data key="d5">18.0</data>
      <data key="d6">SpanNode contains a dictionary of attributes that are represented as AttributeValue pairs, allowing it to store metadata for each span.&lt;SEP&gt;SpanNode contains attributes stored as AttributeValue entries, indicating how metadata is organized and accessed within each span.</data>
      <data key="d7">metadata management, organizational structure&lt;SEP&gt;metadata storage, organizational structure</data>
      <data key="d8">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="Parent Node Key">
      <data key="d5">7.0</data>
      <data key="d6">The Parent Node Key refers to the SpanNode's connection to its parent, essential for maintaining the hierarchy within the span tree.</data>
      <data key="d7">hierarchical relationship, node connection</data>
      <data key="d8">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="Children">
      <data key="d5">8.0</data>
      <data key="d6">Children are stored within a SpanNode, illustrating how spans can have sub-spans that further detail the operation.</data>
      <data key="d7">node hierarchy, child nodes</data>
      <data key="d8">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="Ancestors">
      <data key="d5">6.0</data>
      <data key="d6">Ancestors of a SpanNode indicate its position within the hierarchy, allowing for traversal up the span tree.</data>
      <data key="d7">hierarchical structure, lineage</data>
      <data key="d8">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="Descendants">
      <data key="d5">7.0</data>
      <data key="d6">Descendants represent the spans that are children or lower in the hierarchy to a SpanNode, allowing for complex relationships to be navigated.</data>
      <data key="d7">hierarchical relationship, child spans</data>
      <data key="d8">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="DFS Query">
      <data key="d5">8.0</data>
      <data key="d6">The SpanNode utilizes DFS queries to traverse its hierarchical structure effectively.</data>
      <data key="d7">data structure, traversal method</data>
      <data key="d8">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="DFS (Depth-First Search)">
      <data key="d5">8.0</data>
      <data key="d6">SpanNode uses the DFS algorithm to explore its hierarchical structure for querying purposes.</data>
      <data key="d7">data structure, traversal method</data>
      <data key="d8">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="filter_ancestors method">
      <data key="d5">15.0</data>
      <data key="d6">The filter_ancestors method operates on SpanNode instances to retrieve all matching ancestors.&lt;SEP&gt;The filter_ancestors method operates on SpanNode to allow filtering of ancestors based on predicates.</data>
      <data key="d7">ancestor filtering, conditions&lt;SEP&gt;method functionality, ancestor retrieval</data>
      <data key="d8">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="first_ancestor method">
      <data key="d5">7.0</data>
      <data key="d6">The first_ancestor method is called on SpanNode to find the closest matching ancestor according to its criteria.</data>
      <data key="d7">ancestor retrieval, method usage</data>
      <data key="d8">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="any_ancestor method">
      <data key="d5">6.0</data>
      <data key="d6">The any_ancestor method checks the parent hierarchy of SpanNode to verify the presence of any matching ancestor.</data>
      <data key="d7">hierarchical check, predicate satisfaction</data>
      <data key="d8">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="add_child">
      <data key="d5">19.0</data>
      <data key="d6">The add_child function is applied to SpanNode instances, establishing parent-child relationships in the trace hierarchy.&lt;SEP&gt;The add_child method is specifically designed to work with SpanNode to connect child nodes, establishing parent-child relationships."&lt;&lt;"hierarchical function, data structure</data>
      <data key="d7">10&lt;SEP&gt;hierarchical structure, function usage</data>
      <data key="d8">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="find_children">
      <data key="d5">17.0</data>
      <data key="d6">Find_children is a method specifically tailored for SpanNode that allows the retrieval of its immediate child nodes based on specified criteria.&lt;SEP&gt;The find_children method operates on SpanNode to filter its child nodes according to specific criteria.</data>
      <data key="d7">child retrieval, node filtering&lt;SEP&gt;data filtering, child retrieval</data>
      <data key="d8">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="first_child">
      <data key="d5">33.0</data>
      <data key="d6">The first_child function is employed with SpanNode to navigate to its first matching child node.&lt;SEP&gt;The first_child method facilitates access to a specific child of a SpanNode based on criteria, allowing for efficient navigation.&lt;SEP&gt;The first_child method interacts with SpanNode to find its immediate child that satisfies a predicate, demonstrating a parent-child relationship in tree structures.&lt;SEP&gt;first_child is designed to return the first child node that matches its criteria, hence it works on SpanNode.</data>
      <data key="d7">child navigation, structural access&lt;SEP&gt;functionality, node retrieval&lt;SEP&gt;node interaction, parent-child relationship&lt;SEP&gt;node navigation, structural access</data>
      <data key="d8">chunk-f7275e9966aa7c1401bb0a2fb82d3fda&lt;SEP&gt;chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="descendants">
      <data key="d5">18.0</data>
      <data key="d6">The descendants property is derived from SpanNode, providing access to its child nodes.".&lt;SEP&gt;The descendants property is related to SpanNode, allowing access to child nodes within a trace structure.</data>
      <data key="d7">hierarchical access, child node retrieval&lt;SEP&gt;structural representation, data access</data>
      <data key="d8">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="ancestors">
      <data key="d5">18.0</data>
      <data key="d6">The ancestors property is linked to SpanNode, enabling traceability back through parent nodes.".&lt;SEP&gt;The ancestors property provides SpanNode with the ability to trace back to its parent nodes in the structure.</data>
      <data key="d7">hierarchical access, parent node retrieval&lt;SEP&gt;hierarchical structure, backtracking</data>
      <data key="d8">chunk-f7275e9966aa7c1401bb0a2fb82d3fda</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="any_child">
      <data key="d5">16.0</data>
      <data key="d6">The any_child method is used on SpanNode to verify the presence of any child that meets the predicate conditions, also reflecting a parent-child relationship.&lt;SEP&gt;any_child checks for the existence of any child nodes that satisfy the predicate, relating to SpanNode.</data>
      <data key="d7">functionality, node existence check&lt;SEP&gt;node interaction, parent-child relationship</data>
      <data key="d8">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="find_descendants">
      <data key="d5">18.0</data>
      <data key="d6">The find_descendants method operates on SpanNode to compile a list of all descendant nodes satisfying a specific criterion, illustrating traversal in the hierarchy.&lt;SEP&gt;find_descendants retrieves all descendant nodes based on a specific criterion from SpanNode.</data>
      <data key="d7">functionality, descendant retrieval&lt;SEP&gt;node interaction, descendant traversal</data>
      <data key="d8">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="first_descendant">
      <data key="d5">16.0</data>
      <data key="d6">The first_descendant method retrieves the first matching node in depth-first search from a SpanNode, indicating how nodes relate hierarchically.&lt;SEP&gt;first_descendant returns the first matching descendant node in a depth-first search, relevant to SpanNode.</data>
      <data key="d7">functionality, descendant retrieval&lt;SEP&gt;node interaction, hierarchical search</data>
      <data key="d8">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="any_descendant">
      <data key="d5">14.0</data>
      <data key="d6">The any_descendant method checks for existence of descendants in relation to a SpanNode, emphasizing the structure and relationships within the tree.&lt;SEP&gt;any_descendant checks for any matching descendant nodes, directly interacting with SpanNode.</data>
      <data key="d7">functionality, node existence check&lt;SEP&gt;node interaction, descendant verification</data>
      <data key="d8">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="find_ancestors">
      <data key="d5">18.0</data>
      <data key="d6">The find_ancestors method identifies all nodes before a given SpanNode that meet specified criteria, reflecting historical relationships in tree traversal.&lt;SEP&gt;find_ancestors collects all satisfying ancestor nodes, engaging with SpanNode structure.</data>
      <data key="d7">functionality, ancestor retrieval&lt;SEP&gt;node interaction, ancestor retrieval</data>
      <data key="d8">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="first_ancestor">
      <data key="d5">16.0</data>
      <data key="d6">The first_ancestor method seeks the nearest ancestor of a SpanNode satisfying a predicate, demonstrating upward navigation in the hierarchy.&lt;SEP&gt;first_ancestor provides the closest matching ancestor node, pertinent to SpanNode.</data>
      <data key="d7">functionality, ancestor retrieval&lt;SEP&gt;node interaction, ancestor search</data>
      <data key="d8">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="any_ancestor">
      <data key="d5">14.0</data>
      <data key="d6">The any_ancestor method checks for the presence of any matching ancestors in relation to a SpanNode, focusing on backward traversal in the hierarchy.&lt;SEP&gt;any_ancestor determines if any ancestors match the given criteria, applying to SpanNode.</data>
      <data key="d7">functionality, ancestor existence check&lt;SEP&gt;node interaction, ancestor verification</data>
      <data key="d8">chunk-48b44901b89a7237e9bbe8f5c3d40d5a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="SpanTree">
      <data key="d5">9.0</data>
      <data key="d6">A SpanTree is composed of multiple SpanNode objects, creating a hierarchy for organization and traversal.</data>
      <data key="d7">component, hierarchy</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="SpanQuery">
      <data key="d5">8.0</data>
      <data key="d6">SpanQuery applies to SpanNodes as it provides criteria to filter and match them based on specified conditions.</data>
      <data key="d7">filtering, criteria</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="matches">
      <data key="d5">8.0</data>
      <data key="d6">The matches method operates on SpanNode instances to determine if a node fulfills the given query条件.</data>
      <data key="d7">query matching, node evaluation</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="repr_xml">
      <data key="d5">16.0</data>
      <data key="d6">The 'repr_xml' function can format a SpanNode into an XML-like string representation if included in the output.&lt;SEP&gt;The repr_xml method is utilized by SpanNode to generate its XML representation, indicating a direct relation between them.</data>
      <data key="d7">data-formatting&lt;SEP&gt;formatting, representation</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f&lt;SEP&gt;chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="children">
      <data key="d5">8.0</data>
      <data key="d6">Children are the directly connected nodes in the SpanNode structure that can have their own properties.</data>
      <data key="d7">node structure, hierarchical organization</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="first">
      <data key="d5">9.0</data>
      <data key="d6">The 'first' function operates on SpanNode to find the first matching node based on a given predicate.</data>
      <data key="d7">function-operation</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanNode" target="any">
      <data key="d5">9.0</data>
      <data key="d6">The 'any' function interacts with SpanNode to check if any of the nodes in the tree match a specified predicate.</data>
      <data key="d7">function-operation</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Trace ID" target="Span ID">
      <data key="d5">10.0</data>
      <data key="d6">Trace ID and Span ID work together to uniquely identify spans within a distributed trace, enabling comprehensive tracking of operations.</data>
      <data key="d7">unique identification, tracing system</data>
      <data key="d8">chunk-a5dd62229c34dcdbdeca48aacb8d6cf6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Predicate" target="SpanQuery">
      <data key="d5">7.0</data>
      <data key="d6">SpanQuery conditions often rely on predicates to filter through nodes by establishing true or false criteria.</data>
      <data key="d7">query mechanics, logical evaluation</data>
      <data key="d8">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanQuery" target="matches method">
      <data key="d5">8.0</data>
      <data key="d6">The matches method of SpanNode is used to determine if the SpanNode meets the conditions defined in a SpanQuery.</data>
      <data key="d7">query evaluation, condition matching</data>
      <data key="d8">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanQuery" target="_matches_query method">
      <data key="d5">9.0</data>
      <data key="d6">The _matches_query method is integral to the functionality of SpanQuery as it evaluates matching conditions.</data>
      <data key="d7">query evaluation, logical processing</data>
      <data key="d8">chunk-790b668cee409d289e2371718ffedaa1</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanQuery" target="stop_recursing_when">
      <data key="d5">8.0</data>
      <data key="d6">The stop_recursing_when attribute is a part of SpanQuery, defining conditions that affect the traversal of nodes in a span tree.</data>
      <data key="d7">traversal logic, condition definition</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanQuery" target="timing conditions">
      <data key="d5">7.0</data>
      <data key="d6">Timing conditions are elements within SpanQuery, specifying duration-related criteria for matching spans.</data>
      <data key="d7">criteria definition, duration criteria</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanQuery" target="logical combinations">
      <data key="d5">9.0</data>
      <data key="d6">Logical combinations are integral to SpanQuery, allowing the construction of complex filtering conditions.</data>
      <data key="d7">query logic, conditions combination</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanQuery" target="first">
      <data key="d5">8.0</data>
      <data key="d6">The 'first' function utilizes SpanQuery as a predicate to find matching nodes in the tree.</data>
      <data key="d7">function-utilization</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SpanPredicate" target="any">
      <data key="d5">8.0</data>
      <data key="d6">The 'any' function uses SpanPredicate to determine if any nodes match the condition in the tree.</data>
      <data key="d7">function-utilization</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="any_ancestor" target="SpanTree">
      <data key="d5">8.0</data>
      <data key="d6">The any_ancestor method is part of the SpanTree functionality, allowing checks on ancestor nodes according to specific predicates.</data>
      <data key="d7">method functionality, hierarchical check</data>
      <data key="d8">chunk-0d258f09bea208a8ab728ad08c68706f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="repr_xml" target="__iter__">
      <data key="d5">6.0</data>
      <data key="d6">The __iter__ method can be invoked to traverse nodes, while repr_xml creates a structured representation of the tree.</data>
      <data key="d7">traversal and representation, node access</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="repr_xml" target="ReportCaseAggregate">
      <data key="d5">7.0</data>
      <data key="d6">repr_xml is related to ReportCaseAggregate as it may represent cases in XML format.</data>
      <data key="d7">function-utilization</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="root nodes" target="_rebuild_tree">
      <data key="d5">9.0</data>
      <data key="d6">Rebuilding the tree involves identifying root nodes that do not have any parents.</data>
      <data key="d7">tree structure management, parent-child relationship</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DFS" target="find">
      <data key="d5">20.0</data>
      <data key="d6">The find method utilizes DFS to perform its searching operations throughout the tree.&lt;SEP&gt;The find method utilizes depth-first search (DFS) to explore nodes within the tree for matching predicates.</data>
      <data key="d7">algorithmic approach, searching technique&lt;SEP&gt;search method, traversal technique</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="add_spans" target="_rebuild_tree">
      <data key="d5">18.0</data>
      <data key="d6">The add_spans function invokes _rebuild_tree to restructure the tree whenever new spans are added.&lt;SEP&gt;The add_spans method triggers the _rebuild_tree method to ensure structural integrity after spans are added.</data>
      <data key="d7">method interaction, tree management&lt;SEP&gt;method interaction, tree structure management</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="add_spans" target="nodes_by_id">
      <data key="d5">8.0</data>
      <data key="d6">The add_spans method adds SpanNode objects to nodes_by_id for structured organization within the tree.</data>
      <data key="d7">data structure management, span organization</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="find" target="first">
      <data key="d5">13.0</data>
      <data key="d6">The find method allows for locating multiple nodes, whereas first retrieves only the first matching node.&lt;SEP&gt;The find method and the first method share functionality in searching nodes, differing mainly in their return values.</data>
      <data key="d7">search functionality, method comparison&lt;SEP&gt;search methods, comparison</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="find" target="_filter">
      <data key="d5">7.0</data>
      <data key="d6">The _filter method underlies the functionality of the find method by providing node matching capabilities.</data>
      <data key="d7">support method, searching feature</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="first" target="Depth-First Search">
      <data key="d5">10.0</data>
      <data key="d6">The 'first' function employs a Depth-First Search strategy to locate nodes within the span tree.</data>
      <data key="d7">search-algorithm</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_rebuild_tree" target="roots">
      <data key="d5">9.0</data>
      <data key="d6">The _rebuild_tree method identifies and organizes the root nodes in the tree structure.</data>
      <data key="d7">tree structure management, parent-child relationships</data>
      <data key="d8">chunk-d3dca449323eaaba6c6952db29fc9336</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="nodes_by_id" target="__iter__">
      <data key="d5">8.0</data>
      <data key="d6">The '__iter__' method utilizes the 'nodes_by_id' dictionary to return an iterable of all nodes in the tree.</data>
      <data key="d7">data-structure-iteration</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="nodes_by_id" target="Tree Structure">
      <data key="d5">9.0</data>
      <data key="d6">The 'nodes_by_id' dictionary is a crucial part of maintaining the structure within the tree, enabling navigation and data retrieval.</data>
      <data key="d7">data-management</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="__iter__" target="ReportCase">
      <data key="d5">6.0</data>
      <data key="d6">The '__iter__' method can be associated with ReportCase to iterate over its nodes or cases.</data>
      <data key="d7">function-utilization</data>
      <data key="d8">chunk-0ed253c93af9342b80542639b0092b30</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ReportCase" target="ReportCaseAggregate">
      <data key="d5">16.0</data>
      <data key="d6">Multiple ReportCases are aggregated together to form a ReportCaseAggregate, providing a comprehensive overview.&lt;SEP&gt;ReportCaseAggregate utilizes ReportCase instances to compute average values and summary statistics.</data>
      <data key="d7">data aggregation, overview generation&lt;SEP&gt;data processing, aggregation</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284&lt;SEP&gt;chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ReportCase" target="EvaluationRenderer">
      <data key="d5">7.0</data>
      <data key="d6">EvaluationRenderer works with ReportCase to display conclusions and details about individual cases in an evaluation report.</data>
      <data key="d7">case handling, evaluation detail</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ReportCase" target="EvalReport">
      <data key="d5">9.0</data>
      <data key="d6">EvalReport contains multiple ReportCase instances, which detail specific evaluations and results within the overall report.</data>
      <data key="d7">data composition, evaluation detail</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ReportCase" target="ReportCaseRenderer">
      <data key="d5">9.0</data>
      <data key="d6">ReportCaseRenderer generates visual representations for individual ReportCase instances in the evaluation report.</data>
      <data key="d7">case representation, visual output</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ReportCaseAggregate" target="average">
      <data key="d5">18.0</data>
      <data key="d6">The average method is a functionality within ReportCaseAggregate that processes a list of ReportCase instances to derive averaging statistics.&lt;SEP&gt;The average method is a functionality within the ReportCaseAggregate class, allowing it to process a list of cases to derive averaging statistics.</data>
      <data key="d7">summarization, processing functionality</data>
      <data key="d8">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ReportCaseAggregate" target="scores">
      <data key="d5">8.0</data>
      <data key="d6">The scores attribute in ReportCaseAggregate holds computed values derived from the processed ReportCase instances.</data>
      <data key="d7">attributes, data analysis</data>
      <data key="d8">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ReportCaseAggregate" target="labels">
      <data key="d5">8.0</data>
      <data key="d6">The labels attribute in ReportCaseAggregate categorizes labels extracted from the ReportCase instances.</data>
      <data key="d7">categorization, data analysis</data>
      <data key="d8">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ReportCaseAggregate" target="assertions">
      <data key="d5">7.0</data>
      <data key="d6">The assertions attribute in ReportCaseAggregate indicates performance measures derived from the processed cases.</data>
      <data key="d7">performance measurement, evaluation</data>
      <data key="d8">chunk-ef4c7193cda16c30962e01194bc308c7</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="average_assertions" target="n_assertions">
      <data key="d5">7.0</data>
      <data key="d6">average_assertions is calculated based on the total number of assertions recorded across all cases, denoted by n_assertions.</data>
      <data key="d7">assertion analysis, success tracking</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="n_assertions" target="n_passing">
      <data key="d5">6.0</data>
      <data key="d6">n_passing is a derived count that depends on the total n_assertions evaluated during the reporting of results.</data>
      <data key="d7">summary statistics, assertion evaluation</data>
      <data key="d8">chunk-5fba341bc749309a69f25c6f2f47a284</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="baseline" target="EvalReport">
      <data key="d5">8.0</data>
      <data key="d6">baseline is used in conjunction with EvalReport to compare current evaluation results against previous outcomes.</data>
      <data key="d7">comparison, performance analysis</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="duration_config" target="EvaluationRenderer">
      <data key="d5">7.0</data>
      <data key="d6">EvaluationRenderer relies on duration_config to manage timing data visuals within reports.</data>
      <data key="d7">timing metrics, report configuration</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="console_table" target="Table">
      <data key="d5">8.0</data>
      <data key="d6">The output of the console_table method is represented as a Table that encapsulates the evaluation metrics in a structured format.</data>
      <data key="d7">output structure, tabular presentation</data>
      <data key="d8">chunk-93245afbea546c456fe18a9e7a924d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationRenderer" target="diff_atol">
      <data key="d5">8.0</data>
      <data key="d6">The EvaluationRenderer class utilizes diff_atol as a parameter to determine how strictly differences are treated in reports.</data>
      <data key="d7">evaluation parameters, report accuracy</data>
      <data key="d8">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationRenderer" target="diff_rtol">
      <data key="d5">8.0</data>
      <data key="d6">The EvaluationRenderer employs diff_rtol to further refine the significance of differences in evaluations, impacting reporting outcomes.</data>
      <data key="d7">evaluation parameters, reporting variables</data>
      <data key="d8">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationRenderer" target="Table">
      <data key="d5">10.0</data>
      <data key="d6">EvaluationRenderer builds tables to present the evaluation summaries and comparisons in a structured format.</data>
      <data key="d7">output management, structured presentation</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationRenderer" target="EvalReport">
      <data key="d5">8.0</data>
      <data key="d6">EvaluationRenderer is designed to render and present the contents of EvalReport, making data interpretable for users.</data>
      <data key="d7">report rendering, evaluation display</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationRenderer" target="RenderValueConfig">
      <data key="d5">7.0</data>
      <data key="d6">EvaluationRenderer utilizes RenderValueConfig to determine how values are displayed in the rendered report.</data>
      <data key="d7">rendering configuration, report management</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationRenderer" target="RenderNumberConfig">
      <data key="d5">7.0</data>
      <data key="d6">EvaluationRenderer integrates RenderNumberConfig to handle the rendering of numerical scores within reports.</data>
      <data key="d7">numerical rendering, evaluation scoring</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="EvaluationRenderer" target="_ValueRenderer">
      <data key="d5">8.0</data>
      <data key="d6">_ValueRenderer is utilized by EvaluationRenderer to render value outputs according to configuration settings.</data>
      <data key="d7">value rendering, configuration application</data>
      <data key="d8">chunk-284eb3a94fa6c6af38603bdfd484f6f5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="diff_atol" target="diff_rtol">
      <data key="d5">8.0</data>
      <data key="d6">diff_atol and diff_rtol both determine what is considered a significant difference, with diff_atol being absolute and diff_rtol relative.</data>
      <data key="d7">significance determination, evaluation criteria</data>
      <data key="d8">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="diff_increase_style" target="diff_decrease_style">
      <data key="d5">9.0</data>
      <data key="d6">diff_increase_style and diff_decrease_style both set the visual representation for increases and decreases in evaluation reports.</data>
      <data key="d7">visual formatting, evaluation results</data>
      <data key="d8">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="diff_increase_style" target="value_formatter">
      <data key="d5">9.0</data>
      <data key="d6">The value_formatter uses diff_increase_style to determine how increased values are visually represented in reports, affecting clarity and comprehension.</data>
      <data key="d7">visual representation, clarity in reporting</data>
      <data key="d8">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="diff_decrease_style" target="value_formatter">
      <data key="d5">9.0</data>
      <data key="d6">The value_formatter uses diff_decrease_style to influence how decreased values are visually represented in evaluation reports, enhancing understanding.</data>
      <data key="d7">visual representation, clarity in reporting</data>
      <data key="d8">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="value_formatter" target="diff_formatter">
      <data key="d5">14.0</data>
      <data key="d6">diff_formatter augments the value_formatter by adding detail on differences, which assists in comprehensive evaluation reporting.&lt;SEP&gt;value_formatter formats the values in reports while diff_formatter explains how differences between these values are presented.</data>
      <data key="d7">formatting, reporting&lt;SEP&gt;report enhancement, metrics comparison</data>
      <data key="d8">chunk-ced21a7dd02af8eb0205821f3cf77e51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphSetupError" target="pydantic_graph">
      <data key="d5">8.0</data>
      <data key="d6">GraphSetupError is a part of the error handling system within the pydantic_graph library for managing incorrectly configured graphs.</data>
      <data key="d7">error handling, library functionality</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRuntimeError" target="pydantic_graph">
      <data key="d5">8.0</data>
      <data key="d6">GraphRuntimeError is integrated within the pydantic_graph library to handle errors that arise during the execution of graph processes.</data>
      <data key="d7">error handling, library execution</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphRuntimeError" target="GraphNodeStatusError">
      <data key="d5">27.0</data>
      <data key="d6">GraphNodeStatusError is a specific type of GraphRuntimeError, indicating a fault specific to node statuses during graph execution.&lt;SEP&gt;GraphNodeStatusError is a subclass of GraphRuntimeError, indicating a more specific issue regarding node status during graph execution.&lt;SEP&gt;GraphNodeStatusError is derived from GraphRuntimeError, indicating that it is a specialized type of runtime error within the graph context.</data>
      <data key="d7">hierarchical relationship, error specificity&lt;SEP&gt;inheritance, error categorization&lt;SEP&gt;inheritance, error handling</data>
      <data key="d8">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd&lt;SEP&gt;chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GraphNodeStatusError" target="SnapshotStatus">
      <data key="d5">7.0</data>
      <data key="d6">GraphNodeStatusError raises when an invalid SnapshotStatus is encountered, linking them through validation checks.</data>
      <data key="d7">validation, status check</data>
      <data key="d8">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluation Diff" target="Case Renderer">
      <data key="d5">7.0</data>
      <data key="d6">Case Renderer builds tables for visualizing changes observed in the Evaluation Diff process.</data>
      <data key="d7">visualization, reporting</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluation Diff" target="Diff Cases">
      <data key="d5">8.0</data>
      <data key="d6">Diff Cases are specifically identified during the Evaluation Diff comparison process.</data>
      <data key="d7">analysis, comparison</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluation Diff" target="Added Cases">
      <data key="d5">9.0</data>
      <data key="d6">Added Cases are included in Evaluation Diff to show improvements or changes from the Baseline.</data>
      <data key="d7">new additions, performance tracking</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Evaluation Diff" target="Removed Cases">
      <data key="d5">8.0</data>
      <data key="d6">Removed Cases highlight the deletions or non-inclusions in the current report compared to the Baseline.</data>
      <data key="d7">data removal, comparison</data>
      <data key="d8">chunk-25346d17202fa22ebc450f7f7382c828</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SnapshotStatus" target="check">
      <data key="d5">8.0</data>
      <data key="d6">The check method validates if the given SnapshotStatus is appropriate before processing, directly linking the method to the status checks.</data>
      <data key="d7">validation, process verification</data>
      <data key="d8">chunk-cb4b2c10e55d7da0eee3d882a1b6dbdd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="never_42" target="BaseNode">
      <data key="d5">7.0</data>
      <data key="d6">BaseNode is a fundamental component within the never_42 graph structure, allowing for unique nodes to be registered and executed.</data>
      <data key="d7">component interaction, graph structure</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="never_42" target="pydantic_graph">
      <data key="d5">8.0</data>
      <data key="d6">The organization never_42 utilizes pydantic_graph to implement graph structures and operations in Python.</data>
      <data key="d7">library usage, graph operations</data>
      <data key="d8">chunk-3360dcbe94ed167cf50ca5e3fe657d4c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseStatePersistence" target="BaseNode">
      <data key="d5">15.0</data>
      <data key="d6">BaseNode relies on BaseStatePersistence to maintain its state during graph execution.&lt;SEP&gt;BaseStatePersistence uses BaseNode instances to track and manage stages of execution throughout the graph run.</data>
      <data key="d7">node management, execution tracking&lt;SEP&gt;state management, execution</data>
      <data key="d8">chunk-0e7f162426f06e195505dd4c52435908&lt;SEP&gt;chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseStatePersistence" target="_utils">
      <data key="d5">6.0</data>
      <data key="d6">_utils supports BaseStatePersistence with additional functionalities for effective state management.</data>
      <data key="d7">utility functions, support</data>
      <data key="d8">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseStatePersistence" target="initialize">
      <data key="d5">7.0</data>
      <data key="d6">initialize requires BaseStatePersistence to set up the graph run in a persistence context.</data>
      <data key="d7">setup, dependency</data>
      <data key="d8">chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseStatePersistence" target="load_all">
      <data key="d5">8.0</data>
      <data key="d6">load_all gathers all snapshots of the graph from persistence, utilizing methods defined in the BaseStatePersistence.</data>
      <data key="d7">data retrieval, persistence management</data>
      <data key="d8">chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DepsT" target="BaseNode">
      <data key="d5">24.0</data>
      <data key="d6">DepsT is used in BaseNode to define the dependencies that nodes use during execution.&lt;SEP&gt;DepsT is utilized within BaseNode to define the dependencies required for executing the nodes in the graph.&lt;SEP&gt;DepsT specifies the necessary dependencies that BaseNode requires for functioning correctly within the graph.</data>
      <data key="d7">dependency management, node operation&lt;SEP&gt;dependency management, parameter application&lt;SEP&gt;dependency structure, node function</data>
      <data key="d8">chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-3360dcbe94ed167cf50ca5e3fe657d4c&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StateT" target="BaseNode">
      <data key="d5">39.0</data>
      <data key="d6">BaseNode instances maintain a specific StateT that reflects their operational parameters and performance during execution.&lt;SEP&gt;BaseNode relies on StateT for defining state types to achieve clarity in graph operations.&lt;SEP&gt;BaseNode utilizes the StateT type to define the current state within the graph system.&lt;SEP&gt;StateT is utilized as a parameter type in BaseNode for defining the state held by a node in the graph.&lt;SEP&gt;StateT is utilized within BaseNode to define the state for executing nodes in the graph.</data>
      <data key="d7">node state, execution tracking&lt;SEP&gt;state management, graph operations&lt;SEP&gt;state management, graph structure&lt;SEP&gt;state management, node operation&lt;SEP&gt;state management, parameter usage</data>
      <data key="d8">chunk-fa226bf2bd8d292e7db953abc96ebbde&lt;SEP&gt;chunk-bff54291e33877e654a2a213873bb216&lt;SEP&gt;chunk-14e53235b034b988f73d8d04cdce068d&lt;SEP&gt;chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StateT" target="End">
      <data key="d5">6.0</data>
      <data key="d6">StateT parameterizes the state present in the final output represented by End after the graph run concludes.</data>
      <data key="d7">state representation, final output</data>
      <data key="d8">chunk-cd5782f266ceebcaff272f062084cba6</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ExitStack" target="AsyncContextManager">
      <data key="d5">8.0</data>
      <data key="d6">AsyncContextManager can utilize ExitStack to effectively manage the lifecycle of multiple context managers during a graph run.</data>
      <data key="d7">resource management, context handling</data>
      <data key="d8">chunk-84dbc168c641445f220e32b439e688dd</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ExitStack" target="BaseNode">
      <data key="d5">15.0</data>
      <data key="d6">BaseNode can utilize ExitStack to handle resource management during graph execution and clean up resources afterward.&lt;SEP&gt;BaseNode implementations often use ExitStack for managing multiple context managers ensuring proper cleanup after execution.</data>
      <data key="d7">resource management, execution context&lt;SEP&gt;resource management, execution flow</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid" target="_utils">
      <data key="d5">6.0</data>
      <data key="d6">_utils provides helper functions used in the mermaid's graph management processes to streamline operations.</data>
      <data key="d7">functionality, operational efficiency</data>
      <data key="d8">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid" target="pydantic_graph">
      <data key="d5">14.0</data>
      <data key="d6">Mermaid can render diagrams that are generated from graph data managed by the Pydantic_graph library.</data>
      <data key="d7">graph generation, diagram rendering</data>
      <data key="d8">chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid" target="DEFAULT_HIGHLIGHT_CSS">
      <data key="d5">16.0</data>
      <data key="d6">DEFAULT_HIGHLIGHT_CSS is a style used within the Mermaid library for highlighting nodes in diagrams.</data>
      <data key="d7">styling, node emphasis</data>
      <data key="d8">chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid" target="generate_code">
      <data key="d5">9.0</data>
      <data key="d6">generate_code is a method that produces code which can be rendered by the Mermaid library.</data>
      <data key="d7">functionality, code rendering</data>
      <data key="d8">chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid.request_image" target="mermaid.save_image">
      <data key="d5">9.0</data>
      <data key="d6">The request_image method generates a graph representation before it can be saved using the save_image method.</data>
      <data key="d7">process flow, drawing functions</data>
      <data key="d8">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="typing_extensions" target="BaseNode">
      <data key="d5">7.0</data>
      <data key="d6">Typing_extensions provide enhanced type checking for BaseNode class implementations, strengthening type safety in node definitions.</data>
      <data key="d7">type safety, class definition</data>
      <data key="d8">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="exceptions.GraphSetupError" target="BaseNode">
      <data key="d5">10.0</data>
      <data key="d6">GraphSetupError is raised in the context of BaseNode when there are issues with node ID uniqueness.</data>
      <data key="d7">error handling, node management</data>
      <data key="d8">chunk-fa226bf2bd8d292e7db953abc96ebbde</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="_utils" target="pydantic_graph">
      <data key="d5">8.0</data>
      <data key="d6">_utils provides auxiliary functions that enhance the functionality of the Pydantic Graph library.</data>
      <data key="d7">support functions, library enhancement</data>
      <data key="d8">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="graph.py" target="pydantic_graph">
      <data key="d5">9.0</data>
      <data key="d6">graph.py is part of the pydantic_graph library, defining the core functionalities and structure of graphs.</data>
      <data key="d7">source code, library component</data>
      <data key="d8">chunk-c013a90b995a125733a858f2892c9f74</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="never_42_graph" target="run_never_42.py">
      <data key="d5">16.0</data>
      <data key="d6">run_never_42.py serves as an example of how to utilize the never_42_graph for demonstrating functionality.</data>
      <data key="d7">example usage, demonstration</data>
      <data key="d8">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="never_42_graph" target="pydantic_graph">
      <data key="d5">25.0</data>
      <data key="d6">never_42_graph is a specific application of the pydantic_graph that executes a defined workflow.&lt;SEP&gt;never_42_graph is part of the pydantic_graph package, indicating structured graph management.&lt;SEP&gt;never_42_graph is part of the pydantic_graph package, indicating structured graph management.".</data>
      <data key="d7">application, framework usage&lt;SEP&gt;module dependency, structural organization</data>
      <data key="d8">chunk-074bfa68ac0e63b1f628efd6720d1253&lt;SEP&gt;chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="never_42_graph" target="BaseNode">
      <data key="d5">8.0</data>
      <data key="d6">BaseNode is utilized within never_42_graph to represent different execution nodes during graph processing.</data>
      <data key="d7">graph structure, node representation</data>
      <data key="d8">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="never_42_graph" target="GraphRunResult[StateT, RunEndT]">
      <data key="d5">9.0</data>
      <data key="d6">The result of running processes in never_42_graph is encapsulated in GraphRunResult, reflecting the execution outcome.</data>
      <data key="d7">execution results, data encapsulation</data>
      <data key="d8">chunk-f7a153b92621f59bd3b8f81f24daf8b2</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="iter" target="pydantic_graph">
      <data key="d5">9.0</data>
      <data key="d6">The pydantic_graph library offers the iter function as a utility for managing graph execution in an asynchronous manner.</data>
      <data key="d7">library utility, graph execution</data>
      <data key="d8">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="iter" target="contextmanager">
      <data key="d5">8.0</data>
      <data key="d6">contextmanager is used to create the async context manager in the iter function for managing graph nodes.</data>
      <data key="d7">resource management, context management</data>
      <data key="d8">chunk-bff54291e33877e654a2a213873bb216</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="initialize" target="pydantic_graph">
      <data key="d5">7.0</data>
      <data key="d6">The initialize method is a function within the pydantic_graph that sets up a graph for future execution without running it immediately.</data>
      <data key="d7">graph setup, preparation</data>
      <data key="d8">chunk-b713802bb6676d53f06afddee9aa1d12</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeIdent" target="StateDiagramDirection">
      <data key="d5">12.0</data>
      <data key="d6">NodeIdent can be used as a part of the definitions that dictate the transitions within a StateDiagramDirection.</data>
      <data key="d7">node representation, diagram structure</data>
      <data key="d8">chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeIdent" target="Diagram Properties">
      <data key="d5">16.0</data>
      <data key="d6">NodeIdent defines types of node identifiers that are crucial for the structure and organization of the diagram as outlined in its properties.&lt;SEP&gt;NodeIdent type alias is related to diagram properties as it defines how nodes are identified and represented within a diagram.</data>
      <data key="d7">node identification, graph organization&lt;SEP&gt;node representation, graph structure</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="StateDiagramDirection" target="Diagram Properties">
      <data key="d5">7.0</data>
      <data key="d6">StateDiagramDirection is relevant to properties of diagrams, specifying how states are oriented in visual representations.</data>
      <data key="d7">diagram structure, visualization</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DEFAULT_HIGHLIGHT_CSS" target="highlighted_nodes">
      <data key="d5">8.0</data>
      <data key="d6">highlighted_nodes utilize DEFAULT_HIGHLIGHT_CSS for visual emphasis in diagrams.</data>
      <data key="d7">visual emphasis, styling</data>
      <data key="d8">chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DEFAULT_HIGHLIGHT_CSS" target="generate_code">
      <data key="d5">7.0</data>
      <data key="d6">DEFAULT_HIGHLIGHT_CSS is used within the generate_code function to style highlighted nodes in the Mermaid diagram.</data>
      <data key="d7">styling, visual representation</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="generate_code" target="request_image">
      <data key="d5">9.0</data>
      <data key="d6">The generate_code function produces the underlying Mermaid syntax used by the request_image function to create a visual representation of the graph.</data>
      <data key="d7">function dependency, diagram generation</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="generate_code" target="edge_labels">
      <data key="d5">8.0</data>
      <data key="d6">The edge_labels parameter is utilized in the generate_code function to determine whether to include labels on edges in the resulting diagram.</data>
      <data key="d7">graph attribute, labeling</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="generate_code" target="notes">
      <data key="d5">8.0</data>
      <data key="d6">The notes parameter in the generate_code function controls the inclusion of additional information alongside nodes in the diagram.</data>
      <data key="d7">explanatory content, diagram enhancement</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="generate_code" target="direction">
      <data key="d5">8.0</data>
      <data key="d6">direction is passed to the generate_code function to establish the flow orientation of the diagram, impacting how nodes are connected.</data>
      <data key="d7">visual flow, diagram dynamics</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="edge_labels" target="notes">
      <data key="d5">7.0</data>
      <data key="d6">edge_labels can be accompanied by notes to provide further clarification about the connections in graphs.</data>
      <data key="d7">clarification, enhancement</data>
      <data key="d8">chunk-41cb6d18e75a14fbbb4ecaef7f988d07</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid.ink" target="MermaidConfig">
      <data key="d5">8.0</data>
      <data key="d6">mermaid.ink utilizes MermaidConfig to customize diagram generation through its API.</data>
      <data key="d7">integration, customization</data>
      <data key="d8">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid.ink" target="mermaid_image">
      <data key="d5">9.0</data>
      <data key="d6">The mermaid_image function relies on the mermaid.ink service to generate diagrams when called.</data>
      <data key="d7">function integration, external service</data>
      <data key="d8">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid.ink" target="mermaid_save">
      <data key="d5">9.0</data>
      <data key="d6">The mermaid_save function uses the mermaid.ink service to save generated graph images, thereby requiring its functionality.</data>
      <data key="d7">function integration, external service</data>
      <data key="d8">chunk-084c0bc189005e46b59c6a368ad8ed78</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mermaid.ink" target="save_image">
      <data key="d5">8.0</data>
      <data key="d6">The save_image function utilizes mermaid.ink to generate an image of a Mermaid diagram and save it locally.</data>
      <data key="d7">image generation, service usage</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MermaidConfig" target="save_image">
      <data key="d5">9.0</data>
      <data key="d6">save_image function requires parameters defined in MermaidConfig to customize the diagram generation process.</data>
      <data key="d7">configuration, diagram customization</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="async iteration" target="BaseNode">
      <data key="d5">8.0</data>
      <data key="d6">Async iteration involves executing BaseNode instances sequentially, showing their role in the overall graph run process.</data>
      <data key="d7">execution process, async functionality</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="snapshot_id" target="snapshot_node_if_new">
      <data key="d5">7.0</data>
      <data key="d6">snapshot_node_if_new utilizes a snapshot_id to track changes and save states during the execution of a graph run.</data>
      <data key="d7">state tracking, change management</data>
      <data key="d8">chunk-074bfa68ac0e63b1f628efd6720d1253</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="snapshot_node_if_new" target="record_run">
      <data key="d5">7.0</data>
      <data key="d6">The snapshot_node_if_new process can be part of the record_run operation, preserving the state of nodes that are newly created.</data>
      <data key="d7">state management, new entity tracking</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="snapshot_node_if_new" target="snapshot_node">
      <data key="d5">15.0</data>
      <data key="d6">snapshot_node_if_new calls snapshot_node to take a snapshot conditionally, ensuring atomic operations are maintained when recording state.&lt;SEP&gt;snapshot_node_if_new uses the logic of snapshot_node but includes a check to prevent duplicate entries.</data>
      <data key="d7">conditional execution, state management&lt;SEP&gt;conditional snapshot, state capture</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef&lt;SEP&gt;chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="snapshot_node_if_new" target="LookupError">
      <data key="d5">7.0</data>
      <data key="d6">snapshot_node_if_new may raise LookupError if the specified snapshot ID does not exist, indicating necessary checks within persistence processes.</data>
      <data key="d7">error handling, data integrity</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="record_run" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">BaseNode utilizes the record_run operation to document its execution outcomes and maintain state consistency.</data>
      <data key="d7">execution tracking, state preservation</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="record_run" target="snapshot_node">
      <data key="d5">7.0</data>
      <data key="d6">record_run tracks the execution of a node and updates its status, which is initiated by calling snapshot_node.</data>
      <data key="d7">execution tracking, status update</data>
      <data key="d8">chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="record_run" target="NodeSnapshot.status">
      <data key="d5">8.0</data>
      <data key="d6">record_run updates the NodeSnapshot.status to reflect whether the node run is 'running', 'success', or 'error' based on execution outcomes.</data>
      <data key="d7">execution status, lifecycle tracking</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="record_run" target="GraphNodeRunningError">
      <data key="d5">7.0</data>
      <data key="d6">GraphNodeRunningError is raised by record_run if the node is not in a valid state to start execution, ensuring correct management of node states.</data>
      <data key="d7">error handling, node management</data>
      <data key="d8">chunk-a7790fd8de6836133264e5b5257cb4ef</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="node_id" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">Each BaseNode has a unique node_id that allows it to be referenced and manipulated within the graph architecture.</data>
      <data key="d7">unique identification, node reference</data>
      <data key="d8">chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="self._next_node" target="BaseNode">
      <data key="d5">7.0</data>
      <data key="d6">self._next_node is utilized to determine which BaseNode will be processed next in the execution flow, ensuring continued operation of the graph.</data>
      <data key="d7">node progression, execution management</data>
      <data key="d8">chunk-e84d9789a2133f11a435754d1aaecda4</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Mermaid Diagram" target="pydantic_graph">
      <data key="d5">9.0</data>
      <data key="d6">Pydantic Graph serves as the organization that supports the creation and manipulation of Mermaid diagrams.</data>
      <data key="d7">library functionality, diagram generation</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="request_image" target="save_image">
      <data key="d5">10.0</data>
      <data key="d6">The save_image event calls request_image to obtain the generated image data required for saving the diagram.</data>
      <data key="d7">image processing, function call</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="node_def" target="next_node_edges">
      <data key="d5">8.0</data>
      <data key="d6">node_def contains information about next_node_edges, which connect nodes within a graph by defining their relationships and transitions.</data>
      <data key="d7">graph structure, connections</data>
      <data key="d8">chunk-903ceedfc8bca9b75a8ebb3eef35e7d8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="direction" target="Diagram Properties">
      <data key="d5">8.0</data>
      <data key="d6">direction is an essential property that defines the layout of states within a diagram, influencing how the information flows visually.</data>
      <data key="d7">layout specification, visual flow</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="save_image" target="httpx_client">
      <data key="d5">7.0</data>
      <data key="d6">The save_image function creates an instance of httpx_client to facilitate HTTP requests for image generation.</data>
      <data key="d7">HTTP requests, client usage</data>
      <data key="d8">chunk-f4ca8586ecb34c1cc087f025313179ba</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="scale" target="Diagram Properties">
      <data key="d5">8.0</data>
      <data key="d6">scale affects how sizes are presented within the diagram, allowing adjustment of its zoom level for clarity.</data>
      <data key="d7">zoom control, diagram representation</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="background_color" target="Diagram Properties">
      <data key="d5">8.0</data>
      <data key="d6">background_color is one of the diagram properties that can be customized to enhance visual appeal and clarity.</data>
      <data key="d7">visual customization, diagram attributes</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="theme" target="Diagram Properties">
      <data key="d5">9.0</data>
      <data key="d6">theme defines a set of stylistic options that can be applied to diagram properties for consistent visual representation.</data>
      <data key="d7">styling options, diagram appearance</data>
      <data key="d8">chunk-233800ff598500201cae99b5874ec0ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Abstract Method" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">BaseNode defines an abstract method that must be implemented by its subclasses, establishing a requirement for node functionality.</data>
      <data key="d7">subclass requirement</data>
      <data key="d8">chunk-3e6f35e8122ac28c165b2f86d0e0b04e</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Edge" target="NodeDef">
      <data key="d5">16.0</data>
      <data key="d6">NodeDef defines edges that connect different nodes in a graph, indicating how nodes interact with each other.</data>
      <data key="d7">node connections, graph structure</data>
      <data key="d8">chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeDef" target="BaseNode">
      <data key="d5">27.0</data>
      <data key="d6">BaseNode provides the structure for creating NodeDef instances which define node characteristics including edges and return types.&lt;SEP&gt;NodeDef is a specific type of BaseNode that describes node attributes and behaviors in the graph system.</data>
      <data key="d7">node architecture&lt;SEP&gt;node implementation, subclassing</data>
      <data key="d8">chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeDef" target="End">
      <data key="d5">14.0</data>
      <data key="d6">NodeDef can lead to an End type indicating the conclusion of a graph run, which signals completions after processing nodes.</data>
      <data key="d7">graph execution, termination signal</data>
      <data key="d8">chunk-670369b8b58da5fb06501c822216b094</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="deep_copy" target="docstring_notes">
      <data key="d5">5.0</data>
      <data key="d6">The deep_copy method might have notes generated if docstring_notes is set to True, linking method functionality and documentation generation.</data>
      <data key="d7">method documentation, functionality</data>
      <data key="d8">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="docstring_notes" target="get_note">
      <data key="d5">6.0</data>
      <data key="d6">The get_note method relies on the docstring_notes class attribute to determine if additional notes should be generated, linking functionality with documentation settings.</data>
      <data key="d7">documentation, functionality linkage</data>
      <data key="d8">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="get_node_id" target="BaseNode">
      <data key="d5">7.0</data>
      <data key="d6">get_node_id retrieves the identifier for each BaseNode, connecting the node class with its respective identification functionality.</data>
      <data key="d7">node identity, class association</data>
      <data key="d8">chunk-365decc56ad5f314b2b86848e8a892ec</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="snapshot_node" target="BaseNode">
      <data key="d5">8.0</data>
      <data key="d6">snapshot_node captures the state associated with the execution of a specific instance of BaseNode in the graph.</data>
      <data key="d7">node execution, state capture</data>
      <data key="d8">chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="snapshot_node" target="history">
      <data key="d5">8.0</data>
      <data key="d6">The snapshot_node method enables the recording of the current state into the history list during a graph run.</data>
      <data key="d7">state recording, event documentation</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="snapshot_end" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">snapshot_end functionally relates to BaseNode by saving the final state after the node's execution is completed.</data>
      <data key="d7">execution completion, final state</data>
      <data key="d8">chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="snapshot_end" target="history">
      <data key="d5">9.0</data>
      <data key="d6">The snapshot_end method appends the final state of the graph execution to the history list, documenting the end results.</data>
      <data key="d7">finalization, historical record</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="load_next" target="BaseNode">
      <data key="d5">9.0</data>
      <data key="d6">load_next retrieves the next node ready for execution, facilitating the flow of operations in the graph.</data>
      <data key="d7">operation flow, next node retrieval</data>
      <data key="d8">chunk-69438359f1bdff14dbc80ad109ccf77d</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="NodeSnapshot.status" target="NodeSnapshot(start_ts)">
      <data key="d5">6.0</data>
      <data key="d6">The status and start timestamp are properties of the NodeSnapshot, reflecting its changing state during execution.</data>
      <data key="d7">state management, timestamp tracking</data>
      <data key="d8">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="set_graph_types" target="should_set_types">
      <data key="d5">6.0</data>
      <data key="d6">The set_graph_types method calls should_set_types to check whether types need to be adjusted, implying their functional relationship.</data>
      <data key="d7">method interaction, type management</data>
      <data key="d8">chunk-d66479842ef0830f8e7bdeb15cd91a5f</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="set_types" target="build_snapshot_list_type_adapter">
      <data key="d5">8.0</data>
      <data key="d6">The set_types method can call the build_snapshot_list_type_adapter function to establish type adapters for serializing snapshots.</data>
      <data key="d7">method functionality, type adaptation</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="set_types" target="AsyncIterator">
      <data key="d5">7.0</data>
      <data key="d6">set_types can be used in conjunction with AsyncIterator to manage asynchronous operations in a non-blocking way.</data>
      <data key="d7">asynchronous programming, management</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="build_snapshot_list_type_adapter" target="pydantic.TypeAdapter">
      <data key="d5">9.0</data>
      <data key="d6">build_snapshot_list_type_adapter utilizes the pydantic.TypeAdapter for creating adaptable data structures for snapshots.</data>
      <data key="d7">type adaptation, data structure</data>
      <data key="d8">chunk-1bd62dba014785119c75d1243a535d0a</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic.TypeAdapter" target="Self._snapshots_type_adapter">
      <data key="d5">8.0</data>
      <data key="d6">Self._snapshots_type_adapter is defined to use pydantic.TypeAdapter for managing types for snapshots in FileStatePersistence.</data>
      <data key="d7">type management, data validation</data>
      <data key="d8">chunk-9bf460efd3887b0c0833b6922b0025ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="history" target="load_json">
      <data key="d5">9.0</data>
      <data key="d6">The load_json method populates the history list with historical snapshots from a JSON structure.</data>
      <data key="d7">data restoration, historical accuracy</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="history" target="dump_json">
      <data key="d5">8.0</data>
      <data key="d6">The dump_json method converts the history list into a JSON format for external storage or processing.</data>
      <data key="d7">data serialization, external storage</data>
      <data key="d8">chunk-ad07f2b02c5c5d74bc450b7733d49434</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="customer_balance" target="support_advice">
      <data key="d5">9.0</data>
      <data key="d6">The customer_balance represents a query that triggers the generation of support_advice from the agent to the customer.</data>
      <data key="d7">query-response system, customer service</data>
      <data key="d8">chunk-55b19c469f8836f1d1e39ae4cb918116</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Database" target="fastapi">
      <data key="d5">16.0</data>
      <data key="d6">The Database class is designed to be used within the fastapi framework to manage chat messages in the backend.".</data>
      <data key="d7">framework integration, backend management</data>
      <data key="d8">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Database" target="lifespan">
      <data key="d5">8.0</data>
      <data key="d6">The lifespan context manager initializes the Database connection as part of the fastapi application lifecycle.".</data>
      <data key="d7">lifecycle management, database connection</data>
      <data key="d8">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Database" target="Request">
      <data key="d5">8.0</data>
      <data key="d6">The Request object allows access to the Database instance within route handlers for storing and retrieving messages.".</data>
      <data key="d7">dependency injection, message management</data>
      <data key="d8">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="fastapi" target="chat_app.html">
      <data key="d5">16.0</data>
      <data key="d6">The chat_app.html file is served by the fastapi application to provide the front-end user interface.".&lt;SEP&gt;The chat_app.html file is served by the fastapi application, indicating their direct interaction in displaying the front-end interface.".</data>
      <data key="d7">frontend serving, API interaction</data>
      <data key="d8">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="fastapi" target="chat_app.ts">
      <data key="d5">14.0</data>
      <data key="d6">The chat_app.ts file is a resource that functions within the fastapi application to enhance its client-side logic.".&lt;SEP&gt;The chat_app.ts file is part of the resources provided in the fastapi application to enhance frontend functionalities.".</data>
      <data key="d7">frontend resources, API functionality&lt;SEP&gt;frontend resources, API serving</data>
      <data key="d8">chunk-02542ed8c0be3c6941f78e2491169d39</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Chat App" target="HTML Page">
      <data key="d5">18.0</data>
      <data key="d6">The Chat App relies on the HTML Page to present its user interface and engage users in conversations.&lt;SEP&gt;The HTML Page is the visible representation of the Chat App, designed to facilitate user interaction and experience.</data>
      <data key="d7">user experience, web application&lt;SEP&gt;user interface, application development</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Chat App" target="TypeScript">
      <data key="d5">8.0</data>
      <data key="d6">TypeScript is used within the Chat App to manage and render messages effectively, highlighting its importance in app functionality.</data>
      <data key="d7">programming, functionality enhancement</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Chat App" target="ModelMessage">
      <data key="d5">8.0</data>
      <data key="d6">ModelMessage is a key component in the Chat App, structuring the communication exchanged between users and AI.</data>
      <data key="d7">communication structure, user interaction</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Chat App" target="sqlite3">
      <data key="d5">7.0</data>
      <data key="d6">The Chat App utilizes sqlite3 to efficiently store and manage messages exchanged within the application.</data>
      <data key="d7">data management, storage</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Chat App" target="asyncify">
      <data key="d5">8.0</data>
      <data key="d6">Asyncify is a method within the Chat App that helps manage asynchronous database transactions related to message handling.</data>
      <data key="d7">asynchronous operations, database handling</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Chat App" target="uvicorn">
      <data key="d5">9.0</data>
      <data key="d6">Uvicorn serves as the web server for the Chat App, enabling it to run asynchronously and handle multiple requests efficiently.</data>
      <data key="d7">web serving, application performance</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Chat App" target="HTML Structure">
      <data key="d5">9.0</data>
      <data key="d6">The HTML Structure is essential for displaying the Chat App interface, ensuring that users can interact with the application effectively.</data>
      <data key="d7">user experience, interface design</data>
      <data key="d8">chunk-86a9f53d979bbb38ee393142b903fb00</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Search Agent" target="Extraction Agent">
      <data key="d5">24.0</data>
      <data key="d6">The Extraction Agent provides relevant flight information back to the Search Agent for user confirmation.&lt;SEP&gt;The Search Agent delegates the task of extracting information to the Extraction Agent during the flight booking process.</data>
      <data key="d7">agent delegation, collaboration&lt;SEP&gt;information exchange, collaboration</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Search Agent" target="Human Confirm">
      <data key="d5">34.0</data>
      <data key="d6">The Human Confirm event enables the user to validate or reject flight options proposed by the Search Agent.&lt;SEP&gt;The Search Agent requires human confirmation after presenting flight options to the user.</data>
      <data key="d7">user decision, feedback loop&lt;SEP&gt;user validation, decision-making</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Search Agent" target="User Input">
      <data key="d5">9.0</data>
      <data key="d6">User Input provides the necessary information for the Search Agent to initiate the flight search process.</data>
      <data key="d7">input dependency, initiation</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Extraction Agent" target="Flight Options">
      <data key="d5">8.0</data>
      <data key="d6">The Extraction Agent generates Flight Options based on the search parameters set by the Search Agent.</data>
      <data key="d7">output generation, information retrieval</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Human Confirm" target="Find Seat Function">
      <data key="d5">18.0</data>
      <data key="d6">Once confirmation is received, the process transitions to the Find Seat Function for seating preferences.</data>
      <data key="d7">process flow, sequential task</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Find Seat Function" target="Human Seat Choice">
      <data key="d5">18.0</data>
      <data key="d6">The Find Seat Function leads users to make their final seat choices during the booking process.</data>
      <data key="d7">user interaction, finalization</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Find Seat Function" target="Buy Flights">
      <data key="d5">18.0</data>
      <data key="d6">After selecting a seat, the process proceeds to the Buy Flights stage, finalizing the booking.</data>
      <data key="d7">transaction progression, workflow</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Human Seat Choice" target="Find Seat Agent">
      <data key="d5">18.0</data>
      <data key="d6">The user's seat choice is communicated to the Find Seat Agent to finalize seating arrangements.</data>
      <data key="d7">task completion, user preference</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Buy Flights" target="SUCCESS">
      <data key="d5">20.0</data>
      <data key="d6">The successful completion of the Buy Flights process results in a SUCCESS outcome.</data>
      <data key="d7">outcome confirmation, successful transaction</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Buy Flights" target="FAILED">
      <data key="d5">20.0</data>
      <data key="d6">A failure in the Buy Flights process results in a FAILED outcome, indicating issues during booking.</data>
      <data key="d7">process failure, transaction issues</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Buy Flights" target="Transaction Process">
      <data key="d5">10.0</data>
      <data key="d6">The Transaction Process culminates in the Buy Flights stage to complete the booking.</data>
      <data key="d7">booking completion, overall process</data>
      <data key="d8">chunk-be52e69f5b62cca9730ceaab4e9ad5ee</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ted Stevens Anchorage International Airport" target="Flight SFO-AK123">
      <data key="d5">16.0</data>
      <data key="d6">Flight SFO-AK123 is destined for Ted Stevens Anchorage International Airport from San Francisco.</data>
      <data key="d7">flight destination, airport connection</data>
      <data key="d8">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ted Stevens Anchorage International Airport" target="Flight NYC-LA101">
      <data key="d5">16.0</data>
      <data key="d6">Flight NYC-LA101 travels to Ted Stevens Anchorage International Airport from San Francisco.</data>
      <data key="d7">flight destination, airport connection</data>
      <data key="d8">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Ted Stevens Anchorage International Airport" target="Flight BOS-SEA303">
      <data key="d5">16.0</data>
      <data key="d6">Flight BOS-SEA303 travels to Ted Stevens Anchorage International Airport from Boston Logan.</data>
      <data key="d7">flight destination, airport connection</data>
      <data key="d8">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Fairbanks International Airport" target="Flight SFO-AK456">
      <data key="d5">16.0</data>
      <data key="d6">Flight SFO-AK456 is destined for Fairbanks International Airport from San Francisco.</data>
      <data key="d7">flight destination, airport connection</data>
      <data key="d8">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Juneau International Airport" target="Flight SFO-AK789">
      <data key="d5">16.0</data>
      <data key="d6">Flight SFO-AK789 flies to Juneau International Airport from San Francisco.</data>
      <data key="d7">flight destination, airport connection</data>
      <data key="d8">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Miami International Airport" target="Flight CHI-MIA202">
      <data key="d5">16.0</data>
      <data key="d6">Flight CHI-MIA202 is heading to Miami International Airport from Chicago O'Hare.</data>
      <data key="d7">flight destination, airport connection</data>
      <data key="d8">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Dallas/Fort Worth International Airport" target="Denver International Airport">
      <data key="d5">15.0</data>
      <data key="d6">The flights operate between the Dallas/Fort Worth International Airport and Denver International Airport, indicating a direct travel connection between the two locations.&lt;SEP&gt;There exists a connection between Dallas/Fort Worth International Airport and Denver International Airport, as they are both major travel destinations in the U.S.".</data>
      <data key="d7">airport connections, travel routes&lt;SEP&gt;flight route, travel connection</data>
      <data key="d8">chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Denver International Airport" target="Flight DFW-DEN404">
      <data key="d5">16.0</data>
      <data key="d6">Flight DFW-DEN404 is destined for Denver International Airport from Dallas/Fort Worth.</data>
      <data key="d7">flight destination, airport connection</data>
      <data key="d8">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Hartsfield-Jackson Atlanta International Airport" target="George Bush Intercontinental Airport">
      <data key="d5">18.0</data>
      <data key="d6">Flight ATL-HOU505 connects these two airports, indicating a travel route from Atlanta to Houston.&lt;SEP&gt;Flight ATL-HOU505 operates between Hartsfield-Jackson Atlanta International Airport and George Bush Intercontinental Airport, creating a direct travel route.".</data>
      <data key="d7">flight connection, travel route&lt;SEP&gt;flight operations, travel connection</data>
      <data key="d8">chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Hartsfield-Jackson Atlanta International Airport" target="Atlanta, Georgia">
      <data key="d5">8.0</data>
      <data key="d6">Hartsfield-Jackson Atlanta International Airport is located in Atlanta, Georgia, linking the airport to its geographical context.".</data>
      <data key="d7">location, geographical connection</data>
      <data key="d8">chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="George Bush Intercontinental Airport" target="Flight ATL-HOU505">
      <data key="d5">16.0</data>
      <data key="d6">Flight ATL-HOU505 is heading to George Bush Intercontinental Airport from Hartsfield-Jackson Atlanta.</data>
      <data key="d7">flight destination, airport connection</data>
      <data key="d8">chunk-95d9c8fb57f58b10d2aec561612e5a51</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="George Bush Intercontinental Airport" target="Houston, Texas">
      <data key="d5">8.0</data>
      <data key="d6">George Bush Intercontinental Airport is situated in Houston, Texas, establishing its geographical identity.".</data>
      <data key="d7">location, geographical connection</data>
      <data key="d8">chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Flight ATL-HOU505" target="January 10, 2025">
      <data key="d5">20.0</data>
      <data key="d6">Flight ATL-HOU505 is scheduled to occur on January 10, 2025, linking the two entities in a specific timeline.&lt;SEP&gt;Flight ATL-HOU505 is specifically scheduled for January 10, 2025, indicating the timing of this travel event.".</data>
      <data key="d7">flight schedule, event date&lt;SEP&gt;flight scheduling, event timeline</data>
      <data key="d8">chunk-622be1f81570120dbf2ceebd39a29b57</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="openai" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">OpenAI provides the underlying AI model capabilities that the Agent leverages to respond to user queries and instructions.</data>
      <data key="d7">AI integration, response generation</data>
      <data key="d8">chunk-7f168f5f58a160ed8d5f9ed516fb7e89</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="GPT-4o" target="EvaluateAgent">
      <data key="d5">8.0</data>
      <data key="d6">EvaluateAgent utilizes the capabilities of the GPT-4o model to assess user answers and provide feedback.</data>
      <data key="d7">AI utilization, evaluation</data>
      <data key="d8">chunk-7f168f5f58a160ed8d5f9ed516fb7e89</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Congratulate" target="Success">
      <data key="d5">8.0</data>
      <data key="d6">Congratulate is directly related to success as it is often expressed when someone achieves their goals.</data>
      <data key="d7">achievement, recognition</data>
      <data key="d8">chunk-acdd5d00db08de930d2f205385fbf543</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="database_connect" target="Postgres">
      <data key="d5">9.0</data>
      <data key="d6">database_connect establishes a connection to a PostgreSQL database using asyncpg.</data>
      <data key="d7">database connection, async programming</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="build_search_db" target="sections">
      <data key="d5">6.0</data>
      <data key="d6">build_search_db manages the embedding and database operations for each section within the documentation.</data>
      <data key="d7">database operations, section processing</data>
      <data key="d8">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="insert_doc_section" target="DB_SCHEMA">
      <data key="d5">9.0</data>
      <data key="d6">insert_doc_section uses the DB_SCHEMA to define how data is inserted into the database for document sections.</data>
      <data key="d7">database management, data insertion</data>
      <data key="d8">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="sections" target="embedding">
      <data key="d5">10.0</data>
      <data key="d6">Sections are transformed into embeddings to enhance their search and retrieval capabilities.</data>
      <data key="d7">search optimization, text analysis</data>
      <data key="d8">chunk-7ba9f90f4ef9c80fa2a116ad4984222c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="DB_SCHEMA" target="database_schema">
      <data key="d5">9.0</data>
      <data key="d6">The database_schema is defined and structured according to the specifications outlined in DB_SCHEMA.</data>
      <data key="d7">database structure, schema definition</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SQL Generation Example" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">PydanticAI is the framework used to create SQL Generation Examples that demonstrate generating SQL from input queries.</data>
      <data key="d7">framework, demonstration</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asyncpg" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">PydanticAI utilizes asyncpg to execute SQL queries in an asynchronous environment, enhancing performance and efficiency.</data>
      <data key="d7">database interaction, asynchronous processing</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="asyncpg" target="Postgres">
      <data key="d5">9.0</data>
      <data key="d6">asyncpg is a library specifically designed for use with the PostgreSQL database to facilitate asynchronous database operations.</data>
      <data key="d7">database connection, programming interface</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="System Prompt" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">The System Prompt guides PydanticAI on how to interpret and respond to user requests to generate valid SQL queries.</data>
      <data key="d7">guidance, instruction</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SQL Query" target="PydanticAI">
      <data key="d5">10.0</data>
      <data key="d6">PydanticAI generates SQL Query based on user requests following the defined schema and system prompt.</data>
      <data key="d7">query generation, user input</data>
      <data key="d8">chunk-adf88d3c03ef93c71ebadc158c0ef948</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SQL" target="EXPLAIN">
      <data key="d5">8.0</data>
      <data key="d6">EXPLAIN is a part of SQL syntax and is used to analyze how SQL queries are executed.</data>
      <data key="d7">SQL command, query analysis</data>
      <data key="d8">chunk-7f55658f379b42a67f9adb2e175e54fb</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="streaming structured responses" target="whales">
      <data key="d5">16.0</data>
      <data key="d6">The streaming structured responses provide information about different species of whales, highlighting attributes related to them.&lt;SEP&gt;The streaming structured responses provide information about different species of whales, presenting their attributes and descriptions dynamically.</data>
      <data key="d7">data presentation, information sharing</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="streaming structured responses" target="rich">
      <data key="d5">20.0</data>
      <data key="d6">Rich library is utilized to format and present the structured responses regarding whales in a user-friendly way in the terminal output.&lt;SEP&gt;Rich library is utilized to format and present the structured responses regarding whales in the terminal view.</data>
      <data key="d7">data visualization, library usage</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="streaming structured responses" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The Agent component manages the execution of the commands to generate the structured responses about whales, connecting the model with output presentation.</data>
      <data key="d7">AI management, response generation</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="whales" target="ocean">
      <data key="d5">14.0</data>
      <data key="d6">Information about whales typically includes details about their habitats, which are largely found in oceans, thus creating a natural relationship.&lt;SEP&gt;Information about whales typically includes details about their habitats, which are largely found in oceans.</data>
      <data key="d7">habitat, ecological context</data>
      <data key="d8">chunk-a03d18658927c60177cdcee467ce42b8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Deps" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">Deps class provides essential dependencies for the Agent to operate, such as API keys for weather and geo services.</data>
      <data key="d7">dependency, operation</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Deps" target="weather_agent">
      <data key="d5">9.0</data>
      <data key="d6">Deps holds the API keys and client necessary for the operation of the weather_agent, supporting both weather and geographical queries.</data>
      <data key="d7">dependency, operation</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather_api_key" target="Get Weather Tool">
      <data key="d5">9.0</data>
      <data key="d6">The weather_api_key is necessary for the Get Weather Tool to authenticate and retrieve weather data.</data>
      <data key="d7">authentication, data access</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather_api_key" target="get_weather">
      <data key="d5">9.0</data>
      <data key="d6">The weather_api_key is required by the get_weather tool to retrieve accurate weather data from an external API.</data>
      <data key="d7">authentication, data access</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="geo_api_key" target="Get Latitude and Longitude Tool">
      <data key="d5">9.0</data>
      <data key="d6">The geo_api_key enables the Get Latitude and Longitude Tool to access geographic data services.</data>
      <data key="d7">authentication, data access</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="geo_api_key" target="get_lat_lng">
      <data key="d5">9.0</data>
      <data key="d6">The geo_api_key is necessary for the get_lat_lng tool to authenticate and access geolocation services.</data>
      <data key="d7">authentication, data access</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="logfire.configure" target="weather_agent">
      <data key="d5">8.0</data>
      <data key="d6">logfire.configure is used within the weather_agent's operation to set the logging behavior for its activities.</data>
      <data key="d7">logging, configuration</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather_agent" target="get_lat_lng">
      <data key="d5">9.0</data>
      <data key="d6">The weather_agent utilizes the get_lat_lng tool to obtain geographical coordinates for weather-related inquiries.</data>
      <data key="d7">tool usage, geographical data</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather_agent" target="get_weather">
      <data key="d5">9.0</data>
      <data key="d6">The get_weather tool is used by the weather_agent to acquire current weather information based on the coordinates retrieved.</data>
      <data key="d7">tool usage, weather data</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="get_lat_lng" target="RunContext">
      <data key="d5">8.0</data>
      <data key="d6">RunContext provides the necessary context for executing the get_lat_lng tool to fetch coordinates efficiently.</data>
      <data key="d7">execution context, tool operation</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="get_weather" target="RunContext">
      <data key="d5">8.0</data>
      <data key="d6">RunContext allows the get_weather tool to operate within its context, facilitating the retrieval of weather data based on geographical coordinates.</data>
      <data key="d7">execution context, tool operation</data>
      <data key="d8">chunk-990ca6b93e3572bb93527fb4f06bad10</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Gradio" target="Weather Assistant">
      <data key="d5">9.0</data>
      <data key="d6">Gradio is the foundational framework used to create the Weather Assistant application, enabling its interactive features.</data>
      <data key="d7">organizational structure, application development</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Weather Assistant" target="New York City">
      <data key="d5">8.0</data>
      <data key="d6">The Weather Assistant responds to user inquiries specifically about the weather in New York City.</data>
      <data key="d7">user interaction, location-based inquiry</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Weather Assistant" target="Miami">
      <data key="d5">7.0</data>
      <data key="d6">The Weather Assistant is designed to answer weather inquiries for cities like Miami, demonstrating its geographic versatility.</data>
      <data key="d7">user interaction, location-based inquiry</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Weather Assistant" target="Geocoding API">
      <data key="d5">8.0</data>
      <data key="d6">The Weather Assistant uses the Geocoding API to interpret user location requests into actionable data for weather queries.</data>
      <data key="d7">data processing, location services</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Weather Assistant" target="Weather API">
      <data key="d5">9.0</data>
      <data key="d6">The Weather Assistant utilizes the Weather API to retrieve and display real-time weather data to users.</data>
      <data key="d7">data retrieval, weather service</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Weather Assistant" target="weather agent">
      <data key="d5">9.0</data>
      <data key="d6">The Weather Assistant is effectively powered by the weather agent implementation which provides interactive responses regarding weather conditions.</data>
      <data key="d7">event implementation, interactive feature</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather agent" target="ToolCallPart">
      <data key="d5">7.0</data>
      <data key="d6">The weather agent incorporates ToolCallPart to manage API requests, allowing it to invoke various functionalities based on user queries.</data>
      <data key="d7">functional management, tool integration</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather agent" target="WEATHER_API_KEY">
      <data key="d5">9.0</data>
      <data key="d6">The weather agent requires the WEATHER_API_KEY for connecting and retrieving data from the Weather API, demonstrating a dependency on the API key.</data>
      <data key="d7">authentication, data access</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="weather agent" target="GEO_API_KEY">
      <data key="d5">8.0</data>
      <data key="d6">The weather agent also requires the GEO_API_KEY to access location data through the Geocoding API, highlighting its significance in geographic queries.</data>
      <data key="d7">location data retrieval, dependency</data>
      <data key="d8">chunk-8ff58ba8cb6e25434138b24e79d59425</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Model Context Protocol (MCP)" target="PydanticAI">
      <data key="d5">9.0</data>
      <data key="d6">PydanticAI operates as an MCP Client, utilizing the functionalities provided by the Model Context Protocol to enhance tool integration.</data>
      <data key="d7">framework integration, standardization</data>
      <data key="d8">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Deno" target="SSE Client">
      <data key="d5">7.0</data>
      <data key="d6">Deno serves as the runtime environment for executing the SSE Client, showcasing its utility in running asynchronous connections to MCP servers.</data>
      <data key="d7">runtime environment, server execution</data>
      <data key="d8">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="chatbot" target="prompt">
      <data key="d5">9.0</data>
      <data key="d6">The chatbot generates responses based on the prompts it receives from users, making the prompt crucial to the interaction process.</data>
      <data key="d7">interaction, response generation</data>
      <data key="d8">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="chatbot" target="past_messages">
      <data key="d5">8.0</data>
      <data key="d6">The chatbot utilizes past messages to better understand context and provide more accurate answers in ongoing conversations.</data>
      <data key="d7">context awareness, conversational history</data>
      <data key="d8">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="if __name__ == '__main__':" target="demo.launch()">
      <data key="d5">7.0</data>
      <data key="d6">The demo.launch() function is executed when the script is run directly, showcasing the main functionality of the chatbot application.</data>
      <data key="d7">program execution, main entry point</data>
      <data key="d8">chunk-391c89bfc96eb1cb4879cf1391cd7e50</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="January 1, 2000" target="March 18, 2025">
      <data key="d5">9.0</data>
      <data key="d6">The dates represent a time period for which the total number of days is being calculated.</data>
      <data key="d7">time period, date calculation</data>
      <data key="d8">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="January 1, 2000" target="9,208 days">
      <data key="d5">8.0</data>
      <data key="d6">The duration of 9,208 days begins from January 1, 2000, indicating how long it is until March 18, 2025.</data>
      <data key="d7">duration, time span</data>
      <data key="d8">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="March 18, 2025" target="9,208 days">
      <data key="d5">8.0</data>
      <data key="d6">The total of 9,208 days ends on March 18, 2025, showing the complete time span of the calculation.</data>
      <data key="d7">duration, time span</data>
      <data key="d8">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Client Session" target="Agent">
      <data key="d5">8.0</data>
      <data key="d6">Agents initiate Client Sessions to communicate with the MCP Server and execute Python code.</data>
      <data key="d7">agent-client interaction, command execution</data>
      <data key="d8">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Client Session" target="Connection">
      <data key="d5">8.0</data>
      <data key="d6">A Client Session is established via a Connection, allowing for data transfer between the client and the server.</data>
      <data key="d7">session establishment, data exchange</data>
      <data key="d8">chunk-ca69f7760206a502c8e51fa924646c33</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Run Python" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI facilitates the MCP Run Python process, promoting an environment for running Python code efficiently.</data>
      <data key="d7">organization process, programming efficiency</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Run Python" target="numpy">
      <data key="d5">9.0</data>
      <data key="d6">MCP Run Python uses NumPy as a dependency for executing code involving numerical computations.</data>
      <data key="d7">code execution, library dependency</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="MCP Run Python" target="MCP Client">
      <data key="d5">8.0</data>
      <data key="d6">MCP Client is utilized to connect with the MCP Run Python process, enabling the execution of Python code remotely.</data>
      <data key="d7">server interaction, code execution</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="inline_script_metadata.py" target="PydanticAI">
      <data key="d5">7.0</data>
      <data key="d6">The script inline_script_metadata.py illustrates how to define dependencies for projects which aligns with PydanticAI's goals of organized coding practices.</data>
      <data key="d7">coding practices, dependency management</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="SSE MCP Transport" target="HTTP Server">
      <data key="d5">8.0</data>
      <data key="d6">SSE MCP Transport operates over an HTTP Server to establish connections for local or remote interaction.</data>
      <data key="d7">communication method, server technology</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="HTTP Server" target="Denos">
      <data key="d5">7.0</data>
      <data key="d6">Deno, as a runtime, can be utilized with an HTTP Server to enhance Python execution in the context of MCP.</data>
      <data key="d7">runtime environment, server interaction</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Python MCP Client" target="mcp_run_python.py">
      <data key="d5">9.0</data>
      <data key="d6">The Python MCP Client is used within the mcp_run_python.py script to execute Python code and manage server communication.</data>
      <data key="d7">client utility, script execution</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Python MCP Client" target="FastMCP">
      <data key="d5">9.0</data>
      <data key="d6">The Python MCP Client connects to FastMCP to perform various tasks and utilize its capabilities for machine learning operations.</data>
      <data key="d7">client-server interaction, tool utilization</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="modelcontextprotocol" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI is part of the larger Model Context Protocol organization focusing on enhancing Python type validation and coding efficiency.</data>
      <data key="d7">organization affiliation, programming efficiency</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Standard Output" target="Logging">
      <data key="d5">7.0</data>
      <data key="d6">Logging captures information sent to Standard Output, providing insights into the execution flow and errors.</data>
      <data key="d7">output management, error tracking</data>
      <data key="d8">chunk-6b3f0a0a0fae5e6e6d165207998041f0</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FastMCP" target="PydanticAI">
      <data key="d5">8.0</data>
      <data key="d6">PydanticAI operates within the FastMCP server framework to enhance server capabilities."|&gt;"organizational dependency, framework relationship</data>
      <data key="d7">8</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="FastMCP" target="mcp_server.py">
      <data key="d5">10.0</data>
      <data key="d6">FastMCP is the underlying server implementation that runs mcp_server.py, allowing it to function effectively as an MCP Server.</data>
      <data key="d7">server architecture, implementation relationship</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mcp_server.py" target="Agent">
      <data key="d5">9.0</data>
      <data key="d6">The mcp_server.py script configures an Agent that can execute poem generation tasks in response to user inputs.</data>
      <data key="d7">functionality implementation, AI interaction</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="mcp_client.py" target="Poem Generator">
      <data key="d5">8.0</data>
      <data key="d6">The mcp_client.py script allows users to request poems by communicating with the Poem Generator event in the server.</data>
      <data key="d7">user interaction, event triggering</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Poem Generator" target="Agent">
      <data key="d5">10.0</data>
      <data key="d6">The Agent within the server is responsible for generating poems during the Poem Generator event based on user themes.</data>
      <data key="d7">creative functionality, task execution</data>
      <data key="d8">chunk-f2a50f99aa96dce25696156cf5396887</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="PydanticAI">
      <data key="d5">63.0</data>
      <data key="d6">Agents are core components of PydanticAI used to execute tasks and utilize its features, including instrumentation settings.&lt;SEP&gt;Agents in PydanticAI are used to have structured conversations with language models, enabling functionality for various applications.&lt;SEP&gt;PydanticAI provides the framework for creating and managing agents that can execute tasks based on dependencies and prompts.&lt;SEP&gt;PydanticAI provides the structure and tools that enable the operation of the Agent, especially in managing requests and responses.&lt;SEP&gt;The Agent is a component of PydanticAI that orchestrates execution based on type hints and dependencies.</data>
      <data key="d7">component relationship, library functionality&lt;SEP&gt;component, function&lt;SEP&gt;conversation structure, AI interaction&lt;SEP&gt;framework, agent management&lt;SEP&gt;software framework, integration</data>
      <data key="d8">chunk-459acdb5bfa20be2d698a80bc830b084&lt;SEP&gt;chunk-adafe0dc68284d75a3d5c7256851229e&lt;SEP&gt;chunk-f375a3596539c3931dca74338cc79546&lt;SEP&gt;chunk-09e12018443ae8bc554ab8d9d7202409&lt;SEP&gt;chunk-911d0904eb0a1b2ad618711cef674a60</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="RunContext">
      <data key="d5">145.0</data>
      <data key="d6">Agent relies on RunContext to manage dependencies and contextual execution during its operations.&lt;SEP&gt;Agent uses RunContext to pass necessary runtime information and dependencies for executing tool functions.&lt;SEP&gt;Agent utilizes RunContext to provide the necessary dependencies during the execution of tool functions.&lt;SEP&gt;RunContext is integral to the functioning of an Agent, allowing it to leverage contextual information during execution.&lt;SEP&gt;RunContext is passed to Agent instances providing them with the necessary contextual data for operation.&lt;SEP&gt;RunContext provides essential context for the Agent when executing its tasks and managing dependencies.&lt;SEP&gt;RunContext provides execution context utilized by the Agent, allowing it to effectively manage function calls and tool interactions.&lt;SEP&gt;RunContext provides necessary contextual information to the Agent for executing its functionalities.&lt;SEP&gt;RunContext provides necessary information for Agents to execute actions and utilize tools effectively in a defined execution run.&lt;SEP&gt;RunContext provides the necessary context for an Agent to execute tools, indicating a close working relationship.&lt;SEP&gt;RunContext provides the necessary contextual information for agents to manage their execution and dependencies.&lt;SEP&gt;RunContext supplies essential context to the Agent during execution, which aids in managing task dependencies and execution flow.&lt;SEP&gt;The Agent class uses RunContext to manage the execution context and dependencies for running tools.&lt;SEP&gt;The Agent class utilizes RunContext to manage execution contexts and dependencies for tool operations.&lt;SEP&gt;The Agent class utilizes RunContext to manage execution states and dependencies during its operations.</data>
      <data key="d7">context management, dependency injection&lt;SEP&gt;context management, operational relationship&lt;SEP&gt;context management, tool execution&lt;SEP&gt;contextual support, operational framework&lt;SEP&gt;execution context, dependency management&lt;SEP&gt;execution context, tool management&lt;SEP&gt;execution context, tool usage&lt;SEP&gt;execution management, context&lt;SEP&gt;execution management, state handling&lt;SEP&gt;runtime dependency&lt;SEP&gt;tool management, execution context</data>
      <data key="d8">chunk-ff513df1fc0c234137e78a2a4fdf00c8&lt;SEP&gt;chunk-f375a3596539c3931dca74338cc79546&lt;SEP&gt;chunk-3c16ab7b122ed13c1236f5062ceed453&lt;SEP&gt;chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-efc722ebd98256b20f6a17746e03016e&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-18a72d852226f42ca9377ccc8f1d77d6&lt;SEP&gt;chunk-259f4fd17962e6b1541b3f663527bc58&lt;SEP&gt;chunk-729cd2b3c578d9a846adee8336cc05fd&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="ModelMessage">
      <data key="d5">23.0</data>
      <data key="d6">Agent utilizes ModelMessage to communicate with users and process inquiries through the AI model.&lt;SEP&gt;ModelMessage represents the communication protocol between the Agent and its underlying model during operation.&lt;SEP&gt;The Agent uses ModelMessage to structure the content exchanged during its interaction with users in the chat.".</data>
      <data key="d7">communication protocol&lt;SEP&gt;communication, interaction&lt;SEP&gt;message handling, user interaction</data>
      <data key="d8">chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-632e225b36efe3528b4513b2ab669d21&lt;SEP&gt;chunk-85306b759adcc435ab78397f3cd1a687</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="ModelResponse">
      <data key="d5">7.0</data>
      <data key="d6">Agents generate ModelResponses when executing tasks or processing user inputs within the PydanticAI framework.</data>
      <data key="d7">operation outcome, user interaction</data>
      <data key="d8">chunk-4b67c94477ed4dea654a5de4c41af8ac</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="ToolDefinition">
      <data key="d5">18.0</data>
      <data key="d6">ToolDefinitions are essential to the operations of the Agent, providing structure and description for the tools it utilizes.&lt;SEP&gt;ToolDefinitions are part of the functionality of the Agent, structuring how tools interact based on parameters defined in the Pydantic AI framework.</data>
      <data key="d7">tool functionality, agent structure</data>
      <data key="d8">chunk-259f4fd17962e6b1541b3f663527bc58</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="AsyncIterator">
      <data key="d5">9.0</data>
      <data key="d6">Agent utilizes AsyncIterator to provide real-time interaction and manage the execution flow of prompts in an asynchronous manner.</data>
      <data key="d7">interaction model, execution flow</data>
      <data key="d8">chunk-5b7a596ee9422b565de815722b0e31dc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="pydantic_ai">
      <data key="d5">91.0</data>
      <data key="d6">Agent is part of the Pydantic AI framework, utilizing its data handling capabilities in AI applications.&lt;SEP&gt;Agent utilizes the functionalities provided by pydantic_ai for managing data model validation during its processing tasks.&lt;SEP&gt;The Agent is a component of the pydantic_ai library that utilizes its functionalities to create and manage agents.&lt;SEP&gt;The Agent is part of the pydantic_ai library, indicating a strong relationship as it is an integral component that communicates with the library.".&lt;SEP&gt;pydantic_ai encompasses the Agent organization, which manages various tools for AI applications.&lt;SEP&gt;pydantic_ai encompasses the framework that facilitates the creation and execution of Agents and their tools.&lt;SEP&gt;pydantic_ai includes the Agent component which manages AI operations and interactions.&lt;SEP&gt;pydantic_ai provides the framework and dependencies for the creation and management of the Agent class.&lt;SEP&gt;pydantic_ai provides the framework and functionalities that empower the Agent class to perform AI tasks.&lt;SEP&gt;pydantic_ai provides the framework and tools necessary for the implementation and operation of agents.</data>
      <data key="d7">agent framework, library integration&lt;SEP&gt;component, library structure&lt;SEP&gt;data management, functional library&lt;SEP&gt;framework integration, core component&lt;SEP&gt;framework, dependency management&lt;SEP&gt;framework, implementation&lt;SEP&gt;library component, management&lt;SEP&gt;library feature, AI organization&lt;SEP&gt;organization framework</data>
      <data key="d8">chunk-083b11d23237b569b4c6fd479cf45e1c&lt;SEP&gt;chunk-4d3f57edc4c3f799d03bb18401fc8f09&lt;SEP&gt;chunk-8dbbf042d22f24ab47fdb61c76c368c8&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a&lt;SEP&gt;chunk-3480f7d762a13a5f3859e9d819c5ecd1&lt;SEP&gt;chunk-02542ed8c0be3c6941f78e2491169d39&lt;SEP&gt;chunk-cc724d184134671e86784e1ef1d1caf1&lt;SEP&gt;chunk-f3ddcdd6dcfe55ac66d9a731536a392d&lt;SEP&gt;chunk-6ca3dfc741d5edc1408783244b6d8d85</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="End">
      <data key="d5">14.0</data>
      <data key="d6">An Agent instance may reach an End state to signify the completion of a task or run within the pydantic_ai framework.&lt;SEP&gt;The Agent can reach an End state, indicating the conclusion of its processing tasks.</data>
      <data key="d7">completion, task lifecycle&lt;SEP&gt;workflow completion, task management</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185&lt;SEP&gt;chunk-f05343baae3f62f1bed61aebb48d39ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="pydantic_ai_slim">
      <data key="d5">13.0</data>
      <data key="d6">Agent represents a segment within pydantic_ai_slim that focuses on AI-driven functionalities and application improvements.&lt;SEP&gt;The Agent class is developed within the Pydantic AI Slim library, emphasizing lightweight functionality.</data>
      <data key="d7">AI development, application&lt;SEP&gt;library development, efficient design</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-083b11d23237b569b4c6fd479cf45e1c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="Agent" target="pydantic_graph">
      <data key="d5">8.0</data>
      <data key="d6">Agent operates within the pydantic_graph framework to effectively manage agent nodes and their interactions.</data>
      <data key="d7">graph structure, operational framework</data>
      <data key="d8">chunk-4d3f57edc4c3f799d03bb18401fc8f09</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="End" target="BaseNode">
      <data key="d5">47.0</data>
      <data key="d6">BaseNode can signal completion of the graph's execution by returning an 'End' object, defining the last step in the process.&lt;SEP&gt;BaseNode can transition to an End node to signify a full cycle of graph execution and eventual completion.&lt;SEP&gt;BaseNode instances are part of the computational process, leading to an End node, which signifies completion.&lt;SEP&gt;BaseNode may lead to an End node marking the completion of a graph traversal or operation.&lt;SEP&gt;BaseNodes can lead to an End node, illustrating the completion of graph execution, marking a clear pathway for flow within the graph.&lt;SEP&gt;The End node type signifies when a BaseNode concludes a graph run, indicating completion of the process.</data>
      <data key="d7">execution flow&lt;SEP&gt;execution flow, process completion&lt;SEP&gt;flow structure, completion&lt;SEP&gt;graph completion, node hierarchy&lt;SEP&gt;graph traversal, operational flow&lt;SEP&gt;transition, execution cycle</data>
      <data key="d8">chunk-3e6f35e8122ac28c165b2f86d0e0b04e&lt;SEP&gt;chunk-e84d9789a2133f11a435754d1aaecda4&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26&lt;SEP&gt;chunk-2d3139a4102a477030ac7d07fb813c82&lt;SEP&gt;chunk-37ea23b80d0ce2eead046bee6649f339</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="End" target="AsyncIterator">
      <data key="d5">6.0</data>
      <data key="d6">AsyncIterator can signal an End state when all results have been processed in an asynchronous operation.</data>
      <data key="d7">asynchronous operations, completion</data>
      <data key="d8">chunk-8de45bf595a0df1a297d984f0b5ee185</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="End" target="ModelResponse">
      <data key="d5">7.0</data>
      <data key="d6">The ModelResponse is provided right before the End event, marking the conclusion of the run.</data>
      <data key="d7">completion, output delivery</data>
      <data key="d8">chunk-ba0f6d002d71ff318d304dea37c2feb5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="BaseNode" target="pydantic_graph">
      <data key="d5">17.0</data>
      <data key="d6">BaseNode instances are essential components of the pydantic_graph framework for managing graph execution.".&lt;SEP&gt;BaseNode is part of the Pydantic Graph library, serving as a foundational element for creating nodes in a graph.</data>
      <data key="d7">library structure, node class&lt;SEP&gt;structural component, library relationship</data>
      <data key="d8">chunk-c013a90b995a125733a858f2892c9f74&lt;SEP&gt;chunk-cf0b5eddc59e331e374c5180dc0f0b26</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelResponse" target="ModelMessage">
      <data key="d5">55.0</data>
      <data key="d6">ModelMessage guides the generation of a ModelResponse, ensuring relevant output based on the input.&lt;SEP&gt;ModelMessage is exchanged with the model to receive ModelResponse, the output generated based on those messages.&lt;SEP&gt;ModelMessage is used as input for generating ModelResponse, providing the output of the weather forecasting process.&lt;SEP&gt;ModelResponse contains ModelMessage parts as items, indicating a direct relationship in the response structure.&lt;SEP&gt;ModelResponse is generated in response to the input provided by ModelMessage, demonstrating the functioning of the AI model.&lt;SEP&gt;ModelResponse is part of the ModelMessage returned by the Groq model to the user after processing the request.</data>
      <data key="d7">communication flow, model interaction&lt;SEP&gt;input-output relationship, AI processing&lt;SEP&gt;input-output relationship, data flow&lt;SEP&gt;input-output relationship, processing&lt;SEP&gt;response handling, user interaction&lt;SEP&gt;response structure, part inclusion</data>
      <data key="d8">chunk-2d8c6efbbbb322a6351adb42685ded77&lt;SEP&gt;chunk-ba870a242fd1468b0176d028dc0c47b3&lt;SEP&gt;chunk-3d1c7209debb23a47e4399b20a981057&lt;SEP&gt;chunk-88421b6a92c107220e0c204663c39a71&lt;SEP&gt;chunk-9655d08afefd464282f89b643272e0b6&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai" target="pydantic_ai_slim">
      <data key="d5">29.0</data>
      <data key="d6">pydantic_ai_slim builds on pydantic_ai, enhancing its functionalities while offering a slimmed-down version for efficiency.&lt;SEP&gt;pydantic_ai_slim is a component that builds upon and enhances the functionalities provided by the pydantic_ai library.&lt;SEP&gt;pydantic_ai_slim is a specialized version of the broader pydantic_ai framework aimed at enhancing performance for AI applications.&lt;SEP&gt;pydantic_ai_slim serves as a simplified version of the functionalities available in pydantic_ai.</data>
      <data key="d7">library enhancement, dependency&lt;SEP&gt;library enhancement, framework development&lt;SEP&gt;organization evolution, performance improvement&lt;SEP&gt;versioning, functionality comparison</data>
      <data key="d8">chunk-0defe853a1fb0dadf514cce37cdbbd16&lt;SEP&gt;chunk-15fc395902f1d91634e46bd619e7e35a&lt;SEP&gt;chunk-74d8bed4a268265e628208d04e7ee018&lt;SEP&gt;chunk-d40c2e4c5b0d0651d90bf0a9ab2017bc</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai" target="pydantic_graph">
      <data key="d5">8.0</data>
      <data key="d6">pydantic_ai utilizes pydantic_graph to manage the interactions within agent workflows and data processing.</data>
      <data key="d7">library utilization, framework dependency</data>
      <data key="d8">chunk-f05343baae3f62f1bed61aebb48d39ae</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="pydantic_ai" target="RunContext">
      <data key="d5">8.0</data>
      <data key="d6">RunContext utilizes the pydantic_ai library for data validation in the context of its execution environment.</data>
      <data key="d7">data validation, framework integration</data>
      <data key="d8">chunk-0defe853a1fb0dadf514cce37cdbbd16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolCallPart" target="RunContext">
      <data key="d5">6.0</data>
      <data key="d6">ToolCallPart messages are processed within the context defined by RunContext, which manages the overall execution environment.</data>
      <data key="d7">message processing, execution environment</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolCallPart" target="ToolDefinition">
      <data key="d5">23.0</data>
      <data key="d6">ToolCallPart carries references to ToolDefinitions that specify how tools can be invoked in model operations.&lt;SEP&gt;ToolCallPart is derived from ToolDefinition, representing the structure and arguments required for tool calls in Mistral.&lt;SEP&gt;ToolCallPart represents specific calls to ToolDefinitions, linking the tools' specifications with their usage in the model requests.</data>
      <data key="d7">tool structure, call representation&lt;SEP&gt;tool usage, functionality&lt;SEP&gt;tools, functionality</data>
      <data key="d8">chunk-b9cc082fb4d59764b6410b836e296db6&lt;SEP&gt;chunk-f73ad8c376a9fcf91ca2d50decf5ccc8</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolCallPart" target="ModelMessage">
      <data key="d5">8.0</data>
      <data key="d6">ToolCallPart is generated as part of the ModelMessage, indicating a specific tool call with the necessary parameters.</data>
      <data key="d7">tool execution, message composition</data>
      <data key="d8">chunk-d3269c6bd37da96e627118feb457c52c</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="RunContext" target="ToolDefinition">
      <data key="d5">41.0</data>
      <data key="d6">RunContext is essential for ToolDefinition as it provides the execution context in which tools are defined and operated.&lt;SEP&gt;RunContext is responsible for carrying the definitions of tools being used in its processes.&lt;SEP&gt;RunContext is used in conjunction with ToolDefinition to ensure that tools are executed within the appropriate context and with correct dependencies.&lt;SEP&gt;RunContext is utilized within tools defined by ToolDefinition, allowing for context management during tool execution.&lt;SEP&gt;RunContext manages the execution and parameters of ToolDefinition, ensuring that tools operate within the correct context.</data>
      <data key="d7">context management, execution&lt;SEP&gt;context management, tool definition&lt;SEP&gt;context management, tool execution&lt;SEP&gt;execution management, context&lt;SEP&gt;tool execution, integration</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210&lt;SEP&gt;chunk-6c55dffdff9c514f2f88b60d9ec9f6c4&lt;SEP&gt;chunk-0defe853a1fb0dadf514cce37cdbbd16</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ModelMessage" target="pydantic_ai_slim">
      <data key="d5">9.0</data>
      <data key="d6">ModelMessage is a critical component of pydantic_ai_slim, defining the types of messages processed within the framework.</data>
      <data key="d7">message definition, framework component</data>
      <data key="d8">chunk-3c9b6b4ee61bee314208883b07d282a5</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="ToolDefinition" target="pydantic_ai_slim">
      <data key="d5">18.0</data>
      <data key="d6">ToolDefinition is defined in pydantic_ai_slim, showcasing its implementation within the library's framework for defining tool functionalities.&lt;SEP&gt;ToolDefinition is defined within pydantic_ai_slim, outlining the attributes and parameters for creating tool specifications.</data>
      <data key="d7">framework, implementation&lt;SEP&gt;tool specification, implementation</data>
      <data key="d8">chunk-8735fb00fad88f2638717e0e585c3210</data>
      <data key="d9">unknown_source</data>
    </edge>
    <edge source="AsyncIterator" target="_streamedResponse">
      <data key="d5">7.0</data>
      <data key="d6">StreamedResponse may leverage AsyncIterator for handling streams of event data asynchronously, improving performance.</data>
      <data key="d7">asynchronous handling, efficiency</data>
      <data key="d8">chunk-1d2c13afaff5bbc08c268a958dff4edb</data>
      <data key="d9">unknown_source</data>
    </edge>
  </graph>
</graphml>
